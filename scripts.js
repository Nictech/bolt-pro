"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function (global, factory) {

	if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};

	var version = "2.2.4",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([\da-z])/gi,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {
			return num != null ?

			// Return just the one element from the set
			num < 0 ? this[num + this.length] : this[num] :

			// Return all the elements in a clean array
			_slice.call(this);
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
		},

		isPlainObject: function isPlainObject(obj) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
				return false;
			}

			// Not own constructor property must be Object
			if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype || {}, "isPrototypeOf")) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for (key in obj) {}

			return key === undefined || hasOwn.call(obj, key);
		},

		isEmptyObject: function isEmptyObject(obj) {
			var name;
			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code) {
			var script,
			    indirect = eval;

			code = jQuery.trim(code);

			if (code) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if (code.indexOf("use strict") === 1) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild(script).parentNode.removeChild(script);
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect(code);
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		nodeName: function nodeName(elem, name) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.2.1
  * http://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2015-10-17
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,
		    rescape = /'|\\/g,


		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		};

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    nidselect,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rescape, "\\$&");
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
							while (i--) {
								groups[i] = nidselect + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created div and expects a boolean result
   */
		function assert(fn) {
			var div = document.createElement("div");

			try {
				return !!fn(div);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (div.parentNode) {
					div.parentNode.removeChild(div);
				}
				// release memory in IE
				div = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    parent,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if ((parent = document.defaultView) && parent.top !== parent) {
				// Support: IE 11
				if (parent.addEventListener) {
					parent.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (parent.attachEvent) {
					parent.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (div) {
				div.className = "i";
				return !div.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (div) {
				div.appendChild(document.createComment(""));
				return !div.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (div) {
				docElem.appendChild(div).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID find and filter
			if (support.getById) {
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var m = context.getElementById(id);
						return m ? [m] : [];
					}
				};
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
			} else {
				// Support: IE6/7
				// getElementById is not reliable as a find shortcut
				delete Expr.find["ID"];

				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See http://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (div) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// http://bugs.jquery.com/ticket/12359
					docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (div.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!div.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibing-combinator selector` fails
					if (!div.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (div) {
					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					div.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (div.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (!div.querySelectorAll(":enabled").length) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					div.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (div) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(div, "div");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(div, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": function enabled(elem) {
					return elem.disabled === false;
				},

				"disabled": function disabled(elem) {
					return elem.disabled === true;
				},

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    checkNonElements = base && dir === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[dir] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (div1) {
			// Should return 1, but returns 4 (following)
			return div1.compareDocumentPosition(document.createElement("div")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (div) {
			div.innerHTML = "<a href='#'></a>";
			return div.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (div) {
			div.innerHTML = "<input/>";
			div.firstChild.setAttribute("value", "");
			return div.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (div) {
			return div.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				/* jshint -W018 */
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		if (typeof qualifier === "string") {
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			qualifier = jQuery.filter(qualifier, elements);
		}

		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    len = this.length,
			    ret = [],
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if (elem && elem.parentNode) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

			for (; i < l; i++) {
				for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

					// Always skip document fragments
					if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

						matched.push(cur);
						break;
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			return elem.contentDocument || jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnotwhite = /\S+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, listener list, final state
			["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				then: function then() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;
					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {
							var fn = jQuery.isFunction(fns[i]) && fns[i];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Keep pipe for back-compat
			_promise.pipe = _promise.then;

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[3];

				// promise[ done | fail | progress ] = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = [ resolved | rejected ]
						_state = stateString;

						// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
				}

				// deferred[ resolve | reject | notify ]
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
					return this;
				};
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(subordinate /* , ..., subordinateN */) {
			var i = 0,
			    resolveValues = _slice.call(arguments),
			    length = resolveValues.length,


			// the count of uncompleted subordinates
			remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


			// Update function for both resolve and progress values
			updateFunc = function updateFunc(i, contexts, values) {
				return function (value) {
					contexts[i] = this;
					values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (values === progressValues) {
						deferred.notifyWith(contexts, values);
					} else if (! --remaining) {
						deferred.resolveWith(contexts, values);
					}
				};
			},
			    progressValues,
			    progressContexts,
			    resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if (length > 1) {
				progressValues = new Array(length);
				progressContexts = new Array(length);
				resolveContexts = new Array(length);
				for (; i < length; i++) {
					if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
						resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if (!remaining) {
				deferred.resolveWith(resolveContexts, resolveValues);
			}

			return deferred.promise();
		}
	});

	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function (fn) {

		// Add the callback
		jQuery.ready.promise().done(fn);

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function holdReady(hold) {
			if (hold) {
				jQuery.readyWait++;
			} else {
				jQuery.ready(true);
			}
		},

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);

			// Trigger any bound ready events
			if (jQuery.fn.triggerHandler) {
				jQuery(document).triggerHandler("ready");
				jQuery(document).off("ready");
			}
		}
	});

	/**
  * The ready event handler and self cleanup method
  */
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	jQuery.ready.promise = function (obj) {
		if (!readyList) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout(jQuery.ready);
			} else {

				// Use the handy event callback
				document.addEventListener("DOMContentLoaded", completed);

				// A fallback to window.onload, that will always work
				window.addEventListener("load", completed);
			}
		}
		return readyList.promise(obj);
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		return chainable ? elems :

		// Gets
		bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function register(owner, initial) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if (owner.nodeType) {
				owner[this.expando] = value;

				// Otherwise secure it in a non-enumerable, non-writable property
				// configurability must be true to allow the property to be
				// deleted with the delete operator
			} else {
				Object.defineProperty(owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				});
			}
			return owner[this.expando];
		},
		cache: function cache(owner) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if (!acceptData(owner)) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			if (typeof data === "string") {
				cache[data] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[prop] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][key];
		},
		access: function access(owner, key, value) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				stored = this.get(owner, key);

				return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    name,
			    camel,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key === undefined) {
				this.register(owner);
			} else {

				// Support array or space separated string of keys
				if (jQuery.isArray(key)) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat(key.map(jQuery.camelCase));
				} else {
					camel = jQuery.camelCase(key);

					// Try the string as a key before any manipulation
					if (key in cache) {
						name = [key, camel];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ? [name] : name.match(rnotwhite) || [];
					}
				}

				i = name.length;

				while (i--) {
					delete cache[name[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = data === "true" ? true : data === "false" ? false : data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get(elem, key) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

					if (data !== undefined) {
						return data;
					}

					camelKey = jQuery.camelCase(key);

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get(elem, camelKey);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, camelKey, undefined);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase(key);
				this.each(function () {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get(this, camelKey);

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set(this, camelKey, value);

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if (key.indexOf("-") > -1 && data !== undefined) {
						dataUser.set(this, key, value);
					}
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || jQuery.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHidden = function isHidden(elem, el) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([\w:-]+)/;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : [];

		return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnotwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(event) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix(event);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue = [],
			    args = _slice.call(arguments),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    matches,
			    sel,
			    handleObj,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
						matches = [];
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matches[sel] === undefined) {
								matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matches[sel]) {
								matches.push(handleObj);
							}
						}
						if (matches.length) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function filter(event, original) {

				// Add which for key events
				if (event.which == null) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ("button buttons clientX clientY offsetX offsetY pageX pageY " + "screenX screenY toElement").split(" "),
			filter: function filter(event, original) {
				var eventDoc,
				    doc,
				    body,
				    button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if (event.pageX == null && original.clientX != null) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
					event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if (!event.which && button !== undefined) {
					event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
				}

				return event;
			}
		},

		fix: function fix(event) {
			if (event[jQuery.expando]) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i,
			    prop,
			    copy,
			    type = event.type,
			    originalEvent = event,
			    fixHook = this.fixHooks[type];

			if (!fixHook) {
				this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
			}
			copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

			event = new jQuery.Event(originalEvent);

			i = copy.length;
			while (i--) {
				prop = copy[i];
				event[prop] = originalEvent[prop];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if (!event.target) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if (event.target.nodeType === 3) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return jQuery.nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android<4.0
			src.returnValue === false ? returnTrue : returnFalse;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({
		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,


	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget(elem, content) {
		return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});

	var iframe,
	    elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

	/**
  * Retrieve the actual display of a element
  * @param {String} name nodeName of the element
  * @param {Object} doc Document object
  */

	// Called only from within defaultDisplay
	function actualDisplay(name, doc) {
		var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
		    display = jQuery.css(elem[0], "display");

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
  * Try to determine the default display value of an element
  * @param {String} nodeName
  */
	function defaultDisplay(nodeName) {
		var doc = document,
		    display = elemdisplay[nodeName];

		if (!display) {
			display = actualDisplay(nodeName, doc);

			// If the simple way fails, read from inside an iframe
			if (display === "none" || !display) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[0].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay(nodeName, doc);
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[nodeName] = display;
		}

		return display;
	}
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	var documentElement = document.documentElement;

	(function () {
		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);
		}

		jQuery.extend(support, {
			pixelPosition: function pixelPosition() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function boxSizingReliable() {
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function pixelMarginRight() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if (boxSizingReliableVal == null) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function reliableMarginRight() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
				    marginDiv = div.appendChild(document.createElement("div"));

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" + "display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild(container);

				ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

				documentElement.removeChild(container);
				div.removeChild(marginDiv);

				return ret;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,
		    style = elem.style;

		computed = computed || getStyles(elem);
		ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
			ret = jQuery.style(elem, name);
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if (computed) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "O", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i = extra === (isBorderBox ? "border" : "content") ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,
		    val = 0;

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
		    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		    styles = getStyles(elem),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if (val <= 0 || val == null) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS(elem, name, styles);
			if (val < 0 || val == null) {
				val = elem.style[name];
			}

			// Computed unit is not pixels. Stop here and return.
			if (rnumnonpx.test(val)) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

			// Normalize "", auto, and prepare for extra
			val = parseFloat(val) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    hidden,
		    values = [],
		    index = 0,
		    length = elements.length;

		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			values[index] = dataPriv.get(elem, "olddisplay");
			display = elem.style.display;
			if (show) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if (!values[index] && display === "none") {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if (elem.style.display === "" && isHidden(elem)) {
					values[index] = dataPriv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			} else {
				hidden = isHidden(elem);

				if (display !== "none" || !hidden) {
					dataPriv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for (index = 0; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}
			if (!show || elem.style.display === "none" || elem.style.display === "") {
				elem.style.display = show ? values[index] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    style = elem.style;

			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					style[name] = value;
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name);

			// Make sure that we're working with the right name
			name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
		if (computed) {
			return swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (jQuery.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		},
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHidden(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    timerId,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		/* jshint validthis: true */
		var prop,
		    value,
		    toggle,
		    tween,
		    hooks,
		    oldfire,
		    display,
		    checkDisplay,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHidden(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Handle queue: false promises
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css(elem, "display");

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ? dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

			if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
				style.display = "inline-block";
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// show/hide pass
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.exec(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

				// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if (!jQuery.isEmptyObject(orig)) {
			if (dataShow) {
				if ("hidden" in dataShow) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access(elem, "fxshow", {});
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if (toggle) {
				dataShow.hidden = !hidden;
			}
			if (hidden) {
				jQuery(elem).show();
			} else {
				anim.done(function () {
					jQuery(elem).hide();
				});
			}
			anim.done(function () {
				var prop;

				dataPriv.remove(elem, "fxshow");
				for (prop in orig) {
					jQuery.style(elem, prop, orig[prop]);
				}
			});
			for (prop in orig) {
				tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

				if (!(prop in dataShow)) {
					dataShow[prop] = tween.start;
					if (hidden) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

			// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
			style.display = display;
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (jQuery.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			if (percent < 1 && length) {
				return remaining;
			} else {
				deferred.resolveWith(elem, [animation]);
				return false;
			}
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		// attach callbacks from options
		return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	}

	jQuery.Animation = jQuery.extend(Animation, {
		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnotwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHidden).css("opacity", 0).show

			// Animate to the value specified
			().end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Checks the timer has not already been removed
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		if (timer()) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (!timerId) {
			timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
		}
	};

	jQuery.fx.stop = function () {
		window.clearInterval(timerId);

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    propName,
			    i = 0,
			    attrNames = value && value.match(rnotwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					propName = jQuery.propFix[name] || name;

					// Boolean attributes get special treatment (#10870)
					if (jQuery.expr.match.bool.test(name)) {

						// Set corresponding property to false
						elem[propName] = false;
					}

					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};
	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret, handle;
			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[name];
				attrHandle[name] = ret;
				ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
				attrHandle[name] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {
				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {
				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	var rclass = /[\t\r\n\f]/g;

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnotwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnotwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = value.match(rnotwhite) || [];

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g,
	    rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace(rreturn, "") :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (jQuery.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim(jQuery.text(elem)).replace(rspaces, " ");
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one" || index < 0,
					    values = one ? null : [],
					    max = one ? index + 1 : options.length,
					    i = index < 0 ? max : one ? index : 0;

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) && (

						// Don't return options that are disabled or in a disabled optgroup
						support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];
						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (jQuery.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function (data) {
		return JSON.parse(data + "");
	};

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE9
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rhash = /#.*$/,
	    rts = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// The jqXHR state
			state = 0,


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (state === 2) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					var lname = name.toLowerCase();
					if (!state) {
						name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (!state) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (state < 2) {
							for (code in map) {

								// Lazy-add the new callback in a way that preserves old ones
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rhash, "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (state === 2) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if (!s.hasContent) {

				// If data is available, append data to url
				if (s.data) {
					cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if (s.cache === false) {
					s.url = rts.test(cacheURL) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace(rts, "$1_=" + nonce++) :

					// Otherwise add one to the end
					cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for (i in { success: 1, error: 1, complete: 1 }) {
				jqXHR[i](s[i]);
			}

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (state === 2) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					state = 1;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Propagate exception as error if not done
					if (state < 2) {
						done(-1, e);

						// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Called once
				if (state === 2) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapAll(html.call(this, i));
				});
			}

			if (this[0]) {

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap() {
			return this.parent().each(function () {
				if (!jQuery.nodeName(this, "body")) {
					jQuery(this).replaceWith(this.childNodes);
				}
			}).end();
		}
	});

	jQuery.expr.filters.hidden = function (elem) {
		return !jQuery.expr.filters.visible(elem);
	};
	jQuery.expr.filters.visible = function (elem) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};

	var r20 = /%20/g,
	    rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (jQuery.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, value) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
		};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if (traditional === undefined) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = _callback("error");

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (!data || typeof data !== "string") {
			return null;
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec(data),
		    scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		if (typeof url !== "string" && _load) {
			return _load.apply(this, arguments);
		}

		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = jQuery.trim(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.filters.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	/**
  * Gets a window from an element
  */
	function getWindow(elem) {
		return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var docElem,
			    win,
			    elem = this[0],
			    box = { top: 0, left: 0 },
			    doc = elem && elem.ownerDocument;

			if (!doc) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if (!jQuery.contains(docElem, elem)) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow(doc);
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!jQuery.nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
				parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {
				var win = getWindow(elem);

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable, null);
			};
		});
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		},
		size: function size() {
			return this.length;
		}
	});

	jQuery.fn.andSelf = jQuery.fn.addBack;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v4.0.6
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("whatInput", [], factory);
	else if(typeof exports === 'object')
		exports["whatInput"] = factory();
	else
		root["whatInput"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	module.exports = (function() {

	  /*
	    ---------------
	    Variables
	    ---------------
	  */

	  // cache document.documentElement
	  var docElem = document.documentElement;

	  // last used input type
	  var currentInput = 'initial';

	  // last used input intent
	  var currentIntent = null;

	  // form input types
	  var formInputs = [
	    'input',
	    'select',
	    'textarea'
	  ];

	  // list of modifier keys commonly used with the mouse and
	  // can be safely ignored to prevent false keyboard detection
	  var ignoreMap = [
	    16, // shift
	    17, // control
	    18, // alt
	    91, // Windows key / left Apple cmd
	    93  // Windows menu / right Apple cmd
	  ];

	  // mapping of events to input types
	  var inputMap = {
	    'keyup': 'keyboard',
	    'mousedown': 'mouse',
	    'mousemove': 'mouse',
	    'MSPointerDown': 'pointer',
	    'MSPointerMove': 'pointer',
	    'pointerdown': 'pointer',
	    'pointermove': 'pointer',
	    'touchstart': 'touch'
	  };

	  // array of all used input types
	  var inputTypes = [];

	  // boolean: true if touch buffer timer is running
	  var isBuffering = false;

	  // map of IE 10 pointer events
	  var pointerMap = {
	    2: 'touch',
	    3: 'touch', // treat pen like touch
	    4: 'mouse'
	  };

	  // touch buffer timer
	  var touchTimer = null;


	  /*
	    ---------------
	    Set up
	    ---------------
	  */

	  var setUp = function() {

	    // add correct mouse wheel event mapping to `inputMap`
	    inputMap[detectWheel()] = 'mouse';

	    addListeners();
	    setInput();
	  };


	  /*
	    ---------------
	    Events
	    ---------------
	  */

	  var addListeners = function() {

	    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
	    // can only demonstrate potential, but not actual, interaction
	    // and are treated separately

	    // pointer events (mouse, pen, touch)
	    if (window.PointerEvent) {
	      docElem.addEventListener('pointerdown', updateInput);
	      docElem.addEventListener('pointermove', setIntent);
	    } else if (window.MSPointerEvent) {
	      docElem.addEventListener('MSPointerDown', updateInput);
	      docElem.addEventListener('MSPointerMove', setIntent);
	    } else {

	      // mouse events
	      docElem.addEventListener('mousedown', updateInput);
	      docElem.addEventListener('mousemove', setIntent);

	      // touch events
	      if ('ontouchstart' in window) {
	        docElem.addEventListener('touchstart', touchBuffer);
	      }
	    }

	    // mouse wheel
	    docElem.addEventListener(detectWheel(), setIntent);

	    // keyboard events
	    docElem.addEventListener('keydown', updateInput);
	    docElem.addEventListener('keyup', updateInput);
	  };

	  // checks conditions before updating new input
	  var updateInput = function(event) {

	    // only execute if the touch buffer timer isn't running
	    if (!isBuffering) {
	      var eventKey = event.which;
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (
	        currentInput !== value ||
	        currentIntent !== value
	      ) {

	        var activeElem = document.activeElement;
	        var activeInput = (
	          activeElem &&
	          activeElem.nodeName &&
	          formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1
	        ) ? true : false;

	        if (
	          value === 'touch' ||

	          // ignore mouse modifier keys
	          (value === 'mouse' && ignoreMap.indexOf(eventKey) === -1) ||

	          // don't switch if the current element is a form input
	          (value === 'keyboard' && activeInput)
	        ) {

	          // set the current and catch-all variable
	          currentInput = currentIntent = value;

	          setInput();
	        }
	      }
	    }
	  };

	  // updates the doc and `inputTypes` array with new input
	  var setInput = function() {
	    docElem.setAttribute('data-whatinput', currentInput);
	    docElem.setAttribute('data-whatintent', currentInput);

	    if (inputTypes.indexOf(currentInput) === -1) {
	      inputTypes.push(currentInput);
	      docElem.className += ' whatinput-types-' + currentInput;
	    }
	  };

	  // updates input intent for `mousemove` and `pointermove`
	  var setIntent = function(event) {

	    // only execute if the touch buffer timer isn't running
	    if (!isBuffering) {
	      var value = inputMap[event.type];
	      if (value === 'pointer') value = pointerType(event);

	      if (currentIntent !== value) {
	        currentIntent = value;

	        docElem.setAttribute('data-whatintent', currentIntent);
	      }
	    }
	  };

	  // buffers touch events because they frequently also fire mouse events
	  var touchBuffer = function(event) {

	    // clear the timer if it happens to be running
	    window.clearTimeout(touchTimer);

	    // set the current input
	    updateInput(event);

	    // set the isBuffering to `true`
	    isBuffering = true;

	    // run the timer
	    touchTimer = window.setTimeout(function() {

	      // if the timer runs out, set isBuffering back to `false`
	      isBuffering = false;
	    }, 200);
	  };


	  /*
	    ---------------
	    Utilities
	    ---------------
	  */

	  var pointerType = function(event) {
	   if (typeof event.pointerType === 'number') {
	      return pointerMap[event.pointerType];
	   } else {
	      return (event.pointerType === 'pen') ? 'touch' : event.pointerType; // treat pen like touch
	   }
	  };

	  // detect version of mouse wheel event to use
	  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
	  var detectWheel = function() {
	    return 'onwheel' in document.createElement('div') ?
	      'wheel' : // Modern browsers support "wheel"

	      document.onmousewheel !== undefined ?
	        'mousewheel' : // Webkit and IE support at least "mousewheel"
	        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
	  };


	  /*
	    ---------------
	    Init

	    don't start script unless browser cuts the mustard
	    (also passes if polyfills are used)
	    ---------------
	  */

	  if (
	    'addEventListener' in window &&
	    Array.prototype.indexOf
	  ) {
	    setUp();
	  }


	  /*
	    ---------------
	    API
	    ---------------
	  */

	  return {

	    // returns string: the current input type
	    // opt: 'loose'|'strict'
	    // 'strict' (default): returns the same value as the `data-whatinput` attribute
	    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`
	    ask: function(opt) { return (opt === 'loose') ? currentIntent : currentInput; },

	    // returns array: all the detected input types
	    types: function() { return inputTypes; }

	  };

	}());


/***/ }
/******/ ])
});
;
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.3.1';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function rtl() {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function plugin(_plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(_plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = _plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function registerPlugin(plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr('data-' + pluginName)) {
        plugin.$element.attr('data-' + pluginName, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger('init.zf.' + pluginName);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function unregisterPlugin(plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin'
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      ).trigger('destroyed.zf.' + pluginName);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function reInit(plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins),
              _this = this,
              fns = {
            'object': function object(plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function string() {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function undefined() {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function GetYoDigits(length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function reflow(elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function transitionend($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function throttle(func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function foundation(method) {
    var type = typeof method === 'undefined' ? 'undefined' : _typeof(method),
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function now() {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function fNOP() {},
          fBound = function fBound() {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets

    /**
     * Compares the dimensions of an element to a container and determines collision events with container.
     * @function
     * @param {jQuery} element - jQuery object to test for collisions.
     * @param {jQuery} parent - jQuery object to use as bounding container.
     * @param {Boolean} lrOnly - set to true to check left and right values only.
     * @param {Boolean} tbOnly - set to true to check top and bottom values only.
     * @default if no parent object passed, detects collisions with `window`.
     * @returns {Boolean} - true if collision free, false if a collision in any direction.
     */
  };function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  var keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey: function parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
      key = key.replace(/\W+/, '');

      if (event.shiftKey) key = 'SHIFT_' + key;
      if (event.ctrlKey) key = 'CTRL_' + key;
      if (event.altKey) key = 'ALT_' + key;

      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
      key = key.replace(/_$/, '');

      return key;
    },


    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey: function handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },


    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable: function findFocusable($element) {
      if (!$element) {
        return false;
      }
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },


    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register: function register(componentName, cmds) {
      commands[componentName] = cmds;
    },


    /**
     * Traps the focus in the given element.
     * @param  {jQuery} $element  jQuery object to trap the foucs into.
     */
    trapFocus: function trapFocus($element) {
      var $focusable = Foundation.Keyboard.findFocusable($element),
          $firstFocusable = $focusable.eq(0),
          $lastFocusable = $focusable.eq(-1);

      $element.on('keydown.zf.trapfocus', function (event) {
        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {
          event.preventDefault();
          $firstFocusable.focus();
        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {
          event.preventDefault();
          $lastFocusable.focus();
        }
      });
    },

    /**
     * Releases the trapped focus from the given element.
     * @param  {jQuery} $element  jQuery object to release the focus for.
     */
    releaseFocus: function releaseFocus($element) {
      $element.off('keydown.zf.trapfocus');
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) {
      k[kcs[kc]] = kcs[kc];
    }return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  // Default set of media queries
  var defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init: function _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },


    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast: function atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },


    /**
     * Checks if the screen matches to a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
     */
    is: function is(size) {
      size = size.trim().split(' ');
      if (size.length > 1 && size[1] === 'only') {
        if (size[0] === this._getCurrentSize()) return true;
      } else {
        return this.atLeast(size[0]);
      }
      return false;
    },


    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get: function get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },


    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize: function _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },


    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher: function _watcher() {
      var _this = this;

      $(window).on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),
            currentSize = _this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          _this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium: function matchMedium(media) {
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  var initClasses = ['mui-enter', 'mui-leave'];
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];

  var Motion = {
    animateIn: function animateIn(element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function animateOut(element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    if (duration === 0) {
      fn.apply(elem);
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      return;
    }

    function move(ts) {
      if (!start) start = ts;
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(function () {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(function () {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
'use strict';

!function ($) {

  var Nest = {
    Feather: function Feather(menu) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';

      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-label': $item.children('a:first').text()
          });
          // Note:  Drilldowns behave differently in how they hide, and so need
          // additional attributes.  We should look if this possibly over-generalized
          // utility (Nest) is appropriate when we rework menus in 6.4
          if (type === 'drilldown') {
            $item.attr({ 'aria-expanded': false });
          }

          $sub.addClass('submenu ' + subMenuClass).attr({
            'data-submenu': '',
            'role': 'menu'
          });
          if (type === 'drilldown') {
            $sub.attr({ 'aria-hidden': true });
          }
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass('is-submenu-item ' + subItemClass);
        }
      });

      return;
    },
    Burn: function Burn(menu, type) {
      var //items = menu.find('li'),
      subMenuClass = 'is-' + type + '-submenu',
          subItemClass = subMenuClass + '-item',
          hasSubClass = 'is-' + type + '-submenu-parent';

      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger('timerstart.zf.' + nameSpace);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger('timerpaused.zf.' + nameSpace);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      // Check if image is loaded
      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {
        singleImageLoaded();
      }
      // Force load the image
      else {
          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/
          var src = $(this).attr('src');
          $(this).attr('src', src + (src.indexOf('?') >= 0 ? '&' : '?') + new Date().getTime());
          $(this).one('load', function () {
            singleImageLoaded();
          });
        }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
'use strict';

//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger('swipe' + dir);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special['swipe' + this] = { setup: function setup() {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function handleTouch(event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  var MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (prefixes[i] + 'MutationObserver' in window) {
        return window[prefixes[i] + 'MutationObserver'];
      }
    }
    return false;
  }();

  var triggers = function triggers(el, type) {
    el.data(type).split(' ').forEach(function (id) {
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    var id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    var id = $(this).data('toggle');
    if (id) {
      triggers($(this), 'toggle');
    } else {
      $(this).trigger('toggle.zf.trigger');
    }
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    var animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    var id = $(this).data('toggle-focus');
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', function () {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if ((typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      var listeners = plugNames.map(function (name) {
        return 'closeme.zf.' + name;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);

      //trigger the event handler for the element depending on type
      switch (mutationRecordsList[0].type) {

        case "attributes":
          if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          }
          if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('resizeme.zf.trigger', [$target]);
          }
          if (mutationRecordsList[0].attributeName === "style") {
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          }
          break;

        case "childList":
          $target.closest("[data-mutate]").attr("data-events", "mutate");
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        var elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  var Abide = function () {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Abide(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Abide);

      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */


    _createClass(Abide, [{
      key: '_init',
      value: function _init() {
        this.$inputs = this.$element.find('input, textarea, select');

        this._events();
      }

      /**
       * Initializes events for Abide.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        this.$element.off('.abide').on('reset.zf.abide', function () {
          _this2.resetForm();
        }).on('submit.zf.abide', function () {
          return _this2.validateForm();
        });

        if (this.options.validateOn === 'fieldChange') {
          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }

        if (this.options.liveValidate) {
          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }

        if (this.options.validateOnBlur) {
          this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }
      }

      /**
       * Calls necessary functions to update Abide upon DOM change
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        this._init();
      }

      /**
       * Checks whether or not a form element has the required attribute and if it's checked or not
       * @param {Object} element - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'requiredCheck',
      value: function requiredCheck($el) {
        if (!$el.attr('required')) return true;

        var isGood = true;

        switch ($el[0].type) {
          case 'checkbox':
            isGood = $el[0].checked;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            var opt = $el.find('option:selected');
            if (!opt.length || !opt.val()) isGood = false;
            break;

          default:
            if (!$el.val() || !$el.val().length) isGood = false;
        }

        return isGood;
      }

      /**
       * Get:
       * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
       *   1. The element's direct sibling('s).
       *   2. The element's parent's children.
       * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
       *
       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
       *
       * @param {Object} $el - jQuery object to use as reference to find the form error selector.
       * @returns {Object} jQuery object with the selector.
       */

    }, {
      key: 'findFormError',
      value: function findFormError($el) {
        var id = $el[0].id;
        var $error = $el.siblings(this.options.formErrorSelector);

        if (!$error.length) {
          $error = $el.parent().find(this.options.formErrorSelector);
        }

        $error = $error.add(this.$element.find('[data-form-error-for="' + id + '"]'));

        return $error;
      }

      /**
       * Get the first element in this order:
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'findLabel',
      value: function findLabel($el) {
        var id = $el[0].id;
        var $label = this.$element.find('label[for="' + id + '"]');

        if (!$label.length) {
          return $el.closest('label');
        }

        return $label;
      }

      /**
       * Get the set of labels associated with a set of radio els in this order
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'findRadioLabels',
      value: function findRadioLabels($els) {
        var _this3 = this;

        var labels = $els.map(function (i, el) {
          var id = el.id;
          var $label = _this3.$element.find('label[for="' + id + '"]');

          if (!$label.length) {
            $label = $(el).closest('label');
          }
          return $label[0];
        });

        return $(labels);
      }

      /**
       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
       * @param {Object} $el - jQuery object to add the class to
       */

    }, {
      key: 'addErrorClasses',
      value: function addErrorClasses($el) {
        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.addClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.addClass(this.options.formErrorClass);
        }

        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
      }

      /**
       * Remove CSS error classes etc from an entire radio button group
       * @param {String} groupName - A string that specifies the name of a radio button group
       *
       */

    }, {
      key: 'removeRadioErrorClasses',
      value: function removeRadioErrorClasses(groupName) {
        var $els = this.$element.find(':radio[name="' + groupName + '"]');
        var $labels = this.findRadioLabels($els);
        var $formErrors = this.findFormError($els);

        if ($labels.length) {
          $labels.removeClass(this.options.labelErrorClass);
        }

        if ($formErrors.length) {
          $formErrors.removeClass(this.options.formErrorClass);
        }

        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Removes CSS error class as specified by the Abide settings from the label, input, and the form
       * @param {Object} $el - jQuery object to remove the class from
       */

    }, {
      key: 'removeErrorClasses',
      value: function removeErrorClasses($el) {
        // radios need to clear all of the els
        if ($el[0].type == 'radio') {
          return this.removeRadioErrorClasses($el.attr('name'));
        }

        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.removeClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.removeClass(this.options.formErrorClass);
        }

        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type. 
       * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
       * @fires Abide#invalid
       * @fires Abide#valid
       * @param {Object} element - jQuery object to validate, should be an HTML input
       * @returns {Boolean} goodToGo - If the input is valid or not.
       */

    }, {
      key: 'validateInput',
      value: function validateInput($el) {
        var clearRequire = this.requiredCheck($el),
            validated = false,
            customValidator = true,
            validator = $el.attr('data-validator'),
            equalTo = true;

        // don't validate ignored inputs or hidden inputs or disabled inputs
        if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
          return true;
        }

        switch ($el[0].type) {
          case 'radio':
            validated = this.validateRadio($el.attr('name'));
            break;

          case 'checkbox':
            validated = clearRequire;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            validated = clearRequire;
            break;

          default:
            validated = this.validateText($el);
        }

        if (validator) {
          customValidator = this.matchValidation($el, validator, $el.attr('required'));
        }

        if ($el.attr('data-equalto')) {
          equalTo = this.options.validators.equalTo($el);
        }

        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

        if (goodToGo) {
          // Re-validate inputs that depend on this one with equalto
          var dependentElements = this.$element.find('[data-equalto="' + $el.attr('id') + '"]');
          if (dependentElements.length) {
            var _this = this;
            dependentElements.each(function () {
              if ($(this).val()) {
                _this.validateInput($(this));
              }
            });
          }
        }

        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

        /**
         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
         * Trigger includes the DOM element of the input.
         * @event Abide#valid
         * @event Abide#invalid
         */
        $el.trigger(message, [$el]);

        return goodToGo;
      }

      /**
       * Goes through a form and if there are any invalid inputs, it will display the form error element
       * @returns {Boolean} noError - true if no errors were detected...
       * @fires Abide#formvalid
       * @fires Abide#forminvalid
       */

    }, {
      key: 'validateForm',
      value: function validateForm() {
        var acc = [];
        var _this = this;

        this.$inputs.each(function () {
          acc.push(_this.validateInput($(this)));
        });

        var noError = acc.indexOf(false) === -1;

        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

        /**
         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
         * Trigger includes the element of the form.
         * @event Abide#formvalid
         * @event Abide#forminvalid
         */
        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

        return noError;
      }

      /**
       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
       * @param {Object} $el - jQuery object to validate, should be a text input HTML element
       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
       */

    }, {
      key: 'validateText',
      value: function validateText($el, pattern) {
        // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
        pattern = pattern || $el.attr('pattern') || $el.attr('type');
        var inputText = $el.val();
        var valid = false;

        if (inputText.length) {
          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
          if (this.options.patterns.hasOwnProperty(pattern)) {
            valid = this.options.patterns[pattern].test(inputText);
          }
          // If the pattern name isn't also the type attribute of the field, then test it as a regexp
          else if (pattern !== $el.attr('type')) {
              valid = new RegExp(pattern).test(inputText);
            } else {
              valid = true;
            }
        }
        // An empty field is valid if it's not required
        else if (!$el.prop('required')) {
            valid = true;
          }

        return valid;
      }

      /**
       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
       * @param {String} groupName - A string that specifies the name of a radio button group
       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
       */

    }, {
      key: 'validateRadio',
      value: function validateRadio(groupName) {
        // If at least one radio in the group has the `required` attribute, the group is considered required
        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
        var $group = this.$element.find(':radio[name="' + groupName + '"]');
        var valid = false,
            required = false;

        // For the group to be required, at least one radio needs to be required
        $group.each(function (i, e) {
          if ($(e).attr('required')) {
            required = true;
          }
        });
        if (!required) valid = true;

        if (!valid) {
          // For the group to be valid, at least one radio needs to be checked
          $group.each(function (i, e) {
            if ($(e).prop('checked')) {
              valid = true;
            }
          });
        };

        return valid;
      }

      /**
       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
       * @param {Object} $el - jQuery input element.
       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
       * @param {Boolean} required - self explanatory?
       * @returns {Boolean} - true if validations passed.
       */

    }, {
      key: 'matchValidation',
      value: function matchValidation($el, validators, required) {
        var _this4 = this;

        required = required ? true : false;

        var clear = validators.split(' ').map(function (v) {
          return _this4.options.validators[v]($el, required, $el.parent());
        });
        return clear.indexOf(false) === -1;
      }

      /**
       * Resets form inputs and styles
       * @fires Abide#formreset
       */

    }, {
      key: 'resetForm',
      value: function resetForm() {
        var $form = this.$element,
            opts = this.options;

        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
        $form.find('[data-abide-error]').css('display', 'none');
        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        /**
         * Fires when the form has been reset.
         * @event Abide#formreset
         */
        $form.trigger('formreset.zf.abide', [$form]);
      }

      /**
       * Destroys an instance of Abide.
       * Removes error styles and classes from elements, without resetting their values.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        var _this = this;
        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

        this.$inputs.off('.abide').each(function () {
          _this.removeErrorClasses($(this));
        });

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Abide;
  }();

  /**
   * Default settings for plugin
   */


  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @type {?string}
     * @default 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @type {string}
     * @default 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @type {string}
     * @default 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @type {string}
     * @default '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @type {string}
     * @default 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @type {boolean}
     * @default false
     */
    liveValidate: false,

    /**
     * Set to true to validate inputs on blur.
     * @option
     * @type {boolean}
     * @default false
     */
    validateOnBlur: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function equalTo(el, required, parent) {
        return $('#' + el.attr('data-equalto')).val() === el.val();
      }
    }

    // Window exports
  };Foundation.plugin(Abide, 'Abide');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  var Accordion = function () {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    function Accordion(element, options) {
      _classCallCheck(this, Accordion);

      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */


    _createClass(Accordion, [{
      key: '_init',
      value: function _init() {
        var _this2 = this;

        this.$element.attr('role', 'tablist');
        this.$tabs = this.$element.children('[data-accordion-item]');

        this.$tabs.each(function (idx, el) {
          var $el = $(el),
              $content = $el.children('[data-tab-content]'),
              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
              linkId = el.id || id + '-label';

          $el.find('a:first').attr({
            'aria-controls': id,
            'role': 'tab',
            'id': linkId,
            'aria-expanded': false,
            'aria-selected': false
          });

          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
        });
        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
        this.firstTimeInit = true;
        if ($initActive.length) {
          this.down($initActive, this.firstTimeInit);
          this.firstTimeInit = false;
        }

        this._checkDeepLink = function () {
          var anchor = window.location.hash;
          //need a hash and a relevant anchor in this tabset
          if (anchor.length) {
            var $link = _this2.$element.find('[href$="' + anchor + '"]'),
                $anchor = $(anchor);

            if ($link.length && $anchor) {
              if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
                _this2.down($anchor, _this2.firstTimeInit);
                _this2.firstTimeInit = false;
              };

              //roll up a little to show the titles
              if (_this2.options.deepLinkSmudge) {
                var _this = _this2;
                $(window).load(function () {
                  var offset = _this.$element.offset();
                  $('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);
                });
              }

              /**
                * Fires when the zplugin has deeplinked at pageload
                * @event Accordion#deeplink
                */
              _this2.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
            }
          }
        };

        //use browser to open a tab, if it exists in this tabset
        if (this.options.deepLink) {
          this._checkDeepLink();
        }

        this._events();
      }

      /**
       * Adds event handlers for items within the accordion.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this.$tabs.each(function () {
          var $elem = $(this);
          var $tabContent = $elem.children('[data-tab-content]');
          if ($tabContent.length) {
            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
              e.preventDefault();
              _this.toggle($tabContent);
            }).on('keydown.zf.accordion', function (e) {
              Foundation.Keyboard.handleKey(e, 'Accordion', {
                toggle: function toggle() {
                  _this.toggle($tabContent);
                },
                next: function next() {
                  var $a = $elem.next().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                previous: function previous() {
                  var $a = $elem.prev().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                handled: function handled() {
                  e.preventDefault();
                  e.stopPropagation();
                }
              });
            });
          }
        });
        if (this.options.deepLink) {
          $(window).on('popstate', this._checkDeepLink);
        }
      }

      /**
       * Toggles the selected content pane's open/close state.
       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle($target) {
        if ($target.parent().hasClass('is-active')) {
          this.up($target);
        } else {
          this.down($target);
        }
        //either replace or update browser history
        if (this.options.deepLink) {
          var anchor = $target.prev('a').attr('href');

          if (this.options.updateHistory) {
            history.pushState({}, '', anchor);
          } else {
            history.replaceState({}, '', anchor);
          }
        }
      }

      /**
       * Opens the accordion tab defined by `$target`.
       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
       * @param {Boolean} firstTime - flag to determine if reflow should happen.
       * @fires Accordion#down
       * @function
       */

    }, {
      key: 'down',
      value: function down($target, firstTime) {
        var _this3 = this;

        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

        if (!this.options.multiExpand && !firstTime) {
          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
          if ($currentActive.length) {
            this.up($currentActive.not($target));
          }
        }

        $target.slideDown(this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done opening.
           * @event Accordion#down
           */
          _this3.$element.trigger('down.zf.accordion', [$target]);
        });

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': true,
          'aria-selected': true
        });
      }

      /**
       * Closes the tab defined by `$target`.
       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
       * @fires Accordion#up
       * @function
       */

    }, {
      key: 'up',
      value: function up($target) {
        var $aunts = $target.parent().siblings(),
            _this = this;

        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
          return;
        }

        // Foundation.Move(this.options.slideSpeed, $target, function(){
        $target.slideUp(_this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done collapsing up.
           * @event Accordion#up
           */
          _this.$element.trigger('up.zf.accordion', [$target]);
        });
        // });

        $target.attr('aria-hidden', true).parent().removeClass('is-active');

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': false,
          'aria-selected': false
        });
      }

      /**
       * Destroys an instance of an accordion.
       * @fires Accordion#destroyed
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
        this.$element.find('a').off('.zf.accordion');
        if (this.options.deepLink) {
          $(window).off('popstate', this._checkDeepLink);
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Accordion;
  }();

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @type {number}
     * @default 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @type {boolean}
     * @default false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @type {boolean}
     * @default false
     */
    allowAllClosed: false,
    /**
     * Allows the window to scroll to content of pane specified by hash anchor
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,

    /**
     * Adjust the deep link scroll to make sure the top of the accordion panel is visible
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinkSmudge: false,

    /**
     * Animation time (ms) for the deep link adjustment
     * @option
     * @type {number}
     * @default 300
     */
    deepLinkSmudgeDelay: 300,

    /**
     * Update the browser history with the open accordion
     * @option
     * @type {boolean}
     * @default false
     */
    updateHistory: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  var AccordionMenu = function () {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function AccordionMenu(element, options) {
      _classCallCheck(this, AccordionMenu);

      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */


    _createClass(AccordionMenu, [{
      key: '_init',
      value: function _init() {
        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
        this.$element.attr({
          'role': 'menu',
          'aria-multiselectable': this.options.multiOpen
        });

        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
        this.$menuLinks.each(function () {
          var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
              $elem = $(this),
              $sub = $elem.children('[data-submenu]'),
              subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
              isActive = $sub.hasClass('is-active');
          $elem.attr({
            'aria-controls': subId,
            'aria-expanded': isActive,
            'role': 'menuitem',
            'id': linkId
          });
          $sub.attr({
            'aria-labelledby': linkId,
            'aria-hidden': !isActive,
            'role': 'menu',
            'id': subId
          });
        });
        var initPanes = this.$element.find('.is-active');
        if (initPanes.length) {
          var _this = this;
          initPanes.each(function () {
            _this.down($(this));
          });
        }
        this._events();
      }

      /**
       * Adds event handlers for items within the menu.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this.$element.find('li').each(function () {
          var $submenu = $(this).children('[data-submenu]');

          if ($submenu.length) {
            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
              e.preventDefault();

              _this.toggle($submenu);
            });
          }
        }).on('keydown.zf.accordionmenu', function (e) {
          var $element = $(this),
              $elements = $element.parent('ul').children('li'),
              $prevElement,
              $nextElement,
              $target = $element.children('[data-submenu]');

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

              if ($(this).children('[data-submenu]:visible').length) {
                // has open sub menu
                $nextElement = $element.find('li:first-child').find('a').first();
              }
              if ($(this).is(':first-child')) {
                // is first element of sub menu
                $prevElement = $element.parents('li').first().find('a').first();
              } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
                // if previous element has open sub menu
                $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
              }
              if ($(this).is(':last-child')) {
                // is last element of sub menu
                $nextElement = $element.parents('li').first().next('li').find('a').first();
              }

              return;
            }
          });

          Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
            open: function open() {
              if ($target.is(':hidden')) {
                _this.down($target);
                $target.find('li').first().find('a').first().focus();
              }
            },
            close: function close() {
              if ($target.length && !$target.is(':hidden')) {
                // close active sub of this item
                _this.up($target);
              } else if ($element.parent('[data-submenu]').length) {
                // close currently open sub
                _this.up($element.parent('[data-submenu]'));
                $element.parents('li').first().find('a').first().focus();
              }
            },
            up: function up() {
              $prevElement.focus();
              return true;
            },
            down: function down() {
              $nextElement.focus();
              return true;
            },
            toggle: function toggle() {
              if ($element.children('[data-submenu]').length) {
                _this.toggle($element.children('[data-submenu]'));
              }
            },
            closeAll: function closeAll() {
              _this.hideAll();
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
              e.stopImmediatePropagation();
            }
          });
        }); //.attr('tabindex', 0);
      }

      /**
       * Closes all panes of the menu.
       * @function
       */

    }, {
      key: 'hideAll',
      value: function hideAll() {
        this.up(this.$element.find('[data-submenu]'));
      }

      /**
       * Opens all panes of the menu.
       * @function
       */

    }, {
      key: 'showAll',
      value: function showAll() {
        this.down(this.$element.find('[data-submenu]'));
      }

      /**
       * Toggles the open/close state of a submenu.
       * @function
       * @param {jQuery} $target - the submenu to toggle
       */

    }, {
      key: 'toggle',
      value: function toggle($target) {
        if (!$target.is(':animated')) {
          if (!$target.is(':hidden')) {
            this.up($target);
          } else {
            this.down($target);
          }
        }
      }

      /**
       * Opens the sub-menu defined by `$target`.
       * @param {jQuery} $target - Sub-menu to open.
       * @fires AccordionMenu#down
       */

    }, {
      key: 'down',
      value: function down($target) {
        var _this = this;

        if (!this.options.multiOpen) {
          this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
        }

        $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

        //Foundation.Move(this.options.slideSpeed, $target, function() {
        $target.slideDown(_this.options.slideSpeed, function () {
          /**
           * Fires when the menu is done opening.
           * @event AccordionMenu#down
           */
          _this.$element.trigger('down.zf.accordionMenu', [$target]);
        });
        //});
      }

      /**
       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
       * @param {jQuery} $target - Sub-menu to close.
       * @fires AccordionMenu#up
       */

    }, {
      key: 'up',
      value: function up($target) {
        var _this = this;
        //Foundation.Move(this.options.slideSpeed, $target, function(){
        $target.slideUp(_this.options.slideSpeed, function () {
          /**
           * Fires when the menu is done collapsing up.
           * @event AccordionMenu#up
           */
          _this.$element.trigger('up.zf.accordionMenu', [$target]);
        });
        //});

        var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
      }

      /**
       * Destroys an instance of accordion menu.
       * @fires AccordionMenu#destroyed
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('[data-submenu]').slideDown(0).css('display', '');
        this.$element.find('a').off('click.zf.accordionMenu');

        Foundation.Nest.Burn(this.$element, 'accordion');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return AccordionMenu;
  }();

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @type {number}
     * @default 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @type {boolean}
     * @default true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Drilldown module.
   * @module foundation.drilldown
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  var Drilldown = function () {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Drilldown(element, options) {
      _classCallCheck(this, Drilldown);

      this.$element = element;
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'drilldown');

      this._init();

      Foundation.registerPlugin(this, 'Drilldown');
      Foundation.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */


    _createClass(Drilldown, [{
      key: '_init',
      value: function _init() {
        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');
        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');
        this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || Foundation.GetYoDigits(6, 'drilldown'));

        this._prepareMenu();
        this._registerEvents();

        this._keyboardEvents();
      }

      /**
       * prepares drilldown menu by setting attributes to links and elements
       * sets a min height to prevent content jumping
       * wraps the element if not already wrapped
       * @private
       * @function
       */

    }, {
      key: '_prepareMenu',
      value: function _prepareMenu() {
        var _this = this;
        // if(!this.options.holdOpen){
        //   this._menuLinkEvents();
        // }
        this.$submenuAnchors.each(function () {
          var $link = $(this);
          var $sub = $link.parent();
          if (_this.options.parentLink) {
            $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
          }
          $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
          $link.children('[data-submenu]').attr({
            'aria-hidden': true,
            'tabindex': 0,
            'role': 'menu'
          });
          _this._events($link);
        });
        this.$submenus.each(function () {
          var $menu = $(this),
              $back = $menu.find('.js-drilldown-back');
          if (!$back.length) {
            switch (_this.options.backButtonPosition) {
              case "bottom":
                $menu.append(_this.options.backButton);
                break;
              case "top":
                $menu.prepend(_this.options.backButton);
                break;
              default:
                console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");
            }
          }
          _this._back($menu);
        });

        this.$submenus.addClass('invisible');
        if (!this.options.autoHeight) {
          this.$submenus.addClass('drilldown-submenu-cover-previous');
        }

        // create a wrapper on element if it doesn't exist.
        if (!this.$element.parent().hasClass('is-drilldown')) {
          this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');
          if (this.options.animateHeight) this.$wrapper.addClass('animate-height');
          this.$element.wrap(this.$wrapper);
        }
        // set wrapper
        this.$wrapper = this.$element.parent();
        this.$wrapper.css(this._getMaxDims());
      }
    }, {
      key: '_resize',
      value: function _resize() {
        this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });
        // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths
        this.$wrapper.css(this._getMaxDims());
      }

      /**
       * Adds event handlers to elements in the menu.
       * @function
       * @private
       * @param {jQuery} $elem - the current menu item to add handlers to.
       */

    }, {
      key: '_events',
      value: function _events($elem) {
        var _this = this;

        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
          if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
            e.stopImmediatePropagation();
            e.preventDefault();
          }

          // if(e.target !== e.currentTarget.firstElementChild){
          //   return false;
          // }
          _this._show($elem.parent('li'));

          if (_this.options.closeOnClick) {
            var $body = $('body');
            $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {
                return;
              }
              e.preventDefault();
              _this._hideAll();
              $body.off('.zf.drilldown');
            });
          }
        });
        this.$element.on('mutateme.zf.trigger', this._resize.bind(this));
      }

      /**
       * Adds event handlers to the menu element.
       * @function
       * @private
       */

    }, {
      key: '_registerEvents',
      value: function _registerEvents() {
        if (this.options.scrollTop) {
          this._bindHandler = this._scrollTop.bind(this);
          this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);
        }
      }

      /**
       * Scroll to Top of Element or data-scroll-top-element
       * @function
       * @fires Drilldown#scrollme
       */

    }, {
      key: '_scrollTop',
      value: function _scrollTop() {
        var _this = this;
        var $scrollTopElement = _this.options.scrollTopElement != '' ? $(_this.options.scrollTopElement) : _this.$element,
            scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset);
        $('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {
          /**
            * Fires after the menu has scrolled
            * @event Drilldown#scrollme
            */
          if (this === $('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
        });
      }

      /**
       * Adds keydown event listener to `li`'s in the menu.
       * @private
       */

    }, {
      key: '_keyboardEvents',
      value: function _keyboardEvents() {
        var _this = this;

        this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
          var $element = $(this),
              $elements = $element.parent('li').parent('ul').children('li').children('a'),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
              return;
            }
          });

          Foundation.Keyboard.handleKey(e, 'Drilldown', {
            next: function next() {
              if ($element.is(_this.$submenuAnchors)) {
                _this._show($element.parent('li'));
                $element.parent('li').one(Foundation.transitionend($element), function () {
                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                });
                return true;
              }
            },
            previous: function previous() {
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            },
            up: function up() {
              $prevElement.focus();
              // Don't tap focus on first element in root ul
              return !$element.is(_this.$element.find('> li:first-child > a'));
            },
            down: function down() {
              $nextElement.focus();
              // Don't tap focus on last element in root ul
              return !$element.is(_this.$element.find('> li:last-child > a'));
            },
            close: function close() {
              // Don't close on element in root ul
              if (!$element.is(_this.$element.find('> li > a'))) {
                _this._hide($element.parent().parent());
                $element.parent().parent().siblings('a').focus();
              }
            },
            open: function open() {
              if (!$element.is(_this.$menuItems)) {
                // not menu item means back button
                _this._hide($element.parent('li').parent('ul'));
                $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                  setTimeout(function () {
                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                  }, 1);
                });
                return true;
              } else if ($element.is(_this.$submenuAnchors)) {
                _this._show($element.parent('li'));
                $element.parent('li').one(Foundation.transitionend($element), function () {
                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                });
                return true;
              }
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
              e.stopImmediatePropagation();
            }
          });
        }); // end keyboardAccess
      }

      /**
       * Closes all open elements, and returns to root menu.
       * @function
       * @fires Drilldown#closed
       */

    }, {
      key: '_hideAll',
      value: function _hideAll() {
        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
        $elem.one(Foundation.transitionend($elem), function (e) {
          $elem.removeClass('is-active is-closing');
        });
        /**
         * Fires when the menu is fully closed.
         * @event Drilldown#closed
         */
        this.$element.trigger('closed.zf.drilldown');
      }

      /**
       * Adds event listener for each `back` button, and closes open menus.
       * @function
       * @fires Drilldown#back
       * @param {jQuery} $elem - the current sub-menu to add `back` event.
       */

    }, {
      key: '_back',
      value: function _back($elem) {
        var _this = this;
        $elem.off('click.zf.drilldown');
        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
          e.stopImmediatePropagation();
          // console.log('mouseup on back');
          _this._hide($elem);

          // If there is a parent submenu, call show
          var parentSubMenu = $elem.parent('li').parent('ul').parent('li');
          if (parentSubMenu.length) {
            _this._show(parentSubMenu);
          }
        });
      }

      /**
       * Adds event listener to menu items w/o submenus to close open menus on click.
       * @function
       * @private
       */

    }, {
      key: '_menuLinkEvents',
      value: function _menuLinkEvents() {
        var _this = this;
        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
          // e.stopImmediatePropagation();
          setTimeout(function () {
            _this._hideAll();
          }, 0);
        });
      }

      /**
       * Opens a submenu.
       * @function
       * @fires Drilldown#open
       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
       */

    }, {
      key: '_show',
      value: function _show($elem) {
        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });
        $elem.attr('aria-expanded', true);
        $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
        /**
         * Fires when the submenu has opened.
         * @event Drilldown#open
         */
        this.$element.trigger('open.zf.drilldown', [$elem]);
      }
    }, {
      key: '_hide',


      /**
       * Hides a submenu
       * @function
       * @fires Drilldown#hide
       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
       */
      value: function _hide($elem) {
        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
        var _this = this;
        $elem.parent('li').attr('aria-expanded', false);
        $elem.attr('aria-hidden', true).addClass('is-closing');
        $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {
          $elem.removeClass('is-active is-closing');
          $elem.blur().addClass('invisible');
        });
        /**
         * Fires when the submenu has closed.
         * @event Drilldown#hide
         */
        $elem.trigger('hide.zf.drilldown', [$elem]);
      }

      /**
       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
       * Prevents content jumping.
       * @function
       * @private
       */

    }, {
      key: '_getMaxDims',
      value: function _getMaxDims() {
        var maxHeight = 0,
            result = {},
            _this = this;
        this.$submenus.add(this.$element).each(function () {
          var numOfElems = $(this).children('li').length;
          var height = Foundation.Box.GetDimensions(this).height;
          maxHeight = height > maxHeight ? height : maxHeight;
          if (_this.options.autoHeight) {
            $(this).data('calcHeight', height);
            if (!$(this).hasClass('is-drilldown-submenu')) result['height'] = height;
          }
        });

        if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';

        result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';

        return result;
      }

      /**
       * Destroys the Drilldown Menu
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);
        this._hideAll();
        this.$element.off('mutateme.zf.trigger');
        Foundation.Nest.Burn(this.$element, 'drilldown');
        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
        this.$submenuAnchors.each(function () {
          $(this).off('.zf.drilldown');
        });

        this.$submenus.removeClass('drilldown-submenu-cover-previous');

        this.$element.find('a').each(function () {
          var $link = $(this);
          $link.removeAttr('tabindex');
          if ($link.data('savedHref')) {
            $link.attr('href', $link.data('savedHref')).removeData('savedHref');
          } else {
            return;
          }
        });
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Drilldown;
  }();

  Drilldown.defaults = {
    /**
     * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @type {string}
     * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
     */
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
    /**
     * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
     * @option
     * @type {string}
     * @default top
     */
    backButtonPosition: 'top',
    /**
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @type {string}
     * @default '<div></div>'
     */
    wrapper: '<div></div>',
    /**
     * Adds the parent link to the submenu.
     * @option
     * @type {boolean}
     * @default false
     */
    parentLink: false,
    /**
     * Allow the menu to return to root list on body click.
     * @option
     * @type {boolean}
     * @default false
     */
    closeOnClick: false,
    /**
     * Allow the menu to auto adjust height.
     * @option
     * @type {boolean}
     * @default false
     */
    autoHeight: false,
    /**
     * Animate the auto adjust height.
     * @option
     * @type {boolean}
     * @default false
     */
    animateHeight: false,
    /**
     * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
     * @option
     * @type {boolean}
     * @default false
     */
    scrollTop: false,
    /**
     * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
     * @option
     * @type {string}
     * @default ''
     */
    scrollTopElement: '',
    /**
     * ScrollTop offset
     * @option
     * @type {number}
     * @default 0
     */
    scrollTopOffset: 0,
    /**
     * Scroll animation duration
     * @option
     * @type {number}
     * @default 500
     */
    animationDuration: 500,
    /**
     * Scroll animation easing. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @see {@link https://api.jquery.com/animate|JQuery animate}
     * @default 'swing'
     */
    animationEasing: 'swing'
    // holdOpen: false
  };

  // Window exports
  Foundation.plugin(Drilldown, 'Drilldown');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  var Dropdown = function () {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Dropdown(element, options) {
      _classCallCheck(this, Dropdown);

      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */


    _createClass(Dropdown, [{
      key: '_init',
      value: function _init() {
        var $id = this.$element.attr('id');

        this.$anchor = $('[data-toggle="' + $id + '"]').length ? $('[data-toggle="' + $id + '"]') : $('[data-open="' + $id + '"]');
        this.$anchor.attr({
          'aria-controls': $id,
          'data-is-focus': false,
          'data-yeti-box': $id,
          'aria-haspopup': true,
          'aria-expanded': false

        });

        if (this.options.parentClass) {
          this.$parent = this.$element.parents('.' + this.options.parentClass);
        } else {
          this.$parent = null;
        }
        this.options.positionClass = this.getPositionClass();
        this.counter = 4;
        this.usedPositions = [];
        this.$element.attr({
          'aria-hidden': 'true',
          'data-yeti-box': $id,
          'data-resize': $id,
          'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
        });
        this._events();
      }

      /**
       * Helper function to determine current orientation of dropdown pane.
       * @function
       * @returns {String} position - string value of a position class.
       */

    }, {
      key: 'getPositionClass',
      value: function getPositionClass() {
        var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
        verticalPosition = verticalPosition ? verticalPosition[0] : '';
        var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
        horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
        var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

        return position;
      }

      /**
       * Adjusts the dropdown panes orientation by adding/removing positioning classes.
       * @function
       * @private
       * @param {String} position - position class to remove.
       */

    }, {
      key: '_reposition',
      value: function _reposition(position) {
        this.usedPositions.push(position ? position : 'bottom');
        //default, try switching to opposite side
        if (!position && this.usedPositions.indexOf('top') < 0) {
          this.$element.addClass('top');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
          this.$element.removeClass(position).addClass('right');
        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        }

        //if default change didn't work, try bottom or left first
        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.$element.addClass('left');
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.$element.removeClass(position).addClass('left');
          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.$element.removeClass(position);
          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.$element.removeClass(position);
          }
          //if nothing cleared, set to bottom
          else {
              this.$element.removeClass(position);
            }
        this.classChanged = true;
        this.counter--;
      }

      /**
       * Sets the position and orientation of the dropdown pane, checks for collisions.
       * Recursively calls itself if a collision is detected, with a new position class.
       * @function
       * @private
       */

    }, {
      key: '_setPosition',
      value: function _setPosition() {
        if (this.$anchor.attr('aria-expanded') === 'false') {
          return false;
        }
        var position = this.getPositionClass(),
            $eleDims = Foundation.Box.GetDimensions(this.$element),
            $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
            _this = this,
            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
            param = direction === 'top' ? 'height' : 'width',
            offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element, this.$parent)) {
          var newWidth = $eleDims.windowDims.width,
              parentHOffset = 0;
          if (this.$parent) {
            var $parentDims = Foundation.Box.GetDimensions(this.$parent),
                parentHOffset = $parentDims.offset.left;
            if ($parentDims.width < newWidth) {
              newWidth = $parentDims.width;
            }
          }

          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset + parentHOffset, true)).css({
            'width': newWidth - this.options.hOffset * 2,
            'height': 'auto'
          });
          this.classChanged = true;
          return false;
        }

        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

        while (!Foundation.Box.ImNotTouchingYou(this.$element, this.$parent, true) && this.counter) {
          this._reposition(position);
          this._setPosition();
        }
      }

      /**
       * Adds event listeners to the element utilizing the triggers utility library.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': this.close.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this),
          'resizeme.zf.trigger': this._setPosition.bind(this)
        });

        if (this.options.hover) {
          this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            var bodyData = $('body').data();
            if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {
              clearTimeout(_this.timeout);
              _this.timeout = setTimeout(function () {
                _this.open();
                _this.$anchor.data('hover', true);
              }, _this.options.hoverDelay);
            }
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
          if (this.options.hoverPane) {
            this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              clearTimeout(_this.timeout);
            }).on('mouseleave.zf.dropdown', function () {
              clearTimeout(_this.timeout);
              _this.timeout = setTimeout(function () {
                _this.close();
                _this.$anchor.data('hover', false);
              }, _this.options.hoverDelay);
            });
          }
        }
        this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

          var $target = $(this),
              visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

          Foundation.Keyboard.handleKey(e, 'Dropdown', {
            open: function open() {
              if ($target.is(_this.$anchor)) {
                _this.open();
                _this.$element.attr('tabindex', -1).focus();
                e.preventDefault();
              }
            },
            close: function close() {
              _this.close();
              _this.$anchor.focus();
            }
          });
        });
      }

      /**
       * Adds an event handler to the body to close any dropdowns on a click.
       * @function
       * @private
       */

    }, {
      key: '_addBodyHandler',
      value: function _addBodyHandler() {
        var $body = $(document.body).not(this.$element),
            _this = this;
        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
          if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
            return;
          }
          if (_this.$element.find(e.target).length) {
            return;
          }
          _this.close();
          $body.off('click.zf.dropdown');
        });
      }

      /**
       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
       * @function
       * @fires Dropdown#closeme
       * @fires Dropdown#show
       */

    }, {
      key: 'open',
      value: function open() {
        // var _this = this;
        /**
         * Fires to close other open dropdowns, typically when dropdown is opening
         * @event Dropdown#closeme
         */
        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
        this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
        // this.$element/*.show()*/;
        this._setPosition();
        this.$element.addClass('is-open').attr({ 'aria-hidden': false });

        if (this.options.autoFocus) {
          var $focusable = Foundation.Keyboard.findFocusable(this.$element);
          if ($focusable.length) {
            $focusable.eq(0).focus();
          }
        }

        if (this.options.closeOnClick) {
          this._addBodyHandler();
        }

        if (this.options.trapFocus) {
          Foundation.Keyboard.trapFocus(this.$element);
        }

        /**
         * Fires once the dropdown is visible.
         * @event Dropdown#show
         */
        this.$element.trigger('show.zf.dropdown', [this.$element]);
      }

      /**
       * Closes the open dropdown pane.
       * @function
       * @fires Dropdown#hide
       */

    }, {
      key: 'close',
      value: function close() {
        if (!this.$element.hasClass('is-open')) {
          return false;
        }
        this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

        this.$anchor.removeClass('hover').attr('aria-expanded', false);

        if (this.classChanged) {
          var curPositionClass = this.getPositionClass();
          if (curPositionClass) {
            this.$element.removeClass(curPositionClass);
          }
          this.$element.addClass(this.options.positionClass
          /*.hide()*/).css({ height: '', width: '' });
          this.classChanged = false;
          this.counter = 4;
          this.usedPositions.length = 0;
        }
        /**
         * Fires once the dropdown is no longer visible.
         * @event Dropdown#hide
         */
        this.$element.trigger('hide.zf.dropdown', [this.$element]);

        if (this.options.trapFocus) {
          Foundation.Keyboard.releaseFocus(this.$element);
        }
      }

      /**
       * Toggles the dropdown pane's visibility.
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.$element.hasClass('is-open')) {
          if (this.$anchor.data('hover')) return;
          this.close();
        } else {
          this.open();
        }
      }

      /**
       * Destroys the dropdown.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger').hide();
        this.$anchor.off('.zf.dropdown');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Dropdown;
  }();

  Dropdown.defaults = {
    /**
     * Class that designates bounding container of Dropdown (default: window)
     * @option
     * @type {?string}
     * @default null
     */
    parentClass: null,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @type {number}
     * @default 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @type {boolean}
     * @default false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @type {boolean}
     * @default false
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @type {number}
     * @default 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @type {number}
     * @default 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @type {string}
     * @default ''
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @type {boolean}
     * @default false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @type {boolean}
     * @default false
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @type {boolean}
     * @default false
     */
    closeOnClick: false

    // Window exports
  };Foundation.plugin(Dropdown, 'Dropdown');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  var DropdownMenu = function () {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function DropdownMenu(element, options) {
      _classCallCheck(this, DropdownMenu);

      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */


    _createClass(DropdownMenu, [{
      key: '_init',
      value: function _init() {
        var subs = this.$element.find('li.is-dropdown-submenu-parent');
        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

        this.$menuItems = this.$element.find('[role="menuitem"]');
        this.$tabs = this.$element.children('[role="menuitem"]');
        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
          this.options.alignment = 'right';
          subs.addClass('opens-left');
        } else {
          subs.addClass('opens-right');
        }
        this.changed = false;
        this._events();
      }
    }, {
      key: '_isVertical',
      value: function _isVertical() {
        return this.$tabs.css('display') === 'block';
      }

      /**
       * Adds event listeners to elements within the menu
       * @private
       * @function
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
            parClass = 'is-dropdown-submenu-parent';

        // used for onClick and in the keyboard handlers
        var handleClickFn = function handleClickFn(e) {
          var $elem = $(e.target).parentsUntil('ul', '.' + parClass),
              hasSub = $elem.hasClass(parClass),
              hasClicked = $elem.attr('data-is-click') === 'true',
              $sub = $elem.children('.is-dropdown-submenu');

          if (hasSub) {
            if (hasClicked) {
              if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                return;
              } else {
                e.stopImmediatePropagation();
                e.preventDefault();
                _this._hide($elem);
              }
            } else {
              e.preventDefault();
              e.stopImmediatePropagation();
              _this._show($sub);
              $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);
            }
          }
        };

        if (this.options.clickOpen || hasTouch) {
          this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
        }

        // Handle Leaf element Clicks
        if (_this.options.closeOnClickInside) {
          this.$menuItems.on('click.zf.dropdownmenu', function (e) {
            var $elem = $(this),
                hasSub = $elem.hasClass(parClass);
            if (!hasSub) {
              _this._hide();
            }
          });
        }

        if (!this.options.disableHover) {
          this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
            var $elem = $(this),
                hasSub = $elem.hasClass(parClass);

            if (hasSub) {
              clearTimeout($elem.data('_delay'));
              $elem.data('_delay', setTimeout(function () {
                _this._show($elem.children('.is-dropdown-submenu'));
              }, _this.options.hoverDelay));
            }
          }).on('mouseleave.zf.dropdownmenu', function (e) {
            var $elem = $(this),
                hasSub = $elem.hasClass(parClass);
            if (hasSub && _this.options.autoclose) {
              if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
                return false;
              }

              clearTimeout($elem.data('_delay'));
              $elem.data('_delay', setTimeout(function () {
                _this._hide($elem);
              }, _this.options.closingTime));
            }
          });
        }
        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
          var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
              isTab = _this.$tabs.index($element) > -1,
              $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              $prevElement = $elements.eq(i - 1);
              $nextElement = $elements.eq(i + 1);
              return;
            }
          });

          var nextSibling = function nextSibling() {
            if (!$element.is(':last-child')) {
              $nextElement.children('a:first').focus();
              e.preventDefault();
            }
          },
              prevSibling = function prevSibling() {
            $prevElement.children('a:first').focus();
            e.preventDefault();
          },
              openSub = function openSub() {
            var $sub = $element.children('ul.is-dropdown-submenu');
            if ($sub.length) {
              _this._show($sub);
              $element.find('li > a:first').focus();
              e.preventDefault();
            } else {
              return;
            }
          },
              closeSub = function closeSub() {
            //if ($element.is(':first-child')) {
            var close = $element.parent('ul').parent('li');
            close.children('a:first').focus();
            _this._hide(close);
            e.preventDefault();
            //}
          };
          var functions = {
            open: openSub,
            close: function close() {
              _this._hide(_this.$element);
              _this.$menuItems.find('a:first').focus(); // focus to first element
              e.preventDefault();
            },
            handled: function handled() {
              e.stopImmediatePropagation();
            }
          };

          if (isTab) {
            if (_this._isVertical()) {
              // vertical menu
              if (Foundation.rtl()) {
                // right aligned
                $.extend(functions, {
                  down: nextSibling,
                  up: prevSibling,
                  next: closeSub,
                  previous: openSub
                });
              } else {
                // left aligned
                $.extend(functions, {
                  down: nextSibling,
                  up: prevSibling,
                  next: openSub,
                  previous: closeSub
                });
              }
            } else {
              // horizontal menu
              if (Foundation.rtl()) {
                // right aligned
                $.extend(functions, {
                  next: prevSibling,
                  previous: nextSibling,
                  down: openSub,
                  up: closeSub
                });
              } else {
                // left aligned
                $.extend(functions, {
                  next: nextSibling,
                  previous: prevSibling,
                  down: openSub,
                  up: closeSub
                });
              }
            }
          } else {
            // not tabs -> one sub
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: closeSub,
                previous: openSub,
                down: nextSibling,
                up: prevSibling
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: openSub,
                previous: closeSub,
                down: nextSibling,
                up: prevSibling
              });
            }
          }
          Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
        });
      }

      /**
       * Adds an event handler to the body to close any dropdowns on a click.
       * @function
       * @private
       */

    }, {
      key: '_addBodyHandler',
      value: function _addBodyHandler() {
        var $body = $(document.body),
            _this = this;
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
          var $link = _this.$element.find(e.target);
          if ($link.length) {
            return;
          }

          _this._hide();
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
        });
      }

      /**
       * Opens a dropdown pane, and checks for collisions first.
       * @param {jQuery} $sub - ul element that is a submenu to show
       * @function
       * @private
       * @fires DropdownMenu#show
       */

    }, {
      key: '_show',
      value: function _show($sub) {
        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
          return $(el).find($sub).length > 0;
        }));
        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
        this._hide($sibs, idx);
        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
              $parentLi = $sub.parent('.is-dropdown-submenu-parent');
          $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);
          clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
          if (!clear) {
            $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');
          }
          this.changed = true;
        }
        $sub.css('visibility', '');
        if (this.options.closeOnClick) {
          this._addBodyHandler();
        }
        /**
         * Fires when the new dropdown pane is visible.
         * @event DropdownMenu#show
         */
        this.$element.trigger('show.zf.dropdownmenu', [$sub]);
      }

      /**
       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
       * @function
       * @param {jQuery} $elem - element with a submenu to hide
       * @param {Number} idx - index of the $tabs collection to hide
       * @private
       */

    }, {
      key: '_hide',
      value: function _hide($elem, idx) {
        var $toClose;
        if ($elem && $elem.length) {
          $toClose = $elem;
        } else if (idx !== undefined) {
          $toClose = this.$tabs.not(function (i, el) {
            return i === idx;
          });
        } else {
          $toClose = this.$element;
        }
        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

        if (somethingToClose) {
          $toClose.find('li.is-active').add($toClose).attr({
            'data-is-click': false
          }).removeClass('is-active');

          $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');

          if (this.changed || $toClose.find('opens-inner').length) {
            var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
            $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
            this.changed = false;
          }
          /**
           * Fires when the open menus are closed.
           * @event DropdownMenu#hide
           */
          this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
        }
      }

      /**
       * Destroys the plugin.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
        $(document.body).off('.zf.dropdownmenu');
        Foundation.Nest.Burn(this.$element, 'dropdown');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return DropdownMenu;
  }();

  /**
   * Default settings for plugin
   */


  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @type {boolean}
     * @default false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @type {boolean}
     * @default true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @type {number}
     * @default 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @type {boolean}
     * @default false
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @type {number}
     * @default 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'left'` or `'right'`.
     * @option
     * @type {string}
     * @default 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @type {string}
     * @default 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @type {string}
     * @default 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @type {boolean}
     * @default true
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  var Equalizer = function () {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Equalizer(element, options) {
      _classCallCheck(this, Equalizer);

      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */


    _createClass(Equalizer, [{
      key: '_init',
      value: function _init() {
        var eqId = this.$element.attr('data-equalizer') || '';
        var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');

        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));
        this.$element.attr('data-mutate', eqId || Foundation.GetYoDigits(6, 'eq'));

        this.hasNested = this.$element.find('[data-equalizer]').length > 0;
        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
        this.isOn = false;
        this._bindHandler = {
          onResizeMeBound: this._onResizeMe.bind(this),
          onPostEqualizedBound: this._onPostEqualized.bind(this)
        };

        var imgs = this.$element.find('img');
        var tooSmall;
        if (this.options.equalizeOn) {
          tooSmall = this._checkMQ();
          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
        } else {
          this._events();
        }
        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
          if (imgs.length) {
            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
          } else {
            this._reflow();
          }
        }
      }

      /**
       * Removes event listeners if the breakpoint is too small.
       * @private
       */

    }, {
      key: '_pauseEvents',
      value: function _pauseEvents() {
        this.isOn = false;
        this.$element.off({
          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
          'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
        });
      }

      /**
       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
       * @private
       */

    }, {
      key: '_onResizeMe',
      value: function _onResizeMe(e) {
        this._reflow();
      }

      /**
       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
       * @private
       */

    }, {
      key: '_onPostEqualized',
      value: function _onPostEqualized(e) {
        if (e.target !== this.$element[0]) {
          this._reflow();
        }
      }

      /**
       * Initializes events for Equalizer.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        this._pauseEvents();
        if (this.hasNested) {
          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
        } else {
          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
          this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
        }
        this.isOn = true;
      }

      /**
       * Checks the current breakpoint to the minimum required size.
       * @private
       */

    }, {
      key: '_checkMQ',
      value: function _checkMQ() {
        var tooSmall = !Foundation.MediaQuery.is(this.options.equalizeOn);
        if (tooSmall) {
          if (this.isOn) {
            this._pauseEvents();
            this.$watched.css('height', 'auto');
          }
        } else {
          if (!this.isOn) {
            this._events();
          }
        }
        return tooSmall;
      }

      /**
       * A noop version for the plugin
       * @private
       */

    }, {
      key: '_killswitch',
      value: function _killswitch() {
        return;
      }

      /**
       * Calls necessary functions to update Equalizer upon DOM change
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        if (!this.options.equalizeOnStack) {
          if (this._isStacked()) {
            this.$watched.css('height', 'auto');
            return false;
          }
        }
        if (this.options.equalizeByRow) {
          this.getHeightsByRow(this.applyHeightByRow.bind(this));
        } else {
          this.getHeights(this.applyHeight.bind(this));
        }
      }

      /**
       * Manually determines if the first 2 elements are *NOT* stacked.
       * @private
       */

    }, {
      key: '_isStacked',
      value: function _isStacked() {
        if (!this.$watched[0] || !this.$watched[1]) {
          return true;
        }
        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} heights - An array of heights of children within Equalizer container
       */

    }, {
      key: 'getHeights',
      value: function getHeights(cb) {
        var heights = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          heights.push(this.$watched[i].offsetHeight);
        }
        cb(heights);
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       */

    }, {
      key: 'getHeightsByRow',
      value: function getHeightsByRow(cb) {
        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
            groups = [],
            group = 0;
        //group by Row
        groups[group] = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          //maybe could use this.$watched[i].offsetTop
          var elOffsetTop = $(this.$watched[i]).offset().top;
          if (elOffsetTop != lastElTopOffset) {
            group++;
            groups[group] = [];
            lastElTopOffset = elOffsetTop;
          }
          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
        }

        for (var j = 0, ln = groups.length; j < ln; j++) {
          var heights = $(groups[j]).map(function () {
            return this[1];
          }).get();
          var max = Math.max.apply(null, heights);
          groups[j].push(max);
        }
        cb(groups);
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest
       * @param {array} heights - An array of heights of children within Equalizer container
       * @fires Equalizer#preequalized
       * @fires Equalizer#postequalized
       */

    }, {
      key: 'applyHeight',
      value: function applyHeight(heights) {
        var max = Math.max.apply(null, heights);
        /**
         * Fires before the heights are applied
         * @event Equalizer#preequalized
         */
        this.$element.trigger('preequalized.zf.equalizer');

        this.$watched.css('height', max);

        /**
         * Fires when the heights have been applied
         * @event Equalizer#postequalized
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       * @fires Equalizer#preequalized
       * @fires Equalizer#preequalizedrow
       * @fires Equalizer#postequalizedrow
       * @fires Equalizer#postequalized
       */

    }, {
      key: 'applyHeightByRow',
      value: function applyHeightByRow(groups) {
        /**
         * Fires before the heights are applied
         */
        this.$element.trigger('preequalized.zf.equalizer');
        for (var i = 0, len = groups.length; i < len; i++) {
          var groupsILength = groups[i].length,
              max = groups[i][groupsILength - 1];
          if (groupsILength <= 2) {
            $(groups[i][0][0]).css({ 'height': 'auto' });
            continue;
          }
          /**
            * Fires before the heights per row are applied
            * @event Equalizer#preequalizedrow
            */
          this.$element.trigger('preequalizedrow.zf.equalizer');
          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
            $(groups[i][j][0]).css({ 'height': max });
          }
          /**
            * Fires when the heights per row have been applied
            * @event Equalizer#postequalizedrow
            */
          this.$element.trigger('postequalizedrow.zf.equalizer');
        }
        /**
         * Fires when the heights have been applied
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Destroys an instance of Equalizer.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._pauseEvents();
        this.$watched.css('height', 'auto');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Equalizer;
  }();

  /**
   * Default settings for plugin
   */


  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @type {boolean}
     * @default false
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @type {boolean}
     * @default false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @type {string}
     * @default ''
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  var Interchange = function () {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Interchange(element, options) {
      _classCallCheck(this, Interchange);

      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */


    _createClass(Interchange, [{
      key: '_init',
      value: function _init() {
        this._addBreakpoints();
        this._generateRules();
        this._reflow();
      }

      /**
       * Initializes events for Interchange.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        $(window).on('resize.zf.interchange', Foundation.util.throttle(function () {
          _this2._reflow();
        }, 50));
      }

      /**
       * Calls necessary functions to update Interchange upon DOM change
       * @function
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        var match;

        // Iterate through each rule, but only save the last match
        for (var i in this.rules) {
          if (this.rules.hasOwnProperty(i)) {
            var rule = this.rules[i];
            if (window.matchMedia(rule.query).matches) {
              match = rule;
            }
          }
        }

        if (match) {
          this.replace(match.path);
        }
      }

      /**
       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
       * @function
       * @private
       */

    }, {
      key: '_addBreakpoints',
      value: function _addBreakpoints() {
        for (var i in Foundation.MediaQuery.queries) {
          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
            var query = Foundation.MediaQuery.queries[i];
            Interchange.SPECIAL_QUERIES[query.name] = query.value;
          }
        }
      }

      /**
       * Checks the Interchange element for the provided media query + content pairings
       * @function
       * @private
       * @param {Object} element - jQuery object that is an Interchange instance
       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
       */

    }, {
      key: '_generateRules',
      value: function _generateRules(element) {
        var rulesList = [];
        var rules;

        if (this.options.rules) {
          rules = this.options.rules;
        } else {
          rules = this.$element.data('interchange');
        }

        rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;

        for (var i in rules) {
          if (rules.hasOwnProperty(i)) {
            var rule = rules[i].slice(1, -1).split(', ');
            var path = rule.slice(0, -1).join('');
            var query = rule[rule.length - 1];

            if (Interchange.SPECIAL_QUERIES[query]) {
              query = Interchange.SPECIAL_QUERIES[query];
            }

            rulesList.push({
              path: path,
              query: query
            });
          }
        }

        this.rules = rulesList;
      }

      /**
       * Update the `src` property of an image, or change the HTML of a container, to the specified path.
       * @function
       * @param {String} path - Path to the image or HTML partial.
       * @fires Interchange#replaced
       */

    }, {
      key: 'replace',
      value: function replace(path) {
        if (this.currentPath === path) return;

        var _this = this,
            trigger = 'replaced.zf.interchange';

        // Replacing images
        if (this.$element[0].nodeName === 'IMG') {
          this.$element.attr('src', path).on('load', function () {
            _this.currentPath = path;
          }).trigger(trigger);
        }
        // Replacing background images
        else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
          }
          // Replacing HTML
          else {
              $.get(path, function (response) {
                _this.$element.html(response).trigger(trigger);
                $(response).foundation();
                _this.currentPath = path;
              });
            }

        /**
         * Fires when content in an Interchange element is done being loaded.
         * @event Interchange#replaced
         */
        // this.$element.trigger('replaced.zf.interchange');
      }

      /**
       * Destroys an instance of interchange.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        //TODO this.
      }
    }]);

    return Interchange;
  }();

  /**
   * Default settings for plugin
   */


  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     * @type {?array}
     * @default null
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  var Magellan = function () {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Magellan(element, options) {
      _classCallCheck(this, Magellan);

      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();
      this.calcPoints();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */


    _createClass(Magellan, [{
      key: '_init',
      value: function _init() {
        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
        var _this = this;
        this.$targets = $('[data-magellan-target]');
        this.$links = this.$element.find('a');
        this.$element.attr({
          'data-resize': id,
          'data-scroll': id,
          'id': id
        });
        this.$active = $();
        this.scrollPos = parseInt(window.pageYOffset, 10);

        this._events();
      }

      /**
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.
       * Can be invoked if new elements are added or the size of a location changes.
       * @function
       */

    }, {
      key: 'calcPoints',
      value: function calcPoints() {
        var _this = this,
            body = document.body,
            html = document.documentElement;

        this.points = [];
        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

        this.$targets.each(function () {
          var $tar = $(this),
              pt = Math.round($tar.offset().top - _this.options.threshold);
          $tar.targetPoint = pt;
          _this.points.push(pt);
        });
      }

      /**
       * Initializes events for Magellan.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            $body = $('html, body'),
            opts = {
          duration: _this.options.animationDuration,
          easing: _this.options.animationEasing
        };
        $(window).one('load', function () {
          if (_this.options.deepLinking) {
            if (location.hash) {
              _this.scrollToLoc(location.hash);
            }
          }
          _this.calcPoints();
          _this._updateActive();
        });

        this.$element.on({
          'resizeme.zf.trigger': this.reflow.bind(this),
          'scrollme.zf.trigger': this._updateActive.bind(this)
        }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
          e.preventDefault();
          var arrival = this.getAttribute('href');
          _this.scrollToLoc(arrival);
        });
        $(window).on('popstate', function (e) {
          if (_this.options.deepLinking) {
            _this.scrollToLoc(window.location.hash);
          }
        });
      }

      /**
       * Function to scroll to a given location on the page.
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
       * @function
       */

    }, {
      key: 'scrollToLoc',
      value: function scrollToLoc(loc) {
        // Do nothing if target does not exist to prevent errors
        if (!$(loc).length) {
          return false;
        }
        this._inTransition = true;
        var _this = this,
            scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing, function () {
          _this._inTransition = false;_this._updateActive();
        });
      }

      /**
       * Calls necessary functions to update Magellan upon DOM change
       * @function
       */

    }, {
      key: 'reflow',
      value: function reflow() {
        this.calcPoints();
        this._updateActive();
      }

      /**
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private
       * @function
       * @fires Magellan#update
       */

    }, {
      key: '_updateActive',
      value: function _updateActive() /*evt, elem, scrollPos*/{
        if (this._inTransition) {
          return;
        }
        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
            curIdx;

        if (winPos + this.winHeight === this.docHeight) {
          curIdx = this.points.length - 1;
        } else if (winPos < this.points[0]) {
          curIdx = undefined;
        } else {
          var isDown = this.scrollPos < winPos,
              _this = this,
              curVisible = this.points.filter(function (p, i) {
            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
          });
          curIdx = curVisible.length ? curVisible.length - 1 : 0;
        }

        this.$active.removeClass(this.options.activeClass);
        this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = "";
          if (curIdx != undefined) {
            hash = this.$active[0].getAttribute('href');
          }
          if (hash !== window.location.hash) {
            if (window.history.pushState) {
              window.history.pushState(null, null, hash);
            } else {
              window.location.hash = hash;
            }
          }
        }

        this.scrollPos = winPos;
        /**
         * Fires when magellan is finished updating to the new active element.
         * @event Magellan#update
         */
        this.$element.trigger('update.zf.magellan', [this.$active]);
      }

      /**
       * Destroys an instance of Magellan and resets the url of the window.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = this.$active[0].getAttribute('href');
          window.location.hash.replace(hash, '');
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Magellan;
  }();

  /**
   * Default settings for plugin
   */


  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @type {number}
     * @default 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @default 'linear'
     * @see {@link https://api.jquery.com/animate|Jquery animate}
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @type {number}
     * @default 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @type {string}
     * @default 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @type {number}
     * @default 0
     */
    barOffset: 0

    // Window exports
  };Foundation.plugin(Magellan, 'Magellan');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.keyboard
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  var OffCanvas = function () {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function OffCanvas(element, options) {
      _classCallCheck(this, OffCanvas);

      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */


    _createClass(OffCanvas, [{
      key: '_init',
      value: function _init() {
        var id = this.$element.attr('id');

        this.$element.attr('aria-hidden', 'true');

        this.$element.addClass('is-transition-' + this.options.transition);

        // Find triggers that affect this element and add aria-expanded to them
        this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

        // Add an overlay over the content if necessary
        if (this.options.contentOverlay === true) {
          var overlay = document.createElement('div');
          var overlayPosition = $(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
          overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
          this.$overlay = $(overlay);
          if (overlayPosition === 'is-overlay-fixed') {
            $('body').append(this.$overlay);
          } else {
            this.$element.siblings('[data-off-canvas-content]').append(this.$overlay);
          }
        }

        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

        if (this.options.isRevealed === true) {
          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
          this._setMQChecker();
        }
        if (!this.options.transitionTime === true) {
          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas]')[0]).transitionDuration) * 1000;
        }
      }

      /**
       * Adds event handlers to the off-canvas wrapper and the exit overlay.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('.zf.trigger .zf.offcanvas').on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': this.close.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this),
          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
        });

        if (this.options.closeOnClick === true) {
          var $target = this.options.contentOverlay ? this.$overlay : $('[data-off-canvas-content]');
          $target.on({ 'click.zf.offcanvas': this.close.bind(this) });
        }
      }

      /**
       * Applies event listener for elements that will reveal at certain breakpoints.
       * @private
       */

    }, {
      key: '_setMQChecker',
      value: function _setMQChecker() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          } else {
            _this.reveal(false);
          }
        }).one('load.zf.offcanvas', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          }
        });
      }

      /**
       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
       * @param {Boolean} isRevealed - true if element should be revealed.
       * @function
       */

    }, {
      key: 'reveal',
      value: function reveal(isRevealed) {
        var $closer = this.$element.find('[data-close]');
        if (isRevealed) {
          this.close();
          this.isRevealed = true;
          this.$element.attr('aria-hidden', 'false');
          this.$element.off('open.zf.trigger toggle.zf.trigger');
          if ($closer.length) {
            $closer.hide();
          }
        } else {
          this.isRevealed = false;
          this.$element.attr('aria-hidden', 'true');
          this.$element.off('open.zf.trigger toggle.zf.trigger').on({
            'open.zf.trigger': this.open.bind(this),
            'toggle.zf.trigger': this.toggle.bind(this)
          });
          if ($closer.length) {
            $closer.show();
          }
        }
      }

      /**
       * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
       * @private
       */

    }, {
      key: '_stopScrolling',
      value: function _stopScrolling(event) {
        return false;
      }

      // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
      // Only really works for y, not sure how to extend to x or if we need to.

    }, {
      key: '_recordScrollable',
      value: function _recordScrollable(event) {
        var elem = this; // called from event handler context with this as elem

        // If the element is scrollable (content overflows), then...
        if (elem.scrollHeight !== elem.clientHeight) {
          // If we're at the top, scroll down one pixel to allow scrolling up
          if (elem.scrollTop === 0) {
            elem.scrollTop = 1;
          }
          // If we're at the bottom, scroll up one pixel to allow scrolling down
          if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
            elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
          }
        }
        elem.allowUp = elem.scrollTop > 0;
        elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
        elem.lastY = event.originalEvent.pageY;
      }
    }, {
      key: '_stopScrollPropagation',
      value: function _stopScrollPropagation(event) {
        var elem = this; // called from event handler context with this as elem
        var up = event.pageY < elem.lastY;
        var down = !up;
        elem.lastY = event.pageY;

        if (up && elem.allowUp || down && elem.allowDown) {
          event.stopPropagation();
        } else {
          event.preventDefault();
        }
      }

      /**
       * Opens the off-canvas menu.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       * @fires OffCanvas#opened
       */

    }, {
      key: 'open',
      value: function open(event, trigger) {
        if (this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }
        var _this = this;

        if (trigger) {
          this.$lastTrigger = trigger;
        }

        if (this.options.forceTo === 'top') {
          window.scrollTo(0, 0);
        } else if (this.options.forceTo === 'bottom') {
          window.scrollTo(0, document.body.scrollHeight);
        }

        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#opened
         */
        _this.$element.addClass('is-open');

        this.$triggers.attr('aria-expanded', 'true');
        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

        // If `contentScroll` is set to false, add class and disable scrolling on touch devices.
        if (this.options.contentScroll === false) {
          $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
          this.$element.on('touchstart', this._recordScrollable);
          this.$element.on('touchmove', this._stopScrollPropagation);
        }

        if (this.options.contentOverlay === true) {
          this.$overlay.addClass('is-visible');
        }

        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
          this.$overlay.addClass('is-closable');
        }

        if (this.options.autoFocus === true) {
          this.$element.one(Foundation.transitionend(this.$element), function () {
            var canvasFocus = _this.$element.find('[data-autofocus]');
            if (canvasFocus.length) {
              canvasFocus.eq(0).focus();
            } else {
              _this.$element.find('a, button').eq(0).focus();
            }
          });
        }

        if (this.options.trapFocus === true) {
          this.$element.siblings('[data-off-canvas-content]').attr('tabindex', '-1');
          Foundation.Keyboard.trapFocus(this.$element);
        }
      }

      /**
       * Closes the off-canvas menu.
       * @function
       * @param {Function} cb - optional cb to fire after closure.
       * @fires OffCanvas#closed
       */

    }, {
      key: 'close',
      value: function close(cb) {
        if (!this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }

        var _this = this;

        _this.$element.removeClass('is-open');

        this.$element.attr('aria-hidden', 'true'
        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#closed
         */
        ).trigger('closed.zf.offcanvas');

        // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
        if (this.options.contentScroll === false) {
          $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
          this.$element.off('touchstart', this._recordScrollable);
          this.$element.off('touchmove', this._stopScrollPropagation);
        }

        if (this.options.contentOverlay === true) {
          this.$overlay.removeClass('is-visible');
        }

        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
          this.$overlay.removeClass('is-closable');
        }

        this.$triggers.attr('aria-expanded', 'false');

        if (this.options.trapFocus === true) {
          this.$element.siblings('[data-off-canvas-content]').removeAttr('tabindex');
          Foundation.Keyboard.releaseFocus(this.$element);
        }
      }

      /**
       * Toggles the off-canvas menu open or closed.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       */

    }, {
      key: 'toggle',
      value: function toggle(event, trigger) {
        if (this.$element.hasClass('is-open')) {
          this.close(event, trigger);
        } else {
          this.open(event, trigger);
        }
      }

      /**
       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
       * @function
       * @private
       */

    }, {
      key: '_handleKeyboard',
      value: function _handleKeyboard(e) {
        var _this2 = this;

        Foundation.Keyboard.handleKey(e, 'OffCanvas', {
          close: function close() {
            _this2.close();
            _this2.$lastTrigger.focus();
            return true;
          },
          handled: function handled() {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      }

      /**
       * Destroys the offcanvas plugin.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.close();
        this.$element.off('.zf.trigger .zf.offcanvas');
        this.$overlay.off('.zf.offcanvas');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return OffCanvas;
  }();

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClick: true,

    /**
     * Adds an overlay on top of `[data-off-canvas-content]`.
     * @option
     * @type {boolean}
     * @default true
     */
    contentOverlay: true,

    /**
     * Enable/disable scrolling of the main content when an off canvas panel is open.
     * @option
     * @type {boolean}
     * @default true
     */
    contentScroll: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @type {number}
     * @default 0
     */
    transitionTime: 0,

    /**
     * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
     * @option
     * @type {string}
     * @default push
     */
    transition: 'push',

    /**
     * Force the page to scroll to top or bottom on open.
     * @option
     * @type {?string}
     * @default null
     */
    forceTo: null,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @type {boolean}
     * @default false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @type {?string}
     * @default null
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
     * @option
     * @type {boolean}
     * @default true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * @type {string}
     * @default reveal-for-
     * @todo improve the regex testing for this.
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @type {boolean}
     * @default false
     */
    trapFocus: false

    // Window exports
  };Foundation.plugin(OffCanvas, 'OffCanvas');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Orbit module.
   * @module foundation.orbit
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.touch
   */

  var Orbit = function () {
    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    function Orbit(element, options) {
      _classCallCheck(this, Orbit);

      this.$element = element;
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Orbit');
      Foundation.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */


    _createClass(Orbit, [{
      key: '_init',
      value: function _init() {
        // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide
        this._reset();

        this.$wrapper = this.$element.find('.' + this.options.containerClass);
        this.$slides = this.$element.find('.' + this.options.slideClass);

        var $images = this.$element.find('img'),
            initActive = this.$slides.filter('.is-active'),
            id = this.$element[0].id || Foundation.GetYoDigits(6, 'orbit');

        this.$element.attr({
          'data-resize': id,
          'id': id
        });

        if (!initActive.length) {
          this.$slides.eq(0).addClass('is-active');
        }

        if (!this.options.useMUI) {
          this.$slides.addClass('no-motionui');
        }

        if ($images.length) {
          Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
        } else {
          this._prepareForOrbit(); //hehe
        }

        if (this.options.bullets) {
          this._loadBullets();
        }

        this._events();

        if (this.options.autoPlay && this.$slides.length > 1) {
          this.geoSync();
        }

        if (this.options.accessible) {
          // allow wrapper to be focusable to enable arrow navigation
          this.$wrapper.attr('tabindex', 0);
        }
      }

      /**
      * Creates a jQuery collection of bullets, if they are being used.
      * @function
      * @private
      */

    }, {
      key: '_loadBullets',
      value: function _loadBullets() {
        this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');
      }

      /**
      * Sets a `timer` object on the orbit, and starts the counter for the next slide.
      * @function
      */

    }, {
      key: 'geoSync',
      value: function geoSync() {
        var _this = this;
        this.timer = new Foundation.Timer(this.$element, {
          duration: this.options.timerDelay,
          infinite: false
        }, function () {
          _this.changeSlide(true);
        });
        this.timer.start();
      }

      /**
      * Sets wrapper and slide heights for the orbit.
      * @function
      * @private
      */

    }, {
      key: '_prepareForOrbit',
      value: function _prepareForOrbit() {
        var _this = this;
        this._setWrapperHeight();
      }

      /**
      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
      * @function
      * @private
      * @param {Function} cb - a callback function to fire when complete.
      */

    }, {
      key: '_setWrapperHeight',
      value: function _setWrapperHeight(cb) {
        //rewrite this to `for` loop
        var max = 0,
            temp,
            counter = 0,
            _this = this;

        this.$slides.each(function () {
          temp = this.getBoundingClientRect().height;
          $(this).attr('data-slide', counter);

          if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {
            //if not the active slide, set css position and display property
            $(this).css({ 'position': 'relative', 'display': 'none' });
          }
          max = temp > max ? temp : max;
          counter++;
        });

        if (counter === this.$slides.length) {
          this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
          if (cb) {
            cb(max);
          } //fire callback with max height dimension.
        }
      }

      /**
      * Sets the max-height of each slide.
      * @function
      * @private
      */

    }, {
      key: '_setSlideHeight',
      value: function _setSlideHeight(height) {
        this.$slides.each(function () {
          $(this).css('max-height', height);
        });
      }

      /**
      * Adds event listeners to basically everything within the element.
      * @function
      * @private
      */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        //***************************************
        //**Now using custom event - thanks to:**
        //**      Yohai Ararat of Toronto      **
        //***************************************
        //
        this.$element.off('.resizeme.zf.trigger').on({
          'resizeme.zf.trigger': this._prepareForOrbit.bind(this)
        });
        if (this.$slides.length > 1) {

          if (this.options.swipe) {
            this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide(true);
            }).on('swiperight.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide(false);
            });
          }
          //***************************************

          if (this.options.autoPlay) {
            this.$slides.on('click.zf.orbit', function () {
              _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
              _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
            });

            if (this.options.pauseOnHover) {
              this.$element.on('mouseenter.zf.orbit', function () {
                _this.timer.pause();
              }).on('mouseleave.zf.orbit', function () {
                if (!_this.$element.data('clickedOn')) {
                  _this.timer.start();
                }
              });
            }
          }

          if (this.options.navButtons) {
            var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);
            $controls.attr('tabindex', 0
            //also need to handle enter/return and spacebar key presses
            ).on('click.zf.orbit touchend.zf.orbit', function (e) {
              e.preventDefault();
              _this.changeSlide($(this).hasClass(_this.options.nextClass));
            });
          }

          if (this.options.bullets) {
            this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
              if (/is-active/g.test(this.className)) {
                return false;
              } //if this is active, kick out of function.
              var idx = $(this).data('slide'),
                  ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                  $slide = _this.$slides.eq(idx);

              _this.changeSlide(ltr, $slide, idx);
            });
          }

          if (this.options.accessible) {
            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
              // handle keyboard event with keyboard util
              Foundation.Keyboard.handleKey(e, 'Orbit', {
                next: function next() {
                  _this.changeSlide(true);
                },
                previous: function previous() {
                  _this.changeSlide(false);
                },
                handled: function handled() {
                  // if bullet is focused, make sure focus moves
                  if ($(e.target).is(_this.$bullets)) {
                    _this.$bullets.filter('.is-active').focus();
                  }
                }
              });
            });
          }
        }
      }

      /**
       * Resets Orbit so it can be reinitialized
       */

    }, {
      key: '_reset',
      value: function _reset() {
        // Don't do anything if there are no slides (first run)
        if (typeof this.$slides == 'undefined') {
          return;
        }

        if (this.$slides.length > 1) {
          // Remove old events
          this.$element.off('.zf.orbit').find('*').off('.zf.orbit'

          // Restart timer if autoPlay is enabled
          );if (this.options.autoPlay) {
            this.timer.restart();
          }

          // Reset all sliddes
          this.$slides.each(function (el) {
            $(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
          });

          // Show the first slide
          this.$slides.first().addClass('is-active').show();

          // Triggers when the slide has finished animating
          this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);

          // Select first bullet if bullets are present
          if (this.options.bullets) {
            this._updateBullets(0);
          }
        }
      }

      /**
      * Changes the current slide to a new one.
      * @function
      * @param {Boolean} isLTR - flag if the slide should move left to right.
      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
      * @param {Number} idx - the index of the new slide in its collection, if one chosen.
      * @fires Orbit#slidechange
      */

    }, {
      key: 'changeSlide',
      value: function changeSlide(isLTR, chosenSlide, idx) {
        if (!this.$slides) {
          return;
        } // Don't freak out if we're in the middle of cleanup
        var $curSlide = this.$slides.filter('.is-active').eq(0);

        if (/mui/g.test($curSlide[0].className)) {
          return false;
        } //if the slide is currently animating, kick out of the function

        var $firstSlide = this.$slides.first(),
            $lastSlide = this.$slides.last(),
            dirIn = isLTR ? 'Right' : 'Left',
            dirOut = isLTR ? 'Left' : 'Right',
            _this = this,
            $newSlide;

        if (!chosenSlide) {
          //most of the time, this will be auto played or clicked from the navButtons.
          $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
          this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
          this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
        } else {
          $newSlide = chosenSlide;
        }

        if ($newSlide.length) {
          /**
          * Triggers before the next slide starts animating in and only if a next slide has been found.
          * @event Orbit#beforeslidechange
          */
          this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

          if (this.options.bullets) {
            idx = idx || this.$slides.index($newSlide); //grab index to update bullets
            this._updateBullets(idx);
          }

          if (this.options.useMUI && !this.$element.is(':hidden')) {
            Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
              $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
            });

            Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
              $curSlide.removeAttr('aria-live');
              if (_this.options.autoPlay && !_this.timer.isPaused) {
                _this.timer.restart();
              }
              //do stuff?
            });
          } else {
            $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
            $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
            if (this.options.autoPlay && !this.timer.isPaused) {
              this.timer.restart();
            }
          }
          /**
          * Triggers when the slide has finished animating in.
          * @event Orbit#slidechange
          */
          this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
        }
      }

      /**
      * Updates the active state of the bullets, if displayed.
      * @function
      * @private
      * @param {Number} idx - the index of the current slide.
      */

    }, {
      key: '_updateBullets',
      value: function _updateBullets(idx) {
        var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
            span = $oldBullet.find('span:last').detach(),
            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
      }

      /**
      * Destroys the carousel and hides the element.
      * @function
      */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Orbit;
  }();

  Orbit.defaults = {
    /**
    * Tells the JS to look for and loadBullets.
    * @option
     * @type {boolean}
    * @default true
    */
    bullets: true,
    /**
    * Tells the JS to apply event listeners to nav buttons
    * @option
     * @type {boolean}
    * @default true
    */
    navButtons: true,
    /**
    * motion-ui animation class to apply
    * @option
     * @type {string}
    * @default 'slide-in-right'
    */
    animInFromRight: 'slide-in-right',
    /**
    * motion-ui animation class to apply
    * @option
     * @type {string}
    * @default 'slide-out-right'
    */
    animOutToRight: 'slide-out-right',
    /**
    * motion-ui animation class to apply
    * @option
     * @type {string}
    * @default 'slide-in-left'
    *
    */
    animInFromLeft: 'slide-in-left',
    /**
    * motion-ui animation class to apply
    * @option
     * @type {string}
    * @default 'slide-out-left'
    */
    animOutToLeft: 'slide-out-left',
    /**
    * Allows Orbit to automatically animate on page load.
    * @option
     * @type {boolean}
    * @default true
    */
    autoPlay: true,
    /**
    * Amount of time, in ms, between slide transitions
    * @option
     * @type {number}
    * @default 5000
    */
    timerDelay: 5000,
    /**
    * Allows Orbit to infinitely loop through the slides
    * @option
     * @type {boolean}
    * @default true
    */
    infiniteWrap: true,
    /**
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
    * @option
     * @type {boolean}
    * @default true
    */
    swipe: true,
    /**
    * Allows the timing function to pause animation on hover.
    * @option
     * @type {boolean}
    * @default true
    */
    pauseOnHover: true,
    /**
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
    * @option
     * @type {boolean}
    * @default true
    */
    accessible: true,
    /**
    * Class applied to the container of Orbit
    * @option
     * @type {string}
    * @default 'orbit-container'
    */
    containerClass: 'orbit-container',
    /**
    * Class applied to individual slides.
    * @option
     * @type {string}
    * @default 'orbit-slide'
    */
    slideClass: 'orbit-slide',
    /**
    * Class applied to the bullet container. You're welcome.
    * @option
     * @type {string}
    * @default 'orbit-bullets'
    */
    boxOfBullets: 'orbit-bullets',
    /**
    * Class applied to the `next` navigation button.
    * @option
     * @type {string}
    * @default 'orbit-next'
    */
    nextClass: 'orbit-next',
    /**
    * Class applied to the `previous` navigation button.
    * @option
     * @type {string}
    * @default 'orbit-previous'
    */
    prevClass: 'orbit-previous',
    /**
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
    * @option
     * @type {boolean}
    * @default true
    */
    useMUI: true
  };

  // Window exports
  Foundation.plugin(Orbit, 'Orbit');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveMenu = function () {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveMenu(element, options) {
      _classCallCheck(this, ResponsiveMenu);

      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */


    _createClass(ResponsiveMenu, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
        // Add data-mutate since children may need it.
        this.$element.attr('data-mutate', this.$element.attr('data-mutate') || Foundation.GetYoDigits(6, 'responsive-menu'));
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
        // $(window).on('resize.zf.ResponsiveMenu', function() {
        //   _this._checkMediaQueries();
        // });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */

    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) this.currentPlugin.destroy();
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveMenu');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveMenu;
  }();

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveToggle = function () {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveToggle(element, options) {
      _classCallCheck(this, ResponsiveToggle);

      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */


    _createClass(ResponsiveToggle, [{
      key: '_init',
      value: function _init() {
        var targetID = this.$element.data('responsive-toggle');
        if (!targetID) {
          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
        }

        this.$targetMenu = $('#' + targetID);
        this.$toggler = this.$element.find('[data-toggle]').filter(function () {
          var target = $(this).data('toggle');
          return target === targetID || target === "";
        });
        this.options = $.extend({}, this.options, this.$targetMenu.data());

        // If they were set, parse the animation classes
        if (this.options.animate) {
          var input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }

        this._update();
      }

      /**
       * Adds necessary event handlers for the tab bar to work.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this._updateMqHandler = this._update.bind(this);

        $(window).on('changed.zf.mediaquery', this._updateMqHandler);

        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
      }

      /**
       * Checks the current media query to determine if the tab bar should be visible or hidden.
       * @function
       * @private
       */

    }, {
      key: '_update',
      value: function _update() {
        // Mobile
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          this.$element.show();
          this.$targetMenu.hide();
        }

        // Desktop
        else {
            this.$element.hide();
            this.$targetMenu.show();
          }
      }

      /**
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function
       * @fires ResponsiveToggle#toggled
       */

    }, {
      key: 'toggleMenu',
      value: function toggleMenu() {
        var _this2 = this;

        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          /**
           * Fires when the element attached to the tab bar toggles.
           * @event ResponsiveToggle#toggled
           */
          if (this.options.animate) {
            if (this.$targetMenu.is(':hidden')) {
              Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
                _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
              });
            } else {
              Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
              });
            }
          } else {
            this.$targetMenu.toggle(0);
            this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
            this.$element.trigger('toggled.zf.responsiveToggle');
          }
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.responsiveToggle');
        this.$toggler.off('.zf.responsiveToggle');

        $(window).off('changed.zf.mediaquery', this._updateMqHandler);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveToggle;
  }();

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @type {string}
     * @default 'medium'
     */
    hideFor: 'medium',

    /**
     * To decide if the toggle should be animated or not.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  var Reveal = function () {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    function Reveal(element, options) {
      _classCallCheck(this, Reveal);

      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */


    _createClass(Reveal, [{
      key: '_init',
      value: function _init() {
        this.id = this.$element.attr('id');
        this.isActive = false;
        this.cached = { mq: Foundation.MediaQuery.current };
        this.isMobile = mobileSniff();

        this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
        this.$anchor.attr({
          'aria-controls': this.id,
          'aria-haspopup': true,
          'tabindex': 0
        });

        if (this.options.fullScreen || this.$element.hasClass('full')) {
          this.options.fullScreen = true;
          this.options.overlay = false;
        }
        if (this.options.overlay && !this.$overlay) {
          this.$overlay = this._makeOverlay(this.id);
        }

        this.$element.attr({
          'role': 'dialog',
          'aria-hidden': true,
          'data-yeti-box': this.id,
          'data-resize': this.id
        });

        if (this.$overlay) {
          this.$element.detach().appendTo(this.$overlay);
        } else {
          this.$element.detach().appendTo($(this.options.appendTo));
          this.$element.addClass('without-overlay');
        }
        this._events();
        if (this.options.deepLink && window.location.hash === '#' + this.id) {
          $(window).one('load.zf.reveal', this.open.bind(this));
        }
      }

      /**
       * Creates an overlay div to display behind the modal.
       * @private
       */

    }, {
      key: '_makeOverlay',
      value: function _makeOverlay() {
        return $('<div></div>').addClass('reveal-overlay').appendTo(this.options.appendTo);
      }

      /**
       * Updates position of modal
       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
       * @private
       */

    }, {
      key: '_updatePosition',
      value: function _updatePosition() {
        var width = this.$element.outerWidth();
        var outerWidth = $(window).width();
        var height = this.$element.outerHeight();
        var outerHeight = $(window).height();
        var left, top;
        if (this.options.hOffset === 'auto') {
          left = parseInt((outerWidth - width) / 2, 10);
        } else {
          left = parseInt(this.options.hOffset, 10);
        }
        if (this.options.vOffset === 'auto') {
          if (height > outerHeight) {
            top = parseInt(Math.min(100, outerHeight / 10), 10);
          } else {
            top = parseInt((outerHeight - height) / 4, 10);
          }
        } else {
          top = parseInt(this.options.vOffset, 10);
        }
        this.$element.css({ top: top + 'px' });
        // only worry about left if we don't have an overlay or we havea  horizontal offset,
        // otherwise we're perfectly in the middle
        if (!this.$overlay || this.options.hOffset !== 'auto') {
          this.$element.css({ left: left + 'px' });
          this.$element.css({ margin: '0px' });
        }
      }

      /**
       * Adds event handlers for the modal.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        var _this = this;

        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': function closeZfTrigger(event, $element) {
            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
              // only close reveal when it's explicitly called
              return _this2.close.apply(_this2);
            }
          },
          'toggle.zf.trigger': this.toggle.bind(this),
          'resizeme.zf.trigger': function resizemeZfTrigger() {
            _this._updatePosition();
          }
        });

        if (this.$anchor.length) {
          this.$anchor.on('keydown.zf.reveal', function (e) {
            if (e.which === 13 || e.which === 32) {
              e.stopPropagation();
              e.preventDefault();
              _this.open();
            }
          });
        }

        if (this.options.closeOnClick && this.options.overlay) {
          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }
        if (this.options.deepLink) {
          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
        }
      }

      /**
       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
       * @private
       */

    }, {
      key: '_handleState',
      value: function _handleState(e) {
        if (window.location.hash === '#' + this.id && !this.isActive) {
          this.open();
        } else {
          this.close();
        }
      }

      /**
       * Opens the modal controlled by `this.$anchor`, and closes all others by default.
       * @function
       * @fires Reveal#closeme
       * @fires Reveal#open
       */

    }, {
      key: 'open',
      value: function open() {
        var _this3 = this;

        if (this.options.deepLink) {
          var hash = '#' + this.id;

          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }

        this.isActive = true;

        // Make elements invisible, but remove display: none so we can get size and positioning
        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
        if (this.options.overlay) {
          this.$overlay.css({ 'visibility': 'hidden' }).show();
        }

        this._updatePosition();

        this.$element.hide().css({ 'visibility': '' });

        if (this.$overlay) {
          this.$overlay.css({ 'visibility': '' }).hide();
          if (this.$element.hasClass('fast')) {
            this.$overlay.addClass('fast');
          } else if (this.$element.hasClass('slow')) {
            this.$overlay.addClass('slow');
          }
        }

        if (!this.options.multipleOpened) {
          /**
           * Fires immediately before the modal opens.
           * Closes any other modals that are currently open
           * @event Reveal#closeme
           */
          this.$element.trigger('closeme.zf.reveal', this.id);
        }

        var _this = this;

        function addRevealOpenClasses() {
          if (_this.isMobile) {
            if (!_this.originalScrollPos) {
              _this.originalScrollPos = window.pageYOffset;
            }
            $('html, body').addClass('is-reveal-open');
          } else {
            $('body').addClass('is-reveal-open');
          }
        }
        // Motion UI method of reveal
        if (this.options.animationIn) {
          var afterAnimation = function afterAnimation() {
            _this.$element.attr({
              'aria-hidden': false,
              'tabindex': -1
            }).focus();
            addRevealOpenClasses();
            Foundation.Keyboard.trapFocus(_this.$element);
          };

          if (this.options.overlay) {
            Foundation.Motion.animateIn(this.$overlay, 'fade-in');
          }
          Foundation.Motion.animateIn(this.$element, this.options.animationIn, function () {
            if (_this3.$element) {
              // protect against object having been removed
              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);
              afterAnimation();
            }
          });
        }
        // jQuery method of reveal
        else {
            if (this.options.overlay) {
              this.$overlay.show(0);
            }
            this.$element.show(this.options.showDelay);
          }

        // handle accessibility
        this.$element.attr({
          'aria-hidden': false,
          'tabindex': -1
        }).focus();
        Foundation.Keyboard.trapFocus(this.$element);

        /**
         * Fires when the modal has successfully opened.
         * @event Reveal#open
         */
        this.$element.trigger('open.zf.reveal');

        addRevealOpenClasses();

        setTimeout(function () {
          _this3._extraHandlers();
        }, 0);
      }

      /**
       * Adds extra event handlers for the body and window if necessary.
       * @private
       */

    }, {
      key: '_extraHandlers',
      value: function _extraHandlers() {
        var _this = this;
        if (!this.$element) {
          return;
        } // If we're in the middle of cleanup, don't freak out
        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
          $('body').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }

        if (this.options.closeOnEsc) {
          $(window).on('keydown.zf.reveal', function (e) {
            Foundation.Keyboard.handleKey(e, 'Reveal', {
              close: function close() {
                if (_this.options.closeOnEsc) {
                  _this.close();
                  _this.$anchor.focus();
                }
              }
            });
          });
        }

        // lock focus within modal while tabbing
        this.$element.on('keydown.zf.reveal', function (e) {
          var $target = $(this);
          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            open: function open() {
              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
                setTimeout(function () {
                  // set focus back to anchor if close button has been activated
                  _this.$anchor.focus();
                }, 1);
              } else if ($target.is(_this.focusableElements)) {
                // dont't trigger if acual element has focus (i.e. inputs, links, ...)
                _this.open();
              }
            },
            close: function close() {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
            }
          });
        });
      }

      /**
       * Closes the modal.
       * @function
       * @fires Reveal#closed
       */

    }, {
      key: 'close',
      value: function close() {
        if (!this.isActive || !this.$element.is(':visible')) {
          return false;
        }
        var _this = this;

        // Motion UI method of hiding
        if (this.options.animationOut) {
          if (this.options.overlay) {
            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
          } else {
            finishUp();
          }

          Foundation.Motion.animateOut(this.$element, this.options.animationOut);
        }
        // jQuery method of hiding
        else {

            this.$element.hide(this.options.hideDelay);

            if (this.options.overlay) {
              this.$overlay.hide(0, finishUp);
            } else {
              finishUp();
            }
          }

        // Conditionals to remove extra event listeners added on open
        if (this.options.closeOnEsc) {
          $(window).off('keydown.zf.reveal');
        }

        if (!this.options.overlay && this.options.closeOnClick) {
          $('body').off('click.zf.reveal');
        }

        this.$element.off('keydown.zf.reveal');

        function finishUp() {
          if (_this.isMobile) {
            if ($('.reveal:visible').length === 0) {
              $('html, body').removeClass('is-reveal-open');
            }
            if (_this.originalScrollPos) {
              $('body').scrollTop(_this.originalScrollPos);
              _this.originalScrollPos = null;
            }
          } else {
            if ($('.reveal:visible').length === 0) {
              $('body').removeClass('is-reveal-open');
            }
          }

          Foundation.Keyboard.releaseFocus(_this.$element);

          _this.$element.attr('aria-hidden', true);

          /**
          * Fires when the modal is done closing.
          * @event Reveal#closed
          */
          _this.$element.trigger('closed.zf.reveal');
        }

        /**
        * Resets the modal content
        * This prevents a running video to keep going in the background
        */
        if (this.options.resetOnClose) {
          this.$element.html(this.$element.html());
        }

        this.isActive = false;
        if (_this.options.deepLink) {
          if (window.history.replaceState) {
            window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));
          } else {
            window.location.hash = '';
          }
        }
      }

      /**
       * Toggles the open/closed state of a modal.
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isActive) {
          this.close();
        } else {
          this.open();
        }
      }
    }, {
      key: 'destroy',


      /**
       * Destroys an instance of a modal.
       * @function
       */
      value: function destroy() {
        if (this.options.overlay) {
          this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
          this.$overlay.hide().off().remove();
        }
        this.$element.hide().off();
        this.$anchor.off('.zf');
        $(window).off('.zf.reveal:' + this.id);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Reveal;
  }();

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @type {string}
     * @default ''
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @type {string}
     * @default ''
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @type {number}
     * @default 0
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @type {number}
     * @default 0
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @type {boolean}
     * @default false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @type {number|string}
     * @default auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @type {number|string}
     * @default auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @type {boolean}
     * @default false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @type {number}
     * @default 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @type {boolean}
     * @default true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @type {boolean}
     * @default false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,
    /**
    * Allows the modal to append to custom div.
    * @option
    * @type {string}
    * @default "body"
    */
    appendTo: "body"

  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Slider module.
   * @module foundation.slider
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   * @requires foundation.util.keyboard
   * @requires foundation.util.touch
   */

  var Slider = function () {
    /**
     * Creates a new instance of a slider control.
     * @class
     * @param {jQuery} element - jQuery object to make into a slider control.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Slider(element, options) {
      _classCallCheck(this, Slider);

      this.$element = element;
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Slider');
      Foundation.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */


    _createClass(Slider, [{
      key: '_init',
      value: function _init() {
        this.inputs = this.$element.find('input');
        this.handles = this.$element.find('[data-slider-handle]');

        this.$handle = this.handles.eq(0);
        this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));
        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

        var isDbl = false,
            _this = this;
        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
          this.options.disabled = true;
          this.$element.addClass(this.options.disabledClass);
        }
        if (!this.inputs.length) {
          this.inputs = $().add(this.$input);
          this.options.binding = true;
        }

        this._setInitAttr(0);

        if (this.handles[1]) {
          this.options.doubleSided = true;
          this.$handle2 = this.handles.eq(1);
          this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));

          if (!this.inputs[1]) {
            this.inputs = this.inputs.add(this.$input2);
          }
          isDbl = true;

          // this.$handle.triggerHandler('click.zf.slider');
          this._setInitAttr(1);
        }

        // Set handle positions
        this.setHandles();

        this._events();
      }
    }, {
      key: 'setHandles',
      value: function setHandles() {
        var _this2 = this;

        if (this.handles[1]) {
          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {
            _this2._setHandlePos(_this2.$handle2, _this2.inputs.eq(1).val(), true);
          });
        } else {
          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);
        }
      }
    }, {
      key: '_reflow',
      value: function _reflow() {
        this.setHandles();
      }
      /**
      * @function
      * @private
      * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
      */

    }, {
      key: '_pctOfBar',
      value: function _pctOfBar(value) {
        var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);

        switch (this.options.positionValueFunction) {
          case "pow":
            pctOfBar = this._logTransform(pctOfBar);
            break;
          case "log":
            pctOfBar = this._powTransform(pctOfBar);
            break;
        }

        return pctOfBar.toFixed(2);
      }

      /**
      * @function
      * @private
      * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
      */

    }, {
      key: '_value',
      value: function _value(pctOfBar) {
        switch (this.options.positionValueFunction) {
          case "pow":
            pctOfBar = this._powTransform(pctOfBar);
            break;
          case "log":
            pctOfBar = this._logTransform(pctOfBar);
            break;
        }
        var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;

        return value;
      }

      /**
      * @function
      * @private
      * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function
      */

    }, {
      key: '_logTransform',
      value: function _logTransform(value) {
        return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);
      }

      /**
      * @function
      * @private
      * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function
      */

    }, {
      key: '_powTransform',
      value: function _powTransform(value) {
        return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);
      }

      /**
       * Sets the position of the selected handle and fill bar.
       * @function
       * @private
       * @param {jQuery} $hndl - the selected handle to move.
       * @param {Number} location - floating point between the start and end values of the slider bar.
       * @param {Function} cb - callback function to fire on completion.
       * @fires Slider#moved
       * @fires Slider#changed
       */

    }, {
      key: '_setHandlePos',
      value: function _setHandlePos($hndl, location, noInvert, cb) {
        // don't move if the slider has been disabled since its initialization
        if (this.$element.hasClass(this.options.disabledClass)) {
          return;
        }
        //might need to alter that slightly for bars that will have odd number selections.
        location = parseFloat(location); //on input change events, convert string to number...grumble.

        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
        if (location < this.options.start) {
          location = this.options.start;
        } else if (location > this.options.end) {
          location = this.options.end;
        }

        var isDbl = this.options.doubleSided;

        if (isDbl) {
          //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
          if (this.handles.index($hndl) === 0) {
            var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
            location = location >= h2Val ? h2Val - this.options.step : location;
          } else {
            var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
            location = location <= h1Val ? h1Val + this.options.step : location;
          }
        }

        //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
        //for click and drag events, it's weird due to the scale(-1, 1) css property
        if (this.options.vertical && !noInvert) {
          location = this.options.end - location;
        }

        var _this = this,
            vert = this.options.vertical,
            hOrW = vert ? 'height' : 'width',
            lOrT = vert ? 'top' : 'left',
            handleDim = $hndl[0].getBoundingClientRect()[hOrW],
            elemDim = this.$element[0].getBoundingClientRect()[hOrW],

        //percentage of bar min/max value based on click or drag point
        pctOfBar = this._pctOfBar(location),

        //number of actual pixels to shift the handle, based on the percentage obtained above
        pxToMove = (elemDim - handleDim) * pctOfBar,

        //percentage of bar to shift the handle
        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
        location = parseFloat(location.toFixed(this.options.decimal));
        // declare empty object for css adjustments, only used with 2 handled-sliders
        var css = {};

        this._setValues($hndl, location);

        // TODO update to calculate based on values set to respective inputs??
        if (isDbl) {
          var isLeftHndl = this.handles.index($hndl) === 0,

          //empty variable, will be used for min-height/width for fill bar
          dim,

          //percentage w/h of the handle compared to the slider bar
          handlePct = ~~(percent(handleDim, elemDim) * 100);
          //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
          if (isLeftHndl) {
            //left or top percentage value to apply to the fill bar.
            css[lOrT] = movement + '%';
            //calculate the new min-height/width for the fill bar.
            dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
            //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
            //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
            if (cb && typeof cb === 'function') {
              cb();
            } //this is only needed for the initialization of 2 handled sliders
          } else {
            //just caching the value of the left/bottom handle's left/top property
            var handlePos = parseFloat(this.$handle[0].style[lOrT]);
            //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
            //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
            dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
          }
          // assign the min-height/width to our css object
          css['min-' + hOrW] = dim + '%';
        }

        this.$element.one('finished.zf.animate', function () {
          /**
           * Fires when the handle is done moving.
           * @event Slider#moved
           */
          _this.$element.trigger('moved.zf.slider', [$hndl]);
        });

        //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

        Foundation.Move(moveTime, $hndl, function () {
          // adjusting the left/top property of the handle, based on the percentage calculated above
          // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,
          // fall back to next best guess.
          if (isNaN(movement)) {
            $hndl.css(lOrT, pctOfBar * 100 + '%');
          } else {
            $hndl.css(lOrT, movement + '%');
          }

          if (!_this.options.doubleSided) {
            //if single-handled, a simple method to expand the fill bar
            _this.$fill.css(hOrW, pctOfBar * 100 + '%');
          } else {
            //otherwise, use the css object we created above
            _this.$fill.css(css);
          }
        });

        /**
         * Fires when the value has not been change for a given time.
         * @event Slider#changed
         */
        clearTimeout(_this.timeout);
        _this.timeout = setTimeout(function () {
          _this.$element.trigger('changed.zf.slider', [$hndl]);
        }, _this.options.changedDelay);
      }

      /**
       * Sets the initial attribute for the slider element.
       * @function
       * @private
       * @param {Number} idx - index of the current handle/input to use.
       */

    }, {
      key: '_setInitAttr',
      value: function _setInitAttr(idx) {
        var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;
        var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');
        this.inputs.eq(idx).attr({
          'id': id,
          'max': this.options.end,
          'min': this.options.start,
          'step': this.options.step
        });
        this.inputs.eq(idx).val(initVal);
        this.handles.eq(idx).attr({
          'role': 'slider',
          'aria-controls': id,
          'aria-valuemax': this.options.end,
          'aria-valuemin': this.options.start,
          'aria-valuenow': initVal,
          'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
          'tabindex': 0
        });
      }

      /**
       * Sets the input and `aria-valuenow` values for the slider element.
       * @function
       * @private
       * @param {jQuery} $handle - the currently selected handle.
       * @param {Number} val - floating point of the new value.
       */

    }, {
      key: '_setValues',
      value: function _setValues($handle, val) {
        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
        this.inputs.eq(idx).val(val);
        $handle.attr('aria-valuenow', val);
      }

      /**
       * Handles events on the slider element.
       * Calculates the new location of the current handle.
       * If there are two handles and the bar was clicked, it determines which handle to move.
       * @function
       * @private
       * @param {Object} e - the `event` object passed from the listener.
       * @param {jQuery} $handle - the current handle to calculate for, if selected.
       * @param {Number} val - floating point number for the new value of the slider.
       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
       */

    }, {
      key: '_handleEvent',
      value: function _handleEvent(e, $handle, val) {
        var value, hasVal;
        if (!val) {
          //click or drag events
          e.preventDefault();
          var _this = this,
              vertical = this.options.vertical,
              param = vertical ? 'height' : 'width',
              direction = vertical ? 'top' : 'left',
              eventOffset = vertical ? e.pageY : e.pageX,
              halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
              barDim = this.$element[0].getBoundingClientRect()[param],
              windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();

          var elemOffset = this.$element.offset()[direction];

          // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
          // best way to guess this is simulated is if clientY == pageY
          if (e.clientY === e.pageY) {
            eventOffset = eventOffset + windowScroll;
          }
          var eventFromBar = eventOffset - elemOffset;
          var barXY;
          if (eventFromBar < 0) {
            barXY = 0;
          } else if (eventFromBar > barDim) {
            barXY = barDim;
          } else {
            barXY = eventFromBar;
          }
          var offsetPct = percent(barXY, barDim);

          value = this._value(offsetPct);

          // turn everything around for RTL, yay math!
          if (Foundation.rtl() && !this.options.vertical) {
            value = this.options.end - value;
          }

          value = _this._adjustValue(null, value);
          //boolean flag for the setHandlePos fn, specifically for vertical sliders
          hasVal = false;

          if (!$handle) {
            //figure out which handle it is, pass it to the next function.
            var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
                secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
          }
        } else {
          //change event on input
          value = this._adjustValue(null, val);
          hasVal = true;
        }

        this._setHandlePos($handle, value, hasVal);
      }

      /**
       * Adjustes value for handle in regard to step value. returns adjusted value
       * @function
       * @private
       * @param {jQuery} $handle - the selected handle.
       * @param {Number} value - value to adjust. used if $handle is falsy
       */

    }, {
      key: '_adjustValue',
      value: function _adjustValue($handle, value) {
        var val,
            step = this.options.step,
            div = parseFloat(step / 2),
            left,
            prev_val,
            next_val;
        if (!!$handle) {
          val = parseFloat($handle.attr('aria-valuenow'));
        } else {
          val = value;
        }
        left = val % step;
        prev_val = val - left;
        next_val = prev_val + step;
        if (left === 0) {
          return val;
        }
        val = val >= prev_val + div ? next_val : prev_val;
        return val;
      }

      /**
       * Adds event listeners to the slider elements.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this._eventsForHandle(this.$handle);
        if (this.handles[1]) {
          this._eventsForHandle(this.$handle2);
        }
      }

      /**
       * Adds event listeners a particular handle
       * @function
       * @private
       * @param {jQuery} $handle - the current handle to apply listeners to.
       */

    }, {
      key: '_eventsForHandle',
      value: function _eventsForHandle($handle) {
        var _this = this,
            curHandle,
            timer;

        this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
          var idx = _this.inputs.index($(this));
          _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
        });

        if (this.options.clickSelect) {
          this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
            if (_this.$element.data('dragging')) {
              return false;
            }

            if (!$(e.target).is('[data-slider-handle]')) {
              if (_this.options.doubleSided) {
                _this._handleEvent(e);
              } else {
                _this._handleEvent(e, _this.$handle);
              }
            }
          });
        }

        if (this.options.draggable) {
          this.handles.addTouch();

          var $body = $('body');
          $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
            $handle.addClass('is-dragging');
            _this.$fill.addClass('is-dragging'); //
            _this.$element.data('dragging', true);

            curHandle = $(e.currentTarget);

            $body.on('mousemove.zf.slider', function (e) {
              e.preventDefault();
              _this._handleEvent(e, curHandle);
            }).on('mouseup.zf.slider', function (e) {
              _this._handleEvent(e, curHandle);

              $handle.removeClass('is-dragging');
              _this.$fill.removeClass('is-dragging');
              _this.$element.data('dragging', false);

              $body.off('mousemove.zf.slider mouseup.zf.slider');
            });
          }
          // prevent events triggered by touch
          ).on('selectstart.zf.slider touchmove.zf.slider', function (e) {
            e.preventDefault();
          });
        }

        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
          var _$handle = $(this),
              idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
              oldValue = parseFloat(_this.inputs.eq(idx).val()),
              newValue;

          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Slider', {
            decrease: function decrease() {
              newValue = oldValue - _this.options.step;
            },
            increase: function increase() {
              newValue = oldValue + _this.options.step;
            },
            decrease_fast: function decrease_fast() {
              newValue = oldValue - _this.options.step * 10;
            },
            increase_fast: function increase_fast() {
              newValue = oldValue + _this.options.step * 10;
            },
            handled: function handled() {
              // only set handle pos when event was handled specially
              e.preventDefault();
              _this._setHandlePos(_$handle, newValue, true);
            }
          });
          /*if (newValue) { // if pressed key has special function, update value
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue);
          }*/
        });
      }

      /**
       * Destroys the slider plugin.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.handles.off('.zf.slider');
        this.inputs.off('.zf.slider');
        this.$element.off('.zf.slider');

        clearTimeout(this.timeout);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Slider;
  }();

  Slider.defaults = {
    /**
     * Minimum value for the slider scale.
     * @option
     * @type {number}
     * @default 0
     */
    start: 0,
    /**
     * Maximum value for the slider scale.
     * @option
     * @type {number}
     * @default 100
     */
    end: 100,
    /**
     * Minimum value change per change event.
     * @option
     * @type {number}
     * @default 1
     */
    step: 1,
    /**
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
     * @option
     * @type {number}
     * @default 0
     */
    initialStart: 0,
    /**
     * Value at which the right handle/second input should be set to on initialization.
     * @option
     * @type {number}
     * @default 100
     */
    initialEnd: 100,
    /**
     * Allows the input to be located outside the container and visible. Set to by the JS
     * @option
     * @type {boolean}
     * @default false
     */
    binding: false,
    /**
     * Allows the user to click/tap on the slider bar to select a value.
     * @option
     * @type {boolean}
     * @default true
     */
    clickSelect: true,
    /**
     * Set to true and use the `vertical` class to change alignment to vertical.
     * @option
     * @type {boolean}
     * @default false
     */
    vertical: false,
    /**
     * Allows the user to drag the slider handle(s) to select a value.
     * @option
     * @type {boolean}
     * @default true
     */
    draggable: true,
    /**
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option
     * @type {boolean}
     * @default false
     */
    disabled: false,
    /**
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
     * @option
     * @type {boolean}
     * @default false
     */
    doubleSided: false,
    /**
     * Potential future feature.
     */
    // steps: 100,
    /**
     * Number of decimal places the plugin should go to for floating point precision.
     * @option
     * @type {number}
     * @default 2
     */
    decimal: 2,
    /**
     * Time delay for dragged elements.
     */
    // dragDelay: 0,
    /**
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option
     * @type {number}
     * @default 200
     */
    moveTime: 200, //update this if changing the transition time in the sass
    /**
     * Class applied to disabled sliders.
     * @option
     * @type {string}
     * @default 'disabled'
     */
    disabledClass: 'disabled',
    /**
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
     * @option
     * @type {boolean}
     * @default false
     */
    invertVertical: false,
    /**
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.
     * @option
     * @type {number}
     * @default 500
     */
    changedDelay: 500,
    /**
    * Basevalue for non-linear sliders
    * @option
    * @type {number}
    * @default 5
    */
    nonLinearBase: 5,
    /**
    * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
    * @option
    * @type {string}
    * @default 'linear'
    */
    positionValueFunction: 'linear'
  };

  function percent(frac, num) {
    return frac / num;
  }
  function absPosition($handle, dir, clickPos, param) {
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
  }
  function baseLog(base, value) {
    return Math.log(value) / Math.log(base);
  }

  // Window exports
  Foundation.plugin(Slider, 'Slider');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var Sticky = function () {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    function Sticky(element, options) {
      _classCallCheck(this, Sticky);

      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */


    _createClass(Sticky, [{
      key: '_init',
      value: function _init() {
        var $parent = this.$element.parent('[data-sticky-container]'),
            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
            _this = this;

        if (!$parent.length) {
          this.wasWrapped = true;
        }
        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
        this.$container.addClass(this.options.containerClass);

        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });
        if (this.options.anchor !== '') {
          $('#' + _this.options.anchor).attr({ 'data-mutate': id });
        }

        this.scrollCount = this.options.checkEvery;
        this.isStuck = false;
        $(window).one('load.zf.sticky', function () {
          //We calculate the container height to have correct values for anchor points offset calculation.
          _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
          _this.$container.css('height', _this.containerHeight);
          _this.elemHeight = _this.containerHeight;
          if (_this.options.anchor !== '') {
            _this.$anchor = $('#' + _this.options.anchor);
          } else {
            _this._parsePoints();
          }

          _this._setSizes(function () {
            var scroll = window.pageYOffset;
            _this._calc(false, scroll);
            //Unstick the element will ensure that proper classes are set.
            if (!_this.isStuck) {
              _this._removeSticky(scroll >= _this.topPoint ? false : true);
            }
          });
          _this._events(id.split('-').reverse().join('-'));
        });
      }

      /**
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function
       * @private
       */

    }, {
      key: '_parsePoints',
      value: function _parsePoints() {
        var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
            btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
            pts = [top, btm],
            breaks = {};
        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
          var pt;
          if (typeof pts[i] === 'number') {
            pt = pts[i];
          } else {
            var place = pts[i].split(':'),
                anchor = $('#' + place[0]);

            pt = anchor.offset().top;
            if (place[1] && place[1].toLowerCase() === 'bottom') {
              pt += anchor[0].getBoundingClientRect().height;
            }
          }
          breaks[i] = pt;
        }

        this.points = breaks;
        return;
      }

      /**
       * Adds event handlers for the scrolling element.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */

    }, {
      key: '_events',
      value: function _events(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;
        if (this.isOn) {
          return;
        }
        if (this.canStick) {
          this.isOn = true;
          $(window).off(scrollListener).on(scrollListener, function (e) {
            if (_this.scrollCount === 0) {
              _this.scrollCount = _this.options.checkEvery;
              _this._setSizes(function () {
                _this._calc(false, window.pageYOffset);
              });
            } else {
              _this.scrollCount--;
              _this._calc(false, window.pageYOffset);
            }
          });
        }

        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });

        this.$element.on('mutateme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });

        if (this.$anchor) {
          this.$anchor.on('mutateme.zf.trigger', function (e, el) {
            _this._eventsHandler(id);
          });
        }
      }

      /**
       * Handler for events.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */

    }, {
      key: '_eventsHandler',
      value: function _eventsHandler(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;

        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      }

      /**
       * Removes event handlers for scroll and change events on anchor.
       * @fires Sticky#pause
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
       */

    }, {
      key: '_pauseListeners',
      value: function _pauseListeners(scrollListener) {
        this.isOn = false;
        $(window).off(scrollListener);

        /**
         * Fires when the plugin is paused due to resize event shrinking the view.
         * @event Sticky#pause
         * @private
         */
        this.$element.trigger('pause.zf.sticky');
      }

      /**
       * Called on every `scroll` event and on `_init`
       * fires functions based on booleans and cached values
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */

    }, {
      key: '_calc',
      value: function _calc(checkSizes, scroll) {
        if (checkSizes) {
          this._setSizes();
        }

        if (!this.canStick) {
          if (this.isStuck) {
            this._removeSticky(true);
          }
          return false;
        }

        if (!scroll) {
          scroll = window.pageYOffset;
        }

        if (scroll >= this.topPoint) {
          if (scroll <= this.bottomPoint) {
            if (!this.isStuck) {
              this._setSticky();
            }
          } else {
            if (this.isStuck) {
              this._removeSticky(false);
            }
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(true);
          }
        }
      }

      /**
       * Causes the $element to become stuck.
       * Adds `position: fixed;`, and helper classes.
       * @fires Sticky#stuckto
       * @function
       * @private
       */

    }, {
      key: '_setSticky',
      value: function _setSticky() {
        var _this = this,
            stickTo = this.options.stickTo,
            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
            css = {};

        css[mrgn] = this.options[mrgn] + 'em';
        css[stickTo] = 0;
        css[notStuckTo] = 'auto';
        this.isStuck = true;
        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css
        /**
         * Fires when the $element has become `position: fixed;`
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
         * @event Sticky#stuckto
         */
        ).trigger('sticky.zf.stuckto:' + stickTo);
        this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
          _this._setSizes();
        });
      }

      /**
       * Causes the $element to become unstuck.
       * Removes `position: fixed;`, and helper classes.
       * Adds other helper classes.
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom
       * @private
       */

    }, {
      key: '_removeSticky',
      value: function _removeSticky(isTop) {
        var stickTo = this.options.stickTo,
            stickToTop = stickTo === 'top',
            css = {},
            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
            mrgn = stickToTop ? 'marginTop' : 'marginBottom',
            notStuckTo = stickToTop ? 'bottom' : 'top',
            topOrBottom = isTop ? 'top' : 'bottom';

        css[mrgn] = 0;

        css['bottom'] = 'auto';
        if (isTop) {
          css['top'] = 0;
        } else {
          css['top'] = anchorPt;
        }

        this.isStuck = false;
        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css
        /**
         * Fires when the $element has become anchored.
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
         * @event Sticky#unstuckfrom
         */
        ).trigger('sticky.zf.unstuckfrom:' + topOrBottom);
      }

      /**
       * Sets the $element and $container sizes for plugin.
       * Calls `_setBreakPoints`.
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
       * @private
       */

    }, {
      key: '_setSizes',
      value: function _setSizes(cb) {
        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn);
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          }
        }
        var _this = this,
            newElemWidth = this.$container[0].getBoundingClientRect().width,
            comp = window.getComputedStyle(this.$container[0]),
            pdngl = parseInt(comp['padding-left'], 10),
            pdngr = parseInt(comp['padding-right'], 10);

        if (this.$anchor && this.$anchor.length) {
          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
        } else {
          this._parsePoints();
        }

        this.$element.css({
          'max-width': newElemWidth - pdngl - pdngr + 'px'
        });

        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
        if (this.$element.css("display") == "none") {
          newContainerHeight = 0;
        }
        this.containerHeight = newContainerHeight;
        this.$container.css({
          height: newContainerHeight
        });
        this.elemHeight = newContainerHeight;

        if (!this.isStuck) {
          if (this.$element.hasClass('is-at-bottom')) {
            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
            this.$element.css('top', anchorPt);
          }
        }

        this._setBreakPoints(newContainerHeight, function () {
          if (cb && typeof cb === 'function') {
            cb();
          }
        });
      }

      /**
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
       * @param {Function} cb - optional callback function to be called on completion.
       * @private
       */

    }, {
      key: '_setBreakPoints',
      value: function _setBreakPoints(elemHeight, cb) {
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          } else {
            return false;
          }
        }
        var mTop = emCalc(this.options.marginTop),
            mBtm = emCalc(this.options.marginBottom),
            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

        // topPoint = this.$anchor.offset().top || this.points[0],
        // bottomPoint = topPoint + this.anchorHeight || this.points[1],
        winHeight = window.innerHeight;

        if (this.options.stickTo === 'top') {
          topPoint -= mTop;
          bottomPoint -= elemHeight + mTop;
        } else if (this.options.stickTo === 'bottom') {
          topPoint -= winHeight - (elemHeight + mBtm);
          bottomPoint -= winHeight - mBtm;
        } else {
          //this would be the stickTo: both option... tricky
        }

        this.topPoint = topPoint;
        this.bottomPoint = bottomPoint;

        if (cb && typeof cb === 'function') {
          cb();
        }
      }

      /**
       * Destroys the current sticky element.
       * Resets the element to the top position first.
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._removeSticky(true);

        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
          height: '',
          top: '',
          bottom: '',
          'max-width': ''
        }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');
        if (this.$anchor && this.$anchor.length) {
          this.$anchor.off('change.zf.sticky');
        }
        $(window).off(this.scrollListener);

        if (this.wasWrapped) {
          this.$element.unwrap();
        } else {
          this.$container.removeClass(this.options.containerClass).css({
            height: ''
          });
        }
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Sticky;
  }();

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @type {string}
     * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
     * @option
     * @type {string}
     * @default 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @type {string}
     * @default ''
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @type {string}
     * @default ''
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @type {string}
     * @default ''
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @type {string}
     * @default 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @type {string}
     * @default 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @type {string}
     * @default 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @type {number}
     * @default -1
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  var Tabs = function () {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Tabs(element, options) {
      _classCallCheck(this, Tabs);

      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */


    _createClass(Tabs, [{
      key: '_init',
      value: function _init() {
        var _this2 = this;

        var _this = this;

        this.$element.attr({ 'role': 'tablist' });
        this.$tabTitles = this.$element.find('.' + this.options.linkClass);
        this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');

        this.$tabTitles.each(function () {
          var $elem = $(this),
              $link = $elem.find('a'),
              isActive = $elem.hasClass('' + _this.options.linkActiveClass),
              hash = $link[0].hash.slice(1),
              linkId = $link[0].id ? $link[0].id : hash + '-label',
              $tabContent = $('#' + hash);

          $elem.attr({ 'role': 'presentation' });

          $link.attr({
            'role': 'tab',
            'aria-controls': hash,
            'aria-selected': isActive,
            'id': linkId
          });

          $tabContent.attr({
            'role': 'tabpanel',
            'aria-hidden': !isActive,
            'aria-labelledby': linkId
          });

          if (isActive && _this.options.autoFocus) {
            $(window).load(function () {
              $('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {
                $link.focus();
              });
            });
          }
        });
        if (this.options.matchHeight) {
          var $images = this.$tabContent.find('img');

          if ($images.length) {
            Foundation.onImagesLoaded($images, this._setHeight.bind(this));
          } else {
            this._setHeight();
          }
        }

        //current context-bound function to open tabs on page load or history popstate
        this._checkDeepLink = function () {
          var anchor = window.location.hash;
          //need a hash and a relevant anchor in this tabset
          if (anchor.length) {
            var $link = _this2.$element.find('[href$="' + anchor + '"]');
            if ($link.length) {
              _this2.selectTab($(anchor), true);

              //roll up a little to show the titles
              if (_this2.options.deepLinkSmudge) {
                var offset = _this2.$element.offset();
                $('html, body').animate({ scrollTop: offset.top }, _this2.options.deepLinkSmudgeDelay);
              }

              /**
                * Fires when the zplugin has deeplinked at pageload
                * @event Tabs#deeplink
                */
              _this2.$element.trigger('deeplink.zf.tabs', [$link, $(anchor)]);
            }
          }
        };

        //use browser to open a tab, if it exists in this tabset
        if (this.options.deepLink) {
          this._checkDeepLink();
        }

        this._events();
      }

      /**
       * Adds event handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this._addKeyHandler();
        this._addClickHandler();
        this._setHeightMqHandler = null;

        if (this.options.matchHeight) {
          this._setHeightMqHandler = this._setHeight.bind(this);

          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
        }

        if (this.options.deepLink) {
          $(window).on('popstate', this._checkDeepLink);
        }
      }

      /**
       * Adds click handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_addClickHandler',
      value: function _addClickHandler() {
        var _this = this;

        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {
          e.preventDefault();
          e.stopPropagation();
          _this._handleTabChange($(this));
        });
      }

      /**
       * Adds keyboard event handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_addKeyHandler',
      value: function _addKeyHandler() {
        var _this = this;

        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
          if (e.which === 9) return;

          var $element = $(this),
              $elements = $element.parent('ul').children('li'),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              if (_this.options.wrapOnKeys) {
                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
              } else {
                $prevElement = $elements.eq(Math.max(0, i - 1));
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
              }
              return;
            }
          });

          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Tabs', {
            open: function open() {
              $element.find('[role="tab"]').focus();
              _this._handleTabChange($element);
            },
            previous: function previous() {
              $prevElement.find('[role="tab"]').focus();
              _this._handleTabChange($prevElement);
            },
            next: function next() {
              $nextElement.find('[role="tab"]').focus();
              _this._handleTabChange($nextElement);
            },
            handled: function handled() {
              e.stopPropagation();
              e.preventDefault();
            }
          });
        });
      }

      /**
       * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
       * @param {jQuery} $target - Tab to open.
       * @param {boolean} historyHandled - browser has already handled a history update
       * @fires Tabs#change
       * @function
       */

    }, {
      key: '_handleTabChange',
      value: function _handleTabChange($target, historyHandled) {

        /**
         * Check for active class on target. Collapse if exists.
         */
        if ($target.hasClass('' + this.options.linkActiveClass)) {
          if (this.options.activeCollapse) {
            this._collapseTab($target);

            /**
             * Fires when the zplugin has successfully collapsed tabs.
             * @event Tabs#collapse
             */
            this.$element.trigger('collapse.zf.tabs', [$target]);
          }
          return;
        }

        var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),
            $tabLink = $target.find('[role="tab"]'),
            hash = $tabLink[0].hash,
            $targetContent = this.$tabContent.find(hash);

        //close old tab
        this._collapseTab($oldTab);

        //open new tab
        this._openTab($target);

        //either replace or update browser history
        if (this.options.deepLink && !historyHandled) {
          var anchor = $target.find('a').attr('href');

          if (this.options.updateHistory) {
            history.pushState({}, '', anchor);
          } else {
            history.replaceState({}, '', anchor);
          }
        }

        /**
         * Fires when the plugin has successfully changed tabs.
         * @event Tabs#change
         */
        this.$element.trigger('change.zf.tabs', [$target, $targetContent]);

        //fire to children a mutation event
        $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
      }

      /**
       * Opens the tab `$targetContent` defined by `$target`.
       * @param {jQuery} $target - Tab to Open.
       * @function
       */

    }, {
      key: '_openTab',
      value: function _openTab($target) {
        var $tabLink = $target.find('[role="tab"]'),
            hash = $tabLink[0].hash,
            $targetContent = this.$tabContent.find(hash);

        $target.addClass('' + this.options.linkActiveClass);

        $tabLink.attr({ 'aria-selected': 'true' });

        $targetContent.addClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'false' });
      }

      /**
       * Collapses `$targetContent` defined by `$target`.
       * @param {jQuery} $target - Tab to Open.
       * @function
       */

    }, {
      key: '_collapseTab',
      value: function _collapseTab($target) {
        var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role="tab"]').attr({ 'aria-selected': 'false' });

        $('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });
      }

      /**
       * Public method for selecting a content pane to display.
       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
       * @param {boolean} historyHandled - browser has already handled a history update
       * @function
       */

    }, {
      key: 'selectTab',
      value: function selectTab(elem, historyHandled) {
        var idStr;

        if ((typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) === 'object') {
          idStr = elem[0].id;
        } else {
          idStr = elem;
        }

        if (idStr.indexOf('#') < 0) {
          idStr = '#' + idStr;
        }

        var $target = this.$tabTitles.find('[href$="' + idStr + '"]').parent('.' + this.options.linkClass);

        this._handleTabChange($target, historyHandled);
      }
    }, {
      key: '_setHeight',

      /**
       * Sets the height of each panel to the height of the tallest panel.
       * If enabled in options, gets called on media query change.
       * If loading content via external source, can be called directly or with _reflow.
       * If enabled with `data-match-height="true"`, tabs sets to equal height
       * @function
       * @private
       */
      value: function _setHeight() {
        var max = 0,
            _this = this; // Lock down the `this` value for the root tabs object

        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {

          var panel = $(this),
              isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child

          if (!isActive) {
            panel.css({ 'visibility': 'hidden', 'display': 'block' });
          }

          var temp = this.getBoundingClientRect().height;

          if (!isActive) {
            panel.css({
              'visibility': '',
              'display': ''
            });
          }

          max = temp > max ? temp : max;
        }).css('height', max + 'px');
      }

      /**
       * Destroys an instance of an tabs.
       * @fires Tabs#destroyed
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();

        if (this.options.matchHeight) {
          if (this._setHeightMqHandler != null) {
            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
          }
        }

        if (this.options.deepLink) {
          $(window).off('popstate', this._checkDeepLink);
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Tabs;
  }();

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of pane specified by hash anchor
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,

    /**
     * Adjust the deep link scroll to make sure the top of the tab panel is visible
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinkSmudge: false,

    /**
     * Animation time (ms) for the deep link adjustment
     * @option
     * @type {number}
     * @default 300
     */
    deepLinkSmudgeDelay: 300,

    /**
     * Update the browser history with the open tab
     * @option
     * @type {boolean}
     * @default false
     */
    updateHistory: false,

    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * Not recommended if more than one tab panel per page.
     * @option
     * @type {boolean}
     * @default false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @type {boolean}
     * @default true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @type {boolean}
     * @default false
     */
    matchHeight: false,

    /**
     * Allows active tabs to collapse when clicked.
     * @option
     * @type {boolean}
     * @default false
     */
    activeCollapse: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @type {string}
     * @default 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the active `li` in tab link list.
     * @option
     * @type {string}
     * @default 'is-active'
     */
    linkActiveClass: 'is-active',

    /**
     * Class applied to the content containers.
     * @option
     * @type {string}
     * @default 'tabs-panel'
     */
    panelClass: 'tabs-panel',

    /**
     * Class applied to the active content container.
     * @option
     * @type {string}
     * @default 'is-active'
     */
    panelActiveClass: 'is-active'
  };

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  var Toggler = function () {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Toggler(element, options) {
      _classCallCheck(this, Toggler);

      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */


    _createClass(Toggler, [{
      key: '_init',
      value: function _init() {
        var input;
        // Parse animation classes if they were set
        if (this.options.animate) {
          input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }
        // Otherwise, parse toggle class
        else {
            input = this.$element.data('toggler');
            // Allow for a . at the beginning of the string
            this.className = input[0] === '.' ? input.slice(1) : input;
          }

        // Add ARIA attributes to triggers
        var id = this.$element[0].id;
        $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
        // If the target is hidden, add aria-hidden
        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
      }

      /**
       * Initializes events for the toggle trigger.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
      }

      /**
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function
       * @fires Toggler#on
       * @fires Toggler#off
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
      }
    }, {
      key: '_toggleClass',
      value: function _toggleClass() {
        this.$element.toggleClass(this.className);

        var isOn = this.$element.hasClass(this.className);
        if (isOn) {
          /**
           * Fires if the target element has the class after a toggle.
           * @event Toggler#on
           */
          this.$element.trigger('on.zf.toggler');
        } else {
          /**
           * Fires if the target element does not have the class after a toggle.
           * @event Toggler#off
           */
          this.$element.trigger('off.zf.toggler');
        }

        this._updateARIA(isOn);
        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
      }
    }, {
      key: '_toggleAnimate',
      value: function _toggleAnimate() {
        var _this = this;

        if (this.$element.is(':hidden')) {
          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
            _this._updateARIA(true);
            this.trigger('on.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        } else {
          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
            _this._updateARIA(false);
            this.trigger('off.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        }
      }
    }, {
      key: '_updateARIA',
      value: function _updateARIA(isOn) {
        this.$element.attr('aria-expanded', isOn ? true : false);
      }

      /**
       * Destroys the instance of Toggler on the element.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.toggler');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Toggler;
  }();

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Tooltip module.
   * @module foundation.tooltip
   * @requires foundation.util.box
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   */

  var Tooltip = function () {
    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    function Tooltip(element, options) {
      _classCallCheck(this, Tooltip);

      this.$element = element;
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);

      this.isActive = false;
      this.isClick = false;
      this._init();

      Foundation.registerPlugin(this, 'Tooltip');
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */


    _createClass(Tooltip, [{
      key: '_init',
      value: function _init() {
        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');

        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);
        this.options.tipText = this.options.tipText || this.$element.attr('title');
        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);

        if (this.options.allowHtml) {
          this.template.appendTo(document.body).html(this.options.tipText).hide();
        } else {
          this.template.appendTo(document.body).text(this.options.tipText).hide();
        }

        this.$element.attr({
          'title': '',
          'aria-describedby': elemId,
          'data-yeti-box': elemId,
          'data-toggle': elemId,
          'data-resize': elemId
        }).addClass(this.options.triggerClass);

        //helper variables to track movement on collisions
        this.usedPositions = [];
        this.counter = 4;
        this.classChanged = false;

        this._events();
      }

      /**
       * Grabs the current positioning class, if present, and returns the value or an empty string.
       * @private
       */

    }, {
      key: '_getPositionClass',
      value: function _getPositionClass(element) {
        if (!element) {
          return '';
        }
        // var position = element.attr('class').match(/top|left|right/g);
        var position = element[0].className.match(/\b(top|left|right)\b/g);
        position = position ? position[0] : '';
        return position;
      }
    }, {
      key: '_buildTemplate',

      /**
       * builds the tooltip element, adds attributes, and returns the template.
       * @private
       */
      value: function _buildTemplate(id) {
        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
        var $template = $('<div></div>').addClass(templateClasses).attr({
          'role': 'tooltip',
          'aria-hidden': true,
          'data-is-active': false,
          'data-is-focus': false,
          'id': id
        });
        return $template;
      }

      /**
       * Function that gets called if a collision event is detected.
       * @param {String} position - positioning class to try
       * @private
       */

    }, {
      key: '_reposition',
      value: function _reposition(position) {
        this.usedPositions.push(position ? position : 'bottom');

        //default, try switching to opposite side
        if (!position && this.usedPositions.indexOf('top') < 0) {
          this.template.addClass('top');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
          this.template.removeClass(position).addClass('right');
        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
          this.template.removeClass(position).addClass('left');
        }

        //if default change didn't work, try bottom or left first
        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.template.addClass('left');
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
            this.template.removeClass(position).addClass('left');
          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.template.removeClass(position);
          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
            this.template.removeClass(position);
          }
          //if nothing cleared, set to bottom
          else {
              this.template.removeClass(position);
            }
        this.classChanged = true;
        this.counter--;
      }

      /**
       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
       * if the tooltip is larger than the screen width, default to full width - any user selected margin
       * @private
       */

    }, {
      key: '_setPosition',
      value: function _setPosition() {
        var position = this._getPositionClass(this.template),
            $tipDims = Foundation.Box.GetDimensions(this.template),
            $anchorDims = Foundation.Box.GetDimensions(this.$element),
            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
            param = direction === 'top' ? 'height' : 'width',
            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,
            _this = this;

        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,
            'height': 'auto'
          });
          return false;
        }

        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));

        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
          this._reposition(position);
          this._setPosition();
        }
      }

      /**
       * reveals the tooltip, and fires an event to close any other open tooltips on the page
       * @fires Tooltip#closeme
       * @fires Tooltip#show
       * @function
       */

    }, {
      key: 'show',
      value: function show() {
        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.is(this.options.showOn)) {
          // console.error('The screen is too small to display this tooltip');
          return false;
        }

        var _this = this;
        this.template.css('visibility', 'hidden').show();
        this._setPosition();

        /**
         * Fires to close all other open tooltips on the page
         * @event Closeme#tooltip
         */
        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

        this.template.attr({
          'data-is-active': true,
          'aria-hidden': false
        });
        _this.isActive = true;
        // console.log(this.template);
        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
          //maybe do stuff?
        });
        /**
         * Fires when the tooltip is shown
         * @event Tooltip#show
         */
        this.$element.trigger('show.zf.tooltip');
      }

      /**
       * Hides the current tooltip, and resets the positioning class if it was changed due to collision
       * @fires Tooltip#hide
       * @function
       */

    }, {
      key: 'hide',
      value: function hide() {
        // console.log('hiding', this.$element.data('yeti-box'));
        var _this = this;
        this.template.stop().attr({
          'aria-hidden': true,
          'data-is-active': false
        }).fadeOut(this.options.fadeOutDuration, function () {
          _this.isActive = false;
          _this.isClick = false;
          if (_this.classChanged) {
            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);

            _this.usedPositions = [];
            _this.counter = 4;
            _this.classChanged = false;
          }
        });
        /**
         * fires when the tooltip is hidden
         * @event Tooltip#hide
         */
        this.$element.trigger('hide.zf.tooltip');
      }

      /**
       * adds event listeners for the tooltip and its anchor
       * TODO combine some of the listeners like focus and mouseenter, etc.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        var $template = this.template;
        var isFocus = false;

        if (!this.options.disableHover) {

          this.$element.on('mouseenter.zf.tooltip', function (e) {
            if (!_this.isActive) {
              _this.timeout = setTimeout(function () {
                _this.show();
              }, _this.options.hoverDelay);
            }
          }).on('mouseleave.zf.tooltip', function (e) {
            clearTimeout(_this.timeout);
            if (!isFocus || _this.isClick && !_this.options.clickOpen) {
              _this.hide();
            }
          });
        }

        if (this.options.clickOpen) {
          this.$element.on('mousedown.zf.tooltip', function (e) {
            e.stopImmediatePropagation();
            if (_this.isClick) {
              //_this.hide();
              // _this.isClick = false;
            } else {
              _this.isClick = true;
              if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
                _this.show();
              }
            }
          });
        } else {
          this.$element.on('mousedown.zf.tooltip', function (e) {
            e.stopImmediatePropagation();
            _this.isClick = true;
          });
        }

        if (!this.options.disableForTouch) {
          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
            _this.isActive ? _this.hide() : _this.show();
          });
        }

        this.$element.on({
          // 'toggle.zf.trigger': this.toggle.bind(this),
          // 'close.zf.trigger': this.hide.bind(this)
          'close.zf.trigger': this.hide.bind(this)
        });

        this.$element.on('focus.zf.tooltip', function (e) {
          isFocus = true;
          if (_this.isClick) {
            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
            // a real focus, otherwise on hover and come back we get bad behavior
            if (!_this.options.clickOpen) {
              isFocus = false;
            }
            return false;
          } else {
            _this.show();
          }
        }).on('focusout.zf.tooltip', function (e) {
          isFocus = false;
          _this.isClick = false;
          _this.hide();
        }).on('resizeme.zf.trigger', function () {
          if (_this.isActive) {
            _this._setPosition();
          }
        });
      }

      /**
       * adds a toggle method, in addition to the static show() & hide() functions
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isActive) {
          this.hide();
        } else {
          this.show();
        }
      }

      /**
       * Destroys an instance of tooltip, removes template element from the view.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');

        this.template.remove();

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Tooltip;
  }();

  Tooltip.defaults = {
    disableForTouch: false,
    /**
     * Time, in ms, before a tooltip should open on hover.
     * @option
     * @type {number}
     * @default 200
     */
    hoverDelay: 200,
    /**
     * Time, in ms, a tooltip should take to fade into view.
     * @option
     * @type {number}
     * @default 150
     */
    fadeInDuration: 150,
    /**
     * Time, in ms, a tooltip should take to fade out of view.
     * @option
     * @type {number}
     * @default 150
     */
    fadeOutDuration: 150,
    /**
     * Disables hover events from opening the tooltip if set to true
     * @option
     * @type {boolean}
     * @default false
     */
    disableHover: false,
    /**
     * Optional addtional classes to apply to the tooltip template on init.
     * @option
     * @type {string}
     * @default ''
     */
    templateClasses: '',
    /**
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
     * @option
     * @type {string}
     * @default 'tooltip'
     */
    tooltipClass: 'tooltip',
    /**
     * Class applied to the tooltip anchor element.
     * @option
     * @type {string}
     * @default 'has-tip'
     */
    triggerClass: 'has-tip',
    /**
     * Minimum breakpoint size at which to open the tooltip.
     * @option
     * @type {string}
     * @default 'small'
     */
    showOn: 'small',
    /**
     * Custom template to be used to generate markup for tooltip.
     * @option
     * @type {string}
     * @default ''
     */
    template: '',
    /**
     * Text displayed in the tooltip template on open.
     * @option
     * @type {string}
     * @default ''
     */
    tipText: '',
    touchCloseText: 'Tap to close.',
    /**
     * Allows the tooltip to remain open if triggered with a click or touch event.
     * @option
     * @type {boolean}
     * @default true
     */
    clickOpen: true,
    /**
     * Additional positioning classes, set by the JS
     * @option
     * @type {string}
     * @default ''
     */
    positionClass: '',
    /**
     * Distance, in pixels, the template should push away from the anchor on the Y axis.
     * @option
     * @type {number}
     * @default 10
     */
    vOffset: 10,
    /**
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
     * @option
     * @type {number}
     * @default 12
     */
    hOffset: 12,
    /**
    * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
    * allowing HTML may open yourself up to XSS attacks.
    * @option
    * @type {boolean}
    * @default false
    */
    allowHtml: false
  };

  /**
   * TODO utilize resize event trigger
   */

  // Window exports
  Foundation.plugin(Tooltip, 'Tooltip');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveAccordionTabs module.
   * @module foundation.responsiveAccordionTabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.motion
   * @requires foundation.accordion
   * @requires foundation.tabs
   */

  var ResponsiveAccordionTabs = function () {
    /**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveAccordionTabs(element, options) {
      _classCallCheck(this, ResponsiveAccordionTabs);

      this.$element = $(element);
      this.options = $.extend({}, this.$element.data(), options);
      this.rules = this.$element.data('responsive-accordion-tabs');
      this.currentMq = null;
      this.currentPlugin = null;
      if (!this.$element.attr('id')) {
        this.$element.attr('id', Foundation.GetYoDigits(6, 'responsiveaccordiontabs'));
      };

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveAccordionTabs');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */


    _createClass(ResponsiveAccordionTabs, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        this._getAllOptions();

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
      }
    }, {
      key: '_getAllOptions',
      value: function _getAllOptions() {
        //get all defaults and options
        var _this = this;
        _this.allOptions = {};
        for (var key in MenuPlugins) {
          if (MenuPlugins.hasOwnProperty(key)) {
            var obj = MenuPlugins[key];
            try {
              var dummyPlugin = $('<ul></ul>');
              var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);
              for (var keyKey in tmpPlugin.options) {
                if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                  var objObj = tmpPlugin.options[keyKey];
                  _this.allOptions[keyKey] = objObj;
                }
              }
              tmpPlugin.destroy();
            } catch (e) {}
          }
        }
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */

    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) {
          //don't know why but on nested elements data zfPlugin get's lost
          if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
          this.currentPlugin.destroy();
        }
        this._handleMarkup(this.rules[matchedMq].cssClass);
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
        this.storezfData = this.currentPlugin.$element.data('zfPlugin');
      }
    }, {
      key: '_handleMarkup',
      value: function _handleMarkup(toSet) {
        var _this = this,
            fromString = 'accordion';
        var $panels = $('[data-tabs-content=' + this.$element.attr('id') + ']');
        if ($panels.length) fromString = 'tabs';
        if (fromString === toSet) {
          return;
        };

        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';

        this.$element.removeAttr('role');
        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

        if (fromString === 'tabs') {
          $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
          $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
        } else {
          $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
        };

        $panels.css({ display: '', visibility: '' });
        $liHeads.css({ display: '', visibility: '' });
        if (toSet === 'accordion') {
          $panels.each(function (key, value) {
            $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });
            $('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').remove();
            $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
            $liHeadsA.addClass('accordion-title');
          });
        } else if (toSet === 'tabs') {
          var $tabsContent = $('[data-tabs-content=' + _this.$element.attr('id') + ']');
          var $placeholder = $('#tabs-placeholder-' + _this.$element.attr('id'));
          if ($placeholder.length) {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
            $placeholder.remove();
          } else {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
          };
          $panels.each(function (key, value) {
            var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);
            var hash = $liHeadsA.get(key).hash.slice(1);
            var id = $(value).attr('id') || Foundation.GetYoDigits(6, 'accordion');
            if (hash !== id) {
              if (hash !== '') {
                $(value).attr('id', hash);
              } else {
                hash = id;
                $(value).attr('id', hash);
                $($liHeadsA.get(key)).attr('href', $($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
              };
            };
            var isActive = $($liHeads.get(key)).hasClass('is-active');
            if (isActive) {
              tempValue.addClass('is-active');
            };
          });
          $liHeads.addClass(tabsTitle);
        };
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        if (this.currentPlugin) this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveAccordionTabs');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveAccordionTabs;
  }();

  ResponsiveAccordionTabs.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    tabs: {
      cssClass: 'tabs',
      plugin: Foundation._plugins.tabs || null
    },
    accordion: {
      cssClass: 'accordion',
      plugin: Foundation._plugins.accordion || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');
}(jQuery);
"use strict";

jQuery(document).ready(function ($) {

     // Initialize Foundation
     jQuery(document).foundation();

     console.log("hello");
});
'use strict';

jQuery(document).ready(function ($) {
     // Add slick.js to anywhere you put a class of slick
     $('.slick').slick({
          dots: true,
          adaptiveHeight: true,
          infinite: true,
          speed: 500,
          fade: true,
          cssEase: 'linear'
     }).foundation();
});
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
};!function (e, t) {
  "object" === ("undefined" == typeof module ? "undefined" : _typeof(module)) && "object" === _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {
    if (!e.document) throw new Error("jQuery requires a window with a document");return t(e);
  } : t(e);
}("undefined" != typeof window ? window : void 0, function (e, t) {
  function i(e) {
    var t = !!e && "length" in e && e.length,
        i = se.type(e);return "function" !== i && !se.isWindow(e) && ("array" === i || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
  }function n(e, t, i) {
    if (se.isFunction(t)) return se.grep(e, function (e, n) {
      return !!t.call(e, n, e) !== i;
    });if (t.nodeType) return se.grep(e, function (e) {
      return e === t !== i;
    });if ("string" == typeof t) {
      if (ve.test(t)) return se.filter(t, e, i);t = se.filter(t, e);
    }return se.grep(e, function (e) {
      return J.call(t, e) > -1 !== i;
    });
  }function o(e, t) {
    for (; (e = e[t]) && 1 !== e.nodeType;) {}return e;
  }function s(e) {
    var t = {};return se.each(e.match(ke) || [], function (e, i) {
      t[i] = !0;
    }), t;
  }function r() {
    X.removeEventListener("DOMContentLoaded", r), e.removeEventListener("load", r), se.ready();
  }function a() {
    this.expando = se.expando + a.uid++;
  }function l(e, t, i) {
    var n;if (void 0 === i && 1 === e.nodeType) if (n = "data-" + t.replace(Fe, "-$&").toLowerCase(), i = e.getAttribute(n), "string" == typeof i) {
      try {
        i = "true" === i || "false" !== i && ("null" === i ? null : +i + "" === i ? +i : _e.test(i) ? se.parseJSON(i) : i);
      } catch (e) {}Se.set(e, t, i);
    } else i = void 0;return i;
  }function d(e, t, i, n) {
    var o,
        s = 1,
        r = 20,
        a = n ? function () {
      return n.cur();
    } : function () {
      return se.css(e, t, "");
    },
        l = a(),
        d = i && i[3] || (se.cssNumber[t] ? "" : "px"),
        u = (se.cssNumber[t] || "px" !== d && +l) && Ae.exec(se.css(e, t));if (u && u[3] !== d) {
      d = d || u[3], i = i || [], u = +l || 1;do {
        s = s || ".5", u /= s, se.style(e, t, u + d);
      } while (s !== (s = a() / l) && 1 !== s && --r);
    }return i && (u = +u || +l || 0, o = i[1] ? u + (i[1] + 1) * i[2] : +i[2], n && (n.unit = d, n.start = u, n.end = o)), o;
  }function u(e, t) {
    var i = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [];return void 0 === t || t && se.nodeName(e, t) ? se.merge([e], i) : i;
  }function c(e, t) {
    for (var i = 0, n = e.length; i < n; i++) {
      Te.set(e[i], "globalEval", !t || Te.get(t[i], "globalEval"));
    }
  }function h(e, t, i, n, o) {
    for (var s, r, a, l, d, h, f = t.createDocumentFragment(), p = [], v = 0, m = e.length; v < m; v++) {
      if (s = e[v], s || 0 === s) if ("object" === se.type(s)) se.merge(p, s.nodeType ? [s] : s);else if (je.test(s)) {
        for (r = r || f.appendChild(t.createElement("div")), a = (De.exec(s) || ["", ""])[1].toLowerCase(), l = Me[a] || Me._default, r.innerHTML = l[1] + se.htmlPrefilter(s) + l[2], h = l[0]; h--;) {
          r = r.lastChild;
        }se.merge(p, r.childNodes), r = f.firstChild, r.textContent = "";
      } else p.push(t.createTextNode(s));
    }for (f.textContent = "", v = 0; s = p[v++];) {
      if (n && se.inArray(s, n) > -1) o && o.push(s);else if (d = se.contains(s.ownerDocument, s), r = u(f.appendChild(s), "script"), d && c(r), i) for (h = 0; s = r[h++];) {
        He.test(s.type || "") && i.push(s);
      }
    }return f;
  }function f() {
    return !0;
  }function p() {
    return !1;
  }function v() {
    try {
      return X.activeElement;
    } catch (e) {}
  }function m(e, t, i, n, o, s) {
    var r, a;if ("object" === ("undefined" == typeof t ? "undefined" : _typeof(t))) {
      "string" != typeof i && (n = n || i, i = void 0);for (a in t) {
        m(e, a, i, n, t[a], s);
      }return e;
    }if (null == n && null == o ? (o = i, n = i = void 0) : null == o && ("string" == typeof i ? (o = n, n = void 0) : (o = n, n = i, i = void 0)), o === !1) o = p;else if (!o) return e;return 1 === s && (r = o, o = function o(e) {
      return se().off(e), r.apply(this, arguments);
    }, o.guid = r.guid || (r.guid = se.guid++)), e.each(function () {
      se.event.add(this, t, o, n, i);
    });
  }function g(e, t) {
    return se.nodeName(e, "table") && se.nodeName(11 !== t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e;
  }function y(e) {
    return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
  }function w(e) {
    var t = We.exec(e.type);return t ? e.type = t[1] : e.removeAttribute("type"), e;
  }function b(e, t) {
    var i, n, o, s, r, a, l, d;if (1 === t.nodeType) {
      if (Te.hasData(e) && (s = Te.access(e), r = Te.set(t, s), d = s.events)) {
        delete r.handle, r.events = {};for (o in d) {
          for (i = 0, n = d[o].length; i < n; i++) {
            se.event.add(t, o, d[o][i]);
          }
        }
      }Se.hasData(e) && (a = Se.access(e), l = se.extend({}, a), Se.set(t, l));
    }
  }function k(e, t) {
    var i = t.nodeName.toLowerCase();"input" === i && Pe.test(e.type) ? t.checked = e.checked : "input" !== i && "textarea" !== i || (t.defaultValue = e.defaultValue);
  }function C(e, t, i, n) {
    t = V.apply([], t);var o,
        s,
        r,
        a,
        l,
        d,
        c = 0,
        f = e.length,
        p = f - 1,
        v = t[0],
        m = se.isFunction(v);if (m || f > 1 && "string" == typeof v && !ne.checkClone && Be.test(v)) return e.each(function (o) {
      var s = e.eq(o);m && (t[0] = v.call(this, o, s.html())), C(s, t, i, n);
    });if (f && (o = h(t, e[0].ownerDocument, !1, e, n), s = o.firstChild, 1 === o.childNodes.length && (o = s), s || n)) {
      for (r = se.map(u(o, "script"), y), a = r.length; c < f; c++) {
        l = o, c !== p && (l = se.clone(l, !0, !0), a && se.merge(r, u(l, "script"))), i.call(e[c], l, c);
      }if (a) for (d = r[r.length - 1].ownerDocument, se.map(r, w), c = 0; c < a; c++) {
        l = r[c], He.test(l.type || "") && !Te.access(l, "globalEval") && se.contains(d, l) && (l.src ? se._evalUrl && se._evalUrl(l.src) : se.globalEval(l.textContent.replace(Ye, "")));
      }
    }return e;
  }function $(e, t, i) {
    for (var n, o = t ? se.filter(t, e) : e, s = 0; null != (n = o[s]); s++) {
      i || 1 !== n.nodeType || se.cleanData(u(n)), n.parentNode && (i && se.contains(n.ownerDocument, n) && c(u(n, "script")), n.parentNode.removeChild(n));
    }return e;
  }function x(e, t) {
    var i = se(t.createElement(e)).appendTo(t.body),
        n = se.css(i[0], "display");return i.detach(), n;
  }function T(e) {
    var t = X,
        i = Ue[e];return i || (i = x(e, t), "none" !== i && i || (Qe = (Qe || se("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement), t = Qe[0].contentDocument, t.write(), t.close(), i = x(e, t), Qe.detach()), Ue[e] = i), i;
  }function S(e, t, i) {
    var n,
        o,
        s,
        r,
        a = e.style;return i = i || Ge(e), r = i ? i.getPropertyValue(t) || i[t] : void 0, "" !== r && void 0 !== r || se.contains(e.ownerDocument, e) || (r = se.style(e, t)), i && !ne.pixelMarginRight() && Xe.test(r) && Ke.test(t) && (n = a.width, o = a.minWidth, s = a.maxWidth, a.minWidth = a.maxWidth = a.width = r, r = i.width, a.width = n, a.minWidth = o, a.maxWidth = s), void 0 !== r ? r + "" : r;
  }function _(e, t) {
    return { get: function get() {
        return e() ? void delete this.get : (this.get = t).apply(this, arguments);
      } };
  }function F(e) {
    if (e in nt) return e;for (var t = e[0].toUpperCase() + e.slice(1), i = it.length; i--;) {
      if (e = it[i] + t, e in nt) return e;
    }
  }function z(e, t, i) {
    var n = Ae.exec(t);return n ? Math.max(0, n[2] - (i || 0)) + (n[3] || "px") : t;
  }function A(e, t, i, n, o) {
    for (var s = i === (n ? "border" : "content") ? 4 : "width" === t ? 1 : 0, r = 0; s < 4; s += 2) {
      "margin" === i && (r += se.css(e, i + Oe[s], !0, o)), n ? ("content" === i && (r -= se.css(e, "padding" + Oe[s], !0, o)), "margin" !== i && (r -= se.css(e, "border" + Oe[s] + "Width", !0, o))) : (r += se.css(e, "padding" + Oe[s], !0, o), "padding" !== i && (r += se.css(e, "border" + Oe[s] + "Width", !0, o)));
    }return r;
  }function O(e, t, i) {
    var n = !0,
        o = "width" === t ? e.offsetWidth : e.offsetHeight,
        s = Ge(e),
        r = "border-box" === se.css(e, "boxSizing", !1, s);if (o <= 0 || null == o) {
      if (o = S(e, t, s), (o < 0 || null == o) && (o = e.style[t]), Xe.test(o)) return o;n = r && (ne.boxSizingReliable() || o === e.style[t]), o = parseFloat(o) || 0;
    }return o + A(e, t, i || (r ? "border" : "content"), n, s) + "px";
  }function E(e, t) {
    for (var i, n, o, s = [], r = 0, a = e.length; r < a; r++) {
      n = e[r], n.style && (s[r] = Te.get(n, "olddisplay"), i = n.style.display, t ? (s[r] || "none" !== i || (n.style.display = ""), "" === n.style.display && Ee(n) && (s[r] = Te.access(n, "olddisplay", T(n.nodeName)))) : (o = Ee(n), "none" === i && o || Te.set(n, "olddisplay", o ? i : se.css(n, "display"))));
    }for (r = 0; r < a; r++) {
      n = e[r], n.style && (t && "none" !== n.style.display && "" !== n.style.display || (n.style.display = t ? s[r] || "" : "none"));
    }return e;
  }function P(e, t, i, n, o) {
    return new P.prototype.init(e, t, i, n, o);
  }function D() {
    return e.setTimeout(function () {
      ot = void 0;
    }), ot = se.now();
  }function H(e, t) {
    var i,
        n = 0,
        o = { height: e };for (t = t ? 1 : 0; n < 4; n += 2 - t) {
      i = Oe[n], o["margin" + i] = o["padding" + i] = e;
    }return t && (o.opacity = o.width = e), o;
  }function M(e, t, i) {
    for (var n, o = (L.tweeners[t] || []).concat(L.tweeners["*"]), s = 0, r = o.length; s < r; s++) {
      if (n = o[s].call(i, t, e)) return n;
    }
  }function j(e, t, i) {
    var n,
        o,
        s,
        r,
        a,
        l,
        d,
        u,
        c = this,
        h = {},
        f = e.style,
        p = e.nodeType && Ee(e),
        v = Te.get(e, "fxshow");i.queue || (a = se._queueHooks(e, "fx"), null == a.unqueued && (a.unqueued = 0, l = a.empty.fire, a.empty.fire = function () {
      a.unqueued || l();
    }), a.unqueued++, c.always(function () {
      c.always(function () {
        a.unqueued--, se.queue(e, "fx").length || a.empty.fire();
      });
    })), 1 === e.nodeType && ("height" in t || "width" in t) && (i.overflow = [f.overflow, f.overflowX, f.overflowY], d = se.css(e, "display"), u = "none" === d ? Te.get(e, "olddisplay") || T(e.nodeName) : d, "inline" === u && "none" === se.css(e, "float") && (f.display = "inline-block")), i.overflow && (f.overflow = "hidden", c.always(function () {
      f.overflow = i.overflow[0], f.overflowX = i.overflow[1], f.overflowY = i.overflow[2];
    }));for (n in t) {
      if (o = t[n], rt.exec(o)) {
        if (delete t[n], s = s || "toggle" === o, o === (p ? "hide" : "show")) {
          if ("show" !== o || !v || void 0 === v[n]) continue;p = !0;
        }h[n] = v && v[n] || se.style(e, n);
      } else d = void 0;
    }if (se.isEmptyObject(h)) "inline" === ("none" === d ? T(e.nodeName) : d) && (f.display = d);else {
      v ? "hidden" in v && (p = v.hidden) : v = Te.access(e, "fxshow", {}), s && (v.hidden = !p), p ? se(e).show() : c.done(function () {
        se(e).hide();
      }), c.done(function () {
        var t;Te.remove(e, "fxshow");for (t in h) {
          se.style(e, t, h[t]);
        }
      });for (n in h) {
        r = M(p ? v[n] : 0, n, c), n in v || (v[n] = r.start, p && (r.end = r.start, r.start = "width" === n || "height" === n ? 1 : 0));
      }
    }
  }function q(e, t) {
    var i, n, o, s, r;for (i in e) {
      if (n = se.camelCase(i), o = t[n], s = e[i], se.isArray(s) && (o = s[1], s = e[i] = s[0]), i !== n && (e[n] = s, delete e[i]), r = se.cssHooks[n], r && "expand" in r) {
        s = r.expand(s), delete e[n];for (i in s) {
          i in e || (e[i] = s[i], t[i] = o);
        }
      } else t[n] = o;
    }
  }function L(e, t, i) {
    var n,
        o,
        s = 0,
        r = L.prefilters.length,
        a = se.Deferred().always(function () {
      delete l.elem;
    }),
        l = function l() {
      if (o) return !1;for (var t = ot || D(), i = Math.max(0, d.startTime + d.duration - t), n = i / d.duration || 0, s = 1 - n, r = 0, l = d.tweens.length; r < l; r++) {
        d.tweens[r].run(s);
      }return a.notifyWith(e, [d, s, i]), s < 1 && l ? i : (a.resolveWith(e, [d]), !1);
    },
        d = a.promise({ elem: e, props: se.extend({}, t), opts: se.extend(!0, { specialEasing: {}, easing: se.easing._default }, i), originalProperties: t, originalOptions: i, startTime: ot || D(), duration: i.duration, tweens: [], createTween: function createTween(t, i) {
        var n = se.Tween(e, d.opts, t, i, d.opts.specialEasing[t] || d.opts.easing);return d.tweens.push(n), n;
      }, stop: function stop(t) {
        var i = 0,
            n = t ? d.tweens.length : 0;if (o) return this;for (o = !0; i < n; i++) {
          d.tweens[i].run(1);
        }return t ? (a.notifyWith(e, [d, 1, 0]), a.resolveWith(e, [d, t])) : a.rejectWith(e, [d, t]), this;
      } }),
        u = d.props;for (q(u, d.opts.specialEasing); s < r; s++) {
      if (n = L.prefilters[s].call(d, e, u, d.opts)) return se.isFunction(n.stop) && (se._queueHooks(d.elem, d.opts.queue).stop = se.proxy(n.stop, n)), n;
    }return se.map(u, M, d), se.isFunction(d.opts.start) && d.opts.start.call(e, d), se.fx.timer(se.extend(l, { elem: e, anim: d, queue: d.opts.queue })), d.progress(d.opts.progress).done(d.opts.done, d.opts.complete).fail(d.opts.fail).always(d.opts.always);
  }function R(e) {
    return e.getAttribute && e.getAttribute("class") || "";
  }function N(e) {
    return function (t, i) {
      "string" != typeof t && (i = t, t = "*");var n,
          o = 0,
          s = t.toLowerCase().match(ke) || [];if (se.isFunction(i)) for (; n = s[o++];) {
        "+" === n[0] ? (n = n.slice(1) || "*", (e[n] = e[n] || []).unshift(i)) : (e[n] = e[n] || []).push(i);
      }
    };
  }function I(e, t, i, n) {
    function o(a) {
      var l;return s[a] = !0, se.each(e[a] || [], function (e, a) {
        var d = a(t, i, n);return "string" != typeof d || r || s[d] ? r ? !(l = d) : void 0 : (t.dataTypes.unshift(d), o(d), !1);
      }), l;
    }var s = {},
        r = e === St;return o(t.dataTypes[0]) || !s["*"] && o("*");
  }function B(e, t) {
    var i,
        n,
        o = se.ajaxSettings.flatOptions || {};for (i in t) {
      void 0 !== t[i] && ((o[i] ? e : n || (n = {}))[i] = t[i]);
    }return n && se.extend(!0, e, n), e;
  }function W(e, t, i) {
    for (var n, o, s, r, a = e.contents, l = e.dataTypes; "*" === l[0];) {
      l.shift(), void 0 === n && (n = e.mimeType || t.getResponseHeader("Content-Type"));
    }if (n) for (o in a) {
      if (a[o] && a[o].test(n)) {
        l.unshift(o);break;
      }
    }if (l[0] in i) s = l[0];else {
      for (o in i) {
        if (!l[0] || e.converters[o + " " + l[0]]) {
          s = o;break;
        }r || (r = o);
      }s = s || r;
    }if (s) return s !== l[0] && l.unshift(s), i[s];
  }function Y(e, t, i, n) {
    var o,
        s,
        r,
        a,
        l,
        d = {},
        u = e.dataTypes.slice();if (u[1]) for (r in e.converters) {
      d[r.toLowerCase()] = e.converters[r];
    }for (s = u.shift(); s;) {
      if (e.responseFields[s] && (i[e.responseFields[s]] = t), !l && n && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = s, s = u.shift()) if ("*" === s) s = l;else if ("*" !== l && l !== s) {
        if (r = d[l + " " + s] || d["* " + s], !r) for (o in d) {
          if (a = o.split(" "), a[1] === s && (r = d[l + " " + a[0]] || d["* " + a[0]])) {
            r === !0 ? r = d[o] : d[o] !== !0 && (s = a[0], u.unshift(a[1]));break;
          }
        }if (r !== !0) if (r && e.throws) t = r(t);else try {
          t = r(t);
        } catch (e) {
          return { state: "parsererror", error: r ? e : "No conversion from " + l + " to " + s };
        }
      }
    }return { state: "success", data: t };
  }function Q(e, t, i, n) {
    var o;if (se.isArray(t)) se.each(t, function (t, o) {
      i || At.test(e) ? n(e, o) : Q(e + "[" + ("object" === ("undefined" == typeof o ? "undefined" : _typeof(o)) && null != o ? t : "") + "]", o, i, n);
    });else if (i || "object" !== se.type(t)) n(e, t);else for (o in t) {
      Q(e + "[" + o + "]", t[o], i, n);
    }
  }function U(e) {
    return se.isWindow(e) ? e : 9 === e.nodeType && e.defaultView;
  }var K = [],
      X = e.document,
      G = K.slice,
      V = K.concat,
      Z = K.push,
      J = K.indexOf,
      ee = {},
      te = ee.toString,
      ie = ee.hasOwnProperty,
      ne = {},
      oe = "2.2.4",
      se = function e(t, i) {
    return new e.fn.init(t, i);
  },
      re = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      ae = /^-ms-/,
      le = /-([\da-z])/gi,
      de = function de(e, t) {
    return t.toUpperCase();
  };se.fn = se.prototype = { jquery: oe, constructor: se, selector: "", length: 0, toArray: function toArray() {
      return G.call(this);
    }, get: function get(e) {
      return null != e ? e < 0 ? this[e + this.length] : this[e] : G.call(this);
    }, pushStack: function pushStack(e) {
      var t = se.merge(this.constructor(), e);return t.prevObject = this, t.context = this.context, t;
    }, each: function each(e) {
      return se.each(this, e);
    }, map: function map(e) {
      return this.pushStack(se.map(this, function (t, i) {
        return e.call(t, i, t);
      }));
    }, slice: function slice() {
      return this.pushStack(G.apply(this, arguments));
    }, first: function first() {
      return this.eq(0);
    }, last: function last() {
      return this.eq(-1);
    }, eq: function eq(e) {
      var t = this.length,
          i = +e + (e < 0 ? t : 0);return this.pushStack(i >= 0 && i < t ? [this[i]] : []);
    }, end: function end() {
      return this.prevObject || this.constructor();
    }, push: Z, sort: K.sort, splice: K.splice }, se.extend = se.fn.extend = function () {
    var e,
        t,
        i,
        n,
        o,
        s,
        r = arguments[0] || {},
        a = 1,
        l = arguments.length,
        d = !1;for ("boolean" == typeof r && (d = r, r = arguments[a] || {}, a++), "object" === ("undefined" == typeof r ? "undefined" : _typeof(r)) || se.isFunction(r) || (r = {}), a === l && (r = this, a--); a < l; a++) {
      if (null != (e = arguments[a])) for (t in e) {
        i = r[t], n = e[t], r !== n && (d && n && (se.isPlainObject(n) || (o = se.isArray(n))) ? (o ? (o = !1, s = i && se.isArray(i) ? i : []) : s = i && se.isPlainObject(i) ? i : {}, r[t] = se.extend(d, s, n)) : void 0 !== n && (r[t] = n));
      }
    }return r;
  }, se.extend({ expando: "jQuery" + (oe + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(e) {
      throw new Error(e);
    }, noop: function noop() {}, isFunction: function isFunction(e) {
      return "function" === se.type(e);
    }, isArray: Array.isArray, isWindow: function isWindow(e) {
      return null != e && e === e.window;
    }, isNumeric: function isNumeric(e) {
      var t = e && e.toString();return !se.isArray(e) && t - parseFloat(t) + 1 >= 0;
    }, isPlainObject: function isPlainObject(e) {
      var t;if ("object" !== se.type(e) || e.nodeType || se.isWindow(e)) return !1;if (e.constructor && !ie.call(e, "constructor") && !ie.call(e.constructor.prototype || {}, "isPrototypeOf")) return !1;for (t in e) {}return void 0 === t || ie.call(e, t);
    }, isEmptyObject: function isEmptyObject(e) {
      var t;for (t in e) {
        return !1;
      }return !0;
    }, type: function type(e) {
      return null == e ? e + "" : "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) || "function" == typeof e ? ee[te.call(e)] || "object" : "undefined" == typeof e ? "undefined" : _typeof(e);
    }, globalEval: function globalEval(e) {
      var t,
          i = eval;e = se.trim(e), e && (1 === e.indexOf("use strict") ? (t = X.createElement("script"), t.text = e, X.head.appendChild(t).parentNode.removeChild(t)) : i(e));
    }, camelCase: function camelCase(e) {
      return e.replace(ae, "ms-").replace(le, de);
    }, nodeName: function nodeName(e, t) {
      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }, each: function each(e, t) {
      var n,
          o = 0;if (i(e)) for (n = e.length; o < n && t.call(e[o], o, e[o]) !== !1; o++) {} else for (o in e) {
        if (t.call(e[o], o, e[o]) === !1) break;
      }return e;
    }, trim: function trim(e) {
      return null == e ? "" : (e + "").replace(re, "");
    }, makeArray: function makeArray(e, t) {
      var n = t || [];return null != e && (i(Object(e)) ? se.merge(n, "string" == typeof e ? [e] : e) : Z.call(n, e)), n;
    }, inArray: function inArray(e, t, i) {
      return null == t ? -1 : J.call(t, e, i);
    }, merge: function merge(e, t) {
      for (var i = +t.length, n = 0, o = e.length; n < i; n++) {
        e[o++] = t[n];
      }return e.length = o, e;
    }, grep: function grep(e, t, i) {
      for (var n, o = [], s = 0, r = e.length, a = !i; s < r; s++) {
        n = !t(e[s], s), n !== a && o.push(e[s]);
      }return o;
    }, map: function map(e, t, n) {
      var o,
          s,
          r = 0,
          a = [];if (i(e)) for (o = e.length; r < o; r++) {
        s = t(e[r], r, n), null != s && a.push(s);
      } else for (r in e) {
        s = t(e[r], r, n), null != s && a.push(s);
      }return V.apply([], a);
    }, guid: 1, proxy: function e(t, i) {
      var n, o, e;if ("string" == typeof i && (n = t[i], i = t, t = n), se.isFunction(t)) return o = G.call(arguments, 2), e = function e() {
        return t.apply(i || this, o.concat(G.call(arguments)));
      }, e.guid = t.guid = t.guid || se.guid++, e;
    }, now: Date.now, support: ne }), "function" == typeof Symbol && (se.fn[Symbol.iterator] = K[Symbol.iterator]), se.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) {
    ee["[object " + t + "]"] = t.toLowerCase();
  });var ue = function (e) {
    function t(e, t, i, n) {
      var o,
          s,
          r,
          a,
          l,
          d,
          c,
          f,
          p = t && t.ownerDocument,
          v = t ? t.nodeType : 9;if (i = i || [], "string" != typeof e || !e || 1 !== v && 9 !== v && 11 !== v) return i;if (!n && ((t ? t.ownerDocument || t : R) !== E && O(t), t = t || E, D)) {
        if (11 !== v && (d = ge.exec(e))) if (o = d[1]) {
          if (9 === v) {
            if (!(r = t.getElementById(o))) return i;if (r.id === o) return i.push(r), i;
          } else if (p && (r = p.getElementById(o)) && q(t, r) && r.id === o) return i.push(r), i;
        } else {
          if (d[2]) return Z.apply(i, t.getElementsByTagName(e)), i;if ((o = d[3]) && k.getElementsByClassName && t.getElementsByClassName) return Z.apply(i, t.getElementsByClassName(o)), i;
        }if (k.qsa && !Y[e + " "] && (!H || !H.test(e))) {
          if (1 !== v) p = t, f = e;else if ("object" !== t.nodeName.toLowerCase()) {
            for ((a = t.getAttribute("id")) ? a = a.replace(we, "\\$&") : t.setAttribute("id", a = L), c = T(e), s = c.length, l = he.test(a) ? "#" + a : "[id='" + a + "']"; s--;) {
              c[s] = l + " " + h(c[s]);
            }f = c.join(","), p = ye.test(e) && u(t.parentNode) || t;
          }if (f) try {
            return Z.apply(i, p.querySelectorAll(f)), i;
          } catch (e) {} finally {
            a === L && t.removeAttribute("id");
          }
        }
      }return _(e.replace(ae, "$1"), t, i, n);
    }function i() {
      function e(i, n) {
        return t.push(i + " ") > C.cacheLength && delete e[t.shift()], e[i + " "] = n;
      }var t = [];return e;
    }function n(e) {
      return e[L] = !0, e;
    }function o(e) {
      var t = E.createElement("div");try {
        return !!e(t);
      } catch (e) {
        return !1;
      } finally {
        t.parentNode && t.parentNode.removeChild(t), t = null;
      }
    }function s(e, t) {
      for (var i = e.split("|"), n = i.length; n--;) {
        C.attrHandle[i[n]] = t;
      }
    }function r(e, t) {
      var i = t && e,
          n = i && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || U) - (~e.sourceIndex || U);if (n) return n;if (i) for (; i = i.nextSibling;) {
        if (i === t) return -1;
      }return e ? 1 : -1;
    }function a(e) {
      return function (t) {
        var i = t.nodeName.toLowerCase();return "input" === i && t.type === e;
      };
    }function l(e) {
      return function (t) {
        var i = t.nodeName.toLowerCase();return ("input" === i || "button" === i) && t.type === e;
      };
    }function d(e) {
      return n(function (t) {
        return t = +t, n(function (i, n) {
          for (var o, s = e([], i.length, t), r = s.length; r--;) {
            i[o = s[r]] && (i[o] = !(n[o] = i[o]));
          }
        });
      });
    }function u(e) {
      return e && "undefined" != typeof e.getElementsByTagName && e;
    }function c() {}function h(e) {
      for (var t = 0, i = e.length, n = ""; t < i; t++) {
        n += e[t].value;
      }return n;
    }function f(e, t, i) {
      var n = t.dir,
          o = i && "parentNode" === n,
          s = I++;return t.first ? function (t, i, s) {
        for (; t = t[n];) {
          if (1 === t.nodeType || o) return e(t, i, s);
        }
      } : function (t, i, r) {
        var a,
            l,
            d,
            u = [N, s];if (r) {
          for (; t = t[n];) {
            if ((1 === t.nodeType || o) && e(t, i, r)) return !0;
          }
        } else for (; t = t[n];) {
          if (1 === t.nodeType || o) {
            if (d = t[L] || (t[L] = {}), l = d[t.uniqueID] || (d[t.uniqueID] = {}), (a = l[n]) && a[0] === N && a[1] === s) return u[2] = a[2];if (l[n] = u, u[2] = e(t, i, r)) return !0;
          }
        }
      };
    }function p(e) {
      return e.length > 1 ? function (t, i, n) {
        for (var o = e.length; o--;) {
          if (!e[o](t, i, n)) return !1;
        }return !0;
      } : e[0];
    }function v(e, i, n) {
      for (var o = 0, s = i.length; o < s; o++) {
        t(e, i[o], n);
      }return n;
    }function m(e, t, i, n, o) {
      for (var s, r = [], a = 0, l = e.length, d = null != t; a < l; a++) {
        (s = e[a]) && (i && !i(s, n, o) || (r.push(s), d && t.push(a)));
      }return r;
    }function g(e, t, i, o, s, r) {
      return o && !o[L] && (o = g(o)), s && !s[L] && (s = g(s, r)), n(function (n, r, a, l) {
        var d,
            u,
            c,
            h = [],
            f = [],
            p = r.length,
            g = n || v(t || "*", a.nodeType ? [a] : a, []),
            y = !e || !n && t ? g : m(g, h, e, a, l),
            w = i ? s || (n ? e : p || o) ? [] : r : y;if (i && i(y, w, a, l), o) for (d = m(w, f), o(d, [], a, l), u = d.length; u--;) {
          (c = d[u]) && (w[f[u]] = !(y[f[u]] = c));
        }if (n) {
          if (s || e) {
            if (s) {
              for (d = [], u = w.length; u--;) {
                (c = w[u]) && d.push(y[u] = c);
              }s(null, w = [], d, l);
            }for (u = w.length; u--;) {
              (c = w[u]) && (d = s ? ee(n, c) : h[u]) > -1 && (n[d] = !(r[d] = c));
            }
          }
        } else w = m(w === r ? w.splice(p, w.length) : w), s ? s(null, r, w, l) : Z.apply(r, w);
      });
    }function y(e) {
      for (var t, i, n, o = e.length, s = C.relative[e[0].type], r = s || C.relative[" "], a = s ? 1 : 0, l = f(function (e) {
        return e === t;
      }, r, !0), d = f(function (e) {
        return ee(t, e) > -1;
      }, r, !0), u = [function (e, i, n) {
        var o = !s && (n || i !== F) || ((t = i).nodeType ? l(e, i, n) : d(e, i, n));return t = null, o;
      }]; a < o; a++) {
        if (i = C.relative[e[a].type]) u = [f(p(u), i)];else {
          if (i = C.filter[e[a].type].apply(null, e[a].matches), i[L]) {
            for (n = ++a; n < o && !C.relative[e[n].type]; n++) {}return g(a > 1 && p(u), a > 1 && h(e.slice(0, a - 1).concat({ value: " " === e[a - 2].type ? "*" : "" })).replace(ae, "$1"), i, a < n && y(e.slice(a, n)), n < o && y(e = e.slice(n)), n < o && h(e));
          }u.push(i);
        }
      }return p(u);
    }function w(e, i) {
      var o = i.length > 0,
          s = e.length > 0,
          r = function r(n, _r, a, l, d) {
        var u,
            c,
            h,
            f = 0,
            p = "0",
            v = n && [],
            g = [],
            y = F,
            w = n || s && C.find.TAG("*", d),
            b = N += null == y ? 1 : Math.random() || .1,
            k = w.length;for (d && (F = _r === E || _r || d); p !== k && null != (u = w[p]); p++) {
          if (s && u) {
            for (c = 0, _r || u.ownerDocument === E || (O(u), a = !D); h = e[c++];) {
              if (h(u, _r || E, a)) {
                l.push(u);break;
              }
            }d && (N = b);
          }o && ((u = !h && u) && f--, n && v.push(u));
        }if (f += p, o && p !== f) {
          for (c = 0; h = i[c++];) {
            h(v, g, _r, a);
          }if (n) {
            if (f > 0) for (; p--;) {
              v[p] || g[p] || (g[p] = G.call(l));
            }g = m(g);
          }Z.apply(l, g), d && !n && g.length > 0 && f + i.length > 1 && t.uniqueSort(l);
        }return d && (N = b, F = y), v;
      };return o ? n(r) : r;
    }var b,
        k,
        C,
        $,
        x,
        T,
        S,
        _,
        F,
        z,
        A,
        O,
        E,
        P,
        D,
        H,
        M,
        j,
        q,
        L = "sizzle" + 1 * new Date(),
        R = e.document,
        N = 0,
        I = 0,
        B = i(),
        W = i(),
        Y = i(),
        Q = function Q(e, t) {
      return e === t && (A = !0), 0;
    },
        U = 1 << 31,
        K = {}.hasOwnProperty,
        X = [],
        G = X.pop,
        V = X.push,
        Z = X.push,
        J = X.slice,
        ee = function ee(e, t) {
      for (var i = 0, n = e.length; i < n; i++) {
        if (e[i] === t) return i;
      }return -1;
    },
        te = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        ie = "[\\x20\\t\\r\\n\\f]",
        ne = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        oe = "\\[" + ie + "*(" + ne + ")(?:" + ie + "*([*^$|!~]?=)" + ie + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + ne + "))|)" + ie + "*\\]",
        se = ":(" + ne + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + oe + ")*)|.*)\\)|)",
        re = new RegExp(ie + "+", "g"),
        ae = new RegExp("^" + ie + "+|((?:^|[^\\\\])(?:\\\\.)*)" + ie + "+$", "g"),
        le = new RegExp("^" + ie + "*," + ie + "*"),
        de = new RegExp("^" + ie + "*([>+~]|" + ie + ")" + ie + "*"),
        ue = new RegExp("=" + ie + "*([^\\]'\"]*?)" + ie + "*\\]", "g"),
        ce = new RegExp(se),
        he = new RegExp("^" + ne + "$"),
        fe = { ID: new RegExp("^#(" + ne + ")"), CLASS: new RegExp("^\\.(" + ne + ")"), TAG: new RegExp("^(" + ne + "|[*])"), ATTR: new RegExp("^" + oe), PSEUDO: new RegExp("^" + se), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + ie + "*(even|odd|(([+-]|)(\\d*)n|)" + ie + "*(?:([+-]|)" + ie + "*(\\d+)|))" + ie + "*\\)|)", "i"), bool: new RegExp("^(?:" + te + ")$", "i"), needsContext: new RegExp("^" + ie + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + ie + "*((?:-\\d)?\\d*)" + ie + "*\\)|)(?=[^-]|$)", "i") },
        pe = /^(?:input|select|textarea|button)$/i,
        ve = /^h\d$/i,
        me = /^[^{]+\{\s*\[native \w/,
        ge = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        ye = /[+~]/,
        we = /'|\\/g,
        be = new RegExp("\\\\([\\da-f]{1,6}" + ie + "?|(" + ie + ")|.)", "ig"),
        ke = function ke(e, t, i) {
      var n = "0x" + t - 65536;return n !== n || i ? t : n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320);
    },
        Ce = function Ce() {
      O();
    };try {
      Z.apply(X = J.call(R.childNodes), R.childNodes), X[R.childNodes.length].nodeType;
    } catch (e) {
      Z = { apply: X.length ? function (e, t) {
          V.apply(e, J.call(t));
        } : function (e, t) {
          for (var i = e.length, n = 0; e[i++] = t[n++];) {}e.length = i - 1;
        } };
    }k = t.support = {}, x = t.isXML = function (e) {
      var t = e && (e.ownerDocument || e).documentElement;return !!t && "HTML" !== t.nodeName;
    }, O = t.setDocument = function (e) {
      var t,
          i,
          n = e ? e.ownerDocument || e : R;return n !== E && 9 === n.nodeType && n.documentElement ? (E = n, P = E.documentElement, D = !x(E), (i = E.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", Ce, !1) : i.attachEvent && i.attachEvent("onunload", Ce)), k.attributes = o(function (e) {
        return e.className = "i", !e.getAttribute("className");
      }), k.getElementsByTagName = o(function (e) {
        return e.appendChild(E.createComment("")), !e.getElementsByTagName("*").length;
      }), k.getElementsByClassName = me.test(E.getElementsByClassName), k.getById = o(function (e) {
        return P.appendChild(e).id = L, !E.getElementsByName || !E.getElementsByName(L).length;
      }), k.getById ? (C.find.ID = function (e, t) {
        if ("undefined" != typeof t.getElementById && D) {
          var i = t.getElementById(e);return i ? [i] : [];
        }
      }, C.filter.ID = function (e) {
        var t = e.replace(be, ke);return function (e) {
          return e.getAttribute("id") === t;
        };
      }) : (delete C.find.ID, C.filter.ID = function (e) {
        var t = e.replace(be, ke);return function (e) {
          var i = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");return i && i.value === t;
        };
      }), C.find.TAG = k.getElementsByTagName ? function (e, t) {
        return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : k.qsa ? t.querySelectorAll(e) : void 0;
      } : function (e, t) {
        var i,
            n = [],
            o = 0,
            s = t.getElementsByTagName(e);if ("*" === e) {
          for (; i = s[o++];) {
            1 === i.nodeType && n.push(i);
          }return n;
        }return s;
      }, C.find.CLASS = k.getElementsByClassName && function (e, t) {
        if ("undefined" != typeof t.getElementsByClassName && D) return t.getElementsByClassName(e);
      }, M = [], H = [], (k.qsa = me.test(E.querySelectorAll)) && (o(function (e) {
        P.appendChild(e).innerHTML = "<a id='" + L + "'></a><select id='" + L + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && H.push("[*^$]=" + ie + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || H.push("\\[" + ie + "*(?:value|" + te + ")"), e.querySelectorAll("[id~=" + L + "-]").length || H.push("~="), e.querySelectorAll(":checked").length || H.push(":checked"), e.querySelectorAll("a#" + L + "+*").length || H.push(".#.+[+~]");
      }), o(function (e) {
        var t = E.createElement("input");t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && H.push("name" + ie + "*[*^$|!~]?="), e.querySelectorAll(":enabled").length || H.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), H.push(",.*:");
      })), (k.matchesSelector = me.test(j = P.matches || P.webkitMatchesSelector || P.mozMatchesSelector || P.oMatchesSelector || P.msMatchesSelector)) && o(function (e) {
        k.disconnectedMatch = j.call(e, "div"), j.call(e, "[s!='']:x"), M.push("!=", se);
      }), H = H.length && new RegExp(H.join("|")), M = M.length && new RegExp(M.join("|")), t = me.test(P.compareDocumentPosition), q = t || me.test(P.contains) ? function (e, t) {
        var i = 9 === e.nodeType ? e.documentElement : e,
            n = t && t.parentNode;return e === n || !(!n || 1 !== n.nodeType || !(i.contains ? i.contains(n) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(n)));
      } : function (e, t) {
        if (t) for (; t = t.parentNode;) {
          if (t === e) return !0;
        }return !1;
      }, Q = t ? function (e, t) {
        if (e === t) return A = !0, 0;var i = !e.compareDocumentPosition - !t.compareDocumentPosition;return i ? i : (i = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1, 1 & i || !k.sortDetached && t.compareDocumentPosition(e) === i ? e === E || e.ownerDocument === R && q(R, e) ? -1 : t === E || t.ownerDocument === R && q(R, t) ? 1 : z ? ee(z, e) - ee(z, t) : 0 : 4 & i ? -1 : 1);
      } : function (e, t) {
        if (e === t) return A = !0, 0;var i,
            n = 0,
            o = e.parentNode,
            s = t.parentNode,
            a = [e],
            l = [t];if (!o || !s) return e === E ? -1 : t === E ? 1 : o ? -1 : s ? 1 : z ? ee(z, e) - ee(z, t) : 0;if (o === s) return r(e, t);for (i = e; i = i.parentNode;) {
          a.unshift(i);
        }for (i = t; i = i.parentNode;) {
          l.unshift(i);
        }for (; a[n] === l[n];) {
          n++;
        }return n ? r(a[n], l[n]) : a[n] === R ? -1 : l[n] === R ? 1 : 0;
      }, E) : E;
    }, t.matches = function (e, i) {
      return t(e, null, null, i);
    }, t.matchesSelector = function (e, i) {
      if ((e.ownerDocument || e) !== E && O(e), i = i.replace(ue, "='$1']"), k.matchesSelector && D && !Y[i + " "] && (!M || !M.test(i)) && (!H || !H.test(i))) try {
        var n = j.call(e, i);if (n || k.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;
      } catch (e) {}return t(i, E, null, [e]).length > 0;
    }, t.contains = function (e, t) {
      return (e.ownerDocument || e) !== E && O(e), q(e, t);
    }, t.attr = function (e, t) {
      (e.ownerDocument || e) !== E && O(e);var i = C.attrHandle[t.toLowerCase()],
          n = i && K.call(C.attrHandle, t.toLowerCase()) ? i(e, t, !D) : void 0;return void 0 !== n ? n : k.attributes || !D ? e.getAttribute(t) : (n = e.getAttributeNode(t)) && n.specified ? n.value : null;
    }, t.error = function (e) {
      throw new Error("Syntax error, unrecognized expression: " + e);
    }, t.uniqueSort = function (e) {
      var t,
          i = [],
          n = 0,
          o = 0;if (A = !k.detectDuplicates, z = !k.sortStable && e.slice(0), e.sort(Q), A) {
        for (; t = e[o++];) {
          t === e[o] && (n = i.push(o));
        }for (; n--;) {
          e.splice(i[n], 1);
        }
      }return z = null, e;
    }, $ = t.getText = function (e) {
      var t,
          i = "",
          n = 0,
          o = e.nodeType;if (o) {
        if (1 === o || 9 === o || 11 === o) {
          if ("string" == typeof e.textContent) return e.textContent;for (e = e.firstChild; e; e = e.nextSibling) {
            i += $(e);
          }
        } else if (3 === o || 4 === o) return e.nodeValue;
      } else for (; t = e[n++];) {
        i += $(t);
      }return i;
    }, C = t.selectors = { cacheLength: 50, createPseudo: n, match: fe, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(e) {
          return e[1] = e[1].replace(be, ke), e[3] = (e[3] || e[4] || e[5] || "").replace(be, ke), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
        }, CHILD: function CHILD(e) {
          return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || t.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && t.error(e[0]), e;
        }, PSEUDO: function PSEUDO(e) {
          var t,
              i = !e[6] && e[2];return fe.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : i && ce.test(i) && (t = T(i, !0)) && (t = i.indexOf(")", i.length - t) - i.length) && (e[0] = e[0].slice(0, t), e[2] = i.slice(0, t)), e.slice(0, 3));
        } }, filter: { TAG: function TAG(e) {
          var t = e.replace(be, ke).toLowerCase();return "*" === e ? function () {
            return !0;
          } : function (e) {
            return e.nodeName && e.nodeName.toLowerCase() === t;
          };
        }, CLASS: function CLASS(e) {
          var t = B[e + " "];return t || (t = new RegExp("(^|" + ie + ")" + e + "(" + ie + "|$)")) && B(e, function (e) {
            return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
          });
        }, ATTR: function ATTR(e, i, n) {
          return function (o) {
            var s = t.attr(o, e);return null == s ? "!=" === i : !i || (s += "", "=" === i ? s === n : "!=" === i ? s !== n : "^=" === i ? n && 0 === s.indexOf(n) : "*=" === i ? n && s.indexOf(n) > -1 : "$=" === i ? n && s.slice(-n.length) === n : "~=" === i ? (" " + s.replace(re, " ") + " ").indexOf(n) > -1 : "|=" === i && (s === n || s.slice(0, n.length + 1) === n + "-"));
          };
        }, CHILD: function CHILD(e, t, i, n, o) {
          var s = "nth" !== e.slice(0, 3),
              r = "last" !== e.slice(-4),
              a = "of-type" === t;return 1 === n && 0 === o ? function (e) {
            return !!e.parentNode;
          } : function (t, i, l) {
            var d,
                u,
                c,
                h,
                f,
                p,
                v = s !== r ? "nextSibling" : "previousSibling",
                m = t.parentNode,
                g = a && t.nodeName.toLowerCase(),
                y = !l && !a,
                w = !1;if (m) {
              if (s) {
                for (; v;) {
                  for (h = t; h = h[v];) {
                    if (a ? h.nodeName.toLowerCase() === g : 1 === h.nodeType) return !1;
                  }p = v = "only" === e && !p && "nextSibling";
                }return !0;
              }if (p = [r ? m.firstChild : m.lastChild], r && y) {
                for (h = m, c = h[L] || (h[L] = {}), u = c[h.uniqueID] || (c[h.uniqueID] = {}), d = u[e] || [], f = d[0] === N && d[1], w = f && d[2], h = f && m.childNodes[f]; h = ++f && h && h[v] || (w = f = 0) || p.pop();) {
                  if (1 === h.nodeType && ++w && h === t) {
                    u[e] = [N, f, w];break;
                  }
                }
              } else if (y && (h = t, c = h[L] || (h[L] = {}), u = c[h.uniqueID] || (c[h.uniqueID] = {}), d = u[e] || [], f = d[0] === N && d[1], w = f), w === !1) for (; (h = ++f && h && h[v] || (w = f = 0) || p.pop()) && ((a ? h.nodeName.toLowerCase() !== g : 1 !== h.nodeType) || !++w || (y && (c = h[L] || (h[L] = {}), u = c[h.uniqueID] || (c[h.uniqueID] = {}), u[e] = [N, w]), h !== t));) {}return w -= o, w === n || w % n === 0 && w / n >= 0;
            }
          };
        }, PSEUDO: function PSEUDO(e, i) {
          var o,
              s = C.pseudos[e] || C.setFilters[e.toLowerCase()] || t.error("unsupported pseudo: " + e);return s[L] ? s(i) : s.length > 1 ? (o = [e, e, "", i], C.setFilters.hasOwnProperty(e.toLowerCase()) ? n(function (e, t) {
            for (var n, o = s(e, i), r = o.length; r--;) {
              n = ee(e, o[r]), e[n] = !(t[n] = o[r]);
            }
          }) : function (e) {
            return s(e, 0, o);
          }) : s;
        } }, pseudos: { not: n(function (e) {
          var t = [],
              i = [],
              o = S(e.replace(ae, "$1"));return o[L] ? n(function (e, t, i, n) {
            for (var s, r = o(e, null, n, []), a = e.length; a--;) {
              (s = r[a]) && (e[a] = !(t[a] = s));
            }
          }) : function (e, n, s) {
            return t[0] = e, o(t, null, s, i), t[0] = null, !i.pop();
          };
        }), has: n(function (e) {
          return function (i) {
            return t(e, i).length > 0;
          };
        }), contains: n(function (e) {
          return e = e.replace(be, ke), function (t) {
            return (t.textContent || t.innerText || $(t)).indexOf(e) > -1;
          };
        }), lang: n(function (e) {
          return he.test(e || "") || t.error("unsupported lang: " + e), e = e.replace(be, ke).toLowerCase(), function (t) {
            var i;do {
              if (i = D ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return i = i.toLowerCase(), i === e || 0 === i.indexOf(e + "-");
            } while ((t = t.parentNode) && 1 === t.nodeType);return !1;
          };
        }), target: function target(t) {
          var i = e.location && e.location.hash;return i && i.slice(1) === t.id;
        }, root: function root(e) {
          return e === P;
        }, focus: function focus(e) {
          return e === E.activeElement && (!E.hasFocus || E.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
        }, enabled: function enabled(e) {
          return e.disabled === !1;
        }, disabled: function disabled(e) {
          return e.disabled === !0;
        }, checked: function checked(e) {
          var t = e.nodeName.toLowerCase();return "input" === t && !!e.checked || "option" === t && !!e.selected;
        }, selected: function selected(e) {
          return e.parentNode && e.parentNode.selectedIndex, e.selected === !0;
        }, empty: function empty(e) {
          for (e = e.firstChild; e; e = e.nextSibling) {
            if (e.nodeType < 6) return !1;
          }return !0;
        }, parent: function parent(e) {
          return !C.pseudos.empty(e);
        }, header: function header(e) {
          return ve.test(e.nodeName);
        }, input: function input(e) {
          return pe.test(e.nodeName);
        }, button: function button(e) {
          var t = e.nodeName.toLowerCase();return "input" === t && "button" === e.type || "button" === t;
        }, text: function text(e) {
          var t;return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
        }, first: d(function () {
          return [0];
        }), last: d(function (e, t) {
          return [t - 1];
        }), eq: d(function (e, t, i) {
          return [i < 0 ? i + t : i];
        }), even: d(function (e, t) {
          for (var i = 0; i < t; i += 2) {
            e.push(i);
          }return e;
        }), odd: d(function (e, t) {
          for (var i = 1; i < t; i += 2) {
            e.push(i);
          }return e;
        }), lt: d(function (e, t, i) {
          for (var n = i < 0 ? i + t : i; --n >= 0;) {
            e.push(n);
          }return e;
        }), gt: d(function (e, t, i) {
          for (var n = i < 0 ? i + t : i; ++n < t;) {
            e.push(n);
          }return e;
        }) } }, C.pseudos.nth = C.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
      C.pseudos[b] = a(b);
    }for (b in { submit: !0, reset: !0 }) {
      C.pseudos[b] = l(b);
    }return c.prototype = C.filters = C.pseudos, C.setFilters = new c(), T = t.tokenize = function (e, i) {
      var n,
          o,
          s,
          r,
          a,
          l,
          d,
          u = W[e + " "];if (u) return i ? 0 : u.slice(0);for (a = e, l = [], d = C.preFilter; a;) {
        n && !(o = le.exec(a)) || (o && (a = a.slice(o[0].length) || a), l.push(s = [])), n = !1, (o = de.exec(a)) && (n = o.shift(), s.push({ value: n, type: o[0].replace(ae, " ") }), a = a.slice(n.length));for (r in C.filter) {
          !(o = fe[r].exec(a)) || d[r] && !(o = d[r](o)) || (n = o.shift(), s.push({ value: n, type: r, matches: o }), a = a.slice(n.length));
        }if (!n) break;
      }return i ? a.length : a ? t.error(e) : W(e, l).slice(0);
    }, S = t.compile = function (e, t) {
      var i,
          n = [],
          o = [],
          s = Y[e + " "];if (!s) {
        for (t || (t = T(e)), i = t.length; i--;) {
          s = y(t[i]), s[L] ? n.push(s) : o.push(s);
        }s = Y(e, w(o, n)), s.selector = e;
      }return s;
    }, _ = t.select = function (e, t, i, n) {
      var o,
          s,
          r,
          a,
          l,
          d = "function" == typeof e && e,
          c = !n && T(e = d.selector || e);if (i = i || [], 1 === c.length) {
        if (s = c[0] = c[0].slice(0), s.length > 2 && "ID" === (r = s[0]).type && k.getById && 9 === t.nodeType && D && C.relative[s[1].type]) {
          if (t = (C.find.ID(r.matches[0].replace(be, ke), t) || [])[0], !t) return i;d && (t = t.parentNode), e = e.slice(s.shift().value.length);
        }for (o = fe.needsContext.test(e) ? 0 : s.length; o-- && (r = s[o], !C.relative[a = r.type]);) {
          if ((l = C.find[a]) && (n = l(r.matches[0].replace(be, ke), ye.test(s[0].type) && u(t.parentNode) || t))) {
            if (s.splice(o, 1), e = n.length && h(s), !e) return Z.apply(i, n), i;break;
          }
        }
      }return (d || S(e, c))(n, t, !D, i, !t || ye.test(e) && u(t.parentNode) || t), i;
    }, k.sortStable = L.split("").sort(Q).join("") === L, k.detectDuplicates = !!A, O(), k.sortDetached = o(function (e) {
      return 1 & e.compareDocumentPosition(E.createElement("div"));
    }), o(function (e) {
      return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
    }) || s("type|href|height|width", function (e, t, i) {
      if (!i) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
    }), k.attributes && o(function (e) {
      return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
    }) || s("value", function (e, t, i) {
      if (!i && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
    }), o(function (e) {
      return null == e.getAttribute("disabled");
    }) || s(te, function (e, t, i) {
      var n;if (!i) return e[t] === !0 ? t.toLowerCase() : (n = e.getAttributeNode(t)) && n.specified ? n.value : null;
    }), t;
  }(e);se.find = ue, se.expr = ue.selectors, se.expr[":"] = se.expr.pseudos, se.uniqueSort = se.unique = ue.uniqueSort, se.text = ue.getText, se.isXMLDoc = ue.isXML, se.contains = ue.contains;var ce = function ce(e, t, i) {
    for (var n = [], o = void 0 !== i; (e = e[t]) && 9 !== e.nodeType;) {
      if (1 === e.nodeType) {
        if (o && se(e).is(i)) break;n.push(e);
      }
    }return n;
  },
      he = function he(e, t) {
    for (var i = []; e; e = e.nextSibling) {
      1 === e.nodeType && e !== t && i.push(e);
    }return i;
  },
      fe = se.expr.match.needsContext,
      pe = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
      ve = /^.[^:#\[\.,]*$/;se.filter = function (e, t, i) {
    var n = t[0];return i && (e = ":not(" + e + ")"), 1 === t.length && 1 === n.nodeType ? se.find.matchesSelector(n, e) ? [n] : [] : se.find.matches(e, se.grep(t, function (e) {
      return 1 === e.nodeType;
    }));
  }, se.fn.extend({ find: function find(e) {
      var t,
          i = this.length,
          n = [],
          o = this;if ("string" != typeof e) return this.pushStack(se(e).filter(function () {
        for (t = 0; t < i; t++) {
          if (se.contains(o[t], this)) return !0;
        }
      }));for (t = 0; t < i; t++) {
        se.find(e, o[t], n);
      }return n = this.pushStack(i > 1 ? se.unique(n) : n), n.selector = this.selector ? this.selector + " " + e : e, n;
    }, filter: function filter(e) {
      return this.pushStack(n(this, e || [], !1));
    }, not: function not(e) {
      return this.pushStack(n(this, e || [], !0));
    }, is: function is(e) {
      return !!n(this, "string" == typeof e && fe.test(e) ? se(e) : e || [], !1).length;
    } });var me,
      ge = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      ye = se.fn.init = function (e, t, i) {
    var n, o;if (!e) return this;if (i = i || me, "string" == typeof e) {
      if (n = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : ge.exec(e), !n || !n[1] && t) return !t || t.jquery ? (t || i).find(e) : this.constructor(t).find(e);if (n[1]) {
        if (t = t instanceof se ? t[0] : t, se.merge(this, se.parseHTML(n[1], t && t.nodeType ? t.ownerDocument || t : X, !0)), pe.test(n[1]) && se.isPlainObject(t)) for (n in t) {
          se.isFunction(this[n]) ? this[n](t[n]) : this.attr(n, t[n]);
        }return this;
      }return o = X.getElementById(n[2]), o && o.parentNode && (this.length = 1, this[0] = o), this.context = X, this.selector = e, this;
    }return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : se.isFunction(e) ? void 0 !== i.ready ? i.ready(e) : e(se) : (void 0 !== e.selector && (this.selector = e.selector, this.context = e.context), se.makeArray(e, this));
  };ye.prototype = se.fn, me = se(X);var we = /^(?:parents|prev(?:Until|All))/,
      be = { children: !0, contents: !0, next: !0, prev: !0 };se.fn.extend({ has: function has(e) {
      var t = se(e, this),
          i = t.length;return this.filter(function () {
        for (var e = 0; e < i; e++) {
          if (se.contains(this, t[e])) return !0;
        }
      });
    }, closest: function closest(e, t) {
      for (var i, n = 0, o = this.length, s = [], r = fe.test(e) || "string" != typeof e ? se(e, t || this.context) : 0; n < o; n++) {
        for (i = this[n]; i && i !== t; i = i.parentNode) {
          if (i.nodeType < 11 && (r ? r.index(i) > -1 : 1 === i.nodeType && se.find.matchesSelector(i, e))) {
            s.push(i);break;
          }
        }
      }return this.pushStack(s.length > 1 ? se.uniqueSort(s) : s);
    }, index: function index(e) {
      return e ? "string" == typeof e ? J.call(se(e), this[0]) : J.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    }, add: function add(e, t) {
      return this.pushStack(se.uniqueSort(se.merge(this.get(), se(e, t))));
    }, addBack: function addBack(e) {
      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
    } }), se.each({ parent: function e(t) {
      var e = t.parentNode;return e && 11 !== e.nodeType ? e : null;
    }, parents: function parents(e) {
      return ce(e, "parentNode");
    }, parentsUntil: function parentsUntil(e, t, i) {
      return ce(e, "parentNode", i);
    }, next: function next(e) {
      return o(e, "nextSibling");
    }, prev: function prev(e) {
      return o(e, "previousSibling");
    }, nextAll: function nextAll(e) {
      return ce(e, "nextSibling");
    }, prevAll: function prevAll(e) {
      return ce(e, "previousSibling");
    }, nextUntil: function nextUntil(e, t, i) {
      return ce(e, "nextSibling", i);
    }, prevUntil: function prevUntil(e, t, i) {
      return ce(e, "previousSibling", i);
    }, siblings: function siblings(e) {
      return he((e.parentNode || {}).firstChild, e);
    }, children: function children(e) {
      return he(e.firstChild);
    }, contents: function contents(e) {
      return e.contentDocument || se.merge([], e.childNodes);
    } }, function (e, t) {
    se.fn[e] = function (i, n) {
      var o = se.map(this, t, i);return "Until" !== e.slice(-5) && (n = i), n && "string" == typeof n && (o = se.filter(n, o)), this.length > 1 && (be[e] || se.uniqueSort(o), we.test(e) && o.reverse()), this.pushStack(o);
    };
  });var ke = /\S+/g;se.Callbacks = function (e) {
    e = "string" == typeof e ? s(e) : se.extend({}, e);var t,
        i,
        n,
        o,
        r = [],
        a = [],
        l = -1,
        d = function d() {
      for (o = e.once, n = t = !0; a.length; l = -1) {
        for (i = a.shift(); ++l < r.length;) {
          r[l].apply(i[0], i[1]) === !1 && e.stopOnFalse && (l = r.length, i = !1);
        }
      }e.memory || (i = !1), t = !1, o && (r = i ? [] : "");
    },
        u = { add: function add() {
        return r && (i && !t && (l = r.length - 1, a.push(i)), function t(i) {
          se.each(i, function (i, n) {
            se.isFunction(n) ? e.unique && u.has(n) || r.push(n) : n && n.length && "string" !== se.type(n) && t(n);
          });
        }(arguments), i && !t && d()), this;
      }, remove: function remove() {
        return se.each(arguments, function (e, t) {
          for (var i; (i = se.inArray(t, r, i)) > -1;) {
            r.splice(i, 1), i <= l && l--;
          }
        }), this;
      }, has: function has(e) {
        return e ? se.inArray(e, r) > -1 : r.length > 0;
      }, empty: function empty() {
        return r && (r = []), this;
      }, disable: function disable() {
        return o = a = [], r = i = "", this;
      }, disabled: function disabled() {
        return !r;
      }, lock: function lock() {
        return o = a = [], i || (r = i = ""), this;
      }, locked: function locked() {
        return !!o;
      }, fireWith: function fireWith(e, i) {
        return o || (i = i || [], i = [e, i.slice ? i.slice() : i], a.push(i), t || d()), this;
      }, fire: function fire() {
        return u.fireWith(this, arguments), this;
      }, fired: function fired() {
        return !!n;
      } };return u;
  }, se.extend({ Deferred: function Deferred(e) {
      var t = [["resolve", "done", se.Callbacks("once memory"), "resolved"], ["reject", "fail", se.Callbacks("once memory"), "rejected"], ["notify", "progress", se.Callbacks("memory")]],
          i = "pending",
          n = { state: function state() {
          return i;
        }, always: function always() {
          return o.done(arguments).fail(arguments), this;
        }, then: function then() {
          var e = arguments;return se.Deferred(function (i) {
            se.each(t, function (t, s) {
              var r = se.isFunction(e[t]) && e[t];o[s[1]](function () {
                var e = r && r.apply(this, arguments);e && se.isFunction(e.promise) ? e.promise().progress(i.notify).done(i.resolve).fail(i.reject) : i[s[0] + "With"](this === n ? i.promise() : this, r ? [e] : arguments);
              });
            }), e = null;
          }).promise();
        }, promise: function promise(e) {
          return null != e ? se.extend(e, n) : n;
        } },
          o = {};return n.pipe = n.then, se.each(t, function (e, s) {
        var r = s[2],
            a = s[3];n[s[1]] = r.add, a && r.add(function () {
          i = a;
        }, t[1 ^ e][2].disable, t[2][2].lock), o[s[0]] = function () {
          return o[s[0] + "With"](this === o ? n : this, arguments), this;
        }, o[s[0] + "With"] = r.fireWith;
      }), n.promise(o), e && e.call(o, o), o;
    }, when: function when(e) {
      var t,
          i,
          n,
          o = 0,
          s = G.call(arguments),
          r = s.length,
          a = 1 !== r || e && se.isFunction(e.promise) ? r : 0,
          l = 1 === a ? e : se.Deferred(),
          d = function d(e, i, n) {
        return function (o) {
          i[e] = this, n[e] = arguments.length > 1 ? G.call(arguments) : o, n === t ? l.notifyWith(i, n) : --a || l.resolveWith(i, n);
        };
      };if (r > 1) for (t = new Array(r), i = new Array(r), n = new Array(r); o < r; o++) {
        s[o] && se.isFunction(s[o].promise) ? s[o].promise().progress(d(o, i, t)).done(d(o, n, s)).fail(l.reject) : --a;
      }return a || l.resolveWith(n, s), l.promise();
    } });var Ce;se.fn.ready = function (e) {
    return se.ready.promise().done(e), this;
  }, se.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(e) {
      e ? se.readyWait++ : se.ready(!0);
    }, ready: function ready(e) {
      (e === !0 ? --se.readyWait : se.isReady) || (se.isReady = !0, e !== !0 && --se.readyWait > 0 || (Ce.resolveWith(X, [se]), se.fn.triggerHandler && (se(X).triggerHandler("ready"), se(X).off("ready"))));
    } }), se.ready.promise = function (t) {
    return Ce || (Ce = se.Deferred(), "complete" === X.readyState || "loading" !== X.readyState && !X.documentElement.doScroll ? e.setTimeout(se.ready) : (X.addEventListener("DOMContentLoaded", r), e.addEventListener("load", r))), Ce.promise(t);
  }, se.ready.promise();var $e = function e(t, i, n, o, s, r, a) {
    var l = 0,
        d = t.length,
        u = null == n;if ("object" === se.type(n)) {
      s = !0;for (l in n) {
        e(t, i, l, n[l], !0, r, a);
      }
    } else if (void 0 !== o && (s = !0, se.isFunction(o) || (a = !0), u && (a ? (i.call(t, o), i = null) : (u = i, i = function i(e, t, _i) {
      return u.call(se(e), _i);
    })), i)) for (; l < d; l++) {
      i(t[l], n, a ? o : o.call(t[l], l, i(t[l], n)));
    }return s ? t : u ? i.call(t) : d ? i(t[0], n) : r;
  },
      xe = function xe(e) {
    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
  };a.uid = 1, a.prototype = { register: function register(e, t) {
      var i = t || {};return e.nodeType ? e[this.expando] = i : Object.defineProperty(e, this.expando, { value: i, writable: !0, configurable: !0 }), e[this.expando];
    }, cache: function cache(e) {
      if (!xe(e)) return {};var t = e[this.expando];return t || (t = {}, xe(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, { value: t, configurable: !0 }))), t;
    }, set: function set(e, t, i) {
      var n,
          o = this.cache(e);if ("string" == typeof t) o[t] = i;else for (n in t) {
        o[n] = t[n];
      }return o;
    }, get: function get(e, t) {
      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][t];
    }, access: function access(e, t, i) {
      var n;return void 0 === t || t && "string" == typeof t && void 0 === i ? (n = this.get(e, t), void 0 !== n ? n : this.get(e, se.camelCase(t))) : (this.set(e, t, i), void 0 !== i ? i : t);
    }, remove: function remove(e, t) {
      var i,
          n,
          o,
          s = e[this.expando];if (void 0 !== s) {
        if (void 0 === t) this.register(e);else {
          se.isArray(t) ? n = t.concat(t.map(se.camelCase)) : (o = se.camelCase(t), t in s ? n = [t, o] : (n = o, n = n in s ? [n] : n.match(ke) || [])), i = n.length;for (; i--;) {
            delete s[n[i]];
          }
        }(void 0 === t || se.isEmptyObject(s)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
      }
    }, hasData: function hasData(e) {
      var t = e[this.expando];return void 0 !== t && !se.isEmptyObject(t);
    } };var Te = new a(),
      Se = new a(),
      _e = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Fe = /[A-Z]/g;se.extend({ hasData: function hasData(e) {
      return Se.hasData(e) || Te.hasData(e);
    }, data: function data(e, t, i) {
      return Se.access(e, t, i);
    }, removeData: function removeData(e, t) {
      Se.remove(e, t);
    }, _data: function _data(e, t, i) {
      return Te.access(e, t, i);
    }, _removeData: function _removeData(e, t) {
      Te.remove(e, t);
    } }), se.fn.extend({ data: function e(t, i) {
      var n,
          o,
          e,
          s = this[0],
          r = s && s.attributes;if (void 0 === t) {
        if (this.length && (e = Se.get(s), 1 === s.nodeType && !Te.get(s, "hasDataAttrs"))) {
          for (n = r.length; n--;) {
            r[n] && (o = r[n].name, 0 === o.indexOf("data-") && (o = se.camelCase(o.slice(5)), l(s, o, e[o])));
          }Te.set(s, "hasDataAttrs", !0);
        }return e;
      }return "object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) ? this.each(function () {
        Se.set(this, t);
      }) : $e(this, function (e) {
        var i, n;if (s && void 0 === e) {
          if (i = Se.get(s, t) || Se.get(s, t.replace(Fe, "-$&").toLowerCase()), void 0 !== i) return i;if (n = se.camelCase(t), i = Se.get(s, n), void 0 !== i) return i;if (i = l(s, n, void 0), void 0 !== i) return i;
        } else n = se.camelCase(t), this.each(function () {
          var i = Se.get(this, n);Se.set(this, n, e), t.indexOf("-") > -1 && void 0 !== i && Se.set(this, t, e);
        });
      }, null, i, arguments.length > 1, null, !0);
    }, removeData: function removeData(e) {
      return this.each(function () {
        Se.remove(this, e);
      });
    } }), se.extend({ queue: function e(t, i, n) {
      var e;if (t) return i = (i || "fx") + "queue", e = Te.get(t, i), n && (!e || se.isArray(n) ? e = Te.access(t, i, se.makeArray(n)) : e.push(n)), e || [];
    }, dequeue: function dequeue(e, t) {
      t = t || "fx";var i = se.queue(e, t),
          n = i.length,
          o = i.shift(),
          s = se._queueHooks(e, t),
          r = function r() {
        se.dequeue(e, t);
      };"inprogress" === o && (o = i.shift(), n--), o && ("fx" === t && i.unshift("inprogress"), delete s.stop, o.call(e, r, s)), !n && s && s.empty.fire();
    }, _queueHooks: function _queueHooks(e, t) {
      var i = t + "queueHooks";return Te.get(e, i) || Te.access(e, i, { empty: se.Callbacks("once memory").add(function () {
          Te.remove(e, [t + "queue", i]);
        }) });
    } }), se.fn.extend({ queue: function queue(e, t) {
      var i = 2;return "string" != typeof e && (t = e, e = "fx", i--), arguments.length < i ? se.queue(this[0], e) : void 0 === t ? this : this.each(function () {
        var i = se.queue(this, e, t);se._queueHooks(this, e), "fx" === e && "inprogress" !== i[0] && se.dequeue(this, e);
      });
    }, dequeue: function dequeue(e) {
      return this.each(function () {
        se.dequeue(this, e);
      });
    }, clearQueue: function clearQueue(e) {
      return this.queue(e || "fx", []);
    }, promise: function promise(e, t) {
      var i,
          n = 1,
          o = se.Deferred(),
          s = this,
          r = this.length,
          a = function a() {
        --n || o.resolveWith(s, [s]);
      };for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; r--;) {
        i = Te.get(s[r], e + "queueHooks"), i && i.empty && (n++, i.empty.add(a));
      }return a(), o.promise(t);
    } });var ze = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      Ae = new RegExp("^(?:([+-])=|)(" + ze + ")([a-z%]*)$", "i"),
      Oe = ["Top", "Right", "Bottom", "Left"],
      Ee = function Ee(e, t) {
    return e = t || e, "none" === se.css(e, "display") || !se.contains(e.ownerDocument, e);
  },
      Pe = /^(?:checkbox|radio)$/i,
      De = /<([\w:-]+)/,
      He = /^$|\/(?:java|ecma)script/i,
      Me = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };Me.optgroup = Me.option, Me.tbody = Me.tfoot = Me.colgroup = Me.caption = Me.thead, Me.th = Me.td;var je = /<|&#?\w+;/;!function () {
    var e = X.createDocumentFragment(),
        t = e.appendChild(X.createElement("div")),
        i = X.createElement("input");i.setAttribute("type", "radio"), i.setAttribute("checked", "checked"), i.setAttribute("name", "t"), t.appendChild(i), ne.checkClone = t.cloneNode(!0).cloneNode(!0).lastChild.checked, t.innerHTML = "<textarea>x</textarea>", ne.noCloneChecked = !!t.cloneNode(!0).lastChild.defaultValue;
  }();var qe = /^key/,
      Le = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      Re = /^([^.]*)(?:\.(.+)|)/;se.event = { global: {}, add: function add(e, t, i, n, o) {
      var s,
          r,
          a,
          l,
          d,
          u,
          c,
          h,
          f,
          p,
          v,
          m = Te.get(e);if (m) for (i.handler && (s = i, i = s.handler, o = s.selector), i.guid || (i.guid = se.guid++), (l = m.events) || (l = m.events = {}), (r = m.handle) || (r = m.handle = function (t) {
        return "undefined" != typeof se && se.event.triggered !== t.type ? se.event.dispatch.apply(e, arguments) : void 0;
      }), t = (t || "").match(ke) || [""], d = t.length; d--;) {
        a = Re.exec(t[d]) || [], f = v = a[1], p = (a[2] || "").split(".").sort(), f && (c = se.event.special[f] || {}, f = (o ? c.delegateType : c.bindType) || f, c = se.event.special[f] || {}, u = se.extend({ type: f, origType: v, data: n, handler: i, guid: i.guid, selector: o, needsContext: o && se.expr.match.needsContext.test(o), namespace: p.join(".") }, s), (h = l[f]) || (h = l[f] = [], h.delegateCount = 0, c.setup && c.setup.call(e, n, p, r) !== !1 || e.addEventListener && e.addEventListener(f, r)), c.add && (c.add.call(e, u), u.handler.guid || (u.handler.guid = i.guid)), o ? h.splice(h.delegateCount++, 0, u) : h.push(u), se.event.global[f] = !0);
      }
    }, remove: function remove(e, t, i, n, o) {
      var s,
          r,
          a,
          l,
          d,
          u,
          c,
          h,
          f,
          p,
          v,
          m = Te.hasData(e) && Te.get(e);if (m && (l = m.events)) {
        for (t = (t || "").match(ke) || [""], d = t.length; d--;) {
          if (a = Re.exec(t[d]) || [], f = v = a[1], p = (a[2] || "").split(".").sort(), f) {
            for (c = se.event.special[f] || {}, f = (n ? c.delegateType : c.bindType) || f, h = l[f] || [], a = a[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), r = s = h.length; s--;) {
              u = h[s], !o && v !== u.origType || i && i.guid !== u.guid || a && !a.test(u.namespace) || n && n !== u.selector && ("**" !== n || !u.selector) || (h.splice(s, 1), u.selector && h.delegateCount--, c.remove && c.remove.call(e, u));
            }r && !h.length && (c.teardown && c.teardown.call(e, p, m.handle) !== !1 || se.removeEvent(e, f, m.handle), delete l[f]);
          } else for (f in l) {
            se.event.remove(e, f + t[d], i, n, !0);
          }
        }se.isEmptyObject(l) && Te.remove(e, "handle events");
      }
    }, dispatch: function dispatch(e) {
      e = se.event.fix(e);var t,
          i,
          n,
          o,
          s,
          r = [],
          a = G.call(arguments),
          l = (Te.get(this, "events") || {})[e.type] || [],
          d = se.event.special[e.type] || {};if (a[0] = e, e.delegateTarget = this, !d.preDispatch || d.preDispatch.call(this, e) !== !1) {
        for (r = se.event.handlers.call(this, e, l), t = 0; (o = r[t++]) && !e.isPropagationStopped();) {
          for (e.currentTarget = o.elem, i = 0; (s = o.handlers[i++]) && !e.isImmediatePropagationStopped();) {
            e.rnamespace && !e.rnamespace.test(s.namespace) || (e.handleObj = s, e.data = s.data, n = ((se.event.special[s.origType] || {}).handle || s.handler).apply(o.elem, a), void 0 !== n && (e.result = n) === !1 && (e.preventDefault(), e.stopPropagation()));
          }
        }return d.postDispatch && d.postDispatch.call(this, e), e.result;
      }
    }, handlers: function handlers(e, t) {
      var i,
          n,
          o,
          s,
          r = [],
          a = t.delegateCount,
          l = e.target;if (a && l.nodeType && ("click" !== e.type || isNaN(e.button) || e.button < 1)) for (; l !== this; l = l.parentNode || this) {
        if (1 === l.nodeType && (l.disabled !== !0 || "click" !== e.type)) {
          for (n = [], i = 0; i < a; i++) {
            s = t[i], o = s.selector + " ", void 0 === n[o] && (n[o] = s.needsContext ? se(o, this).index(l) > -1 : se.find(o, this, null, [l]).length), n[o] && n.push(s);
          }n.length && r.push({ elem: l, handlers: n });
        }
      }return a < t.length && r.push({ elem: this, handlers: t.slice(a) }), r;
    }, props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(e, t) {
        return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e;
      } }, mouseHooks: { props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(e, t) {
        var i,
            n,
            o,
            s = t.button;return null == e.pageX && null != t.clientX && (i = e.target.ownerDocument || X, n = i.documentElement, o = i.body, e.pageX = t.clientX + (n && n.scrollLeft || o && o.scrollLeft || 0) - (n && n.clientLeft || o && o.clientLeft || 0), e.pageY = t.clientY + (n && n.scrollTop || o && o.scrollTop || 0) - (n && n.clientTop || o && o.clientTop || 0)), e.which || void 0 === s || (e.which = 1 & s ? 1 : 2 & s ? 3 : 4 & s ? 2 : 0), e;
      } }, fix: function fix(e) {
      if (e[se.expando]) return e;var t,
          i,
          n,
          o = e.type,
          s = e,
          r = this.fixHooks[o];for (r || (this.fixHooks[o] = r = Le.test(o) ? this.mouseHooks : qe.test(o) ? this.keyHooks : {}), n = r.props ? this.props.concat(r.props) : this.props, e = new se.Event(s), t = n.length; t--;) {
        i = n[t], e[i] = s[i];
      }return e.target || (e.target = X), 3 === e.target.nodeType && (e.target = e.target.parentNode), r.filter ? r.filter(e, s) : e;
    }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
          if (this !== v() && this.focus) return this.focus(), !1;
        }, delegateType: "focusin" }, blur: { trigger: function trigger() {
          if (this === v() && this.blur) return this.blur(), !1;
        }, delegateType: "focusout" }, click: { trigger: function trigger() {
          if ("checkbox" === this.type && this.click && se.nodeName(this, "input")) return this.click(), !1;
        }, _default: function _default(e) {
          return se.nodeName(e.target, "a");
        } }, beforeunload: { postDispatch: function postDispatch(e) {
          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
        } } } }, se.removeEvent = function (e, t, i) {
    e.removeEventListener && e.removeEventListener(t, i);
  }, se.Event = function (e, t) {
    return this instanceof se.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && e.returnValue === !1 ? f : p) : this.type = e, t && se.extend(this, t), this.timeStamp = e && e.timeStamp || se.now(), void (this[se.expando] = !0)) : new se.Event(e, t);
  }, se.Event.prototype = { constructor: se.Event, isDefaultPrevented: p, isPropagationStopped: p, isImmediatePropagationStopped: p, isSimulated: !1, preventDefault: function preventDefault() {
      var e = this.originalEvent;this.isDefaultPrevented = f, e && !this.isSimulated && e.preventDefault();
    }, stopPropagation: function stopPropagation() {
      var e = this.originalEvent;this.isPropagationStopped = f, e && !this.isSimulated && e.stopPropagation();
    }, stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;this.isImmediatePropagationStopped = f, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
    } }, se.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (e, t) {
    se.event.special[e] = { delegateType: t, bindType: t, handle: function handle(e) {
        var i,
            n = this,
            o = e.relatedTarget,
            s = e.handleObj;return o && (o === n || se.contains(n, o)) || (e.type = s.origType, i = s.handler.apply(this, arguments), e.type = t), i;
      } };
  }), se.fn.extend({ on: function on(e, t, i, n) {
      return m(this, e, t, i, n);
    }, one: function one(e, t, i, n) {
      return m(this, e, t, i, n, 1);
    }, off: function off(e, t, i) {
      var n, o;if (e && e.preventDefault && e.handleObj) return n = e.handleObj, se(e.delegateTarget).off(n.namespace ? n.origType + "." + n.namespace : n.origType, n.selector, n.handler), this;if ("object" === ("undefined" == typeof e ? "undefined" : _typeof(e))) {
        for (o in e) {
          this.off(o, t, e[o]);
        }return this;
      }return t !== !1 && "function" != typeof t || (i = t, t = void 0), i === !1 && (i = p), this.each(function () {
        se.event.remove(this, e, i, t);
      });
    } });var Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
      Ie = /<script|<style|<link/i,
      Be = /checked\s*(?:[^=]|=\s*.checked.)/i,
      We = /^true\/(.*)/,
      Ye = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;se.extend({ htmlPrefilter: function htmlPrefilter(e) {
      return e.replace(Ne, "<$1></$2>");
    }, clone: function e(t, i, n) {
      var o,
          s,
          r,
          a,
          e = t.cloneNode(!0),
          l = se.contains(t.ownerDocument, t);if (!(ne.noCloneChecked || 1 !== t.nodeType && 11 !== t.nodeType || se.isXMLDoc(t))) for (a = u(e), r = u(t), o = 0, s = r.length; o < s; o++) {
        k(r[o], a[o]);
      }if (i) if (n) for (r = r || u(t), a = a || u(e), o = 0, s = r.length; o < s; o++) {
        b(r[o], a[o]);
      } else b(t, e);return a = u(e, "script"), a.length > 0 && c(a, !l && u(t, "script")), e;
    }, cleanData: function cleanData(e) {
      for (var t, i, n, o = se.event.special, s = 0; void 0 !== (i = e[s]); s++) {
        if (xe(i)) {
          if (t = i[Te.expando]) {
            if (t.events) for (n in t.events) {
              o[n] ? se.event.remove(i, n) : se.removeEvent(i, n, t.handle);
            }i[Te.expando] = void 0;
          }i[Se.expando] && (i[Se.expando] = void 0);
        }
      }
    } }), se.fn.extend({ domManip: C, detach: function detach(e) {
      return $(this, e, !0);
    }, remove: function remove(e) {
      return $(this, e);
    }, text: function text(e) {
      return $e(this, function (e) {
        return void 0 === e ? se.text(this) : this.empty().each(function () {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
        });
      }, null, e, arguments.length);
    }, append: function append() {
      return C(this, arguments, function (e) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var t = g(this, e);t.appendChild(e);
        }
      });
    }, prepend: function prepend() {
      return C(this, arguments, function (e) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var t = g(this, e);t.insertBefore(e, t.firstChild);
        }
      });
    }, before: function before() {
      return C(this, arguments, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this);
      });
    }, after: function after() {
      return C(this, arguments, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
      });
    }, empty: function empty() {
      for (var e, t = 0; null != (e = this[t]); t++) {
        1 === e.nodeType && (se.cleanData(u(e, !1)), e.textContent = "");
      }return this;
    }, clone: function clone(e, t) {
      return e = null != e && e, t = null == t ? e : t, this.map(function () {
        return se.clone(this, e, t);
      });
    }, html: function html(e) {
      return $e(this, function (e) {
        var t = this[0] || {},
            i = 0,
            n = this.length;if (void 0 === e && 1 === t.nodeType) return t.innerHTML;if ("string" == typeof e && !Ie.test(e) && !Me[(De.exec(e) || ["", ""])[1].toLowerCase()]) {
          e = se.htmlPrefilter(e);try {
            for (; i < n; i++) {
              t = this[i] || {}, 1 === t.nodeType && (se.cleanData(u(t, !1)), t.innerHTML = e);
            }t = 0;
          } catch (e) {}
        }t && this.empty().append(e);
      }, null, e, arguments.length);
    }, replaceWith: function replaceWith() {
      var e = [];return C(this, arguments, function (t) {
        var i = this.parentNode;se.inArray(this, e) < 0 && (se.cleanData(u(this)), i && i.replaceChild(t, this));
      }, e);
    } }), se.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (e, t) {
    se.fn[e] = function (e) {
      for (var i, n = [], o = se(e), s = o.length - 1, r = 0; r <= s; r++) {
        i = r === s ? this : this.clone(!0), se(o[r])[t](i), Z.apply(n, i.get());
      }return this.pushStack(n);
    };
  });var Qe,
      Ue = { HTML: "block", BODY: "block" },
      Ke = /^margin/,
      Xe = new RegExp("^(" + ze + ")(?!px)[a-z%]+$", "i"),
      Ge = function Ge(t) {
    var i = t.ownerDocument.defaultView;return i && i.opener || (i = e), i.getComputedStyle(t);
  },
      Ve = function Ve(e, t, i, n) {
    var o,
        s,
        r = {};for (s in t) {
      r[s] = e.style[s], e.style[s] = t[s];
    }o = i.apply(e, n || []);for (s in t) {
      e.style[s] = r[s];
    }return o;
  },
      Ze = X.documentElement;!function () {
    function t() {
      a.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", a.innerHTML = "", Ze.appendChild(r);var t = e.getComputedStyle(a);i = "1%" !== t.top, s = "2px" === t.marginLeft, n = "4px" === t.width, a.style.marginRight = "50%", o = "4px" === t.marginRight, Ze.removeChild(r);
    }var i,
        n,
        o,
        s,
        r = X.createElement("div"),
        a = X.createElement("div");a.style && (a.style.backgroundClip = "content-box", a.cloneNode(!0).style.backgroundClip = "", ne.clearCloneStyle = "content-box" === a.style.backgroundClip, r.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", r.appendChild(a), se.extend(ne, { pixelPosition: function pixelPosition() {
        return t(), i;
      }, boxSizingReliable: function boxSizingReliable() {
        return null == n && t(), n;
      }, pixelMarginRight: function pixelMarginRight() {
        return null == n && t(), o;
      }, reliableMarginLeft: function reliableMarginLeft() {
        return null == n && t(), s;
      }, reliableMarginRight: function reliableMarginRight() {
        var t,
            i = a.appendChild(X.createElement("div"));return i.style.cssText = a.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", a.style.width = "1px", Ze.appendChild(r), t = !parseFloat(e.getComputedStyle(i).marginRight), Ze.removeChild(r), a.removeChild(i), t;
      } }));
  }();var Je = /^(none|table(?!-c[ea]).+)/,
      et = { position: "absolute", visibility: "hidden", display: "block" },
      tt = { letterSpacing: "0", fontWeight: "400" },
      it = ["Webkit", "O", "Moz", "ms"],
      nt = X.createElement("div").style;se.extend({ cssHooks: { opacity: { get: function get(e, t) {
          if (t) {
            var i = S(e, "opacity");return "" === i ? "1" : i;
          }
        } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { float: "cssFloat" }, style: function e(t, i, n, o) {
      if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
        var s,
            r,
            a,
            l = se.camelCase(i),
            e = t.style;return i = se.cssProps[l] || (se.cssProps[l] = F(l) || l), a = se.cssHooks[i] || se.cssHooks[l], void 0 === n ? a && "get" in a && void 0 !== (s = a.get(t, !1, o)) ? s : e[i] : (r = "undefined" == typeof n ? "undefined" : _typeof(n), "string" === r && (s = Ae.exec(n)) && s[1] && (n = d(t, i, s), r = "number"), null != n && n === n && ("number" === r && (n += s && s[3] || (se.cssNumber[l] ? "" : "px")), ne.clearCloneStyle || "" !== n || 0 !== i.indexOf("background") || (e[i] = "inherit"), a && "set" in a && void 0 === (n = a.set(t, n, o)) || (e[i] = n)), void 0);
      }
    }, css: function css(e, t, i, n) {
      var o,
          s,
          r,
          a = se.camelCase(t);return t = se.cssProps[a] || (se.cssProps[a] = F(a) || a), r = se.cssHooks[t] || se.cssHooks[a], r && "get" in r && (o = r.get(e, !0, i)), void 0 === o && (o = S(e, t, n)), "normal" === o && t in tt && (o = tt[t]), "" === i || i ? (s = parseFloat(o), i === !0 || isFinite(s) ? s || 0 : o) : o;
    } }), se.each(["height", "width"], function (e, t) {
    se.cssHooks[t] = { get: function get(e, i, n) {
        if (i) return Je.test(se.css(e, "display")) && 0 === e.offsetWidth ? Ve(e, et, function () {
          return O(e, t, n);
        }) : O(e, t, n);
      }, set: function set(e, i, n) {
        var o,
            s = n && Ge(e),
            r = n && A(e, t, n, "border-box" === se.css(e, "boxSizing", !1, s), s);return r && (o = Ae.exec(i)) && "px" !== (o[3] || "px") && (e.style[t] = i, i = se.css(e, t)), z(e, i, r);
      } };
  }), se.cssHooks.marginLeft = _(ne.reliableMarginLeft, function (e, t) {
    if (t) return (parseFloat(S(e, "marginLeft")) || e.getBoundingClientRect().left - Ve(e, { marginLeft: 0 }, function () {
      return e.getBoundingClientRect().left;
    })) + "px";
  }), se.cssHooks.marginRight = _(ne.reliableMarginRight, function (e, t) {
    if (t) return Ve(e, { display: "inline-block" }, S, [e, "marginRight"]);
  }), se.each({ margin: "", padding: "", border: "Width" }, function (e, t) {
    se.cssHooks[e + t] = { expand: function expand(i) {
        for (var n = 0, o = {}, s = "string" == typeof i ? i.split(" ") : [i]; n < 4; n++) {
          o[e + Oe[n] + t] = s[n] || s[n - 2] || s[0];
        }return o;
      } }, Ke.test(e) || (se.cssHooks[e + t].set = z);
  }), se.fn.extend({ css: function css(e, t) {
      return $e(this, function (e, t, i) {
        var n,
            o,
            s = {},
            r = 0;if (se.isArray(t)) {
          for (n = Ge(e), o = t.length; r < o; r++) {
            s[t[r]] = se.css(e, t[r], !1, n);
          }return s;
        }return void 0 !== i ? se.style(e, t, i) : se.css(e, t);
      }, e, t, arguments.length > 1);
    }, show: function show() {
      return E(this, !0);
    }, hide: function hide() {
      return E(this);
    }, toggle: function toggle(e) {
      return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {
        Ee(this) ? se(this).show() : se(this).hide();
      });
    } }), se.Tween = P, P.prototype = { constructor: P, init: function init(e, t, i, n, o, s) {
      this.elem = e, this.prop = i, this.easing = o || se.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = n, this.unit = s || (se.cssNumber[i] ? "" : "px");
    }, cur: function cur() {
      var e = P.propHooks[this.prop];return e && e.get ? e.get(this) : P.propHooks._default.get(this);
    }, run: function run(e) {
      var t,
          i = P.propHooks[this.prop];return this.options.duration ? this.pos = t = se.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), i && i.set ? i.set(this) : P.propHooks._default.set(this), this;
    } }, P.prototype.init.prototype = P.prototype, P.propHooks = { _default: { get: function get(e) {
        var t;return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = se.css(e.elem, e.prop, ""), t && "auto" !== t ? t : 0);
      }, set: function set(e) {
        se.fx.step[e.prop] ? se.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[se.cssProps[e.prop]] && !se.cssHooks[e.prop] ? e.elem[e.prop] = e.now : se.style(e.elem, e.prop, e.now + e.unit);
      } } }, P.propHooks.scrollTop = P.propHooks.scrollLeft = { set: function set(e) {
      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
    } }, se.easing = { linear: function linear(e) {
      return e;
    }, swing: function swing(e) {
      return .5 - Math.cos(e * Math.PI) / 2;
    }, _default: "swing" }, se.fx = P.prototype.init, se.fx.step = {};var ot,
      st,
      rt = /^(?:toggle|show|hide)$/,
      at = /queueHooks$/;se.Animation = se.extend(L, { tweeners: { "*": [function (e, t) {
        var i = this.createTween(e, t);return d(i.elem, e, Ae.exec(t), i), i;
      }] }, tweener: function tweener(e, t) {
      se.isFunction(e) ? (t = e, e = ["*"]) : e = e.match(ke);for (var i, n = 0, o = e.length; n < o; n++) {
        i = e[n], L.tweeners[i] = L.tweeners[i] || [], L.tweeners[i].unshift(t);
      }
    }, prefilters: [j], prefilter: function prefilter(e, t) {
      t ? L.prefilters.unshift(e) : L.prefilters.push(e);
    } }), se.speed = function (e, t, i) {
    var n = e && "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) ? se.extend({}, e) : { complete: i || !i && t || se.isFunction(e) && e, duration: e, easing: i && t || t && !se.isFunction(t) && t };return n.duration = se.fx.off ? 0 : "number" == typeof n.duration ? n.duration : n.duration in se.fx.speeds ? se.fx.speeds[n.duration] : se.fx.speeds._default, null != n.queue && n.queue !== !0 || (n.queue = "fx"), n.old = n.complete, n.complete = function () {
      se.isFunction(n.old) && n.old.call(this), n.queue && se.dequeue(this, n.queue);
    }, n;
  }, se.fn.extend({ fadeTo: function fadeTo(e, t, i, n) {
      return this.filter(Ee).css("opacity", 0).show().end().animate({ opacity: t }, e, i, n);
    }, animate: function animate(e, t, i, n) {
      var o = se.isEmptyObject(e),
          s = se.speed(t, i, n),
          r = function r() {
        var t = L(this, se.extend({}, e), s);(o || Te.get(this, "finish")) && t.stop(!0);
      };return r.finish = r, o || s.queue === !1 ? this.each(r) : this.queue(s.queue, r);
    }, stop: function stop(e, t, i) {
      var n = function n(e) {
        var t = e.stop;delete e.stop, t(i);
      };return "string" != typeof e && (i = t, t = e, e = void 0), t && e !== !1 && this.queue(e || "fx", []), this.each(function () {
        var t = !0,
            o = null != e && e + "queueHooks",
            s = se.timers,
            r = Te.get(this);if (o) r[o] && r[o].stop && n(r[o]);else for (o in r) {
          r[o] && r[o].stop && at.test(o) && n(r[o]);
        }for (o = s.length; o--;) {
          s[o].elem !== this || null != e && s[o].queue !== e || (s[o].anim.stop(i), t = !1, s.splice(o, 1));
        }!t && i || se.dequeue(this, e);
      });
    }, finish: function finish(e) {
      return e !== !1 && (e = e || "fx"), this.each(function () {
        var t,
            i = Te.get(this),
            n = i[e + "queue"],
            o = i[e + "queueHooks"],
            s = se.timers,
            r = n ? n.length : 0;for (i.finish = !0, se.queue(this, e, []), o && o.stop && o.stop.call(this, !0), t = s.length; t--;) {
          s[t].elem === this && s[t].queue === e && (s[t].anim.stop(!0), s.splice(t, 1));
        }for (t = 0; t < r; t++) {
          n[t] && n[t].finish && n[t].finish.call(this);
        }delete i.finish;
      });
    } }), se.each(["toggle", "show", "hide"], function (e, t) {
    var i = se.fn[t];se.fn[t] = function (e, n, o) {
      return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(H(t, !0), e, n, o);
    };
  }), se.each({ slideDown: H("show"), slideUp: H("hide"), slideToggle: H("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (e, t) {
    se.fn[e] = function (e, i, n) {
      return this.animate(t, e, i, n);
    };
  }), se.timers = [], se.fx.tick = function () {
    var e,
        t = 0,
        i = se.timers;for (ot = se.now(); t < i.length; t++) {
      e = i[t], e() || i[t] !== e || i.splice(t--, 1);
    }i.length || se.fx.stop(), ot = void 0;
  }, se.fx.timer = function (e) {
    se.timers.push(e), e() ? se.fx.start() : se.timers.pop();
  }, se.fx.interval = 13, se.fx.start = function () {
    st || (st = e.setInterval(se.fx.tick, se.fx.interval));
  }, se.fx.stop = function () {
    e.clearInterval(st), st = null;
  }, se.fx.speeds = { slow: 600, fast: 200, _default: 400 }, se.fn.delay = function (t, i) {
    return t = se.fx ? se.fx.speeds[t] || t : t, i = i || "fx", this.queue(i, function (i, n) {
      var o = e.setTimeout(i, t);n.stop = function () {
        e.clearTimeout(o);
      };
    });
  }, function () {
    var e = X.createElement("input"),
        t = X.createElement("select"),
        i = t.appendChild(X.createElement("option"));e.type = "checkbox", ne.checkOn = "" !== e.value, ne.optSelected = i.selected, t.disabled = !0, ne.optDisabled = !i.disabled, e = X.createElement("input"), e.value = "t", e.type = "radio", ne.radioValue = "t" === e.value;
  }();var lt,
      dt = se.expr.attrHandle;se.fn.extend({ attr: function attr(e, t) {
      return $e(this, se.attr, e, t, arguments.length > 1);
    }, removeAttr: function removeAttr(e) {
      return this.each(function () {
        se.removeAttr(this, e);
      });
    } }), se.extend({ attr: function attr(e, t, i) {
      var n,
          o,
          s = e.nodeType;if (3 !== s && 8 !== s && 2 !== s) return "undefined" == typeof e.getAttribute ? se.prop(e, t, i) : (1 === s && se.isXMLDoc(e) || (t = t.toLowerCase(), o = se.attrHooks[t] || (se.expr.match.bool.test(t) ? lt : void 0)), void 0 !== i ? null === i ? void se.removeAttr(e, t) : o && "set" in o && void 0 !== (n = o.set(e, i, t)) ? n : (e.setAttribute(t, i + ""), i) : o && "get" in o && null !== (n = o.get(e, t)) ? n : (n = se.find.attr(e, t), null == n ? void 0 : n));
    }, attrHooks: { type: { set: function set(e, t) {
          if (!ne.radioValue && "radio" === t && se.nodeName(e, "input")) {
            var i = e.value;return e.setAttribute("type", t), i && (e.value = i), t;
          }
        } } }, removeAttr: function removeAttr(e, t) {
      var i,
          n,
          o = 0,
          s = t && t.match(ke);if (s && 1 === e.nodeType) for (; i = s[o++];) {
        n = se.propFix[i] || i, se.expr.match.bool.test(i) && (e[n] = !1), e.removeAttribute(i);
      }
    } }), lt = { set: function set(e, t, i) {
      return t === !1 ? se.removeAttr(e, i) : e.setAttribute(i, i), i;
    } }, se.each(se.expr.match.bool.source.match(/\w+/g), function (e, t) {
    var i = dt[t] || se.find.attr;dt[t] = function (e, t, n) {
      var o, s;return n || (s = dt[t], dt[t] = o, o = null != i(e, t, n) ? t.toLowerCase() : null, dt[t] = s), o;
    };
  });var ut = /^(?:input|select|textarea|button)$/i,
      ct = /^(?:a|area)$/i;se.fn.extend({ prop: function prop(e, t) {
      return $e(this, se.prop, e, t, arguments.length > 1);
    }, removeProp: function removeProp(e) {
      return this.each(function () {
        delete this[se.propFix[e] || e];
      });
    } }), se.extend({ prop: function prop(e, t, i) {
      var n,
          o,
          s = e.nodeType;if (3 !== s && 8 !== s && 2 !== s) return 1 === s && se.isXMLDoc(e) || (t = se.propFix[t] || t, o = se.propHooks[t]), void 0 !== i ? o && "set" in o && void 0 !== (n = o.set(e, i, t)) ? n : e[t] = i : o && "get" in o && null !== (n = o.get(e, t)) ? n : e[t];
    }, propHooks: { tabIndex: { get: function get(e) {
          var t = se.find.attr(e, "tabindex");return t ? parseInt(t, 10) : ut.test(e.nodeName) || ct.test(e.nodeName) && e.href ? 0 : -1;
        } } }, propFix: { for: "htmlFor", class: "className" } }), ne.optSelected || (se.propHooks.selected = { get: function get(e) {
      var t = e.parentNode;return t && t.parentNode && t.parentNode.selectedIndex, null;
    }, set: function set(e) {
      var t = e.parentNode;t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
    } }), se.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    se.propFix[this.toLowerCase()] = this;
  });var ht = /[\t\r\n\f]/g;se.fn.extend({ addClass: function addClass(e) {
      var t,
          i,
          n,
          o,
          s,
          r,
          a,
          l = 0;if (se.isFunction(e)) return this.each(function (t) {
        se(this).addClass(e.call(this, t, R(this)));
      });if ("string" == typeof e && e) for (t = e.match(ke) || []; i = this[l++];) {
        if (o = R(i), n = 1 === i.nodeType && (" " + o + " ").replace(ht, " ")) {
          for (r = 0; s = t[r++];) {
            n.indexOf(" " + s + " ") < 0 && (n += s + " ");
          }a = se.trim(n), o !== a && i.setAttribute("class", a);
        }
      }return this;
    }, removeClass: function removeClass(e) {
      var t,
          i,
          n,
          o,
          s,
          r,
          a,
          l = 0;if (se.isFunction(e)) return this.each(function (t) {
        se(this).removeClass(e.call(this, t, R(this)));
      });if (!arguments.length) return this.attr("class", "");if ("string" == typeof e && e) for (t = e.match(ke) || []; i = this[l++];) {
        if (o = R(i), n = 1 === i.nodeType && (" " + o + " ").replace(ht, " ")) {
          for (r = 0; s = t[r++];) {
            for (; n.indexOf(" " + s + " ") > -1;) {
              n = n.replace(" " + s + " ", " ");
            }
          }a = se.trim(n), o !== a && i.setAttribute("class", a);
        }
      }return this;
    }, toggleClass: function toggleClass(e, t) {
      var i = "undefined" == typeof e ? "undefined" : _typeof(e);return "boolean" == typeof t && "string" === i ? t ? this.addClass(e) : this.removeClass(e) : se.isFunction(e) ? this.each(function (i) {
        se(this).toggleClass(e.call(this, i, R(this), t), t);
      }) : this.each(function () {
        var t, n, o, s;if ("string" === i) for (n = 0, o = se(this), s = e.match(ke) || []; t = s[n++];) {
          o.hasClass(t) ? o.removeClass(t) : o.addClass(t);
        } else void 0 !== e && "boolean" !== i || (t = R(this), t && Te.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || e === !1 ? "" : Te.get(this, "__className__") || ""));
      });
    }, hasClass: function hasClass(e) {
      var t,
          i,
          n = 0;for (t = " " + e + " "; i = this[n++];) {
        if (1 === i.nodeType && (" " + R(i) + " ").replace(ht, " ").indexOf(t) > -1) return !0;
      }return !1;
    } });var ft = /\r/g,
      pt = /[\x20\t\r\n\f]+/g;se.fn.extend({ val: function val(e) {
      var t,
          i,
          n,
          o = this[0];{
        if (arguments.length) return n = se.isFunction(e), this.each(function (i) {
          var o;1 === this.nodeType && (o = n ? e.call(this, i, se(this).val()) : e, null == o ? o = "" : "number" == typeof o ? o += "" : se.isArray(o) && (o = se.map(o, function (e) {
            return null == e ? "" : e + "";
          })), t = se.valHooks[this.type] || se.valHooks[this.nodeName.toLowerCase()], t && "set" in t && void 0 !== t.set(this, o, "value") || (this.value = o));
        });if (o) return t = se.valHooks[o.type] || se.valHooks[o.nodeName.toLowerCase()], t && "get" in t && void 0 !== (i = t.get(o, "value")) ? i : (i = o.value, "string" == typeof i ? i.replace(ft, "") : null == i ? "" : i);
      }
    } }), se.extend({ valHooks: { option: { get: function get(e) {
          var t = se.find.attr(e, "value");return null != t ? t : se.trim(se.text(e)).replace(pt, " ");
        } }, select: { get: function get(e) {
          for (var t, i, n = e.options, o = e.selectedIndex, s = "select-one" === e.type || o < 0, r = s ? null : [], a = s ? o + 1 : n.length, l = o < 0 ? a : s ? o : 0; l < a; l++) {
            if (i = n[l], (i.selected || l === o) && (ne.optDisabled ? !i.disabled : null === i.getAttribute("disabled")) && (!i.parentNode.disabled || !se.nodeName(i.parentNode, "optgroup"))) {
              if (t = se(i).val(), s) return t;r.push(t);
            }
          }return r;
        }, set: function set(e, t) {
          for (var i, n, o = e.options, s = se.makeArray(t), r = o.length; r--;) {
            n = o[r], (n.selected = se.inArray(se.valHooks.option.get(n), s) > -1) && (i = !0);
          }return i || (e.selectedIndex = -1), s;
        } } } }), se.each(["radio", "checkbox"], function () {
    se.valHooks[this] = { set: function set(e, t) {
        if (se.isArray(t)) return e.checked = se.inArray(se(e).val(), t) > -1;
      } }, ne.checkOn || (se.valHooks[this].get = function (e) {
      return null === e.getAttribute("value") ? "on" : e.value;
    });
  });var vt = /^(?:focusinfocus|focusoutblur)$/;se.extend(se.event, { trigger: function trigger(t, i, n, o) {
      var s,
          r,
          a,
          l,
          d,
          u,
          c,
          h = [n || X],
          f = ie.call(t, "type") ? t.type : t,
          p = ie.call(t, "namespace") ? t.namespace.split(".") : [];if (r = a = n = n || X, 3 !== n.nodeType && 8 !== n.nodeType && !vt.test(f + se.event.triggered) && (f.indexOf(".") > -1 && (p = f.split("."), f = p.shift(), p.sort()), d = f.indexOf(":") < 0 && "on" + f, t = t[se.expando] ? t : new se.Event(f, "object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) && t), t.isTrigger = o ? 2 : 3, t.namespace = p.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = n), i = null == i ? [t] : se.makeArray(i, [t]), c = se.event.special[f] || {}, o || !c.trigger || c.trigger.apply(n, i) !== !1)) {
        if (!o && !c.noBubble && !se.isWindow(n)) {
          for (l = c.delegateType || f, vt.test(l + f) || (r = r.parentNode); r; r = r.parentNode) {
            h.push(r), a = r;
          }a === (n.ownerDocument || X) && h.push(a.defaultView || a.parentWindow || e);
        }for (s = 0; (r = h[s++]) && !t.isPropagationStopped();) {
          t.type = s > 1 ? l : c.bindType || f, u = (Te.get(r, "events") || {})[t.type] && Te.get(r, "handle"), u && u.apply(r, i), u = d && r[d], u && u.apply && xe(r) && (t.result = u.apply(r, i), t.result === !1 && t.preventDefault());
        }return t.type = f, o || t.isDefaultPrevented() || c._default && c._default.apply(h.pop(), i) !== !1 || !xe(n) || d && se.isFunction(n[f]) && !se.isWindow(n) && (a = n[d], a && (n[d] = null), se.event.triggered = f, n[f](), se.event.triggered = void 0, a && (n[d] = a)), t.result;
      }
    }, simulate: function simulate(e, t, i) {
      var n = se.extend(new se.Event(), i, { type: e, isSimulated: !0 });se.event.trigger(n, null, t);
    } }), se.fn.extend({ trigger: function trigger(e, t) {
      return this.each(function () {
        se.event.trigger(e, t, this);
      });
    }, triggerHandler: function triggerHandler(e, t) {
      var i = this[0];if (i) return se.event.trigger(e, t, i, !0);
    } }), se.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (e, t) {
    se.fn[t] = function (e, i) {
      return arguments.length > 0 ? this.on(t, null, e, i) : this.trigger(t);
    };
  }), se.fn.extend({ hover: function hover(e, t) {
      return this.mouseenter(e).mouseleave(t || e);
    } }), ne.focusin = "onfocusin" in e, ne.focusin || se.each({ focus: "focusin", blur: "focusout" }, function (e, t) {
    var i = function i(e) {
      se.event.simulate(t, e.target, se.event.fix(e));
    };se.event.special[t] = { setup: function setup() {
        var n = this.ownerDocument || this,
            o = Te.access(n, t);o || n.addEventListener(e, i, !0), Te.access(n, t, (o || 0) + 1);
      }, teardown: function teardown() {
        var n = this.ownerDocument || this,
            o = Te.access(n, t) - 1;o ? Te.access(n, t, o) : (n.removeEventListener(e, i, !0), Te.remove(n, t));
      } };
  });var mt = e.location,
      gt = se.now(),
      yt = /\?/;se.parseJSON = function (e) {
    return JSON.parse(e + "");
  }, se.parseXML = function (t) {
    var i;if (!t || "string" != typeof t) return null;try {
      i = new e.DOMParser().parseFromString(t, "text/xml");
    } catch (e) {
      i = void 0;
    }return i && !i.getElementsByTagName("parsererror").length || se.error("Invalid XML: " + t), i;
  };var wt = /#.*$/,
      bt = /([?&])_=[^&]*/,
      kt = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Ct = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      $t = /^(?:GET|HEAD)$/,
      xt = /^\/\//,
      Tt = {},
      St = {},
      _t = "*/".concat("*"),
      Ft = X.createElement("a");Ft.href = mt.href, se.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: mt.href, type: "GET", isLocal: Ct.test(mt.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": _t, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": se.parseJSON, "text xml": se.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(e, t) {
      return t ? B(B(e, se.ajaxSettings), t) : B(se.ajaxSettings, e);
    }, ajaxPrefilter: N(Tt), ajaxTransport: N(St), ajax: function ajax(t, i) {
      function n(t, i, n, a) {
        var d,
            c,
            y,
            w,
            k,
            $ = i;2 !== b && (b = 2, l && e.clearTimeout(l), o = void 0, r = a || "", C.readyState = t > 0 ? 4 : 0, d = t >= 200 && t < 300 || 304 === t, n && (w = W(h, C, n)), w = Y(h, w, C, d), d ? (h.ifModified && (k = C.getResponseHeader("Last-Modified"), k && (se.lastModified[s] = k), k = C.getResponseHeader("etag"), k && (se.etag[s] = k)), 204 === t || "HEAD" === h.type ? $ = "nocontent" : 304 === t ? $ = "notmodified" : ($ = w.state, c = w.data, y = w.error, d = !y)) : (y = $, !t && $ || ($ = "error", t < 0 && (t = 0))), C.status = t, C.statusText = (i || $) + "", d ? v.resolveWith(f, [c, $, C]) : v.rejectWith(f, [C, $, y]), C.statusCode(g), g = void 0, u && p.trigger(d ? "ajaxSuccess" : "ajaxError", [C, h, d ? c : y]), m.fireWith(f, [C, $]), u && (p.trigger("ajaxComplete", [C, h]), --se.active || se.event.trigger("ajaxStop")));
      }"object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) && (i = t, t = void 0), i = i || {};var o,
          s,
          r,
          a,
          l,
          d,
          u,
          c,
          h = se.ajaxSetup({}, i),
          f = h.context || h,
          p = h.context && (f.nodeType || f.jquery) ? se(f) : se.event,
          v = se.Deferred(),
          m = se.Callbacks("once memory"),
          g = h.statusCode || {},
          y = {},
          w = {},
          b = 0,
          k = "canceled",
          C = { readyState: 0, getResponseHeader: function getResponseHeader(e) {
          var t;if (2 === b) {
            if (!a) for (a = {}; t = kt.exec(r);) {
              a[t[1].toLowerCase()] = t[2];
            }t = a[e.toLowerCase()];
          }return null == t ? null : t;
        }, getAllResponseHeaders: function getAllResponseHeaders() {
          return 2 === b ? r : null;
        }, setRequestHeader: function setRequestHeader(e, t) {
          var i = e.toLowerCase();return b || (e = w[i] = w[i] || e, y[e] = t), this;
        }, overrideMimeType: function overrideMimeType(e) {
          return b || (h.mimeType = e), this;
        }, statusCode: function statusCode(e) {
          var t;if (e) if (b < 2) for (t in e) {
            g[t] = [g[t], e[t]];
          } else C.always(e[C.status]);return this;
        }, abort: function abort(e) {
          var t = e || k;return o && o.abort(t), n(0, t), this;
        } };if (v.promise(C).complete = m.add, C.success = C.done, C.error = C.fail, h.url = ((t || h.url || mt.href) + "").replace(wt, "").replace(xt, mt.protocol + "//"), h.type = i.method || i.type || h.method || h.type, h.dataTypes = se.trim(h.dataType || "*").toLowerCase().match(ke) || [""], null == h.crossDomain) {
        d = X.createElement("a");try {
          d.href = h.url, d.href = d.href, h.crossDomain = Ft.protocol + "//" + Ft.host != d.protocol + "//" + d.host;
        } catch (e) {
          h.crossDomain = !0;
        }
      }if (h.data && h.processData && "string" != typeof h.data && (h.data = se.param(h.data, h.traditional)), I(Tt, h, i, C), 2 === b) return C;u = se.event && h.global, u && 0 === se.active++ && se.event.trigger("ajaxStart"), h.type = h.type.toUpperCase(), h.hasContent = !$t.test(h.type), s = h.url, h.hasContent || (h.data && (s = h.url += (yt.test(s) ? "&" : "?") + h.data, delete h.data), h.cache === !1 && (h.url = bt.test(s) ? s.replace(bt, "$1_=" + gt++) : s + (yt.test(s) ? "&" : "?") + "_=" + gt++)), h.ifModified && (se.lastModified[s] && C.setRequestHeader("If-Modified-Since", se.lastModified[s]), se.etag[s] && C.setRequestHeader("If-None-Match", se.etag[s])), (h.data && h.hasContent && h.contentType !== !1 || i.contentType) && C.setRequestHeader("Content-Type", h.contentType), C.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + _t + "; q=0.01" : "") : h.accepts["*"]);for (c in h.headers) {
        C.setRequestHeader(c, h.headers[c]);
      }if (h.beforeSend && (h.beforeSend.call(f, C, h) === !1 || 2 === b)) return C.abort();k = "abort";for (c in { success: 1, error: 1, complete: 1 }) {
        C[c](h[c]);
      }if (o = I(St, h, i, C)) {
        if (C.readyState = 1, u && p.trigger("ajaxSend", [C, h]), 2 === b) return C;h.async && h.timeout > 0 && (l = e.setTimeout(function () {
          C.abort("timeout");
        }, h.timeout));try {
          b = 1, o.send(y, n);
        } catch (e) {
          if (!(b < 2)) throw e;n(-1, e);
        }
      } else n(-1, "No Transport");return C;
    }, getJSON: function getJSON(e, t, i) {
      return se.get(e, t, i, "json");
    }, getScript: function getScript(e, t) {
      return se.get(e, void 0, t, "script");
    } }), se.each(["get", "post"], function (e, t) {
    se[t] = function (e, i, n, o) {
      return se.isFunction(i) && (o = o || n, n = i, i = void 0), se.ajax(se.extend({ url: e, type: t, dataType: o, data: i, success: n }, se.isPlainObject(e) && e));
    };
  }), se._evalUrl = function (e) {
    return se.ajax({ url: e, type: "GET", dataType: "script", async: !1, global: !1, throws: !0 });
  }, se.fn.extend({ wrapAll: function wrapAll(e) {
      var t;return se.isFunction(e) ? this.each(function (t) {
        se(this).wrapAll(e.call(this, t));
      }) : (this[0] && (t = se(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
        for (var e = this; e.firstElementChild;) {
          e = e.firstElementChild;
        }return e;
      }).append(this)), this);
    }, wrapInner: function wrapInner(e) {
      return se.isFunction(e) ? this.each(function (t) {
        se(this).wrapInner(e.call(this, t));
      }) : this.each(function () {
        var t = se(this),
            i = t.contents();i.length ? i.wrapAll(e) : t.append(e);
      });
    }, wrap: function wrap(e) {
      var t = se.isFunction(e);return this.each(function (i) {
        se(this).wrapAll(t ? e.call(this, i) : e);
      });
    }, unwrap: function unwrap() {
      return this.parent().each(function () {
        se.nodeName(this, "body") || se(this).replaceWith(this.childNodes);
      }).end();
    } }), se.expr.filters.hidden = function (e) {
    return !se.expr.filters.visible(e);
  }, se.expr.filters.visible = function (e) {
    return e.offsetWidth > 0 || e.offsetHeight > 0 || e.getClientRects().length > 0;
  };var zt = /%20/g,
      At = /\[\]$/,
      Ot = /\r?\n/g,
      Et = /^(?:submit|button|image|reset|file)$/i,
      Pt = /^(?:input|select|textarea|keygen)/i;se.param = function (e, t) {
    var i,
        n = [],
        o = function o(e, t) {
      t = se.isFunction(t) ? t() : null == t ? "" : t, n[n.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t);
    };if (void 0 === t && (t = se.ajaxSettings && se.ajaxSettings.traditional), se.isArray(e) || e.jquery && !se.isPlainObject(e)) se.each(e, function () {
      o(this.name, this.value);
    });else for (i in e) {
      Q(i, e[i], t, o);
    }return n.join("&").replace(zt, "+");
  }, se.fn.extend({ serialize: function serialize() {
      return se.param(this.serializeArray());
    }, serializeArray: function serializeArray() {
      return this.map(function () {
        var e = se.prop(this, "elements");return e ? se.makeArray(e) : this;
      }).filter(function () {
        var e = this.type;return this.name && !se(this).is(":disabled") && Pt.test(this.nodeName) && !Et.test(e) && (this.checked || !Pe.test(e));
      }).map(function (e, t) {
        var i = se(this).val();return null == i ? null : se.isArray(i) ? se.map(i, function (e) {
          return { name: t.name, value: e.replace(Ot, "\r\n") };
        }) : { name: t.name, value: i.replace(Ot, "\r\n") };
      }).get();
    } }), se.ajaxSettings.xhr = function () {
    try {
      return new e.XMLHttpRequest();
    } catch (e) {}
  };var Dt = { 0: 200, 1223: 204 },
      Ht = se.ajaxSettings.xhr();ne.cors = !!Ht && "withCredentials" in Ht, ne.ajax = Ht = !!Ht, se.ajaxTransport(function (t) {
    var _i2, n;if (ne.cors || Ht && !t.crossDomain) return { send: function send(o, s) {
        var r,
            a = t.xhr();if (a.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (r in t.xhrFields) {
          a[r] = t.xhrFields[r];
        }t.mimeType && a.overrideMimeType && a.overrideMimeType(t.mimeType), t.crossDomain || o["X-Requested-With"] || (o["X-Requested-With"] = "XMLHttpRequest");for (r in o) {
          a.setRequestHeader(r, o[r]);
        }_i2 = function i(e) {
          return function () {
            _i2 && (_i2 = n = a.onload = a.onerror = a.onabort = a.onreadystatechange = null, "abort" === e ? a.abort() : "error" === e ? "number" != typeof a.status ? s(0, "error") : s(a.status, a.statusText) : s(Dt[a.status] || a.status, a.statusText, "text" !== (a.responseType || "text") || "string" != typeof a.responseText ? { binary: a.response } : { text: a.responseText }, a.getAllResponseHeaders()));
          };
        }, a.onload = _i2(), n = a.onerror = _i2("error"), void 0 !== a.onabort ? a.onabort = n : a.onreadystatechange = function () {
          4 === a.readyState && e.setTimeout(function () {
            _i2 && n();
          });
        }, _i2 = _i2("abort");try {
          a.send(t.hasContent && t.data || null);
        } catch (e) {
          if (_i2) throw e;
        }
      }, abort: function abort() {
        _i2 && _i2();
      } };
  }), se.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function textScript(e) {
        return se.globalEval(e), e;
      } } }), se.ajaxPrefilter("script", function (e) {
    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
  }), se.ajaxTransport("script", function (e) {
    if (e.crossDomain) {
      var t, _i3;return { send: function send(n, o) {
          t = se("<script>").prop({ charset: e.scriptCharset, src: e.url }).on("load error", _i3 = function i(e) {
            t.remove(), _i3 = null, e && o("error" === e.type ? 404 : 200, e.type);
          }), X.head.appendChild(t[0]);
        }, abort: function abort() {
          _i3 && _i3();
        } };
    }
  });var Mt = [],
      jt = /(=)\?(?=&|$)|\?\?/;se.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
      var e = Mt.pop() || se.expando + "_" + gt++;return this[e] = !0, e;
    } }), se.ajaxPrefilter("json jsonp", function (t, i, n) {
    var o,
        s,
        r,
        a = t.jsonp !== !1 && (jt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && jt.test(t.data) && "data");if (a || "jsonp" === t.dataTypes[0]) return o = t.jsonpCallback = se.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, a ? t[a] = t[a].replace(jt, "$1" + o) : t.jsonp !== !1 && (t.url += (yt.test(t.url) ? "&" : "?") + t.jsonp + "=" + o), t.converters["script json"] = function () {
      return r || se.error(o + " was not called"), r[0];
    }, t.dataTypes[0] = "json", s = e[o], e[o] = function () {
      r = arguments;
    }, n.always(function () {
      void 0 === s ? se(e).removeProp(o) : e[o] = s, t[o] && (t.jsonpCallback = i.jsonpCallback, Mt.push(o)), r && se.isFunction(s) && s(r[0]), r = s = void 0;
    }), "script";
  }), se.parseHTML = function (e, t, i) {
    if (!e || "string" != typeof e) return null;"boolean" == typeof t && (i = t, t = !1), t = t || X;var n = pe.exec(e),
        o = !i && [];return n ? [t.createElement(n[1])] : (n = h([e], t, o), o && o.length && se(o).remove(), se.merge([], n.childNodes));
  };var qt = se.fn.load;se.fn.load = function (e, t, i) {
    if ("string" != typeof e && qt) return qt.apply(this, arguments);var n,
        o,
        s,
        r = this,
        a = e.indexOf(" ");return a > -1 && (n = se.trim(e.slice(a)), e = e.slice(0, a)), se.isFunction(t) ? (i = t, t = void 0) : t && "object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) && (o = "POST"), r.length > 0 && se.ajax({ url: e, type: o || "GET", dataType: "html", data: t }).done(function (e) {
      s = arguments, r.html(n ? se("<div>").append(se.parseHTML(e)).find(n) : e);
    }).always(i && function (e, t) {
      r.each(function () {
        i.apply(this, s || [e.responseText, t, e]);
      });
    }), this;
  }, se.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
    se.fn[t] = function (e) {
      return this.on(t, e);
    };
  }), se.expr.filters.animated = function (e) {
    return se.grep(se.timers, function (t) {
      return e === t.elem;
    }).length;
  }, se.offset = { setOffset: function setOffset(e, t, i) {
      var n,
          o,
          s,
          r,
          a,
          l,
          d,
          u = se.css(e, "position"),
          c = se(e),
          h = {};"static" === u && (e.style.position = "relative"), a = c.offset(), s = se.css(e, "top"), l = se.css(e, "left"), d = ("absolute" === u || "fixed" === u) && (s + l).indexOf("auto") > -1, d ? (n = c.position(), r = n.top, o = n.left) : (r = parseFloat(s) || 0, o = parseFloat(l) || 0), se.isFunction(t) && (t = t.call(e, i, se.extend({}, a))), null != t.top && (h.top = t.top - a.top + r), null != t.left && (h.left = t.left - a.left + o), "using" in t ? t.using.call(e, h) : c.css(h);
    } }, se.fn.extend({ offset: function offset(e) {
      if (arguments.length) return void 0 === e ? this : this.each(function (t) {
        se.offset.setOffset(this, e, t);
      });var t,
          i,
          n = this[0],
          o = { top: 0, left: 0 },
          s = n && n.ownerDocument;if (s) return t = s.documentElement, se.contains(t, n) ? (o = n.getBoundingClientRect(), i = U(s), { top: o.top + i.pageYOffset - t.clientTop, left: o.left + i.pageXOffset - t.clientLeft }) : o;
    }, position: function position() {
      if (this[0]) {
        var e,
            t,
            i = this[0],
            n = { top: 0, left: 0 };return "fixed" === se.css(i, "position") ? t = i.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), se.nodeName(e[0], "html") || (n = e.offset()), n.top += se.css(e[0], "borderTopWidth", !0), n.left += se.css(e[0], "borderLeftWidth", !0)), { top: t.top - n.top - se.css(i, "marginTop", !0), left: t.left - n.left - se.css(i, "marginLeft", !0) };
      }
    }, offsetParent: function offsetParent() {
      return this.map(function () {
        for (var e = this.offsetParent; e && "static" === se.css(e, "position");) {
          e = e.offsetParent;
        }return e || Ze;
      });
    } }), se.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (e, t) {
    var i = "pageYOffset" === t;se.fn[e] = function (n) {
      return $e(this, function (e, n, o) {
        var s = U(e);return void 0 === o ? s ? s[t] : e[n] : void (s ? s.scrollTo(i ? s.pageXOffset : o, i ? o : s.pageYOffset) : e[n] = o);
      }, e, n, arguments.length);
    };
  }), se.each(["top", "left"], function (e, t) {
    se.cssHooks[t] = _(ne.pixelPosition, function (e, i) {
      if (i) return i = S(e, t), Xe.test(i) ? se(e).position()[t] + "px" : i;
    });
  }), se.each({ Height: "height", Width: "width" }, function (e, t) {
    se.each({ padding: "inner" + e, content: t, "": "outer" + e }, function (i, n) {
      se.fn[n] = function (n, o) {
        var s = arguments.length && (i || "boolean" != typeof n),
            r = i || (n === !0 || o === !0 ? "margin" : "border");return $e(this, function (t, i, n) {
          var o;return se.isWindow(t) ? t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === n ? se.css(t, i, r) : se.style(t, i, n, r);
        }, t, s ? n : void 0, s, null);
      };
    });
  }), se.fn.extend({ bind: function bind(e, t, i) {
      return this.on(e, null, t, i);
    }, unbind: function unbind(e, t) {
      return this.off(e, null, t);
    }, delegate: function delegate(e, t, i, n) {
      return this.on(t, e, i, n);
    }, undelegate: function undelegate(e, t, i) {
      return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", i);
    }, size: function size() {
      return this.length;
    } }), se.fn.andSelf = se.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {
    return se;
  });var Lt = e.jQuery,
      Rt = e.$;return se.noConflict = function (t) {
    return e.$ === se && (e.$ = Rt), t && e.jQuery === se && (e.jQuery = Lt), se;
  }, t || (e.jQuery = e.$ = se), se;
}), function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof2(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define("whatInput", [], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) ? exports.whatInput = t() : e.whatInput = t();
}(undefined, function () {
  return function (e) {
    function t(n) {
      if (i[n]) return i[n].exports;var o = i[n] = { exports: {}, id: n, loaded: !1 };return e[n].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
    }var i = {};return t.m = e, t.c = i, t.p = "", t(0);
  }([function (e, t) {
    e.exports = function () {
      var e = document.documentElement,
          t = "initial",
          i = null,
          n = ["input", "select", "textarea"],
          o = [16, 17, 18, 91, 93],
          s = { keyup: "keyboard", mousedown: "mouse", mousemove: "mouse", MSPointerDown: "pointer", MSPointerMove: "pointer", pointerdown: "pointer", pointermove: "pointer", touchstart: "touch" },
          r = [],
          a = !1,
          l = { 2: "touch", 3: "touch", 4: "mouse" },
          d = null,
          u = function u() {
        s[g()] = "mouse", c(), f();
      },
          c = function c() {
        window.PointerEvent ? (e.addEventListener("pointerdown", h), e.addEventListener("pointermove", p)) : window.MSPointerEvent ? (e.addEventListener("MSPointerDown", h), e.addEventListener("MSPointerMove", p)) : (e.addEventListener("mousedown", h), e.addEventListener("mousemove", p), "ontouchstart" in window && e.addEventListener("touchstart", v)), e.addEventListener(g(), p), e.addEventListener("keydown", h), e.addEventListener("keyup", h);
      },
          h = function h(e) {
        if (!a) {
          var r = e.which,
              l = s[e.type];if ("pointer" === l && (l = m(e)), t !== l || i !== l) {
            var d = !(!document.activeElement || n.indexOf(document.activeElement.nodeName.toLowerCase()) !== -1);("touch" === l || "mouse" === l && o.indexOf(r) === -1 || "keyboard" === l && d) && (t = i = l, f());
          }
        }
      },
          f = function f() {
        e.setAttribute("data-whatinput", t), e.setAttribute("data-whatintent", t), r.indexOf(t) === -1 && (r.push(t), e.className += " whatinput-types-" + t);
      },
          p = function p(t) {
        if (!a) {
          var n = s[t.type];"pointer" === n && (n = m(t)), i !== n && (i = n, e.setAttribute("data-whatintent", i));
        }
      },
          v = function v(e) {
        window.clearTimeout(d), h(e), a = !0, d = window.setTimeout(function () {
          a = !1;
        }, 200);
      },
          m = function m(e) {
        return "number" == typeof e.pointerType ? l[e.pointerType] : "pen" === e.pointerType ? "touch" : e.pointerType;
      },
          g = function g() {
        return "onwheel" in document.createElement("div") ? "wheel" : void 0 !== document.onmousewheel ? "mousewheel" : "DOMMouseScroll";
      };return "addEventListener" in window && Array.prototype.indexOf && u(), { ask: function ask(e) {
          return "loose" === e ? i : t;
        }, types: function types() {
          return r;
        } };
    }();
  }]);
});var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
};!function (e) {
  function t(e) {
    if (void 0 === Function.prototype.name) {
      var t = /function\s([^(]{1,})\(/,
          i = t.exec(e.toString());return i && i.length > 1 ? i[1].trim() : "";
    }return void 0 === e.prototype ? e.constructor.name : e.prototype.constructor.name;
  }function i(e) {
    return "true" === e || "false" !== e && (isNaN(1 * e) ? e : parseFloat(e));
  }function n(e) {
    return e.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }var o = "6.3.0",
      s = { version: o, _plugins: {}, _uuids: [], rtl: function rtl() {
      return "rtl" === e("html").attr("dir");
    }, plugin: function plugin(e, i) {
      var o = i || t(e),
          s = n(o);this._plugins[s] = this[o] = e;
    }, registerPlugin: function registerPlugin(e, i) {
      var o = i ? n(i) : t(e.constructor).toLowerCase();e.uuid = this.GetYoDigits(6, o), e.$element.attr("data-" + o) || e.$element.attr("data-" + o, e.uuid), e.$element.data("zfPlugin") || e.$element.data("zfPlugin", e), e.$element.trigger("init.zf." + o), this._uuids.push(e.uuid);
    }, unregisterPlugin: function unregisterPlugin(e) {
      var i = n(t(e.$element.data("zfPlugin").constructor));this._uuids.splice(this._uuids.indexOf(e.uuid), 1), e.$element.removeAttr("data-" + i).removeData("zfPlugin").trigger("destroyed.zf." + i);for (var o in e) {
        e[o] = null;
      }
    }, reInit: function reInit(t) {
      var i = t instanceof e;try {
        if (i) t.each(function () {
          e(this).data("zfPlugin")._init();
        });else {
          var o = "undefined" == typeof t ? "undefined" : _typeof(t),
              s = this,
              r = { object: function object(t) {
              t.forEach(function (t) {
                t = n(t), e("[data-" + t + "]").foundation("_init");
              });
            }, string: function string() {
              t = n(t), e("[data-" + t + "]").foundation("_init");
            }, undefined: function undefined() {
              this.object(Object.keys(s._plugins));
            } };r[o](t);
        }
      } catch (e) {
        console.error(e);
      } finally {
        return t;
      }
    }, GetYoDigits: function GetYoDigits(e, t) {
      return e = e || 6, Math.round(Math.pow(36, e + 1) - Math.random() * Math.pow(36, e)).toString(36).slice(1) + (t ? "-" + t : "");
    }, reflow: function reflow(t, n) {
      "undefined" == typeof n ? n = Object.keys(this._plugins) : "string" == typeof n && (n = [n]);var o = this;e.each(n, function (n, s) {
        var r = o._plugins[s],
            a = e(t).find("[data-" + s + "]").addBack("[data-" + s + "]");a.each(function () {
          var t = e(this),
              n = {};if (t.data("zfPlugin")) return void console.warn("Tried to initialize " + s + " on an element that already has a Foundation plugin.");if (t.attr("data-options")) {
            t.attr("data-options").split(";").forEach(function (e, t) {
              var o = e.split(":").map(function (e) {
                return e.trim();
              });o[0] && (n[o[0]] = i(o[1]));
            });
          }try {
            t.data("zfPlugin", new r(e(this), n));
          } catch (e) {
            console.error(e);
          } finally {
            return;
          }
        });
      });
    }, getFnName: t, transitionend: function transitionend(e) {
      var t,
          i = { transition: "transitionend", WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "otransitionend" },
          n = document.createElement("div");for (var o in i) {
        "undefined" != typeof n.style[o] && (t = i[o]);
      }return t ? t : (t = setTimeout(function () {
        e.triggerHandler("transitionend", [e]);
      }, 1), "transitionend");
    } };s.util = { throttle: function throttle(e, t) {
      var i = null;return function () {
        var n = this,
            o = arguments;null === i && (i = setTimeout(function () {
          e.apply(n, o), i = null;
        }, t));
      };
    } };var r = function r(i) {
    var n = "undefined" == typeof i ? "undefined" : _typeof(i),
        o = e("meta.foundation-mq"),
        r = e(".no-js");if (o.length || e('<meta class="foundation-mq">').appendTo(document.head), r.length && r.removeClass("no-js"), "undefined" === n) s.MediaQuery._init(), s.reflow(this);else {
      if ("string" !== n) throw new TypeError("We're sorry, " + n + " is not a valid parameter. You must use a string representing the method you wish to invoke.");var a = Array.prototype.slice.call(arguments, 1),
          l = this.data("zfPlugin");if (void 0 === l || void 0 === l[i]) throw new ReferenceError("We're sorry, '" + i + "' is not an available method for " + (l ? t(l) : "this element") + ".");1 === this.length ? l[i].apply(l, a) : this.each(function (t, n) {
        l[i].apply(e(n).data("zfPlugin"), a);
      });
    }return this;
  };window.Foundation = s, e.fn.foundation = r, function () {
    Date.now && window.Date.now || (window.Date.now = Date.now = function () {
      return new Date().getTime();
    });for (var e = ["webkit", "moz"], t = 0; t < e.length && !window.requestAnimationFrame; ++t) {
      var i = e[t];window.requestAnimationFrame = window[i + "RequestAnimationFrame"], window.cancelAnimationFrame = window[i + "CancelAnimationFrame"] || window[i + "CancelRequestAnimationFrame"];
    }if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var n = 0;window.requestAnimationFrame = function (e) {
        var t = Date.now(),
            i = Math.max(n + 16, t);return setTimeout(function () {
          e(n = i);
        }, i - t);
      }, window.cancelAnimationFrame = clearTimeout;
    }window.performance && window.performance.now || (window.performance = { start: Date.now(), now: function now() {
        return Date.now() - this.start;
      } });
  }(), Function.prototype.bind || (Function.prototype.bind = function (e) {
    if ("function" != typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var t = Array.prototype.slice.call(arguments, 1),
        i = this,
        n = function n() {},
        o = function o() {
      return i.apply(this instanceof n ? this : e, t.concat(Array.prototype.slice.call(arguments)));
    };return this.prototype && (n.prototype = this.prototype), o.prototype = new n(), o;
  });
}(jQuery), !function (e) {
  function t(e, t, n, o) {
    var s,
        r,
        a,
        l,
        d = i(e);if (t) {
      var u = i(t);r = d.offset.top + d.height <= u.height + u.offset.top, s = d.offset.top >= u.offset.top, a = d.offset.left >= u.offset.left, l = d.offset.left + d.width <= u.width + u.offset.left;
    } else r = d.offset.top + d.height <= d.windowDims.height + d.windowDims.offset.top, s = d.offset.top >= d.windowDims.offset.top, a = d.offset.left >= d.windowDims.offset.left, l = d.offset.left + d.width <= d.windowDims.width;var c = [r, s, a, l];return n ? a === l == !0 : o ? s === r == !0 : c.indexOf(!1) === -1;
  }function i(e, t) {
    if (e = e.length ? e[0] : e, e === window || e === document) throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");var i = e.getBoundingClientRect(),
        n = e.parentNode.getBoundingClientRect(),
        o = document.body.getBoundingClientRect(),
        s = window.pageYOffset,
        r = window.pageXOffset;return { width: i.width, height: i.height, offset: { top: i.top + s, left: i.left + r }, parentDims: { width: n.width, height: n.height, offset: { top: n.top + s, left: n.left + r } }, windowDims: { width: o.width, height: o.height, offset: { top: s, left: r } } };
  }function n(e, t, n, o, s, r) {
    var a = i(e),
        l = t ? i(t) : null;switch (n) {case "top":
        return { left: Foundation.rtl() ? l.offset.left - a.width + l.width : l.offset.left, top: l.offset.top - (a.height + o) };case "left":
        return { left: l.offset.left - (a.width + s), top: l.offset.top };case "right":
        return { left: l.offset.left + l.width + s, top: l.offset.top };case "center top":
        return { left: l.offset.left + l.width / 2 - a.width / 2, top: l.offset.top - (a.height + o) };case "center bottom":
        return { left: r ? s : l.offset.left + l.width / 2 - a.width / 2, top: l.offset.top + l.height + o };case "center left":
        return { left: l.offset.left - (a.width + s), top: l.offset.top + l.height / 2 - a.height / 2 };case "center right":
        return { left: l.offset.left + l.width + s + 1, top: l.offset.top + l.height / 2 - a.height / 2 };case "center":
        return { left: a.windowDims.offset.left + a.windowDims.width / 2 - a.width / 2, top: a.windowDims.offset.top + a.windowDims.height / 2 - a.height / 2 };case "reveal":
        return { left: (a.windowDims.width - a.width) / 2, top: a.windowDims.offset.top + o };case "reveal full":
        return { left: a.windowDims.offset.left, top: a.windowDims.offset.top };case "left bottom":
        return { left: l.offset.left, top: l.offset.top + l.height + o };case "right bottom":
        return { left: l.offset.left + l.width + s - a.width, top: l.offset.top + l.height + o };default:
        return { left: Foundation.rtl() ? l.offset.left - a.width + l.width : l.offset.left + s, top: l.offset.top + l.height + o };}
  }Foundation.Box = { ImNotTouchingYou: t, GetDimensions: i, GetOffsets: n };
}(jQuery), !function (e) {
  function t(e) {
    var t = {};for (var i in e) {
      t[e[i]] = e[i];
    }return t;
  }var i = { 9: "TAB", 13: "ENTER", 27: "ESCAPE", 32: "SPACE", 37: "ARROW_LEFT", 38: "ARROW_UP", 39: "ARROW_RIGHT", 40: "ARROW_DOWN" },
      n = {},
      o = { keys: t(i), parseKey: function parseKey(e) {
      var t = i[e.which || e.keyCode] || String.fromCharCode(e.which).toUpperCase();return t = t.replace(/\W+/, ""), e.shiftKey && (t = "SHIFT_" + t), e.ctrlKey && (t = "CTRL_" + t), e.altKey && (t = "ALT_" + t), t = t.replace(/_$/, "");
    }, handleKey: function handleKey(t, i, o) {
      var s,
          r,
          a,
          l = n[i],
          d = this.parseKey(t);if (!l) return console.warn("Component not defined!");if (s = "undefined" == typeof l.ltr ? l : Foundation.rtl() ? e.extend({}, l.ltr, l.rtl) : e.extend({}, l.rtl, l.ltr), r = s[d], a = o[r], a && "function" == typeof a) {
        var u = a.apply();(o.handled || "function" == typeof o.handled) && o.handled(u);
      } else (o.unhandled || "function" == typeof o.unhandled) && o.unhandled();
    }, findFocusable: function findFocusable(t) {
      return !!t && t.find("a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]").filter(function () {
        return !(!e(this).is(":visible") || e(this).attr("tabindex") < 0);
      });
    }, register: function register(e, t) {
      n[e] = t;
    }, trapFocus: function trapFocus(e) {
      var t = Foundation.Keyboard.findFocusable(e),
          i = t.eq(0),
          n = t.eq(-1);e.on("keydown.zf.trapfocus", function (e) {
        e.target === n[0] && "TAB" === Foundation.Keyboard.parseKey(e) ? (e.preventDefault(), i.focus()) : e.target === i[0] && "SHIFT_TAB" === Foundation.Keyboard.parseKey(e) && (e.preventDefault(), n.focus());
      });
    }, releaseFocus: function releaseFocus(e) {
      e.off("keydown.zf.trapfocus");
    } };Foundation.Keyboard = o;
}(jQuery);var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
};!function (e) {
  function t(e) {
    var t = {};return "string" != typeof e ? t : (e = e.trim().slice(1, -1)) ? t = e.split("&").reduce(function (e, t) {
      var i = t.replace(/\+/g, " ").split("="),
          n = i[0],
          o = i[1];return n = decodeURIComponent(n), o = void 0 === o ? null : decodeURIComponent(o), e.hasOwnProperty(n) ? Array.isArray(e[n]) ? e[n].push(o) : e[n] = [e[n], o] : e[n] = o, e;
    }, {}) : t;
  }var i = { queries: [], current: "", _init: function _init() {
      var i,
          n = this,
          o = e(".foundation-mq").css("font-family");i = t(o);for (var s in i) {
        i.hasOwnProperty(s) && n.queries.push({ name: s, value: "only screen and (min-width: " + i[s] + ")" });
      }this.current = this._getCurrentSize(), this._watcher();
    }, atLeast: function atLeast(e) {
      var t = this.get(e);return !!t && window.matchMedia(t).matches;
    }, is: function is(e) {
      return e = e.trim().split(" "), e.length > 1 && "only" === e[1] ? e[0] === this._getCurrentSize() : this.atLeast(e[0]);
    }, get: function get(e) {
      for (var t in this.queries) {
        if (this.queries.hasOwnProperty(t)) {
          var i = this.queries[t];if (e === i.name) return i.value;
        }
      }return null;
    }, _getCurrentSize: function _getCurrentSize() {
      for (var e, t = 0; t < this.queries.length; t++) {
        var i = this.queries[t];window.matchMedia(i.value).matches && (e = i);
      }return "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) ? e.name : e;
    }, _watcher: function _watcher() {
      var t = this;e(window).on("resize.zf.mediaquery", function () {
        var i = t._getCurrentSize(),
            n = t.current;i !== n && (t.current = i, e(window).trigger("changed.zf.mediaquery", [i, n]));
      });
    } };Foundation.MediaQuery = i, window.matchMedia || (window.matchMedia = function () {
    var e = window.styleMedia || window.media;if (!e) {
      var t = document.createElement("style"),
          i = document.getElementsByTagName("script")[0],
          n = null;t.type = "text/css", t.id = "matchmediajs-test", i && i.parentNode && i.parentNode.insertBefore(t, i), n = "getComputedStyle" in window && window.getComputedStyle(t, null) || t.currentStyle, e = { matchMedium: function matchMedium(e) {
          var i = "@media " + e + "{ #matchmediajs-test { width: 1px; } }";return t.styleSheet ? t.styleSheet.cssText = i : t.textContent = i, "1px" === n.width;
        } };
    }return function (t) {
      return { matches: e.matchMedium(t || "all"), media: t || "all" };
    };
  }()), Foundation.MediaQuery = i;
}(jQuery), !function (e) {
  function t(e, t, i) {
    function n(a) {
      r || (r = a), s = a - r, i.apply(t), s < e ? o = window.requestAnimationFrame(n, t) : (window.cancelAnimationFrame(o), t.trigger("finished.zf.animate", [t]).triggerHandler("finished.zf.animate", [t]));
    }var o,
        s,
        r = null;return 0 === e ? (i.apply(t), void t.trigger("finished.zf.animate", [t]).triggerHandler("finished.zf.animate", [t])) : void (o = window.requestAnimationFrame(n));
  }function i(t, i, s, r) {
    function a() {
      t || i.hide(), l(), r && r.apply(i);
    }function l() {
      i[0].style.transitionDuration = 0, i.removeClass(d + " " + u + " " + s);
    }if (i = e(i).eq(0), i.length) {
      var d = t ? n[0] : n[1],
          u = t ? o[0] : o[1];l(), i.addClass(s).css("transition", "none"), requestAnimationFrame(function () {
        i.addClass(d), t && i.show();
      }), requestAnimationFrame(function () {
        i[0].offsetWidth, i.css("transition", "").addClass(u);
      }), i.one(Foundation.transitionend(i), a);
    }
  }var n = ["mui-enter", "mui-leave"],
      o = ["mui-enter-active", "mui-leave-active"],
      s = { animateIn: function animateIn(e, t, n) {
      i(!0, e, t, n);
    }, animateOut: function animateOut(e, t, n) {
      i(!1, e, t, n);
    } };Foundation.Move = t, Foundation.Motion = s;
}(jQuery), !function (e) {
  var t = { Feather: function Feather(t) {
      var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "zf";t.attr("role", "menubar");var n = t.find("li").attr({ role: "menuitem" }),
          o = "is-" + i + "-submenu",
          s = o + "-item",
          r = "is-" + i + "-submenu-parent";n.each(function () {
        var t = e(this),
            n = t.children("ul");n.length && (t.addClass(r).attr({ "aria-haspopup": !0, "aria-label": t.children("a:first").text() }), "drilldown" === i && t.attr({ "aria-expanded": !1 }), n.addClass("submenu " + o).attr({ "data-submenu": "", role: "menu" }), "drilldown" === i && n.attr({ "aria-hidden": !0 })), t.parent("[data-submenu]").length && t.addClass("is-submenu-item " + s);
      });
    }, Burn: function Burn(e, t) {
      var i = "is-" + t + "-submenu",
          n = i + "-item",
          o = "is-" + t + "-submenu-parent";e.find(">li, .menu, .menu > li").removeClass(i + " " + n + " " + o + " is-submenu-item submenu is-active").removeAttr("data-submenu").css("display", "");
    } };Foundation.Nest = t;
}(jQuery), !function (e) {
  function t(e, t, i) {
    var n,
        o,
        s = this,
        r = t.duration,
        a = Object.keys(e.data())[0] || "timer",
        l = -1;this.isPaused = !1, this.restart = function () {
      l = -1, clearTimeout(o), this.start();
    }, this.start = function () {
      this.isPaused = !1, clearTimeout(o), l = l <= 0 ? r : l, e.data("paused", !1), n = Date.now(), o = setTimeout(function () {
        t.infinite && s.restart(), i && "function" == typeof i && i();
      }, l), e.trigger("timerstart.zf." + a);
    }, this.pause = function () {
      this.isPaused = !0, clearTimeout(o), e.data("paused", !0);var t = Date.now();l -= t - n, e.trigger("timerpaused.zf." + a);
    };
  }function i(t, i) {
    function n() {
      o--, 0 === o && i();
    }var o = t.length;0 === o && i(), t.each(function () {
      if (this.complete || 4 === this.readyState || "complete" === this.readyState) n();else {
        var t = e(this).attr("src");e(this).attr("src", t + "?" + new Date().getTime()), e(this).one("load", function () {
          n();
        });
      }
    });
  }Foundation.Timer = t, Foundation.onImagesLoaded = i;
}(jQuery), function (e) {
  function t() {
    this.removeEventListener("touchmove", i), this.removeEventListener("touchend", t), d = !1;
  }function i(i) {
    if (e.spotSwipe.preventDefault && i.preventDefault(), d) {
      var n,
          o = i.touches[0].pageX,
          r = (i.touches[0].pageY, s - o);l = new Date().getTime() - a, Math.abs(r) >= e.spotSwipe.moveThreshold && l <= e.spotSwipe.timeThreshold && (n = r > 0 ? "left" : "right"), n && (i.preventDefault(), t.call(this), e(this).trigger("swipe", n).trigger("swipe" + n));
    }
  }function n(e) {
    1 == e.touches.length && (s = e.touches[0].pageX, r = e.touches[0].pageY, d = !0, a = new Date().getTime(), this.addEventListener("touchmove", i, !1), this.addEventListener("touchend", t, !1));
  }function o() {
    this.addEventListener && this.addEventListener("touchstart", n, !1);
  }e.spotSwipe = { version: "1.0.0", enabled: "ontouchstart" in document.documentElement, preventDefault: !1, moveThreshold: 75, timeThreshold: 200 };var s,
      r,
      a,
      l,
      d = !1;e.event.special.swipe = { setup: o }, e.each(["left", "up", "down", "right"], function () {
    e.event.special["swipe" + this] = { setup: function setup() {
        e(this).on("swipe", e.noop);
      } };
  });
}(jQuery), !function (e) {
  e.fn.addTouch = function () {
    this.each(function (i, n) {
      e(n).bind("touchstart touchmove touchend touchcancel", function () {
        t(event);
      });
    });var t = function t(e) {
      var t,
          i = e.changedTouches,
          n = i[0],
          o = { touchstart: "mousedown", touchmove: "mousemove", touchend: "mouseup" },
          s = o[e.type];"MouseEvent" in window && "function" == typeof window.MouseEvent ? t = new window.MouseEvent(s, { bubbles: !0, cancelable: !0, screenX: n.screenX, screenY: n.screenY, clientX: n.clientX, clientY: n.clientY }) : (t = document.createEvent("MouseEvent"), t.initMouseEvent(s, !0, !0, window, 1, n.screenX, n.screenY, n.clientX, n.clientY, !1, !1, !1, !1, 0, null)), n.target.dispatchEvent(t);
    };
  };
}(jQuery);var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
};!function (e) {
  function t() {
    r(), n(), o(), s(), i();
  }function i(t) {
    var i = e("[data-yeti-box]"),
        n = ["dropdown", "tooltip", "reveal"];if (t && ("string" == typeof t ? n.push(t) : "object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) && "string" == typeof t[0] ? n.concat(t) : console.error("Plugin names must be strings")), i.length) {
      var o = n.map(function (e) {
        return "closeme.zf." + e;
      }).join(" ");e(window).off(o).on(o, function (t, i) {
        var n = t.namespace.split(".")[0],
            o = e("[data-" + n + "]").not('[data-yeti-box="' + i + '"]');o.each(function () {
          var t = e(this);t.triggerHandler("close.zf.trigger", [t]);
        });
      });
    }
  }function n(t) {
    var i = void 0,
        n = e("[data-resize]");n.length && e(window).off("resize.zf.trigger").on("resize.zf.trigger", function (o) {
      i && clearTimeout(i), i = setTimeout(function () {
        a || n.each(function () {
          e(this).triggerHandler("resizeme.zf.trigger");
        }), n.attr("data-events", "resize");
      }, t || 10);
    });
  }function o(t) {
    var i = void 0,
        n = e("[data-scroll]");n.length && e(window).off("scroll.zf.trigger").on("scroll.zf.trigger", function (o) {
      i && clearTimeout(i), i = setTimeout(function () {
        a || n.each(function () {
          e(this).triggerHandler("scrollme.zf.trigger");
        }), n.attr("data-events", "scroll");
      }, t || 10);
    });
  }function s(t) {
    var i = e("[data-mutate]");i.length && a && i.each(function () {
      e(this).triggerHandler("mutateme.zf.trigger");
    });
  }function r() {
    if (!a) return !1;var t = document.querySelectorAll("[data-resize], [data-scroll], [data-mutate]"),
        i = function i(t) {
      var i = e(t[0].target);switch (t[0].type) {case "attributes":
          "scroll" === i.attr("data-events") && "data-events" === t[0].attributeName && i.triggerHandler("scrollme.zf.trigger", [i, window.pageYOffset]), "resize" === i.attr("data-events") && "data-events" === t[0].attributeName && i.triggerHandler("resizeme.zf.trigger", [i]), "style" === t[0].attributeName && (i.closest("[data-mutate]").attr("data-events", "mutate"), i.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger", [i.closest("[data-mutate]")]));break;case "childList":
          i.closest("[data-mutate]").attr("data-events", "mutate"), i.closest("[data-mutate]").triggerHandler("mutateme.zf.trigger", [i.closest("[data-mutate]")]);break;default:
          return !1;}
    };if (t.length) for (var n = 0; n <= t.length - 1; n++) {
      var o = new a(i);o.observe(t[n], { attributes: !0, childList: !0, characterData: !1, subtree: !0, attributeFilter: ["data-events", "style"] });
    }
  }var a = function () {
    for (var e = ["WebKit", "Moz", "O", "Ms", ""], t = 0; t < e.length; t++) {
      if (e[t] + "MutationObserver" in window) return window[e[t] + "MutationObserver"];
    }return !1;
  }(),
      l = function l(t, i) {
    t.data(i).split(" ").forEach(function (n) {
      e("#" + n)["close" === i ? "trigger" : "triggerHandler"](i + ".zf.trigger", [t]);
    });
  };e(document).on("click.zf.trigger", "[data-open]", function () {
    l(e(this), "open");
  }), e(document).on("click.zf.trigger", "[data-close]", function () {
    var t = e(this).data("close");t ? l(e(this), "close") : e(this).trigger("close.zf.trigger");
  }), e(document).on("click.zf.trigger", "[data-toggle]", function () {
    var t = e(this).data("toggle");t ? l(e(this), "toggle") : e(this).trigger("toggle.zf.trigger");
  }), e(document).on("close.zf.trigger", "[data-closable]", function (t) {
    t.stopPropagation();var i = e(this).data("closable");"" !== i ? Foundation.Motion.animateOut(e(this), i, function () {
      e(this).trigger("closed.zf");
    }) : e(this).fadeOut().trigger("closed.zf");
  }), e(document).on("focus.zf.trigger blur.zf.trigger", "[data-toggle-focus]", function () {
    var t = e(this).data("toggle-focus");e("#" + t).triggerHandler("toggle.zf.trigger", [e(this)]);
  }), e(window).on("load", function () {
    t();
  }), Foundation.IHearYou = t;
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i) {
      var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};_classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Abide");
    }return _createClass(t, [{ key: "_init", value: function value() {
        this.$inputs = this.$element.find("input, textarea, select"), this._events();
      } }, { key: "_events", value: function value() {
        var t = this;this.$element.off(".abide").on("reset.zf.abide", function () {
          t.resetForm();
        }).on("submit.zf.abide", function () {
          return t.validateForm();
        }), "fieldChange" === this.options.validateOn && this.$inputs.off("change.zf.abide").on("change.zf.abide", function (i) {
          t.validateInput(e(i.target));
        }), this.options.liveValidate && this.$inputs.off("input.zf.abide").on("input.zf.abide", function (i) {
          t.validateInput(e(i.target));
        }), this.options.validateOnBlur && this.$inputs.off("blur.zf.abide").on("blur.zf.abide", function (i) {
          t.validateInput(e(i.target));
        });
      } }, { key: "_reflow", value: function value() {
        this._init();
      } }, { key: "requiredCheck", value: function value(e) {
        if (!e.attr("required")) return !0;var t = !0;switch (e[0].type) {case "checkbox":
            t = e[0].checked;break;case "select":case "select-one":case "select-multiple":
            var i = e.find("option:selected");i.length && i.val() || (t = !1);break;default:
            e.val() && e.val().length || (t = !1);}return t;
      } }, { key: "findFormError", value: function value(e) {
        var t = e.siblings(this.options.formErrorSelector);return t.length || (t = e.parent().find(this.options.formErrorSelector)), t;
      } }, { key: "findLabel", value: function value(e) {
        var t = e[0].id,
            i = this.$element.find('label[for="' + t + '"]');return i.length ? i : e.closest("label");
      } }, { key: "findRadioLabels", value: function value(t) {
        var i = this,
            n = t.map(function (t, n) {
          var o = n.id,
              s = i.$element.find('label[for="' + o + '"]');return s.length || (s = e(n).closest("label")), s[0];
        });return e(n);
      } }, { key: "addErrorClasses", value: function value(e) {
        var t = this.findLabel(e),
            i = this.findFormError(e);t.length && t.addClass(this.options.labelErrorClass), i.length && i.addClass(this.options.formErrorClass), e.addClass(this.options.inputErrorClass).attr("data-invalid", "");
      } }, { key: "removeRadioErrorClasses", value: function value(e) {
        var t = this.$element.find(':radio[name="' + e + '"]'),
            i = this.findRadioLabels(t),
            n = this.findFormError(t);i.length && i.removeClass(this.options.labelErrorClass), n.length && n.removeClass(this.options.formErrorClass), t.removeClass(this.options.inputErrorClass).removeAttr("data-invalid");
      } }, { key: "removeErrorClasses", value: function value(e) {
        if ("radio" == e[0].type) return this.removeRadioErrorClasses(e.attr("name"));var t = this.findLabel(e),
            i = this.findFormError(e);t.length && t.removeClass(this.options.labelErrorClass), i.length && i.removeClass(this.options.formErrorClass), e.removeClass(this.options.inputErrorClass).removeAttr("data-invalid");
      } }, { key: "validateInput", value: function value(t) {
        var i = this,
            n = this.requiredCheck(t),
            o = !1,
            s = !0,
            r = t.attr("data-validator"),
            a = !0;if (t.is("[data-abide-ignore]") || t.is('[type="hidden"]')) return !0;switch (t[0].type) {case "radio":
            o = this.validateRadio(t.attr("name"));break;case "checkbox":
            o = n;break;case "select":case "select-one":case "select-multiple":
            o = n;break;default:
            o = this.validateText(t);}r && (s = this.matchValidation(t, r, t.attr("required"))), t.attr("data-equalto") && (a = this.options.validators.equalTo(t));var l = [n, o, s, a].indexOf(!1) === -1,
            d = (l ? "valid" : "invalid") + ".zf.abide";if (l) {
          var u = this.$element.find('[data-equalto="' + t.attr("id") + '"]');u.length && !function () {
            var t = i;u.each(function () {
              e(this).val() && t.validateInput(e(this));
            });
          }();
        }return this[l ? "removeErrorClasses" : "addErrorClasses"](t), t.trigger(d, [t]), l;
      } }, { key: "validateForm", value: function value() {
        var t = [],
            i = this;this.$inputs.each(function () {
          t.push(i.validateInput(e(this)));
        });var n = t.indexOf(!1) === -1;return this.$element.find("[data-abide-error]").css("display", n ? "none" : "block"), this.$element.trigger((n ? "formvalid" : "forminvalid") + ".zf.abide", [this.$element]), n;
      } }, { key: "validateText", value: function value(e, t) {
        t = t || e.attr("pattern") || e.attr("type");var i = e.val(),
            n = !1;return i.length ? n = this.options.patterns.hasOwnProperty(t) ? this.options.patterns[t].test(i) : t === e.attr("type") || new RegExp(t).test(i) : e.prop("required") || (n = !0), n;
      } }, { key: "validateRadio", value: function value(t) {
        var i = this.$element.find(':radio[name="' + t + '"]'),
            n = !1,
            o = !1;return i.each(function (t, i) {
          e(i).attr("required") && (o = !0);
        }), o || (n = !0), n || i.each(function (t, i) {
          e(i).prop("checked") && (n = !0);
        }), n;
      } }, { key: "matchValidation", value: function value(e, t, i) {
        var n = this;i = !!i;var o = t.split(" ").map(function (t) {
          return n.options.validators[t](e, i, e.parent());
        });return o.indexOf(!1) === -1;
      } }, { key: "resetForm", value: function value() {
        var t = this.$element,
            i = this.options;e("." + i.labelErrorClass, t).not("small").removeClass(i.labelErrorClass), e("." + i.inputErrorClass, t).not("small").removeClass(i.inputErrorClass), e(i.formErrorSelector + "." + i.formErrorClass).removeClass(i.formErrorClass), t.find("[data-abide-error]").css("display", "none"), e(":input", t).not(":button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]").val("").removeAttr("data-invalid"), e(":input:radio", t).not("[data-abide-ignore]").prop("checked", !1).removeAttr("data-invalid"), e(":input:checkbox", t).not("[data-abide-ignore]").prop("checked", !1).removeAttr("data-invalid"), t.trigger("formreset.zf.abide", [t]);
      } }, { key: "destroy", value: function value() {
        var t = this;this.$element.off(".abide").find("[data-abide-error]").css("display", "none"), this.$inputs.off(".abide").each(function () {
          t.removeErrorClasses(e(this));
        }), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { validateOn: "fieldChange", labelErrorClass: "is-invalid-label", inputErrorClass: "is-invalid-input", formErrorSelector: ".form-error", formErrorClass: "is-visible", liveValidate: !1, validateOnBlur: !1, patterns: { alpha: /^[a-zA-Z]+$/, alpha_numeric: /^[a-zA-Z0-9]+$/, integer: /^[-+]?\d+$/, number: /^[-+]?\d*(?:[\.\,]\d+)?$/, card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/, cvv: /^([0-9]){3,4}$/, email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/, url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/, domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/, datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/, date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/, time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/, dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/, month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/, day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/, color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/ }, validators: { equalTo: function equalTo(t, i, n) {
        return e("#" + t.attr("data-equalto")).val() === t.val();
      } } }, Foundation.plugin(t, "Abide");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Accordion"), Foundation.Keyboard.register("Accordion", { ENTER: "toggle", SPACE: "toggle", ARROW_DOWN: "next", ARROW_UP: "previous" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        this.$element.attr("role", "tablist"), this.$tabs = this.$element.children("[data-accordion-item]"), this.$tabs.each(function (t, i) {
          var n = e(i),
              o = n.children("[data-tab-content]"),
              s = o[0].id || Foundation.GetYoDigits(6, "accordion"),
              r = i.id || s + "-label";n.find("a:first").attr({ "aria-controls": s, role: "tab", id: r, "aria-expanded": !1, "aria-selected": !1 }), o.attr({ role: "tabpanel", "aria-labelledby": r, "aria-hidden": !0, id: s });
        });var t = this.$element.find(".is-active").children("[data-tab-content]");t.length && this.down(t, !0), this._events();
      } }, { key: "_events", value: function value() {
        var t = this;this.$tabs.each(function () {
          var i = e(this),
              n = i.children("[data-tab-content]");n.length && i.children("a").off("click.zf.accordion keydown.zf.accordion").on("click.zf.accordion", function (e) {
            e.preventDefault(), t.toggle(n);
          }).on("keydown.zf.accordion", function (e) {
            Foundation.Keyboard.handleKey(e, "Accordion", { toggle: function toggle() {
                t.toggle(n);
              }, next: function next() {
                var e = i.next().find("a").focus();t.options.multiExpand || e.trigger("click.zf.accordion");
              }, previous: function previous() {
                var e = i.prev().find("a").focus();t.options.multiExpand || e.trigger("click.zf.accordion");
              }, handled: function handled() {
                e.preventDefault(), e.stopPropagation();
              } });
          });
        });
      } }, { key: "toggle", value: function value(e) {
        e.parent().hasClass("is-active") ? this.up(e) : this.down(e);
      } }, { key: "down", value: function value(t, i) {
        var n = this;if (t.attr("aria-hidden", !1).parent("[data-tab-content]").addBack().parent().addClass("is-active"), !this.options.multiExpand && !i) {
          var o = this.$element.children(".is-active").children("[data-tab-content]");o.length && this.up(o.not(t));
        }t.slideDown(this.options.slideSpeed, function () {
          n.$element.trigger("down.zf.accordion", [t]);
        }), e("#" + t.attr("aria-labelledby")).attr({ "aria-expanded": !0, "aria-selected": !0 });
      } }, { key: "up", value: function value(t) {
        var i = t.parent().siblings(),
            n = this;(this.options.allowAllClosed || i.hasClass("is-active")) && t.parent().hasClass("is-active") && (t.slideUp(n.options.slideSpeed, function () {
          n.$element.trigger("up.zf.accordion", [t]);
        }), t.attr("aria-hidden", !0).parent().removeClass("is-active"), e("#" + t.attr("aria-labelledby")).attr({ "aria-expanded": !1, "aria-selected": !1 }));
      } }, { key: "destroy", value: function value() {
        this.$element.find("[data-tab-content]").stop(!0).slideUp(0).css("display", ""), this.$element.find("a").off(".zf.accordion"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { slideSpeed: 250, multiExpand: !1, allowAllClosed: !1 }, Foundation.plugin(t, "Accordion");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), Foundation.Nest.Feather(this.$element, "accordion"), this._init(), Foundation.registerPlugin(this, "AccordionMenu"), Foundation.Keyboard.register("AccordionMenu", { ENTER: "toggle", SPACE: "toggle", ARROW_RIGHT: "open", ARROW_UP: "up", ARROW_DOWN: "down", ARROW_LEFT: "close", ESCAPE: "closeAll" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        this.$element.find("[data-submenu]").not(".is-active").slideUp(0), this.$element.attr({ role: "menu", "aria-multiselectable": this.options.multiOpen }), this.$menuLinks = this.$element.find(".is-accordion-submenu-parent"), this.$menuLinks.each(function () {
          var t = this.id || Foundation.GetYoDigits(6, "acc-menu-link"),
              i = e(this),
              n = i.children("[data-submenu]"),
              o = n[0].id || Foundation.GetYoDigits(6, "acc-menu"),
              s = n.hasClass("is-active");i.attr({ "aria-controls": o, "aria-expanded": s, role: "menuitem", id: t }), n.attr({ "aria-labelledby": t, "aria-hidden": !s, role: "menu", id: o });
        });var t = this.$element.find(".is-active");if (t.length) {
          var i = this;t.each(function () {
            i.down(e(this));
          });
        }this._events();
      } }, { key: "_events", value: function value() {
        var t = this;this.$element.find("li").each(function () {
          var i = e(this).children("[data-submenu]");i.length && e(this).children("a").off("click.zf.accordionMenu").on("click.zf.accordionMenu", function (e) {
            e.preventDefault(), t.toggle(i);
          });
        }).on("keydown.zf.accordionmenu", function (i) {
          var n,
              o,
              s = e(this),
              r = s.parent("ul").children("li"),
              a = s.children("[data-submenu]");r.each(function (t) {
            if (e(this).is(s)) return n = r.eq(Math.max(0, t - 1)).find("a").first(), o = r.eq(Math.min(t + 1, r.length - 1)).find("a").first(), e(this).children("[data-submenu]:visible").length && (o = s.find("li:first-child").find("a").first()), e(this).is(":first-child") ? n = s.parents("li").first().find("a").first() : n.parents("li").first().children("[data-submenu]:visible").length && (n = n.parents("li").find("li:last-child").find("a").first()), void (e(this).is(":last-child") && (o = s.parents("li").first().next("li").find("a").first()));
          }), Foundation.Keyboard.handleKey(i, "AccordionMenu", { open: function open() {
              a.is(":hidden") && (t.down(a), a.find("li").first().find("a").first().focus());
            }, close: function close() {
              a.length && !a.is(":hidden") ? t.up(a) : s.parent("[data-submenu]").length && (t.up(s.parent("[data-submenu]")), s.parents("li").first().find("a").first().focus());
            }, up: function up() {
              return n.focus(), !0;
            }, down: function down() {
              return o.focus(), !0;
            }, toggle: function toggle() {
              s.children("[data-submenu]").length && t.toggle(s.children("[data-submenu]"));
            }, closeAll: function closeAll() {
              t.hideAll();
            }, handled: function handled(e) {
              e && i.preventDefault(), i.stopImmediatePropagation();
            } });
        });
      } }, { key: "hideAll", value: function value() {
        this.up(this.$element.find("[data-submenu]"));
      } }, { key: "showAll", value: function value() {
        this.down(this.$element.find("[data-submenu]"));
      } }, { key: "toggle", value: function value(e) {
        e.is(":animated") || (e.is(":hidden") ? this.down(e) : this.up(e));
      } }, { key: "down", value: function value(e) {
        var t = this;this.options.multiOpen || this.up(this.$element.find(".is-active").not(e.parentsUntil(this.$element).add(e))), e.addClass("is-active").attr({ "aria-hidden": !1 }).parent(".is-accordion-submenu-parent").attr({ "aria-expanded": !0 }), e.slideDown(t.options.slideSpeed, function () {
          t.$element.trigger("down.zf.accordionMenu", [e]);
        });
      } }, { key: "up", value: function value(e) {
        var t = this;e.slideUp(t.options.slideSpeed, function () {
          t.$element.trigger("up.zf.accordionMenu", [e]);
        });var i = e.find("[data-submenu]").slideUp(0).addBack().attr("aria-hidden", !0);i.parent(".is-accordion-submenu-parent").attr("aria-expanded", !1);
      } }, { key: "destroy", value: function value() {
        this.$element.find("[data-submenu]").slideDown(0).css("display", ""), this.$element.find("a").off("click.zf.accordionMenu"), Foundation.Nest.Burn(this.$element, "accordion"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { slideSpeed: 250, multiOpen: !0 }, Foundation.plugin(t, "AccordionMenu");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), Foundation.Nest.Feather(this.$element, "drilldown"), this._init(), Foundation.registerPlugin(this, "Drilldown"), Foundation.Keyboard.register("Drilldown", { ENTER: "open", SPACE: "open", ARROW_RIGHT: "next", ARROW_UP: "up", ARROW_DOWN: "down", ARROW_LEFT: "previous", ESCAPE: "close", TAB: "down", SHIFT_TAB: "up" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        this.$submenuAnchors = this.$element.find("li.is-drilldown-submenu-parent").children("a"), this.$submenus = this.$submenuAnchors.parent("li").children("[data-submenu]"), this.$menuItems = this.$element.find("li").not(".js-drilldown-back").attr("role", "menuitem").find("a"), this.$element.attr("data-mutate", this.$element.attr("data-drilldown") || Foundation.GetYoDigits(6, "drilldown")), this._prepareMenu(), this._registerEvents(), this._keyboardEvents();
      } }, { key: "_prepareMenu", value: function value() {
        var t = this;this.$submenuAnchors.each(function () {
          var i = e(this),
              n = i.parent();t.options.parentLink && i.clone().prependTo(n.children("[data-submenu]")).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>'), i.data("savedHref", i.attr("href")).removeAttr("href").attr("tabindex", 0), i.children("[data-submenu]").attr({ "aria-hidden": !0, tabindex: 0, role: "menu" }), t._events(i);
        }), this.$submenus.each(function () {
          var i = e(this),
              n = i.find(".js-drilldown-back");if (!n.length) switch (t.options.backButtonPosition) {case "bottom":
              i.append(t.options.backButton);break;case "top":
              i.prepend(t.options.backButton);break;default:
              console.error("Unsupported backButtonPosition value '" + t.options.backButtonPosition + "'");}t._back(i);
        }), this.options.autoHeight || this.$submenus.addClass("drilldown-submenu-cover-previous"), this.$element.parent().hasClass("is-drilldown") || (this.$wrapper = e(this.options.wrapper).addClass("is-drilldown"), this.options.animateHeight && this.$wrapper.addClass("animate-height"), this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims()));
      } }, { key: "_resize", value: function value() {
        this.$wrapper.css({ "max-width": "none", "min-height": "none" }), this.$wrapper.css(this._getMaxDims());
      }
    }, { key: "_events", value: function value(t) {
        var i = this;t.off("click.zf.drilldown").on("click.zf.drilldown", function (n) {
          if (e(n.target).parentsUntil("ul", "li").hasClass("is-drilldown-submenu-parent") && (n.stopImmediatePropagation(), n.preventDefault()), i._show(t.parent("li")), i.options.closeOnClick) {
            var o = e("body");o.off(".zf.drilldown").on("click.zf.drilldown", function (t) {
              t.target === i.$element[0] || e.contains(i.$element[0], t.target) || (t.preventDefault(), i._hideAll(), o.off(".zf.drilldown"));
            });
          }
        }), this.$element.on("mutateme.zf.trigger", this._resize.bind(this));
      } }, { key: "_registerEvents", value: function value() {
        this.options.scrollTop && (this._bindHandler = this._scrollTop.bind(this), this.$element.on("open.zf.drilldown hide.zf.drilldown closed.zf.drilldown", this._bindHandler));
      } }, { key: "_scrollTop", value: function value() {
        var t = this,
            i = "" != t.options.scrollTopElement ? e(t.options.scrollTopElement) : t.$element,
            n = parseInt(i.offset().top + t.options.scrollTopOffset);e("html, body").stop(!0).animate({ scrollTop: n }, t.options.animationDuration, t.options.animationEasing, function () {
          this === e("html")[0] && t.$element.trigger("scrollme.zf.drilldown");
        });
      } }, { key: "_keyboardEvents", value: function value() {
        var t = this;this.$menuItems.add(this.$element.find(".js-drilldown-back > a, .is-submenu-parent-item > a")).on("keydown.zf.drilldown", function (i) {
          var n,
              o,
              s = e(this),
              r = s.parent("li").parent("ul").children("li").children("a");r.each(function (t) {
            if (e(this).is(s)) return n = r.eq(Math.max(0, t - 1)), void (o = r.eq(Math.min(t + 1, r.length - 1)));
          }), Foundation.Keyboard.handleKey(i, "Drilldown", { next: function next() {
              if (s.is(t.$submenuAnchors)) return t._show(s.parent("li")), s.parent("li").one(Foundation.transitionend(s), function () {
                s.parent("li").find("ul li a").filter(t.$menuItems).first().focus();
              }), !0;
            }, previous: function previous() {
              return t._hide(s.parent("li").parent("ul")), s.parent("li").parent("ul").one(Foundation.transitionend(s), function () {
                setTimeout(function () {
                  s.parent("li").parent("ul").parent("li").children("a").first().focus();
                }, 1);
              }), !0;
            }, up: function up() {
              return n.focus(), !0;
            }, down: function down() {
              return o.focus(), !0;
            }, close: function close() {
              t._back();
            }, open: function open() {
              return s.is(t.$menuItems) ? s.is(t.$submenuAnchors) ? (t._show(s.parent("li")), s.parent("li").one(Foundation.transitionend(s), function () {
                s.parent("li").find("ul li a").filter(t.$menuItems).first().focus();
              }), !0) : void 0 : (t._hide(s.parent("li").parent("ul")), s.parent("li").parent("ul").one(Foundation.transitionend(s), function () {
                setTimeout(function () {
                  s.parent("li").parent("ul").parent("li").children("a").first().focus();
                }, 1);
              }), !0);
            }, handled: function handled(e) {
              e && i.preventDefault(), i.stopImmediatePropagation();
            } });
        });
      } }, { key: "_hideAll", value: function value() {
        var e = this.$element.find(".is-drilldown-submenu.is-active").addClass("is-closing");this.options.autoHeight && this.$wrapper.css({ height: e.parent().closest("ul").data("calcHeight") }), e.one(Foundation.transitionend(e), function (t) {
          e.removeClass("is-active is-closing");
        }), this.$element.trigger("closed.zf.drilldown");
      } }, { key: "_back", value: function value(e) {
        var t = this;e.off("click.zf.drilldown"), e.children(".js-drilldown-back").on("click.zf.drilldown", function (i) {
          i.stopImmediatePropagation(), t._hide(e);var n = e.parent("li").parent("ul").parent("li");n.length && t._show(n);
        });
      } }, { key: "_menuLinkEvents", value: function value() {
        var e = this;this.$menuItems.not(".is-drilldown-submenu-parent").off("click.zf.drilldown").on("click.zf.drilldown", function (t) {
          setTimeout(function () {
            e._hideAll();
          }, 0);
        });
      } }, { key: "_show", value: function value(e) {
        this.options.autoHeight && this.$wrapper.css({ height: e.children("[data-submenu]").data("calcHeight") }), e.attr("aria-expanded", !0), e.children("[data-submenu]").addClass("is-active").attr("aria-hidden", !1), this.$element.trigger("open.zf.drilldown", [e]);
      } }, { key: "_hide", value: function value(e) {
        this.options.autoHeight && this.$wrapper.css({ height: e.parent().closest("ul").data("calcHeight") });e.parent("li").attr("aria-expanded", !1), e.attr("aria-hidden", !0).addClass("is-closing"), e.addClass("is-closing").one(Foundation.transitionend(e), function () {
          e.removeClass("is-active is-closing"), e.blur();
        }), e.trigger("hide.zf.drilldown", [e]);
      } }, { key: "_getMaxDims", value: function value() {
        var t = 0,
            i = {},
            n = this;return this.$submenus.add(this.$element).each(function () {
          var o = (e(this).children("li").length, Foundation.Box.GetDimensions(this).height);t = o > t ? o : t, n.options.autoHeight && (e(this).data("calcHeight", o), e(this).hasClass("is-drilldown-submenu") || (i.height = o));
        }), this.options.autoHeight || (i["min-height"] = t + "px"), i["max-width"] = this.$element[0].getBoundingClientRect().width + "px", i;
      } }, { key: "destroy", value: function value() {
        this.options.scrollTop && this.$element.off(".zf.drilldown", this._bindHandler), this._hideAll(), this.$element.off("mutateme.zf.trigger"), Foundation.Nest.Burn(this.$element, "drilldown"), this.$element.unwrap().find(".js-drilldown-back, .is-submenu-parent-item").remove().end().find(".is-active, .is-closing, .is-drilldown-submenu").removeClass("is-active is-closing is-drilldown-submenu").end().find("[data-submenu]").removeAttr("aria-hidden tabindex role"), this.$submenuAnchors.each(function () {
          e(this).off(".zf.drilldown");
        }), this.$submenus.removeClass("drilldown-submenu-cover-previous"), this.$element.find("a").each(function () {
          var t = e(this);t.removeAttr("tabindex"), t.data("savedHref") && t.attr("href", t.data("savedHref")).removeData("savedHref");
        }), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>', backButtonPosition: "top", wrapper: "<div></div>", parentLink: !1, closeOnClick: !1, autoHeight: !1, animateHeight: !1, scrollTop: !1, scrollTopElement: "", scrollTopOffset: 0, animationDuration: 500, animationEasing: "swing" }, Foundation.plugin(t, "Drilldown");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Dropdown"), Foundation.Keyboard.register("Dropdown", { ENTER: "open", SPACE: "open", ESCAPE: "close" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element.attr("id");this.$anchor = e(e('[data-toggle="' + t + '"]').length ? '[data-toggle="' + t + '"]' : '[data-open="' + t + '"]'), this.$anchor.attr({ "aria-controls": t, "data-is-focus": !1, "data-yeti-box": t, "aria-haspopup": !0, "aria-expanded": !1 }), this.options.parentClass ? this.$parent = this.$element.parents("." + this.options.parentClass) : this.$parent = null, this.options.positionClass = this.getPositionClass(), this.counter = 4, this.usedPositions = [], this.$element.attr({ "aria-hidden": "true", "data-yeti-box": t, "data-resize": t, "aria-labelledby": this.$anchor[0].id || Foundation.GetYoDigits(6, "dd-anchor") }), this._events();
      } }, { key: "getPositionClass", value: function value() {
        var e = this.$element[0].className.match(/(top|left|right|bottom)/g);e = e ? e[0] : "";var t = /float-(\S+)/.exec(this.$anchor[0].className);t = t ? t[1] : "";var i = t ? t + " " + e : e;return i;
      } }, { key: "_reposition", value: function value(e) {
        this.usedPositions.push(e ? e : "bottom"), !e && this.usedPositions.indexOf("top") < 0 ? this.$element.addClass("top") : "top" === e && this.usedPositions.indexOf("bottom") < 0 ? this.$element.removeClass(e) : "left" === e && this.usedPositions.indexOf("right") < 0 ? this.$element.removeClass(e).addClass("right") : "right" === e && this.usedPositions.indexOf("left") < 0 ? this.$element.removeClass(e).addClass("left") : !e && this.usedPositions.indexOf("top") > -1 && this.usedPositions.indexOf("left") < 0 ? this.$element.addClass("left") : "top" === e && this.usedPositions.indexOf("bottom") > -1 && this.usedPositions.indexOf("left") < 0 ? this.$element.removeClass(e).addClass("left") : "left" === e && this.usedPositions.indexOf("right") > -1 && this.usedPositions.indexOf("bottom") < 0 ? this.$element.removeClass(e) : "right" === e && this.usedPositions.indexOf("left") > -1 && this.usedPositions.indexOf("bottom") < 0 ? this.$element.removeClass(e) : this.$element.removeClass(e), this.classChanged = !0, this.counter--;
      } }, { key: "_setPosition", value: function value() {
        if ("false" === this.$anchor.attr("aria-expanded")) return !1;var e = this.getPositionClass(),
            t = Foundation.Box.GetDimensions(this.$element),
            i = (Foundation.Box.GetDimensions(this.$anchor), "left" === e ? "left" : "right" === e ? "left" : "top"),
            n = "top" === i ? "height" : "width";"height" === n ? this.options.vOffset : this.options.hOffset;if (t.width >= t.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element, this.$parent)) {
          var o = t.windowDims.width,
              s = 0;if (this.$parent) {
            var r = Foundation.Box.GetDimensions(this.$parent),
                s = r.offset.left;r.width < o && (o = r.width);
          }return this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, "center bottom", this.options.vOffset, this.options.hOffset + s, !0)).css({ width: o - 2 * this.options.hOffset, height: "auto" }), this.classChanged = !0, !1;
        }for (this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, e, this.options.vOffset, this.options.hOffset)); !Foundation.Box.ImNotTouchingYou(this.$element, this.$parent, !0) && this.counter;) {
          this._reposition(e), this._setPosition();
        }
      } }, { key: "_events", value: function value() {
        var t = this;this.$element.on({ "open.zf.trigger": this.open.bind(this), "close.zf.trigger": this.close.bind(this), "toggle.zf.trigger": this.toggle.bind(this), "resizeme.zf.trigger": this._setPosition.bind(this) }), this.options.hover && (this.$anchor.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown", function () {
          var i = e("body").data();"undefined" != typeof i.whatinput && "mouse" !== i.whatinput || (clearTimeout(t.timeout), t.timeout = setTimeout(function () {
            t.open(), t.$anchor.data("hover", !0);
          }, t.options.hoverDelay));
        }).on("mouseleave.zf.dropdown", function () {
          clearTimeout(t.timeout), t.timeout = setTimeout(function () {
            t.close(), t.$anchor.data("hover", !1);
          }, t.options.hoverDelay);
        }), this.options.hoverPane && this.$element.off("mouseenter.zf.dropdown mouseleave.zf.dropdown").on("mouseenter.zf.dropdown", function () {
          clearTimeout(t.timeout);
        }).on("mouseleave.zf.dropdown", function () {
          clearTimeout(t.timeout), t.timeout = setTimeout(function () {
            t.close(), t.$anchor.data("hover", !1);
          }, t.options.hoverDelay);
        })), this.$anchor.add(this.$element).on("keydown.zf.dropdown", function (i) {
          var n = e(this);Foundation.Keyboard.findFocusable(t.$element);Foundation.Keyboard.handleKey(i, "Dropdown", { open: function open() {
              n.is(t.$anchor) && (t.open(), t.$element.attr("tabindex", -1).focus(), i.preventDefault());
            }, close: function close() {
              t.close(), t.$anchor.focus();
            } });
        });
      } }, { key: "_addBodyHandler", value: function value() {
        var t = e(document.body).not(this.$element),
            i = this;t.off("click.zf.dropdown").on("click.zf.dropdown", function (e) {
          i.$anchor.is(e.target) || i.$anchor.find(e.target).length || i.$element.find(e.target).length || (i.close(), t.off("click.zf.dropdown"));
        });
      } }, { key: "open", value: function value() {
        if (this.$element.trigger("closeme.zf.dropdown", this.$element.attr("id")), this.$anchor.addClass("hover").attr({ "aria-expanded": !0 }), this._setPosition(), this.$element.addClass("is-open").attr({ "aria-hidden": !1 }), this.options.autoFocus) {
          var e = Foundation.Keyboard.findFocusable(this.$element);e.length && e.eq(0).focus();
        }this.options.closeOnClick && this._addBodyHandler(), this.options.trapFocus && Foundation.Keyboard.trapFocus(this.$element), this.$element.trigger("show.zf.dropdown", [this.$element]);
      } }, { key: "close", value: function value() {
        if (!this.$element.hasClass("is-open")) return !1;if (this.$element.removeClass("is-open").attr({ "aria-hidden": !0 }), this.$anchor.removeClass("hover").attr("aria-expanded", !1), this.classChanged) {
          var e = this.getPositionClass();e && this.$element.removeClass(e), this.$element.addClass(this.options.positionClass).css({ height: "", width: "" }), this.classChanged = !1, this.counter = 4, this.usedPositions.length = 0;
        }this.$element.trigger("hide.zf.dropdown", [this.$element]), this.options.trapFocus && Foundation.Keyboard.releaseFocus(this.$element);
      } }, { key: "toggle", value: function value() {
        if (this.$element.hasClass("is-open")) {
          if (this.$anchor.data("hover")) return;this.close();
        } else this.open();
      } }, { key: "destroy", value: function value() {
        this.$element.off(".zf.trigger").hide(), this.$anchor.off(".zf.dropdown"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { parentClass: null, hoverDelay: 250, hover: !1, hoverPane: !1, vOffset: 1, hOffset: 1, positionClass: "", trapFocus: !1, autoFocus: !1, closeOnClick: !1 }, Foundation.plugin(t, "Dropdown");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), Foundation.Nest.Feather(this.$element, "dropdown"), this._init(), Foundation.registerPlugin(this, "DropdownMenu"), Foundation.Keyboard.register("DropdownMenu", { ENTER: "open", SPACE: "open", ARROW_RIGHT: "next", ARROW_UP: "up", ARROW_DOWN: "down", ARROW_LEFT: "previous", ESCAPE: "close" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        var e = this.$element.find("li.is-dropdown-submenu-parent");this.$element.children(".is-dropdown-submenu-parent").children(".is-dropdown-submenu").addClass("first-sub"), this.$menuItems = this.$element.find('[role="menuitem"]'), this.$tabs = this.$element.children('[role="menuitem"]'), this.$tabs.find("ul.is-dropdown-submenu").addClass(this.options.verticalClass), this.$element.hasClass(this.options.rightClass) || "right" === this.options.alignment || Foundation.rtl() || this.$element.parents(".top-bar-right").is("*") ? (this.options.alignment = "right", e.addClass("opens-left")) : e.addClass("opens-right"), this.changed = !1, this._events();
      } }, { key: "_isVertical", value: function value() {
        return "block" === this.$tabs.css("display");
      } }, { key: "_events", value: function value() {
        var t = this,
            i = "ontouchstart" in window || "undefined" != typeof window.ontouchstart,
            n = "is-dropdown-submenu-parent",
            o = function o(_o) {
          var s = e(_o.target).parentsUntil("ul", "." + n),
              r = s.hasClass(n),
              a = "true" === s.attr("data-is-click"),
              l = s.children(".is-dropdown-submenu");if (r) if (a) {
            if (!t.options.closeOnClick || !t.options.clickOpen && !i || t.options.forceFollow && i) return;_o.stopImmediatePropagation(), _o.preventDefault(), t._hide(s);
          } else _o.preventDefault(), _o.stopImmediatePropagation(), t._show(l), s.add(s.parentsUntil(t.$element, "." + n)).attr("data-is-click", !0);
        };(this.options.clickOpen || i) && this.$menuItems.on("click.zf.dropdownmenu touchstart.zf.dropdownmenu", o), t.options.closeOnClickInside && this.$menuItems.on("click.zf.dropdownmenu touchend.zf.dropdownmenu", function (i) {
          var o = e(this),
              s = o.hasClass(n);s || t._hide();
        }), this.options.disableHover || this.$menuItems.on("mouseenter.zf.dropdownmenu", function (i) {
          var o = e(this),
              s = o.hasClass(n);s && (clearTimeout(o.data("_delay")), o.data("_delay", setTimeout(function () {
            t._show(o.children(".is-dropdown-submenu"));
          }, t.options.hoverDelay)));
        }).on("mouseleave.zf.dropdownmenu", function (i) {
          var o = e(this),
              s = o.hasClass(n);if (s && t.options.autoclose) {
            if ("true" === o.attr("data-is-click") && t.options.clickOpen) return !1;clearTimeout(o.data("_delay")), o.data("_delay", setTimeout(function () {
              t._hide(o);
            }, t.options.closingTime));
          }
        }), this.$menuItems.on("keydown.zf.dropdownmenu", function (i) {
          var n,
              o,
              s = e(i.target).parentsUntil("ul", '[role="menuitem"]'),
              r = t.$tabs.index(s) > -1,
              a = r ? t.$tabs : s.siblings("li").add(s);a.each(function (t) {
            if (e(this).is(s)) return n = a.eq(t - 1), void (o = a.eq(t + 1));
          });var l = function l() {
            s.is(":last-child") || (o.children("a:first").focus(), i.preventDefault());
          },
              d = function d() {
            n.children("a:first").focus(), i.preventDefault();
          },
              u = function u() {
            var e = s.children("ul.is-dropdown-submenu");e.length && (t._show(e), s.find("li > a:first").focus(), i.preventDefault());
          },
              c = function c() {
            var e = s.parent("ul").parent("li");e.children("a:first").focus(), t._hide(e), i.preventDefault();
          },
              h = { open: u, close: function close() {
              t._hide(t.$element), t.$menuItems.find("a:first").focus(), i.preventDefault();
            }, handled: function handled() {
              i.stopImmediatePropagation();
            } };r ? t._isVertical() ? Foundation.rtl() ? e.extend(h, { down: l, up: d, next: c, previous: u }) : e.extend(h, { down: l, up: d, next: u, previous: c }) : Foundation.rtl() ? e.extend(h, { next: d, previous: l, down: u, up: c }) : e.extend(h, { next: l, previous: d, down: u, up: c }) : Foundation.rtl() ? e.extend(h, { next: c, previous: u, down: l, up: d }) : e.extend(h, { next: u, previous: c, down: l, up: d }), Foundation.Keyboard.handleKey(i, "DropdownMenu", h);
        });
      } }, { key: "_addBodyHandler", value: function value() {
        var t = e(document.body),
            i = this;t.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu").on("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu", function (e) {
          var n = i.$element.find(e.target);n.length || (i._hide(), t.off("mouseup.zf.dropdownmenu touchend.zf.dropdownmenu"));
        });
      } }, { key: "_show", value: function value(t) {
        var i = this.$tabs.index(this.$tabs.filter(function (i, n) {
          return e(n).find(t).length > 0;
        })),
            n = t.parent("li.is-dropdown-submenu-parent").siblings("li.is-dropdown-submenu-parent");this._hide(n, i), t.css("visibility", "hidden").addClass("js-dropdown-active").parent("li.is-dropdown-submenu-parent").addClass("is-active");var o = Foundation.Box.ImNotTouchingYou(t, null, !0);if (!o) {
          var s = "left" === this.options.alignment ? "-right" : "-left",
              r = t.parent(".is-dropdown-submenu-parent");r.removeClass("opens" + s).addClass("opens-" + this.options.alignment), o = Foundation.Box.ImNotTouchingYou(t, null, !0), o || r.removeClass("opens-" + this.options.alignment).addClass("opens-inner"), this.changed = !0;
        }t.css("visibility", ""), this.options.closeOnClick && this._addBodyHandler(), this.$element.trigger("show.zf.dropdownmenu", [t]);
      } }, { key: "_hide", value: function value(e, t) {
        var i;i = e && e.length ? e : void 0 !== t ? this.$tabs.not(function (e, i) {
          return e === t;
        }) : this.$element;var n = i.hasClass("is-active") || i.find(".is-active").length > 0;if (n) {
          if (i.find("li.is-active").add(i).attr({ "data-is-click": !1 }).removeClass("is-active"), i.find("ul.js-dropdown-active").removeClass("js-dropdown-active"), this.changed || i.find("opens-inner").length) {
            var o = "left" === this.options.alignment ? "right" : "left";i.find("li.is-dropdown-submenu-parent").add(i).removeClass("opens-inner opens-" + this.options.alignment).addClass("opens-" + o), this.changed = !1;
          }this.$element.trigger("hide.zf.dropdownmenu", [i]);
        }
      } }, { key: "destroy", value: function value() {
        this.$menuItems.off(".zf.dropdownmenu").removeAttr("data-is-click").removeClass("is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner"), e(document.body).off(".zf.dropdownmenu"), Foundation.Nest.Burn(this.$element, "dropdown"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { disableHover: !1, autoclose: !0, hoverDelay: 50, clickOpen: !1, closingTime: 500, alignment: "left", closeOnClick: !0, closeOnClickInside: !0, verticalClass: "vertical", rightClass: "align-right", forceFollow: !0 }, Foundation.plugin(t, "DropdownMenu");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Equalizer");
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element.attr("data-equalizer") || "",
            i = this.$element.find('[data-equalizer-watch="' + t + '"]');this.$watched = i.length ? i : this.$element.find("[data-equalizer-watch]"), this.$element.attr("data-resize", t || Foundation.GetYoDigits(6, "eq")), this.$element.attr("data-mutate", t || Foundation.GetYoDigits(6, "eq")), this.hasNested = this.$element.find("[data-equalizer]").length > 0, this.isNested = this.$element.parentsUntil(document.body, "[data-equalizer]").length > 0, this.isOn = !1, this._bindHandler = { onResizeMeBound: this._onResizeMe.bind(this), onPostEqualizedBound: this._onPostEqualized.bind(this) };var n,
            o = this.$element.find("img");this.options.equalizeOn ? (n = this._checkMQ(), e(window).on("changed.zf.mediaquery", this._checkMQ.bind(this))) : this._events(), (void 0 !== n && n === !1 || void 0 === n) && (o.length ? Foundation.onImagesLoaded(o, this._reflow.bind(this)) : this._reflow());
      } }, { key: "_pauseEvents", value: function value() {
        this.isOn = !1, this.$element.off({ ".zf.equalizer": this._bindHandler.onPostEqualizedBound, "resizeme.zf.trigger": this._bindHandler.onResizeMeBound, "mutateme.zf.trigger": this._bindHandler.onResizeMeBound });
      } }, { key: "_onResizeMe", value: function value(e) {
        this._reflow();
      } }, { key: "_onPostEqualized", value: function value(e) {
        e.target !== this.$element[0] && this._reflow();
      } }, { key: "_events", value: function value() {
        this._pauseEvents(), this.hasNested ? this.$element.on("postequalized.zf.equalizer", this._bindHandler.onPostEqualizedBound) : (this.$element.on("resizeme.zf.trigger", this._bindHandler.onResizeMeBound), this.$element.on("mutateme.zf.trigger", this._bindHandler.onResizeMeBound)), this.isOn = !0;
      } }, { key: "_checkMQ", value: function value() {
        var e = !Foundation.MediaQuery.is(this.options.equalizeOn);return e ? this.isOn && (this._pauseEvents(), this.$watched.css("height", "auto")) : this.isOn || this._events(), e;
      } }, { key: "_killswitch", value: function value() {} }, { key: "_reflow", value: function value() {
        return !this.options.equalizeOnStack && this._isStacked() ? (this.$watched.css("height", "auto"), !1) : void (this.options.equalizeByRow ? this.getHeightsByRow(this.applyHeightByRow.bind(this)) : this.getHeights(this.applyHeight.bind(this)));
      } }, { key: "_isStacked", value: function value() {
        return !this.$watched[0] || !this.$watched[1] || this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
      } }, { key: "getHeights", value: function value(e) {
        for (var t = [], i = 0, n = this.$watched.length; i < n; i++) {
          this.$watched[i].style.height = "auto", t.push(this.$watched[i].offsetHeight);
        }e(t);
      } }, { key: "getHeightsByRow", value: function value(t) {
        var i = this.$watched.length ? this.$watched.first().offset().top : 0,
            n = [],
            o = 0;n[o] = [];for (var s = 0, r = this.$watched.length; s < r; s++) {
          this.$watched[s].style.height = "auto";var a = e(this.$watched[s]).offset().top;a != i && (o++, n[o] = [], i = a), n[o].push([this.$watched[s], this.$watched[s].offsetHeight]);
        }for (var l = 0, d = n.length; l < d; l++) {
          var u = e(n[l]).map(function () {
            return this[1];
          }).get(),
              c = Math.max.apply(null, u);n[l].push(c);
        }t(n);
      } }, { key: "applyHeight", value: function value(e) {
        var t = Math.max.apply(null, e);this.$element.trigger("preequalized.zf.equalizer"), this.$watched.css("height", t), this.$element.trigger("postequalized.zf.equalizer");
      } }, { key: "applyHeightByRow", value: function value(t) {
        this.$element.trigger("preequalized.zf.equalizer");for (var i = 0, n = t.length; i < n; i++) {
          var o = t[i].length,
              s = t[i][o - 1];if (o <= 2) e(t[i][0][0]).css({ height: "auto" });else {
            this.$element.trigger("preequalizedrow.zf.equalizer");for (var r = 0, a = o - 1; r < a; r++) {
              e(t[i][r][0]).css({ height: s });
            }this.$element.trigger("postequalizedrow.zf.equalizer");
          }
        }this.$element.trigger("postequalized.zf.equalizer");
      } }, { key: "destroy", value: function value() {
        this._pauseEvents(), this.$watched.css("height", "auto"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { equalizeOnStack: !1, equalizeByRow: !1, equalizeOn: "" }, Foundation.plugin(t, "Equalizer");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, n), this.rules = [], this.currentPath = "", this._init(), this._events(), Foundation.registerPlugin(this, "Interchange");
    }return _createClass(t, [{ key: "_init", value: function value() {
        this._addBreakpoints(), this._generateRules(), this._reflow();
      } }, { key: "_events", value: function value() {
        var t = this;e(window).on("resize.zf.interchange", Foundation.util.throttle(function () {
          t._reflow();
        }, 50));
      } }, { key: "_reflow", value: function value() {
        var e;for (var t in this.rules) {
          if (this.rules.hasOwnProperty(t)) {
            var i = this.rules[t];window.matchMedia(i.query).matches && (e = i);
          }
        }e && this.replace(e.path);
      } }, { key: "_addBreakpoints", value: function value() {
        for (var e in Foundation.MediaQuery.queries) {
          if (Foundation.MediaQuery.queries.hasOwnProperty(e)) {
            var i = Foundation.MediaQuery.queries[e];t.SPECIAL_QUERIES[i.name] = i.value;
          }
        }
      } }, { key: "_generateRules", value: function value(e) {
        var i,
            n = [];i = this.options.rules ? this.options.rules : this.$element.data("interchange").match(/\[.*?\]/g);for (var o in i) {
          if (i.hasOwnProperty(o)) {
            var s = i[o].slice(1, -1).split(", "),
                r = s.slice(0, -1).join(""),
                a = s[s.length - 1];t.SPECIAL_QUERIES[a] && (a = t.SPECIAL_QUERIES[a]), n.push({ path: r, query: a });
          }
        }this.rules = n;
      } }, { key: "replace", value: function value(t) {
        if (this.currentPath !== t) {
          var i = this,
              n = "replaced.zf.interchange";"IMG" === this.$element[0].nodeName ? this.$element.attr("src", t).on("load", function () {
            i.currentPath = t;
          }).trigger(n) : t.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i) ? this.$element.css({ "background-image": "url(" + t + ")" }).trigger(n) : e.get(t, function (o) {
            i.$element.html(o).trigger(n), e(o).foundation(), i.currentPath = t;
          });
        }
      } }, { key: "destroy", value: function value() {} }]), t;
  }();t.defaults = { rules: null }, t.SPECIAL_QUERIES = { landscape: "screen and (orientation: landscape)", portrait: "screen and (orientation: portrait)", retina: "only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)" }, Foundation.plugin(t, "Interchange");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), this.calcPoints(), Foundation.registerPlugin(this, "Magellan");
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element[0].id || Foundation.GetYoDigits(6, "magellan");this.$targets = e("[data-magellan-target]"), this.$links = this.$element.find("a"), this.$element.attr({ "data-resize": t, "data-scroll": t, id: t }), this.$active = e(), this.scrollPos = parseInt(window.pageYOffset, 10), this._events();
      } }, { key: "calcPoints", value: function value() {
        var t = this,
            i = document.body,
            n = document.documentElement;this.points = [], this.winHeight = Math.round(Math.max(window.innerHeight, n.clientHeight)), this.docHeight = Math.round(Math.max(i.scrollHeight, i.offsetHeight, n.clientHeight, n.scrollHeight, n.offsetHeight)), this.$targets.each(function () {
          var i = e(this),
              n = Math.round(i.offset().top - t.options.threshold);i.targetPoint = n, t.points.push(n);
        });
      } }, { key: "_events", value: function value() {
        var t = this;e("html, body"), { duration: t.options.animationDuration, easing: t.options.animationEasing };e(window).one("load", function () {
          t.options.deepLinking && location.hash && t.scrollToLoc(location.hash), t.calcPoints(), t._updateActive();
        }), this.$element.on({ "resizeme.zf.trigger": this.reflow.bind(this), "scrollme.zf.trigger": this._updateActive.bind(this) }).on("click.zf.magellan", 'a[href^="#"]', function (e) {
          e.preventDefault();var i = this.getAttribute("href");t.scrollToLoc(i);
        }), e(window).on("popstate", function (e) {
          t.options.deepLinking && t.scrollToLoc(window.location.hash);
        });
      } }, { key: "scrollToLoc", value: function value(t) {
        if (!e(t).length) return !1;this._inTransition = !0;var i = this,
            n = Math.round(e(t).offset().top - this.options.threshold / 2 - this.options.barOffset);e("html, body").stop(!0).animate({ scrollTop: n }, this.options.animationDuration, this.options.animationEasing, function () {
          i._inTransition = !1, i._updateActive();
        });
      } }, { key: "reflow", value: function value() {
        this.calcPoints(), this._updateActive();
      } }, { key: "_updateActive", value: function value() {
        if (!this._inTransition) {
          var e,
              t = parseInt(window.pageYOffset, 10);if (t + this.winHeight === this.docHeight) e = this.points.length - 1;else if (t < this.points[0]) e = void 0;else {
            var i = this.scrollPos < t,
                n = this,
                o = this.points.filter(function (e, o) {
              return i ? e - n.options.barOffset <= t : e - n.options.barOffset - n.options.threshold <= t;
            });e = o.length ? o.length - 1 : 0;
          }if (this.$active.removeClass(this.options.activeClass), this.$active = this.$links.filter('[href="#' + this.$targets.eq(e).data("magellan-target") + '"]').addClass(this.options.activeClass), this.options.deepLinking) {
            var s = "";void 0 != e && (s = this.$active[0].getAttribute("href")), s !== window.location.hash && (window.history.pushState ? window.history.pushState(null, null, s) : window.location.hash = s);
          }this.scrollPos = t, this.$element.trigger("update.zf.magellan", [this.$active]);
        }
      } }, { key: "destroy", value: function value() {
        if (this.$element.off(".zf.trigger .zf.magellan").find("." + this.options.activeClass).removeClass(this.options.activeClass), this.options.deepLinking) {
          var e = this.$active[0].getAttribute("href");window.location.hash.replace(e, "");
        }Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { animationDuration: 500, animationEasing: "linear", threshold: 50, activeClass: "active", deepLinking: !1, barOffset: 0 }, Foundation.plugin(t, "Magellan");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this.$lastTrigger = e(), this.$triggers = e(), this._init(), this._events(), Foundation.registerPlugin(this, "OffCanvas"), Foundation.Keyboard.register("OffCanvas", { ESCAPE: "close" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element.attr("id");if (this.$element.attr("aria-hidden", "true"), this.$element.addClass("is-transition-" + this.options.transition), this.$triggers = e(document).find('[data-open="' + t + '"], [data-close="' + t + '"], [data-toggle="' + t + '"]').attr("aria-expanded", "false").attr("aria-controls", t), this.options.contentOverlay === !0) {
          var i = document.createElement("div"),
              n = "fixed" === e(this.$element).css("position") ? "is-overlay-fixed" : "is-overlay-absolute";i.setAttribute("class", "js-off-canvas-overlay " + n), this.$overlay = e(i), "is-overlay-fixed" === n ? e("body").append(this.$overlay) : this.$element.siblings("[data-off-canvas-content]").append(this.$overlay);
        }this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, "g").test(this.$element[0].className), this.options.isRevealed === !0 && (this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split("-")[2], this._setMQChecker()), !this.options.transitionTime == !0 && (this.options.transitionTime = 1e3 * parseFloat(window.getComputedStyle(e("[data-off-canvas]")[0]).transitionDuration));
      } }, { key: "_events", value: function value() {
        if (this.$element.off(".zf.trigger .zf.offcanvas").on({ "open.zf.trigger": this.open.bind(this), "close.zf.trigger": this.close.bind(this), "toggle.zf.trigger": this.toggle.bind(this), "keydown.zf.offcanvas": this._handleKeyboard.bind(this) }), this.options.closeOnClick === !0) {
          var t = this.options.contentOverlay ? this.$overlay : e("[data-off-canvas-content]");t.on({ "click.zf.offcanvas": this.close.bind(this) });
        }
      } }, { key: "_setMQChecker", value: function value() {
        var t = this;e(window).on("changed.zf.mediaquery", function () {
          Foundation.MediaQuery.atLeast(t.options.revealOn) ? t.reveal(!0) : t.reveal(!1);
        }).one("load.zf.offcanvas", function () {
          Foundation.MediaQuery.atLeast(t.options.revealOn) && t.reveal(!0);
        });
      } }, { key: "reveal", value: function value(e) {
        var t = this.$element.find("[data-close]");e ? (this.close(), this.isRevealed = !0, this.$element.attr("aria-hidden", "false"), this.$element.off("open.zf.trigger toggle.zf.trigger"), t.length && t.hide()) : (this.isRevealed = !1, this.$element.attr("aria-hidden", "true"), this.$element.on({ "open.zf.trigger": this.open.bind(this), "toggle.zf.trigger": this.toggle.bind(this) }), t.length && t.show());
      } }, { key: "_stopScrolling", value: function value(e) {
        return !1;
      } }, { key: "open", value: function value(t, i) {
        if (!this.$element.hasClass("is-open") && !this.isRevealed) {
          var n = this;i && (this.$lastTrigger = i), "top" === this.options.forceTo ? window.scrollTo(0, 0) : "bottom" === this.options.forceTo && window.scrollTo(0, document.body.scrollHeight), n.$element.addClass("is-open"), this.$triggers.attr("aria-expanded", "true"), this.$element.attr("aria-hidden", "false").trigger("opened.zf.offcanvas"), this.options.contentScroll === !1 && e("body").addClass("is-off-canvas-open").on("touchmove", this._stopScrolling), this.options.contentOverlay === !0 && this.$overlay.addClass("is-visible"), this.options.closeOnClick === !0 && this.options.contentOverlay === !0 && this.$overlay.addClass("is-closable"), this.options.autoFocus === !0 && this.$element.one(Foundation.transitionend(this.$element), function () {
            n.$element.find("a, button").eq(0).focus();
          }), this.options.trapFocus === !0 && (this.$element.siblings("[data-off-canvas-content]").attr("tabindex", "-1"), Foundation.Keyboard.trapFocus(this.$element));
        }
      } }, { key: "close", value: function value(t) {
        if (this.$element.hasClass("is-open") && !this.isRevealed) {
          var i = this;i.$element.removeClass("is-open"), this.$element.attr("aria-hidden", "true").trigger("closed.zf.offcanvas"), this.options.contentScroll === !1 && e("body").removeClass("is-off-canvas-open").off("touchmove", this._stopScrolling), this.options.contentOverlay === !0 && this.$overlay.removeClass("is-visible"), this.options.closeOnClick === !0 && this.options.contentOverlay === !0 && this.$overlay.removeClass("is-closable"), this.$triggers.attr("aria-expanded", "false"), this.options.trapFocus === !0 && (this.$element.siblings("[data-off-canvas-content]").removeAttr("tabindex"), Foundation.Keyboard.releaseFocus(this.$element));
        }
      } }, { key: "toggle", value: function value(e, t) {
        this.$element.hasClass("is-open") ? this.close(e, t) : this.open(e, t);
      } }, { key: "_handleKeyboard", value: function value(e) {
        var t = this;Foundation.Keyboard.handleKey(e, "OffCanvas", { close: function close() {
            return t.close(), t.$lastTrigger.focus(), !0;
          }, handled: function handled() {
            e.stopPropagation(), e.preventDefault();
          } });
      } }, { key: "destroy", value: function value() {
        this.close(), this.$element.off(".zf.trigger .zf.offcanvas"), this.$overlay.off(".zf.offcanvas"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { closeOnClick: !0, contentOverlay: !0, contentScroll: !0, transitionTime: 0, transition: "push", forceTo: null, isRevealed: !1, revealOn: null, autoFocus: !0, revealClass: "reveal-for-", trapFocus: !1 }, Foundation.plugin(t, "OffCanvas");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Orbit"), Foundation.Keyboard.register("Orbit", { ltr: { ARROW_RIGHT: "next", ARROW_LEFT: "previous" }, rtl: { ARROW_LEFT: "next", ARROW_RIGHT: "previous" } });
    }return _createClass(t, [{ key: "_init", value: function value() {
        this._reset(), this.$wrapper = this.$element.find("." + this.options.containerClass), this.$slides = this.$element.find("." + this.options.slideClass);var e = this.$element.find("img"),
            t = this.$slides.filter(".is-active"),
            i = this.$element[0].id || Foundation.GetYoDigits(6, "orbit");this.$element.attr({ "data-resize": i, id: i }), t.length || this.$slides.eq(0).addClass("is-active"), this.options.useMUI || this.$slides.addClass("no-motionui"), e.length ? Foundation.onImagesLoaded(e, this._prepareForOrbit.bind(this)) : this._prepareForOrbit(), this.options.bullets && this._loadBullets(), this._events(), this.options.autoPlay && this.$slides.length > 1 && this.geoSync(), this.options.accessible && this.$wrapper.attr("tabindex", 0);
      } }, { key: "_loadBullets", value: function value() {
        this.$bullets = this.$element.find("." + this.options.boxOfBullets).find("button");
      } }, { key: "geoSync", value: function value() {
        var e = this;this.timer = new Foundation.Timer(this.$element, { duration: this.options.timerDelay, infinite: !1 }, function () {
          e.changeSlide(!0);
        }), this.timer.start();
      } }, { key: "_prepareForOrbit", value: function value() {
        this._setWrapperHeight();
      } }, { key: "_setWrapperHeight", value: function value(t) {
        var i,
            n = 0,
            o = 0,
            s = this;this.$slides.each(function () {
          i = this.getBoundingClientRect().height, e(this).attr("data-slide", o), s.$slides.filter(".is-active")[0] !== s.$slides.eq(o)[0] && e(this).css({ position: "relative", display: "none" }), n = i > n ? i : n, o++;
        }), o === this.$slides.length && (this.$wrapper.css({ height: n }), t && t(n));
      } }, { key: "_setSlideHeight", value: function value(t) {
        this.$slides.each(function () {
          e(this).css("max-height", t);
        });
      } }, { key: "_events", value: function value() {
        var t = this;if (this.$element.off(".resizeme.zf.trigger").on({ "resizeme.zf.trigger": this._prepareForOrbit.bind(this) }), this.$slides.length > 1) {
          if (this.options.swipe && this.$slides.off("swipeleft.zf.orbit swiperight.zf.orbit").on("swipeleft.zf.orbit", function (e) {
            e.preventDefault(), t.changeSlide(!0);
          }).on("swiperight.zf.orbit", function (e) {
            e.preventDefault(), t.changeSlide(!1);
          }), this.options.autoPlay && (this.$slides.on("click.zf.orbit", function () {
            t.$element.data("clickedOn", !t.$element.data("clickedOn")), t.timer[t.$element.data("clickedOn") ? "pause" : "start"]();
          }), this.options.pauseOnHover && this.$element.on("mouseenter.zf.orbit", function () {
            t.timer.pause();
          }).on("mouseleave.zf.orbit", function () {
            t.$element.data("clickedOn") || t.timer.start();
          })), this.options.navButtons) {
            var i = this.$element.find("." + this.options.nextClass + ", ." + this.options.prevClass);i.attr("tabindex", 0).on("click.zf.orbit touchend.zf.orbit", function (i) {
              i.preventDefault(), t.changeSlide(e(this).hasClass(t.options.nextClass));
            });
          }this.options.bullets && this.$bullets.on("click.zf.orbit touchend.zf.orbit", function () {
            if (/is-active/g.test(this.className)) return !1;var i = e(this).data("slide"),
                n = i > t.$slides.filter(".is-active").data("slide"),
                o = t.$slides.eq(i);t.changeSlide(n, o, i);
          }), this.options.accessible && this.$wrapper.add(this.$bullets).on("keydown.zf.orbit", function (i) {
            Foundation.Keyboard.handleKey(i, "Orbit", { next: function next() {
                t.changeSlide(!0);
              }, previous: function previous() {
                t.changeSlide(!1);
              }, handled: function handled() {
                e(i.target).is(t.$bullets) && t.$bullets.filter(".is-active").focus();
              } });
          });
        }
      } }, { key: "_reset", value: function value() {
        "undefined" != typeof this.$slides && this.$slides.length > 1 && (this.$element.off(".zf.orbit").find("*").off(".zf.orbit"), this.options.autoPlay && this.timer.restart(), this.$slides.each(function (t) {
          e(t).removeClass("is-active is-active is-in").removeAttr("aria-live").hide();
        }), this.$slides.first().addClass("is-active").show(), this.$element.trigger("slidechange.zf.orbit", [this.$slides.first()]), this.options.bullets && this._updateBullets(0));
      } }, { key: "changeSlide", value: function value(e, t, i) {
        if (this.$slides) {
          var n = this.$slides.filter(".is-active").eq(0);if (/mui/g.test(n[0].className)) return !1;var o,
              s = this.$slides.first(),
              r = this.$slides.last(),
              a = e ? "Right" : "Left",
              l = e ? "Left" : "Right",
              d = this;o = t ? t : e ? this.options.infiniteWrap ? n.next("." + this.options.slideClass).length ? n.next("." + this.options.slideClass) : s : n.next("." + this.options.slideClass) : this.options.infiniteWrap ? n.prev("." + this.options.slideClass).length ? n.prev("." + this.options.slideClass) : r : n.prev("." + this.options.slideClass), o.length && (this.$element.trigger("beforeslidechange.zf.orbit", [n, o]), this.options.bullets && (i = i || this.$slides.index(o), this._updateBullets(i)), this.options.useMUI && !this.$element.is(":hidden") ? (Foundation.Motion.animateIn(o.addClass("is-active").css({ position: "absolute", top: 0 }), this.options["animInFrom" + a], function () {
            o.css({ position: "relative", display: "block" }).attr("aria-live", "polite");
          }), Foundation.Motion.animateOut(n.removeClass("is-active"), this.options["animOutTo" + l], function () {
            n.removeAttr("aria-live"), d.options.autoPlay && !d.timer.isPaused && d.timer.restart();
          })) : (n.removeClass("is-active is-in").removeAttr("aria-live").hide(), o.addClass("is-active is-in").attr("aria-live", "polite").show(), this.options.autoPlay && !this.timer.isPaused && this.timer.restart()), this.$element.trigger("slidechange.zf.orbit", [o]));
        }
      } }, { key: "_updateBullets", value: function value(e) {
        var t = this.$element.find("." + this.options.boxOfBullets).find(".is-active").removeClass("is-active").blur(),
            i = t.find("span:last").detach();this.$bullets.eq(e).addClass("is-active").append(i);
      } }, { key: "destroy", value: function value() {
        this.$element.off(".zf.orbit").find("*").off(".zf.orbit").end().hide(), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { bullets: !0, navButtons: !0, animInFromRight: "slide-in-right", animOutToRight: "slide-out-right", animInFromLeft: "slide-in-left", animOutToLeft: "slide-out-left", autoPlay: !0, timerDelay: 5e3, infiniteWrap: !0, swipe: !0, pauseOnHover: !0, accessible: !0, containerClass: "orbit-container", slideClass: "orbit-slide", boxOfBullets: "orbit-bullets", nextClass: "orbit-next", prevClass: "orbit-previous", useMUI: !0 }, Foundation.plugin(t, "Orbit");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = e(i), this.rules = this.$element.data("responsive-menu"), this.currentMq = null, this.currentPlugin = null, this._init(), this._events(), Foundation.registerPlugin(this, "ResponsiveMenu");
    }return _createClass(t, [{ key: "_init", value: function value() {
        if ("string" == typeof this.rules) {
          for (var t = {}, n = this.rules.split(" "), o = 0; o < n.length; o++) {
            var s = n[o].split("-"),
                r = s.length > 1 ? s[0] : "small",
                a = s.length > 1 ? s[1] : s[0];null !== i[a] && (t[r] = i[a]);
          }this.rules = t;
        }e.isEmptyObject(this.rules) || this._checkMediaQueries(), this.$element.attr("data-mutate", this.$element.attr("data-mutate") || Foundation.GetYoDigits(6, "responsive-menu"));
      } }, { key: "_events", value: function value() {
        var t = this;e(window).on("changed.zf.mediaquery", function () {
          t._checkMediaQueries();
        });
      } }, { key: "_checkMediaQueries", value: function value() {
        var t,
            n = this;e.each(this.rules, function (e) {
          Foundation.MediaQuery.atLeast(e) && (t = e);
        }), t && (this.currentPlugin instanceof this.rules[t].plugin || (e.each(i, function (e, t) {
          n.$element.removeClass(t.cssClass);
        }), this.$element.addClass(this.rules[t].cssClass), this.currentPlugin && this.currentPlugin.destroy(), this.currentPlugin = new this.rules[t].plugin(this.$element, {})));
      } }, { key: "destroy", value: function value() {
        this.currentPlugin.destroy(), e(window).off(".zf.ResponsiveMenu"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = {};var i = { dropdown: { cssClass: "dropdown", plugin: Foundation._plugins["dropdown-menu"] || null }, drilldown: { cssClass: "drilldown", plugin: Foundation._plugins.drilldown || null }, accordion: { cssClass: "accordion-menu", plugin: Foundation._plugins["accordion-menu"] || null } };Foundation.plugin(t, "ResponsiveMenu");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = e(i), this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), this._events(), Foundation.registerPlugin(this, "ResponsiveToggle");
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element.data("responsive-toggle");if (t || console.error("Your tab bar needs an ID of a Menu as the value of data-tab-bar."), this.$targetMenu = e("#" + t), this.$toggler = this.$element.find("[data-toggle]"), this.options = e.extend({}, this.options, this.$targetMenu.data()), this.options.animate) {
          var i = this.options.animate.split(" ");this.animationIn = i[0], this.animationOut = i[1] || null;
        }this._update();
      } }, { key: "_events", value: function value() {
        this._updateMqHandler = this._update.bind(this), e(window).on("changed.zf.mediaquery", this._updateMqHandler), this.$toggler.on("click.zf.responsiveToggle", this.toggleMenu.bind(this));
      } }, { key: "_update", value: function value() {
        Foundation.MediaQuery.atLeast(this.options.hideFor) ? (this.$element.hide(), this.$targetMenu.show()) : (this.$element.show(), this.$targetMenu.hide());
      } }, { key: "toggleMenu", value: function value() {
        var e = this;Foundation.MediaQuery.atLeast(this.options.hideFor) || (this.options.animate ? this.$targetMenu.is(":hidden") ? Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {
          e.$element.trigger("toggled.zf.responsiveToggle"), e.$targetMenu.find("[data-mutate]").triggerHandler("mutateme.zf.trigger");
        }) : Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {
          e.$element.trigger("toggled.zf.responsiveToggle");
        }) : (this.$targetMenu.toggle(0), this.$targetMenu.find("[data-mutate]").trigger("mutateme.zf.trigger"), this.$element.trigger("toggled.zf.responsiveToggle")));
      } }, { key: "destroy", value: function value() {
        this.$element.off(".zf.responsiveToggle"), this.$toggler.off(".zf.responsiveToggle"), e(window).off("changed.zf.mediaquery", this._updateMqHandler), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { hideFor: "medium", animate: !1 }, Foundation.plugin(t, "ResponsiveToggle");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  function t() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }function i() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }function n() {
    return t() || i();
  }var o = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Reveal"), Foundation.Keyboard.register("Reveal", { ENTER: "open", SPACE: "open", ESCAPE: "close" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        this.id = this.$element.attr("id"), this.isActive = !1, this.cached = { mq: Foundation.MediaQuery.current }, this.isMobile = n(), this.$anchor = e(e('[data-open="' + this.id + '"]').length ? '[data-open="' + this.id + '"]' : '[data-toggle="' + this.id + '"]'), this.$anchor.attr({ "aria-controls": this.id, "aria-haspopup": !0, tabindex: 0 }), (this.options.fullScreen || this.$element.hasClass("full")) && (this.options.fullScreen = !0, this.options.overlay = !1), this.options.overlay && !this.$overlay && (this.$overlay = this._makeOverlay(this.id)), this.$element.attr({ role: "dialog", "aria-hidden": !0, "data-yeti-box": this.id, "data-resize": this.id }), this.$overlay ? this.$element.detach().appendTo(this.$overlay) : (this.$element.detach().appendTo(e(this.options.appendTo)), this.$element.addClass("without-overlay")), this._events(), this.options.deepLink && window.location.hash === "#" + this.id && e(window).one("load.zf.reveal", this.open.bind(this));
      } }, { key: "_makeOverlay", value: function value() {
        return e("<div></div>").addClass("reveal-overlay").appendTo(this.options.appendTo);
      } }, { key: "_updatePosition", value: function value() {
        var t,
            i,
            n = this.$element.outerWidth(),
            o = e(window).width(),
            s = this.$element.outerHeight(),
            r = e(window).height();t = "auto" === this.options.hOffset ? parseInt((o - n) / 2, 10) : parseInt(this.options.hOffset, 10), i = "auto" === this.options.vOffset ? s > r ? parseInt(Math.min(100, r / 10), 10) : parseInt((r - s) / 4, 10) : parseInt(this.options.vOffset, 10), this.$element.css({ top: i + "px" }), this.$overlay && "auto" === this.options.hOffset || (this.$element.css({ left: t + "px" }), this.$element.css({ margin: "0px" }));
      } }, { key: "_events", value: function value() {
        var t = this,
            i = this;this.$element.on({ "open.zf.trigger": this.open.bind(this), "close.zf.trigger": function closeZfTrigger(n, o) {
            if (n.target === i.$element[0] || e(n.target).parents("[data-closable]")[0] === o) return t.close.apply(t);
          }, "toggle.zf.trigger": this.toggle.bind(this), "resizeme.zf.trigger": function resizemeZfTrigger() {
            i._updatePosition();
          } }), this.$anchor.length && this.$anchor.on("keydown.zf.reveal", function (e) {
          13 !== e.which && 32 !== e.which || (e.stopPropagation(), e.preventDefault(), i.open());
        }), this.options.closeOnClick && this.options.overlay && this.$overlay.off(".zf.reveal").on("click.zf.reveal", function (t) {
          t.target !== i.$element[0] && !e.contains(i.$element[0], t.target) && e.contains(document, t.target) && i.close();
        }), this.options.deepLink && e(window).on("popstate.zf.reveal:" + this.id, this._handleState.bind(this));
      } }, { key: "_handleState", value: function value(e) {
        window.location.hash !== "#" + this.id || this.isActive ? this.close() : this.open();
      } }, { key: "open", value: function value() {
        function t() {
          o.isMobile ? (o.originalScrollPos || (o.originalScrollPos = window.pageYOffset), e("html, body").addClass("is-reveal-open")) : e("body").addClass("is-reveal-open");
        }var i = this;if (this.options.deepLink) {
          var n = "#" + this.id;window.history.pushState ? window.history.pushState(null, null, n) : window.location.hash = n;
        }this.isActive = !0, this.$element.css({ visibility: "hidden" }).show().scrollTop(0), this.options.overlay && this.$overlay.css({ visibility: "hidden" }).show(), this._updatePosition(), this.$element.hide().css({ visibility: "" }), this.$overlay && (this.$overlay.css({ visibility: "" }).hide(), this.$element.hasClass("fast") ? this.$overlay.addClass("fast") : this.$element.hasClass("slow") && this.$overlay.addClass("slow")), this.options.multipleOpened || this.$element.trigger("closeme.zf.reveal", this.id);var o = this;this.options.animationIn ? !function () {
          var e = function e() {
            o.$element.attr({ "aria-hidden": !1, tabindex: -1 }).focus(), t(), Foundation.Keyboard.trapFocus(o.$element);
          };i.options.overlay && Foundation.Motion.animateIn(i.$overlay, "fade-in"), Foundation.Motion.animateIn(i.$element, i.options.animationIn, function () {
            i.$element && (i.focusableElements = Foundation.Keyboard.findFocusable(i.$element), e());
          });
        }() : (this.options.overlay && this.$overlay.show(0), this.$element.show(this.options.showDelay)), this.$element.attr({ "aria-hidden": !1, tabindex: -1 }).focus(), Foundation.Keyboard.trapFocus(this.$element), this.$element.trigger("open.zf.reveal"), t(), setTimeout(function () {
          i._extraHandlers();
        }, 0);
      } }, { key: "_extraHandlers", value: function value() {
        var t = this;this.$element && (this.focusableElements = Foundation.Keyboard.findFocusable(this.$element), this.options.overlay || !this.options.closeOnClick || this.options.fullScreen || e("body").on("click.zf.reveal", function (i) {
          i.target !== t.$element[0] && !e.contains(t.$element[0], i.target) && e.contains(document, i.target) && t.close();
        }), this.options.closeOnEsc && e(window).on("keydown.zf.reveal", function (e) {
          Foundation.Keyboard.handleKey(e, "Reveal", { close: function close() {
              t.options.closeOnEsc && (t.close(), t.$anchor.focus());
            } });
        }), this.$element.on("keydown.zf.reveal", function (i) {
          var n = e(this);Foundation.Keyboard.handleKey(i, "Reveal", { open: function open() {
              t.$element.find(":focus").is(t.$element.find("[data-close]")) ? setTimeout(function () {
                t.$anchor.focus();
              }, 1) : n.is(t.focusableElements) && t.open();
            }, close: function close() {
              t.options.closeOnEsc && (t.close(), t.$anchor.focus());
            }, handled: function handled(e) {
              e && i.preventDefault();
            } });
        }));
      } }, { key: "close", value: function value() {
        function t() {
          i.isMobile ? (e("html, body").removeClass("is-reveal-open"), i.originalScrollPos && (e("body").scrollTop(i.originalScrollPos), i.originalScrollPos = null)) : e("body").removeClass("is-reveal-open"), Foundation.Keyboard.releaseFocus(i.$element), i.$element.attr("aria-hidden", !0), i.$element.trigger("closed.zf.reveal");
        }if (!this.isActive || !this.$element.is(":visible")) return !1;var i = this;this.options.animationOut ? (this.options.overlay ? Foundation.Motion.animateOut(this.$overlay, "fade-out", t) : t(), Foundation.Motion.animateOut(this.$element, this.options.animationOut)) : (this.options.overlay ? this.$overlay.hide(0, t) : t(), this.$element.hide(this.options.hideDelay)), this.options.closeOnEsc && e(window).off("keydown.zf.reveal"), !this.options.overlay && this.options.closeOnClick && e("body").off("click.zf.reveal"), this.$element.off("keydown.zf.reveal"), this.options.resetOnClose && this.$element.html(this.$element.html()), this.isActive = !1, i.options.deepLink && (window.history.replaceState ? window.history.replaceState("", document.title, window.location.href.replace("#" + this.id, "")) : window.location.hash = "");
      } }, { key: "toggle", value: function value() {
        this.isActive ? this.close() : this.open();
      } }, { key: "destroy", value: function value() {
        this.options.overlay && (this.$element.appendTo(e(this.options.appendTo)), this.$overlay.hide().off().remove()), this.$element.hide().off(), this.$anchor.off(".zf"), e(window).off(".zf.reveal:" + this.id), Foundation.unregisterPlugin(this);
      } }]), t;
  }();o.defaults = { animationIn: "", animationOut: "", showDelay: 0, hideDelay: 0, closeOnClick: !0, closeOnEsc: !0, multipleOpened: !1, vOffset: "auto", hOffset: "auto", fullScreen: !1, btmOffsetPct: 10, overlay: !0, resetOnClose: !1, deepLink: !1, appendTo: "body" }, Foundation.plugin(o, "Reveal");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  function t(e, t) {
    return e / t;
  }function i(e, t, i, n) {
    return Math.abs(e.position()[t] + e[n]() / 2 - i);
  }function n(e, t) {
    return Math.log(t) / Math.log(e);
  }var o = function () {
    function o(t, i) {
      _classCallCheck(this, o), this.$element = t, this.options = e.extend({}, o.defaults, this.$element.data(), i), this._init(), Foundation.registerPlugin(this, "Slider"), Foundation.Keyboard.register("Slider", { ltr: { ARROW_RIGHT: "increase", ARROW_UP: "increase", ARROW_DOWN: "decrease", ARROW_LEFT: "decrease", SHIFT_ARROW_RIGHT: "increase_fast", SHIFT_ARROW_UP: "increase_fast", SHIFT_ARROW_DOWN: "decrease_fast", SHIFT_ARROW_LEFT: "decrease_fast" }, rtl: { ARROW_LEFT: "increase", ARROW_RIGHT: "decrease", SHIFT_ARROW_LEFT: "increase_fast", SHIFT_ARROW_RIGHT: "decrease_fast" } });
    }return _createClass(o, [{ key: "_init", value: function value() {
        this.inputs = this.$element.find("input"), this.handles = this.$element.find("[data-slider-handle]"), this.$handle = this.handles.eq(0), this.$input = this.inputs.length ? this.inputs.eq(0) : e("#" + this.$handle.attr("aria-controls")), this.$fill = this.$element.find("[data-slider-fill]").css(this.options.vertical ? "height" : "width", 0);var t = !1;(this.options.disabled || this.$element.hasClass(this.options.disabledClass)) && (this.options.disabled = !0, this.$element.addClass(this.options.disabledClass)), this.inputs.length || (this.inputs = e().add(this.$input), this.options.binding = !0), this._setInitAttr(0), this.handles[1] && (this.options.doubleSided = !0, this.$handle2 = this.handles.eq(1), this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : e("#" + this.$handle2.attr("aria-controls")), this.inputs[1] || (this.inputs = this.inputs.add(this.$input2)), t = !0, this._setInitAttr(1)), this.setHandles(), this._events();
      } }, { key: "setHandles", value: function value() {
        var e = this;this.handles[1] ? this._setHandlePos(this.$handle, this.inputs.eq(0).val(), !0, function () {
          e._setHandlePos(e.$handle2, e.inputs.eq(1).val(), !0);
        }) : this._setHandlePos(this.$handle, this.inputs.eq(0).val(), !0);
      } }, { key: "_reflow", value: function value() {
        this.setHandles();
      } }, { key: "_pctOfBar", value: function value(e) {
        var i = t(e - this.options.start, this.options.end - this.options.start);switch (this.options.positionValueFunction) {case "pow":
            i = this._logTransform(i);break;case "log":
            i = this._powTransform(i);}return i.toFixed(2);
      } }, { key: "_value", value: function value(e) {
        switch (this.options.positionValueFunction) {case "pow":
            e = this._powTransform(e);break;case "log":
            e = this._logTransform(e);}var t = (this.options.end - this.options.start) * e + this.options.start;return t;
      } }, { key: "_logTransform", value: function value(e) {
        return n(this.options.nonLinearBase, e * (this.options.nonLinearBase - 1) + 1);
      } }, { key: "_powTransform", value: function value(e) {
        return (Math.pow(this.options.nonLinearBase, e) - 1) / (this.options.nonLinearBase - 1);
      } }, { key: "_setHandlePos", value: function value(e, i, n, o) {
        if (!this.$element.hasClass(this.options.disabledClass)) {
          i = parseFloat(i), i < this.options.start ? i = this.options.start : i > this.options.end && (i = this.options.end);var s = this.options.doubleSided;if (s) if (0 === this.handles.index(e)) {
            var r = parseFloat(this.$handle2.attr("aria-valuenow"));i = i >= r ? r - this.options.step : i;
          } else {
            var a = parseFloat(this.$handle.attr("aria-valuenow"));i = i <= a ? a + this.options.step : i;
          }this.options.vertical && !n && (i = this.options.end - i);var l = this,
              d = this.options.vertical,
              u = d ? "height" : "width",
              c = d ? "top" : "left",
              h = e[0].getBoundingClientRect()[u],
              f = this.$element[0].getBoundingClientRect()[u],
              p = this._pctOfBar(i),
              v = (f - h) * p,
              m = (100 * t(v, f)).toFixed(this.options.decimal);i = parseFloat(i.toFixed(this.options.decimal));var g = {};if (this._setValues(e, i), s) {
            var y,
                w = 0 === this.handles.index(e),
                b = ~~(100 * t(h, f));if (w) g[c] = m + "%", y = parseFloat(this.$handle2[0].style[c]) - m + b, o && "function" == typeof o && o();else {
              var k = parseFloat(this.$handle[0].style[c]);y = m - (isNaN(k) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : k) + b;
            }g["min-" + u] = y + "%";
          }this.$element.one("finished.zf.animate", function () {
            l.$element.trigger("moved.zf.slider", [e]);
          });var C = this.$element.data("dragging") ? 1e3 / 60 : this.options.moveTime;Foundation.Move(C, e, function () {
            isNaN(m) ? e.css(c, 100 * p + "%") : e.css(c, m + "%"), l.options.doubleSided ? l.$fill.css(g) : l.$fill.css(u, 100 * p + "%");
          }), clearTimeout(l.timeout), l.timeout = setTimeout(function () {
            l.$element.trigger("changed.zf.slider", [e]);
          }, l.options.changedDelay);
        }
      } }, { key: "_setInitAttr", value: function value(e) {
        var t = 0 === e ? this.options.initialStart : this.options.initialEnd,
            i = this.inputs.eq(e).attr("id") || Foundation.GetYoDigits(6, "slider");this.inputs.eq(e).attr({ id: i, max: this.options.end, min: this.options.start, step: this.options.step }), this.inputs.eq(e).val(t), this.handles.eq(e).attr({ role: "slider", "aria-controls": i, "aria-valuemax": this.options.end, "aria-valuemin": this.options.start, "aria-valuenow": t, "aria-orientation": this.options.vertical ? "vertical" : "horizontal", tabindex: 0 });
      } }, { key: "_setValues", value: function value(e, t) {
        var i = this.options.doubleSided ? this.handles.index(e) : 0;this.inputs.eq(i).val(t), e.attr("aria-valuenow", t);
      } }, { key: "_handleEvent", value: function value(n, o, s) {
        var r, a;if (s) r = this._adjustValue(null, s), a = !0;else {
          n.preventDefault();var l = this,
              d = this.options.vertical,
              u = d ? "height" : "width",
              c = d ? "top" : "left",
              h = d ? n.pageY : n.pageX,
              f = (this.$handle[0].getBoundingClientRect()[u] / 2, this.$element[0].getBoundingClientRect()[u]),
              p = d ? e(window).scrollTop() : e(window).scrollLeft(),
              v = this.$element.offset()[c];n.clientY === n.pageY && (h += p);var m,
              g = h - v;m = g < 0 ? 0 : g > f ? f : g;var y = t(m, f);if (r = this._value(y), Foundation.rtl() && !this.options.vertical && (r = this.options.end - r), r = l._adjustValue(null, r), a = !1, !o) {
            var w = i(this.$handle, c, m, u),
                b = i(this.$handle2, c, m, u);o = w <= b ? this.$handle : this.$handle2;
          }
        }this._setHandlePos(o, r, a);
      } }, { key: "_adjustValue", value: function value(e, t) {
        var i,
            n,
            o,
            s,
            r = this.options.step,
            a = parseFloat(r / 2);return i = e ? parseFloat(e.attr("aria-valuenow")) : t, n = i % r, o = i - n, s = o + r, 0 === n ? i : i = i >= o + a ? s : o;
      } }, { key: "_events", value: function value() {
        this._eventsForHandle(this.$handle), this.handles[1] && this._eventsForHandle(this.$handle2);
      } }, { key: "_eventsForHandle", value: function value(t) {
        var i,
            n = this;if (this.inputs.off("change.zf.slider").on("change.zf.slider", function (t) {
          var i = n.inputs.index(e(this));n._handleEvent(t, n.handles.eq(i), e(this).val());
        }), this.options.clickSelect && this.$element.off("click.zf.slider").on("click.zf.slider", function (t) {
          return !n.$element.data("dragging") && void (e(t.target).is("[data-slider-handle]") || (n.options.doubleSided ? n._handleEvent(t) : n._handleEvent(t, n.$handle)));
        }), this.options.draggable) {
          this.handles.addTouch();var o = e("body");t.off("mousedown.zf.slider").on("mousedown.zf.slider", function (s) {
            t.addClass("is-dragging"), n.$fill.addClass("is-dragging"), n.$element.data("dragging", !0), i = e(s.currentTarget), o.on("mousemove.zf.slider", function (e) {
              e.preventDefault(), n._handleEvent(e, i);
            }).on("mouseup.zf.slider", function (e) {
              n._handleEvent(e, i), t.removeClass("is-dragging"), n.$fill.removeClass("is-dragging"), n.$element.data("dragging", !1), o.off("mousemove.zf.slider mouseup.zf.slider");
            });
          }).on("selectstart.zf.slider touchmove.zf.slider", function (e) {
            e.preventDefault();
          });
        }t.off("keydown.zf.slider").on("keydown.zf.slider", function (t) {
          var i,
              o = e(this),
              s = n.options.doubleSided ? n.handles.index(o) : 0,
              r = parseFloat(n.inputs.eq(s).val());Foundation.Keyboard.handleKey(t, "Slider", { decrease: function decrease() {
              i = r - n.options.step;
            }, increase: function increase() {
              i = r + n.options.step;
            }, decrease_fast: function decrease_fast() {
              i = r - 10 * n.options.step;
            }, increase_fast: function increase_fast() {
              i = r + 10 * n.options.step;
            }, handled: function handled() {
              t.preventDefault(), n._setHandlePos(o, i, !0);
            } });
        });
      } }, { key: "destroy", value: function value() {
        this.handles.off(".zf.slider"), this.inputs.off(".zf.slider"), this.$element.off(".zf.slider"), clearTimeout(this.timeout), Foundation.unregisterPlugin(this);
      } }]), o;
  }();o.defaults = { start: 0, end: 100, step: 1, initialStart: 0, initialEnd: 100, binding: !1, clickSelect: !0, vertical: !1, draggable: !0, disabled: !1, doubleSided: !1, decimal: 2, moveTime: 200, disabledClass: "disabled", invertVertical: !1, changedDelay: 500, nonLinearBase: 5, positionValueFunction: "linear" }, Foundation.plugin(o, "Slider");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  function t(e) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * e;
  }var i = function () {
    function i(t, n) {
      _classCallCheck(this, i), this.$element = t, this.options = e.extend({}, i.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Sticky");
    }return _createClass(i, [{ key: "_init", value: function value() {
        var t = this.$element.parent("[data-sticky-container]"),
            i = this.$element[0].id || Foundation.GetYoDigits(6, "sticky"),
            n = this;t.length || (this.wasWrapped = !0), this.$container = t.length ? t : e(this.options.container).wrapInner(this.$element), this.$container.addClass(this.options.containerClass), this.$element.addClass(this.options.stickyClass).attr({ "data-resize": i }), this.scrollCount = this.options.checkEvery, this.isStuck = !1, e(window).one("load.zf.sticky", function () {
          n.containerHeight = "none" == n.$element.css("display") ? 0 : n.$element[0].getBoundingClientRect().height, n.$container.css("height", n.containerHeight), n.elemHeight = n.containerHeight, "" !== n.options.anchor ? n.$anchor = e("#" + n.options.anchor) : n._parsePoints(), n._setSizes(function () {
            var e = window.pageYOffset;n._calc(!1, e), n.isStuck || n._removeSticky(!(e >= n.topPoint));
          }), n._events(i.split("-").reverse().join("-"));
        });
      } }, { key: "_parsePoints", value: function value() {
        for (var t = "" == this.options.topAnchor ? 1 : this.options.topAnchor, i = "" == this.options.btmAnchor ? document.documentElement.scrollHeight : this.options.btmAnchor, n = [t, i], o = {}, s = 0, r = n.length; s < r && n[s]; s++) {
          var a;if ("number" == typeof n[s]) a = n[s];else {
            var l = n[s].split(":"),
                d = e("#" + l[0]);a = d.offset().top, l[1] && "bottom" === l[1].toLowerCase() && (a += d[0].getBoundingClientRect().height);
          }o[s] = a;
        }this.points = o;
      } }, { key: "_events", value: function value(t) {
        var i = this,
            n = this.scrollListener = "scroll.zf." + t;this.isOn || (this.canStick && (this.isOn = !0, e(window).off(n).on(n, function (e) {
          0 === i.scrollCount ? (i.scrollCount = i.options.checkEvery, i._setSizes(function () {
            i._calc(!1, window.pageYOffset);
          })) : (i.scrollCount--, i._calc(!1, window.pageYOffset));
        })), this.$element.off("resizeme.zf.trigger").on("resizeme.zf.trigger", function (e, o) {
          i._setSizes(function () {
            i._calc(!1), i.canStick ? i.isOn || i._events(t) : i.isOn && i._pauseListeners(n);
          });
        }));
      } }, { key: "_pauseListeners", value: function value(t) {
        this.isOn = !1, e(window).off(t), this.$element.trigger("pause.zf.sticky");
      } }, { key: "_calc", value: function value(e, t) {
        return e && this._setSizes(), this.canStick ? (t || (t = window.pageYOffset), void (t >= this.topPoint ? t <= this.bottomPoint ? this.isStuck || this._setSticky() : this.isStuck && this._removeSticky(!1) : this.isStuck && this._removeSticky(!0))) : (this.isStuck && this._removeSticky(!0), !1);
      } }, { key: "_setSticky", value: function value() {
        var e = this,
            t = this.options.stickTo,
            i = "top" === t ? "marginTop" : "marginBottom",
            n = "top" === t ? "bottom" : "top",
            o = {};o[i] = this.options[i] + "em", o[t] = 0, o[n] = "auto", this.isStuck = !0, this.$element.removeClass("is-anchored is-at-" + n).addClass("is-stuck is-at-" + t).css(o).trigger("sticky.zf.stuckto:" + t), this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
          e._setSizes();
        });
      } }, { key: "_removeSticky", value: function value(e) {
        var t = this.options.stickTo,
            i = "top" === t,
            n = {},
            o = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
            s = i ? "marginTop" : "marginBottom",
            r = e ? "top" : "bottom";n[s] = 0, n.bottom = "auto", e ? n.top = 0 : n.top = o, this.isStuck = !1, this.$element.removeClass("is-stuck is-at-" + t).addClass("is-anchored is-at-" + r).css(n).trigger("sticky.zf.unstuckfrom:" + r);
      } }, { key: "_setSizes", value: function value(e) {
        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn), this.canStick || e && "function" == typeof e && e();var t = this.$container[0].getBoundingClientRect().width,
            i = window.getComputedStyle(this.$container[0]),
            n = parseInt(i["padding-left"], 10),
            o = parseInt(i["padding-right"], 10);
        this.$anchor && this.$anchor.length ? this.anchorHeight = this.$anchor[0].getBoundingClientRect().height : this._parsePoints(), this.$element.css({ "max-width": t - n - o + "px" });var s = this.$element[0].getBoundingClientRect().height || this.containerHeight;if ("none" == this.$element.css("display") && (s = 0), this.containerHeight = s, this.$container.css({ height: s }), this.elemHeight = s, !this.isStuck && this.$element.hasClass("is-at-bottom")) {
          var r = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;this.$element.css("top", r);
        }this._setBreakPoints(s, function () {
          e && "function" == typeof e && e();
        });
      } }, { key: "_setBreakPoints", value: function value(e, i) {
        if (!this.canStick) {
          if (!i || "function" != typeof i) return !1;i();
        }var n = t(this.options.marginTop),
            o = t(this.options.marginBottom),
            s = this.points ? this.points[0] : this.$anchor.offset().top,
            r = this.points ? this.points[1] : s + this.anchorHeight,
            a = window.innerHeight;"top" === this.options.stickTo ? (s -= n, r -= e + n) : "bottom" === this.options.stickTo && (s -= a - (e + o), r -= a - o), this.topPoint = s, this.bottomPoint = r, i && "function" == typeof i && i();
      } }, { key: "destroy", value: function value() {
        this._removeSticky(!0), this.$element.removeClass(this.options.stickyClass + " is-anchored is-at-top").css({ height: "", top: "", bottom: "", "max-width": "" }).off("resizeme.zf.trigger"), this.$anchor && this.$anchor.length && this.$anchor.off("change.zf.sticky"), e(window).off(this.scrollListener), this.wasWrapped ? this.$element.unwrap() : this.$container.removeClass(this.options.containerClass).css({ height: "" }), Foundation.unregisterPlugin(this);
      } }]), i;
  }();i.defaults = { container: "<div data-sticky-container></div>", stickTo: "top", anchor: "", topAnchor: "", btmAnchor: "", marginTop: 1, marginBottom: 1, stickyOn: "medium", stickyClass: "sticky", containerClass: "sticky-container", checkEvery: -1 }, Foundation.plugin(i, "Sticky");
}(jQuery);var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
},
    _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this._init(), Foundation.registerPlugin(this, "Tabs"), Foundation.Keyboard.register("Tabs", { ENTER: "open", SPACE: "open", ARROW_RIGHT: "next", ARROW_UP: "previous", ARROW_DOWN: "next", ARROW_LEFT: "previous" });
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this;if (this.$element.attr({ role: "tablist" }), this.$tabTitles = this.$element.find("." + this.options.linkClass), this.$tabContent = e('[data-tabs-content="' + this.$element[0].id + '"]'), this.$tabTitles.each(function () {
          var i = e(this),
              n = i.find("a"),
              o = i.hasClass("" + t.options.linkActiveClass),
              s = n[0].hash.slice(1),
              r = n[0].id ? n[0].id : s + "-label",
              a = e("#" + s);if (i.attr({ role: "presentation" }), n.attr({ role: "tab", "aria-controls": s, "aria-selected": o, id: r }), a.attr({ role: "tabpanel", "aria-hidden": !o, "aria-labelledby": r }), o && t.options.autoFocus && e(window).load(function () {
            e("html, body").animate({ scrollTop: i.offset().top }, t.options.deepLinkSmudgeDelay, function () {
              n.focus();
            });
          }), t.options.deepLink) {
            var l = window.location.hash;if (l.length) {
              var n = i.find('[href="' + l + '"]');n.length && (t.selectTab(e(l)), t.options.deepLinkSmudge && e(window).load(function () {
                var n = i.offset();e("html, body").animate({ scrollTop: n.top }, t.options.deepLinkSmudgeDelay);
              }), i.trigger("deeplink.zf.tabs", [n, e(l)]));
            }
          }
        }), this.options.matchHeight) {
          var i = this.$tabContent.find("img");i.length ? Foundation.onImagesLoaded(i, this._setHeight.bind(this)) : this._setHeight();
        }this._events();
      } }, { key: "_events", value: function value() {
        this._addKeyHandler(), this._addClickHandler(), this._setHeightMqHandler = null, this.options.matchHeight && (this._setHeightMqHandler = this._setHeight.bind(this), e(window).on("changed.zf.mediaquery", this._setHeightMqHandler));
      } }, { key: "_addClickHandler", value: function value() {
        var t = this;this.$element.off("click.zf.tabs").on("click.zf.tabs", "." + this.options.linkClass, function (i) {
          i.preventDefault(), i.stopPropagation(), t._handleTabChange(e(this));
        });
      } }, { key: "_addKeyHandler", value: function value() {
        var t = this;this.$tabTitles.off("keydown.zf.tabs").on("keydown.zf.tabs", function (i) {
          if (9 !== i.which) {
            var n,
                o,
                s = e(this),
                r = s.parent("ul").children("li");r.each(function (i) {
              if (e(this).is(s)) return void (t.options.wrapOnKeys ? (n = 0 === i ? r.last() : r.eq(i - 1), o = i === r.length - 1 ? r.first() : r.eq(i + 1)) : (n = r.eq(Math.max(0, i - 1)), o = r.eq(Math.min(i + 1, r.length - 1))));
            }), Foundation.Keyboard.handleKey(i, "Tabs", { open: function open() {
                s.find('[role="tab"]').focus(), t._handleTabChange(s);
              }, previous: function previous() {
                n.find('[role="tab"]').focus(), t._handleTabChange(n);
              }, next: function next() {
                o.find('[role="tab"]').focus(), t._handleTabChange(o);
              }, handled: function handled() {
                i.stopPropagation(), i.preventDefault();
              } });
          }
        });
      } }, { key: "_handleTabChange", value: function value(e) {
        if (e.hasClass("" + this.options.linkActiveClass)) return void (this.options.activeCollapse && (this._collapseTab(e), this.$element.trigger("collapse.zf.tabs", [e])));var t = this.$element.find("." + this.options.linkClass + "." + this.options.linkActiveClass),
            i = e.find('[role="tab"]'),
            n = i[0].hash,
            o = this.$tabContent.find(n);if (this._collapseTab(t), this._openTab(e), this.options.deepLink) {
          var s = e.find("a").attr("href");this.options.updateHistory ? history.pushState({}, "", s) : history.replaceState({}, "", s);
        }this.$element.trigger("change.zf.tabs", [e, o]), o.find("[data-mutate]").trigger("mutateme.zf.trigger");
      } }, { key: "_openTab", value: function value(e) {
        var t = e.find('[role="tab"]'),
            i = t[0].hash,
            n = this.$tabContent.find(i);e.addClass("" + this.options.linkActiveClass), t.attr({ "aria-selected": "true" }), n.addClass("" + this.options.panelActiveClass).attr({ "aria-hidden": "false" });
      } }, { key: "_collapseTab", value: function value(t) {
        var i = t.removeClass("" + this.options.linkActiveClass).find('[role="tab"]').attr({ "aria-selected": "false" });e("#" + i.attr("aria-controls")).removeClass("" + this.options.panelActiveClass).attr({ "aria-hidden": "true" });
      } }, { key: "selectTab", value: function value(e) {
        var t;t = "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) ? e[0].id : e, t.indexOf("#") < 0 && (t = "#" + t);var i = this.$tabTitles.find('[href="' + t + '"]').parent("." + this.options.linkClass);this._handleTabChange(i);
      } }, { key: "_setHeight", value: function value() {
        var t = 0;this.$tabContent.find("." + this.options.panelClass).css("height", "").each(function () {
          var i = e(this),
              n = i.hasClass("" + this.options.panelActiveClass);n || i.css({ visibility: "hidden", display: "block" });var o = this.getBoundingClientRect().height;n || i.css({ visibility: "", display: "" }), t = o > t ? o : t;
        }).css("height", t + "px");
      } }, { key: "destroy", value: function value() {
        this.$element.find("." + this.options.linkClass).off(".zf.tabs").hide().end().find("." + this.options.panelClass).hide(), this.options.matchHeight && null != this._setHeightMqHandler && e(window).off("changed.zf.mediaquery", this._setHeightMqHandler), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { deepLink: !1, deepLinkSmudge: !1, deepLinkSmudgeDelay: 300, updateHistory: !1, autoFocus: !1, wrapOnKeys: !0, matchHeight: !1, activeCollapse: !1, linkClass: "tabs-title", linkActiveClass: "is-active", panelClass: "tabs-panel", panelActiveClass: "is-active" }, Foundation.plugin(t, "Tabs");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, i.data(), n), this.className = "", this._init(), this._events(), Foundation.registerPlugin(this, "Toggler");
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t;this.options.animate ? (t = this.options.animate.split(" "), this.animationIn = t[0], this.animationOut = t[1] || null) : (t = this.$element.data("toggler"), this.className = "." === t[0] ? t.slice(1) : t);var i = this.$element[0].id;e('[data-open="' + i + '"], [data-close="' + i + '"], [data-toggle="' + i + '"]').attr("aria-controls", i), this.$element.attr("aria-expanded", !this.$element.is(":hidden"));
      } }, { key: "_events", value: function value() {
        this.$element.off("toggle.zf.trigger").on("toggle.zf.trigger", this.toggle.bind(this));
      } }, { key: "toggle", value: function value() {
        this[this.options.animate ? "_toggleAnimate" : "_toggleClass"]();
      } }, { key: "_toggleClass", value: function value() {
        this.$element.toggleClass(this.className);var e = this.$element.hasClass(this.className);e ? this.$element.trigger("on.zf.toggler") : this.$element.trigger("off.zf.toggler"), this._updateARIA(e), this.$element.find("[data-mutate]").trigger("mutateme.zf.trigger");
      } }, { key: "_toggleAnimate", value: function value() {
        var e = this;this.$element.is(":hidden") ? Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
          e._updateARIA(!0), this.trigger("on.zf.toggler"), this.find("[data-mutate]").trigger("mutateme.zf.trigger");
        }) : Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
          e._updateARIA(!1), this.trigger("off.zf.toggler"), this.find("[data-mutate]").trigger("mutateme.zf.trigger");
        });
      } }, { key: "_updateARIA", value: function value(e) {
        this.$element.attr("aria-expanded", !!e);
      } }, { key: "destroy", value: function value() {
        this.$element.off(".zf.toggler"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { animate: !1 }, Foundation.plugin(t, "Toggler");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = i, this.options = e.extend({}, t.defaults, this.$element.data(), n), this.isActive = !1, this.isClick = !1, this._init(), Foundation.registerPlugin(this, "Tooltip");
    }return _createClass(t, [{ key: "_init", value: function value() {
        var t = this.$element.attr("aria-describedby") || Foundation.GetYoDigits(6, "tooltip");this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element), this.options.tipText = this.options.tipText || this.$element.attr("title"), this.template = this.options.template ? e(this.options.template) : this._buildTemplate(t), this.options.allowHtml ? this.template.appendTo(document.body).html(this.options.tipText).hide() : this.template.appendTo(document.body).text(this.options.tipText).hide(), this.$element.attr({ title: "", "aria-describedby": t, "data-yeti-box": t, "data-toggle": t, "data-resize": t }).addClass(this.options.triggerClass), this.usedPositions = [], this.counter = 4, this.classChanged = !1, this._events();
      } }, { key: "_getPositionClass", value: function value(e) {
        if (!e) return "";var t = e[0].className.match(/\b(top|left|right)\b/g);return t = t ? t[0] : "";
      } }, { key: "_buildTemplate", value: function value(t) {
        var i = (this.options.tooltipClass + " " + this.options.positionClass + " " + this.options.templateClasses).trim(),
            n = e("<div></div>").addClass(i).attr({ role: "tooltip", "aria-hidden": !0, "data-is-active": !1, "data-is-focus": !1, id: t });return n;
      } }, { key: "_reposition", value: function value(e) {
        this.usedPositions.push(e ? e : "bottom"), !e && this.usedPositions.indexOf("top") < 0 ? this.template.addClass("top") : "top" === e && this.usedPositions.indexOf("bottom") < 0 ? this.template.removeClass(e) : "left" === e && this.usedPositions.indexOf("right") < 0 ? this.template.removeClass(e).addClass("right") : "right" === e && this.usedPositions.indexOf("left") < 0 ? this.template.removeClass(e).addClass("left") : !e && this.usedPositions.indexOf("top") > -1 && this.usedPositions.indexOf("left") < 0 ? this.template.addClass("left") : "top" === e && this.usedPositions.indexOf("bottom") > -1 && this.usedPositions.indexOf("left") < 0 ? this.template.removeClass(e).addClass("left") : "left" === e && this.usedPositions.indexOf("right") > -1 && this.usedPositions.indexOf("bottom") < 0 ? this.template.removeClass(e) : "right" === e && this.usedPositions.indexOf("left") > -1 && this.usedPositions.indexOf("bottom") < 0 ? this.template.removeClass(e) : this.template.removeClass(e), this.classChanged = !0, this.counter--;
      } }, { key: "_setPosition", value: function value() {
        var e = this._getPositionClass(this.template),
            t = Foundation.Box.GetDimensions(this.template),
            i = Foundation.Box.GetDimensions(this.$element),
            n = "left" === e ? "left" : "right" === e ? "left" : "top",
            o = "top" === n ? "height" : "width";"height" === o ? this.options.vOffset : this.options.hOffset;if (t.width >= t.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) return this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, "center bottom", this.options.vOffset, this.options.hOffset, !0)).css({ width: i.windowDims.width - 2 * this.options.hOffset, height: "auto" }), !1;for (this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, "center " + (e || "bottom"), this.options.vOffset, this.options.hOffset)); !Foundation.Box.ImNotTouchingYou(this.template) && this.counter;) {
          this._reposition(e), this._setPosition();
        }
      } }, { key: "show", value: function value() {
        if ("all" !== this.options.showOn && !Foundation.MediaQuery.is(this.options.showOn)) return !1;var e = this;this.template.css("visibility", "hidden").show(), this._setPosition(), this.$element.trigger("closeme.zf.tooltip", this.template.attr("id")), this.template.attr({ "data-is-active": !0, "aria-hidden": !1 }), e.isActive = !0, this.template.stop().hide().css("visibility", "").fadeIn(this.options.fadeInDuration, function () {}), this.$element.trigger("show.zf.tooltip");
      } }, { key: "hide", value: function value() {
        var e = this;this.template.stop().attr({ "aria-hidden": !0, "data-is-active": !1 }).fadeOut(this.options.fadeOutDuration, function () {
          e.isActive = !1, e.isClick = !1, e.classChanged && (e.template.removeClass(e._getPositionClass(e.template)).addClass(e.options.positionClass), e.usedPositions = [], e.counter = 4, e.classChanged = !1);
        }), this.$element.trigger("hide.zf.tooltip");
      } }, { key: "_events", value: function value() {
        var e = this,
            t = (this.template, !1);this.options.disableHover || this.$element.on("mouseenter.zf.tooltip", function (t) {
          e.isActive || (e.timeout = setTimeout(function () {
            e.show();
          }, e.options.hoverDelay));
        }).on("mouseleave.zf.tooltip", function (i) {
          clearTimeout(e.timeout), (!t || e.isClick && !e.options.clickOpen) && e.hide();
        }), this.options.clickOpen ? this.$element.on("mousedown.zf.tooltip", function (t) {
          t.stopImmediatePropagation(), e.isClick || (e.isClick = !0, !e.options.disableHover && e.$element.attr("tabindex") || e.isActive || e.show());
        }) : this.$element.on("mousedown.zf.tooltip", function (t) {
          t.stopImmediatePropagation(), e.isClick = !0;
        }), this.options.disableForTouch || this.$element.on("tap.zf.tooltip touchend.zf.tooltip", function (t) {
          e.isActive ? e.hide() : e.show();
        }), this.$element.on({ "close.zf.trigger": this.hide.bind(this) }), this.$element.on("focus.zf.tooltip", function (i) {
          return t = !0, e.isClick ? (e.options.clickOpen || (t = !1), !1) : void e.show();
        }).on("focusout.zf.tooltip", function (i) {
          t = !1, e.isClick = !1, e.hide();
        }).on("resizeme.zf.trigger", function () {
          e.isActive && e._setPosition();
        });
      } }, { key: "toggle", value: function value() {
        this.isActive ? this.hide() : this.show();
      } }, { key: "destroy", value: function value() {
        this.$element.attr("title", this.template.text()).off(".zf.trigger .zf.tooltip").removeClass("has-tip top right left").removeAttr("aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box"), this.template.remove(), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = { disableForTouch: !1, hoverDelay: 200, fadeInDuration: 150, fadeOutDuration: 150, disableHover: !1, templateClasses: "", tooltipClass: "tooltip", triggerClass: "has-tip", showOn: "small", template: "", tipText: "", touchCloseText: "Tap to close.", clickOpen: !0, positionClass: "", vOffset: 10, hOffset: 12, allowHtml: !1 }, Foundation.plugin(t, "Tooltip");
}(jQuery);var _createClass = function () {
  function e(e, t) {
    for (var i = 0; i < t.length; i++) {
      var n = t[i];n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }return function (t, i, n) {
    return i && e(t.prototype, i), n && e(t, n), t;
  };
}();!function (e) {
  var t = function () {
    function t(i, n) {
      _classCallCheck(this, t), this.$element = e(i), this.options = e.extend({}, this.$element.data(), n), this.rules = this.$element.data("responsive-accordion-tabs"), this.currentMq = null, this.currentPlugin = null, this.$element.attr("id") || this.$element.attr("id", Foundation.GetYoDigits(6, "responsiveaccordiontabs")), this._init(), this._events(), Foundation.registerPlugin(this, "ResponsiveAccordionTabs");
    }return _createClass(t, [{ key: "_init", value: function value() {
        if ("string" == typeof this.rules) {
          for (var t = {}, n = this.rules.split(" "), o = 0; o < n.length; o++) {
            var s = n[o].split("-"),
                r = s.length > 1 ? s[0] : "small",
                a = s.length > 1 ? s[1] : s[0];null !== i[a] && (t[r] = i[a]);
          }this.rules = t;
        }this._getAllOptions(), e.isEmptyObject(this.rules) || this._checkMediaQueries();
      } }, { key: "_getAllOptions", value: function value() {
        var t = this;t.allOptions = {};for (var n in i) {
          if (i.hasOwnProperty(n)) {
            var o = i[n];try {
              var s = e("<ul></ul>"),
                  r = new o.plugin(s, t.options);for (var a in r.options) {
                if (r.options.hasOwnProperty(a) && "zfPlugin" !== a) {
                  var l = r.options[a];t.allOptions[a] = l;
                }
              }r.destroy();
            } catch (e) {}
          }
        }
      } }, { key: "_events", value: function value() {
        var t = this;e(window).on("changed.zf.mediaquery", function () {
          t._checkMediaQueries();
        });
      } }, { key: "_checkMediaQueries", value: function value() {
        var t,
            n = this;e.each(this.rules, function (e) {
          Foundation.MediaQuery.atLeast(e) && (t = e);
        }), t && (this.currentPlugin instanceof this.rules[t].plugin || (e.each(i, function (e, t) {
          n.$element.removeClass(t.cssClass);
        }), this.$element.addClass(this.rules[t].cssClass), this.currentPlugin && (!this.currentPlugin.$element.data("zfPlugin") && this.storezfData && this.currentPlugin.$element.data("zfPlugin", this.storezfData), this.currentPlugin.destroy()), this._handleMarkup(this.rules[t].cssClass), this.currentPlugin = new this.rules[t].plugin(this.$element, {}), this.storezfData = this.currentPlugin.$element.data("zfPlugin")));
      } }, { key: "_handleMarkup", value: function value(t) {
        var i = this,
            n = "accordion",
            o = e("[data-tabs-content=" + this.$element.attr("id") + "]");if (o.length && (n = "tabs"), n !== t) {
          var s = i.allOptions.linkClass ? i.allOptions.linkClass : "tabs-title",
              r = i.allOptions.panelClass ? i.allOptions.panelClass : "tabs-panel";this.$element.removeAttr("role");var a = this.$element.children("." + s + ",[data-accordion-item]").removeClass(s).removeClass("accordion-item").removeAttr("data-accordion-item"),
              l = a.children("a").removeClass("accordion-title");if ("tabs" === n ? (o = o.children("." + r).removeClass(r).removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby"), o.children("a").removeAttr("role").removeAttr("aria-controls").removeAttr("aria-selected")) : o = a.children("[data-tab-content]").removeClass("accordion-content"), o.css({ display: "", visibility: "" }), a.css({ display: "", visibility: "" }), "accordion" === t) o.each(function (t, n) {
            e(n).appendTo(a.get(t)).addClass("accordion-content").attr("data-tab-content", "").removeClass("is-active").css({ height: "" }), e("[data-tabs-content=" + i.$element.attr("id") + "]").after('<div id="tabs-placeholder-' + i.$element.attr("id") + '"></div>').remove(), a.addClass("accordion-item").attr("data-accordion-item", ""), l.addClass("accordion-title");
          });else if ("tabs" === t) {
            var d = e("[data-tabs-content=" + i.$element.attr("id") + "]"),
                u = e("#tabs-placeholder-" + i.$element.attr("id"));u.length ? (d = e('<div class="tabs-content"></div>').insertAfter(u).attr("data-tabs-content", i.$element.attr("id")), u.remove()) : d = e('<div class="tabs-content"></div>').insertAfter(i.$element).attr("data-tabs-content", i.$element.attr("id")), o.each(function (t, i) {
              var n = e(i).appendTo(d).addClass(r),
                  o = l.get(t).hash.slice(1),
                  s = e(i).attr("id") || Foundation.GetYoDigits(6, "accordion");o !== s && ("" !== o ? e(i).attr("id", o) : (o = s, e(i).attr("id", o), e(l.get(t)).attr("href", e(l.get(t)).attr("href").replace("#", "") + "#" + o)));var u = e(a.get(t)).hasClass("is-active");u && n.addClass("is-active");
            }), a.addClass(s);
          }
        }
      } }, { key: "destroy", value: function value() {
        this.currentPlugin && this.currentPlugin.destroy(), e(window).off(".zf.ResponsiveAccordionTabs"), Foundation.unregisterPlugin(this);
      } }]), t;
  }();t.defaults = {};var i = { tabs: { cssClass: "tabs", plugin: Foundation._plugins.tabs || null }, accordion: { cssClass: "accordion", plugin: Foundation._plugins.accordion || null } };Foundation.plugin(t, "ResponsiveAccordionTabs");
}(jQuery), jQuery(document).ready(function (e) {
  jQuery(document).foundation(), console.log("hello");
});var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return typeof e === "undefined" ? "undefined" : _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof2(e);
};!function (e) {
  "function" == typeof define && define.amd ? define(["jquery"], e) : "undefined" != typeof exports ? module.exports = e(require("jquery")) : e(jQuery);
}(function (e) {
  var t = window.Slick || {};t = function () {
    function t(t, n) {
      var o,
          s = this;s.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: e(t), appendDots: e(t), arrows: !0, asNavFor: null, prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>', nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function customPaging(t, i) {
          return e('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
        }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, s.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, e.extend(s, s.initials), s.activeBreakpoint = null, s.animType = null, s.animProp = null, s.breakpoints = [], s.breakpointSettings = [], s.cssTransitions = !1, s.focussed = !1, s.interrupted = !1, s.hidden = "hidden", s.paused = !0, s.positionProp = null, s.respondTo = null, s.rowCount = 1, s.shouldClick = !0, s.$slider = e(t), s.$slidesCache = null, s.transformType = null, s.transitionType = null, s.visibilityChange = "visibilitychange", s.windowWidth = 0, s.windowTimer = null, o = e(t).data("slick") || {}, s.options = e.extend({}, s.defaults, n, o), s.currentSlide = s.options.initialSlide, s.originalSettings = s.options, "undefined" != typeof document.mozHidden ? (s.hidden = "mozHidden", s.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (s.hidden = "webkitHidden", s.visibilityChange = "webkitvisibilitychange"), s.autoPlay = e.proxy(s.autoPlay, s), s.autoPlayClear = e.proxy(s.autoPlayClear, s), s.autoPlayIterator = e.proxy(s.autoPlayIterator, s), s.changeSlide = e.proxy(s.changeSlide, s), s.clickHandler = e.proxy(s.clickHandler, s), s.selectHandler = e.proxy(s.selectHandler, s), s.setPosition = e.proxy(s.setPosition, s), s.swipeHandler = e.proxy(s.swipeHandler, s), s.dragHandler = e.proxy(s.dragHandler, s), s.keyHandler = e.proxy(s.keyHandler, s), s.instanceUid = i++, s.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, s.registerBreakpoints(), s.init(!0);
    }var i = 0;return t;
  }(), t.prototype.activateADA = function () {
    var e = this;e.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });
  }, t.prototype.addSlide = t.prototype.slickAdd = function (t, i, n) {
    var o = this;if ("boolean" == typeof i) n = i, i = null;else if (i < 0 || i >= o.slideCount) return !1;o.unload(), "number" == typeof i ? 0 === i && 0 === o.$slides.length ? e(t).appendTo(o.$slideTrack) : n ? e(t).insertBefore(o.$slides.eq(i)) : e(t).insertAfter(o.$slides.eq(i)) : n === !0 ? e(t).prependTo(o.$slideTrack) : e(t).appendTo(o.$slideTrack), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slides.each(function (t, i) {
      e(i).attr("data-slick-index", t);
    }), o.$slidesCache = o.$slides, o.reinit();
  }, t.prototype.animateHeight = function () {
    var e = this;if (1 === e.options.slidesToShow && e.options.adaptiveHeight === !0 && e.options.vertical === !1) {
      var t = e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({ height: t }, e.options.speed);
    }
  }, t.prototype.animateSlide = function (t, i) {
    var n = {},
        o = this;o.animateHeight(), o.options.rtl === !0 && o.options.vertical === !1 && (t = -t), o.transformsEnabled === !1 ? o.options.vertical === !1 ? o.$slideTrack.animate({ left: t }, o.options.speed, o.options.easing, i) : o.$slideTrack.animate({ top: t }, o.options.speed, o.options.easing, i) : o.cssTransitions === !1 ? (o.options.rtl === !0 && (o.currentLeft = -o.currentLeft), e({ animStart: o.currentLeft }).animate({ animStart: t }, { duration: o.options.speed, easing: o.options.easing, step: function step(e) {
        e = Math.ceil(e), o.options.vertical === !1 ? (n[o.animType] = "translate(" + e + "px, 0px)", o.$slideTrack.css(n)) : (n[o.animType] = "translate(0px," + e + "px)", o.$slideTrack.css(n));
      }, complete: function complete() {
        i && i.call();
      } })) : (o.applyTransition(), t = Math.ceil(t), o.options.vertical === !1 ? n[o.animType] = "translate3d(" + t + "px, 0px, 0px)" : n[o.animType] = "translate3d(0px," + t + "px, 0px)", o.$slideTrack.css(n), i && setTimeout(function () {
      o.disableTransition(), i.call();
    }, o.options.speed));
  }, t.prototype.getNavTarget = function () {
    var t = this,
        i = t.options.asNavFor;return i && null !== i && (i = e(i).not(t.$slider)), i;
  }, t.prototype.asNavFor = function (t) {
    var i = this,
        n = i.getNavTarget();null !== n && "object" === ("undefined" == typeof n ? "undefined" : _typeof(n)) && n.each(function () {
      var i = e(this).slick("getSlick");i.unslicked || i.slideHandler(t, !0);
    });
  }, t.prototype.applyTransition = function (e) {
    var t = this,
        i = {};t.options.fade === !1 ? i[t.transitionType] = t.transformType + " " + t.options.speed + "ms " + t.options.cssEase : i[t.transitionType] = "opacity " + t.options.speed + "ms " + t.options.cssEase, t.options.fade === !1 ? t.$slideTrack.css(i) : t.$slides.eq(e).css(i);
  }, t.prototype.autoPlay = function () {
    var e = this;e.autoPlayClear(), e.slideCount > e.options.slidesToShow && (e.autoPlayTimer = setInterval(e.autoPlayIterator, e.options.autoplaySpeed));
  }, t.prototype.autoPlayClear = function () {
    var e = this;e.autoPlayTimer && clearInterval(e.autoPlayTimer);
  }, t.prototype.autoPlayIterator = function () {
    var e = this,
        t = e.currentSlide + e.options.slidesToScroll;e.paused || e.interrupted || e.focussed || (e.options.infinite === !1 && (1 === e.direction && e.currentSlide + 1 === e.slideCount - 1 ? e.direction = 0 : 0 === e.direction && (t = e.currentSlide - e.options.slidesToScroll, e.currentSlide - 1 === 0 && (e.direction = 1))), e.slideHandler(t));
  }, t.prototype.buildArrows = function () {
    var t = this;t.options.arrows === !0 && (t.$prevArrow = e(t.options.prevArrow).addClass("slick-arrow"), t.$nextArrow = e(t.options.nextArrow).addClass("slick-arrow"), t.slideCount > t.options.slidesToShow ? (t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.prependTo(t.options.appendArrows), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.appendTo(t.options.appendArrows), t.options.infinite !== !0 && t.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));
  }, t.prototype.buildDots = function () {
    var t,
        i,
        n = this;if (n.options.dots === !0 && n.slideCount > n.options.slidesToShow) {
      for (n.$slider.addClass("slick-dotted"), i = e("<ul />").addClass(n.options.dotsClass), t = 0; t <= n.getDotCount(); t += 1) {
        i.append(e("<li />").append(n.options.customPaging.call(this, n, t)));
      }n.$dots = i.appendTo(n.options.appendDots), n.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
    }
  }, t.prototype.buildOut = function () {
    var t = this;t.$slides = t.$slider.children(t.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), t.slideCount = t.$slides.length, t.$slides.each(function (t, i) {
      e(i).attr("data-slick-index", t).data("originalStyling", e(i).attr("style") || "");
    }), t.$slider.addClass("slick-slider"), t.$slideTrack = 0 === t.slideCount ? e('<div class="slick-track"/>').appendTo(t.$slider) : t.$slides.wrapAll('<div class="slick-track"/>').parent(), t.$list = t.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), t.$slideTrack.css("opacity", 0), t.options.centerMode !== !0 && t.options.swipeToSlide !== !0 || (t.options.slidesToScroll = 1), e("img[data-lazy]", t.$slider).not("[src]").addClass("slick-loading"), t.setupInfinite(), t.buildArrows(), t.buildDots(), t.updateDots(), t.setSlideClasses("number" == typeof t.currentSlide ? t.currentSlide : 0), t.options.draggable === !0 && t.$list.addClass("draggable");
  }, t.prototype.buildRows = function () {
    var e,
        t,
        i,
        n,
        o,
        s,
        r,
        a = this;if (n = document.createDocumentFragment(), s = a.$slider.children(), a.options.rows > 1) {
      for (r = a.options.slidesPerRow * a.options.rows, o = Math.ceil(s.length / r), e = 0; e < o; e++) {
        var l = document.createElement("div");for (t = 0; t < a.options.rows; t++) {
          var d = document.createElement("div");for (i = 0; i < a.options.slidesPerRow; i++) {
            var u = e * r + (t * a.options.slidesPerRow + i);s.get(u) && d.appendChild(s.get(u));
          }l.appendChild(d);
        }n.appendChild(l);
      }a.$slider.empty().append(n), a.$slider.children().children().children().css({ width: 100 / a.options.slidesPerRow + "%", display: "inline-block" });
    }
  }, t.prototype.checkResponsive = function (t, i) {
    var n,
        o,
        s,
        r = this,
        a = !1,
        l = r.$slider.width(),
        d = window.innerWidth || e(window).width();if ("window" === r.respondTo ? s = d : "slider" === r.respondTo ? s = l : "min" === r.respondTo && (s = Math.min(d, l)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {
      o = null;for (n in r.breakpoints) {
        r.breakpoints.hasOwnProperty(n) && (r.originalSettings.mobileFirst === !1 ? s < r.breakpoints[n] && (o = r.breakpoints[n]) : s > r.breakpoints[n] && (o = r.breakpoints[n]));
      }null !== o ? null !== r.activeBreakpoint ? (o !== r.activeBreakpoint || i) && (r.activeBreakpoint = o, "unslick" === r.breakpointSettings[o] ? r.unslick(o) : (r.options = e.extend({}, r.originalSettings, r.breakpointSettings[o]), t === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(t)), a = o) : (r.activeBreakpoint = o, "unslick" === r.breakpointSettings[o] ? r.unslick(o) : (r.options = e.extend({}, r.originalSettings, r.breakpointSettings[o]), t === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(t)), a = o) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, t === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(t), a = o), t || a === !1 || r.$slider.trigger("breakpoint", [r, a]);
    }
  }, t.prototype.changeSlide = function (t, i) {
    var n,
        o,
        s,
        r = this,
        a = e(t.currentTarget);switch (a.is("a") && t.preventDefault(), a.is("li") || (a = a.closest("li")), s = r.slideCount % r.options.slidesToScroll !== 0, n = s ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, t.data.message) {case "previous":
        o = 0 === n ? r.options.slidesToScroll : r.options.slidesToShow - n, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - o, !1, i);break;case "next":
        o = 0 === n ? r.options.slidesToScroll : n, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + o, !1, i);break;case "index":
        var l = 0 === t.data.index ? 0 : t.data.index || a.index() * r.options.slidesToScroll;r.slideHandler(r.checkNavigable(l), !1, i), a.children().trigger("focus");break;default:
        return;}
  }, t.prototype.checkNavigable = function (e) {
    var t,
        i,
        n = this;if (t = n.getNavigableIndexes(), i = 0, e > t[t.length - 1]) e = t[t.length - 1];else for (var o in t) {
      if (e < t[o]) {
        e = i;break;
      }i = t[o];
    }return e;
  }, t.prototype.cleanUpEvents = function () {
    var t = this;t.options.dots && null !== t.$dots && e("li", t.$dots).off("click.slick", t.changeSlide).off("mouseenter.slick", e.proxy(t.interrupt, t, !0)).off("mouseleave.slick", e.proxy(t.interrupt, t, !1)), t.$slider.off("focus.slick blur.slick"), t.options.arrows === !0 && t.slideCount > t.options.slidesToShow && (t.$prevArrow && t.$prevArrow.off("click.slick", t.changeSlide), t.$nextArrow && t.$nextArrow.off("click.slick", t.changeSlide)), t.$list.off("touchstart.slick mousedown.slick", t.swipeHandler), t.$list.off("touchmove.slick mousemove.slick", t.swipeHandler), t.$list.off("touchend.slick mouseup.slick", t.swipeHandler), t.$list.off("touchcancel.slick mouseleave.slick", t.swipeHandler), t.$list.off("click.slick", t.clickHandler), e(document).off(t.visibilityChange, t.visibility), t.cleanUpSlideEvents(), t.options.accessibility === !0 && t.$list.off("keydown.slick", t.keyHandler), t.options.focusOnSelect === !0 && e(t.$slideTrack).children().off("click.slick", t.selectHandler), e(window).off("orientationchange.slick.slick-" + t.instanceUid, t.orientationChange), e(window).off("resize.slick.slick-" + t.instanceUid, t.resize), e("[draggable!=true]", t.$slideTrack).off("dragstart", t.preventDefault), e(window).off("load.slick.slick-" + t.instanceUid, t.setPosition), e(document).off("ready.slick.slick-" + t.instanceUid, t.setPosition);
  }, t.prototype.cleanUpSlideEvents = function () {
    var t = this;t.$list.off("mouseenter.slick", e.proxy(t.interrupt, t, !0)), t.$list.off("mouseleave.slick", e.proxy(t.interrupt, t, !1));
  }, t.prototype.cleanUpRows = function () {
    var e,
        t = this;t.options.rows > 1 && (e = t.$slides.children().children(), e.removeAttr("style"), t.$slider.empty().append(e));
  }, t.prototype.clickHandler = function (e) {
    var t = this;t.shouldClick === !1 && (e.stopImmediatePropagation(), e.stopPropagation(), e.preventDefault());
  }, t.prototype.destroy = function (t) {
    var i = this;i.autoPlayClear(), i.touchObject = {}, i.cleanUpEvents(), e(".slick-cloned", i.$slider).detach(), i.$dots && i.$dots.remove(), i.$prevArrow && i.$prevArrow.length && (i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), i.htmlExpr.test(i.options.prevArrow) && i.$prevArrow.remove()), i.$nextArrow && i.$nextArrow.length && (i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), i.htmlExpr.test(i.options.nextArrow) && i.$nextArrow.remove()), i.$slides && (i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
      e(this).attr("style", e(this).data("originalStyling"));
    }), i.$slideTrack.children(this.options.slide).detach(), i.$slideTrack.detach(), i.$list.detach(), i.$slider.append(i.$slides)), i.cleanUpRows(), i.$slider.removeClass("slick-slider"), i.$slider.removeClass("slick-initialized"), i.$slider.removeClass("slick-dotted"), i.unslicked = !0, t || i.$slider.trigger("destroy", [i]);
  }, t.prototype.disableTransition = function (e) {
    var t = this,
        i = {};i[t.transitionType] = "", t.options.fade === !1 ? t.$slideTrack.css(i) : t.$slides.eq(e).css(i);
  }, t.prototype.fadeSlide = function (e, t) {
    var i = this;i.cssTransitions === !1 ? (i.$slides.eq(e).css({ zIndex: i.options.zIndex }), i.$slides.eq(e).animate({ opacity: 1 }, i.options.speed, i.options.easing, t)) : (i.applyTransition(e), i.$slides.eq(e).css({ opacity: 1, zIndex: i.options.zIndex }), t && setTimeout(function () {
      i.disableTransition(e), t.call();
    }, i.options.speed));
  }, t.prototype.fadeSlideOut = function (e) {
    var t = this;t.cssTransitions === !1 ? t.$slides.eq(e).animate({ opacity: 0, zIndex: t.options.zIndex - 2 }, t.options.speed, t.options.easing) : (t.applyTransition(e), t.$slides.eq(e).css({ opacity: 0, zIndex: t.options.zIndex - 2 }));
  }, t.prototype.filterSlides = t.prototype.slickFilter = function (e) {
    var t = this;null !== e && (t.$slidesCache = t.$slides, t.unload(), t.$slideTrack.children(this.options.slide).detach(), t.$slidesCache.filter(e).appendTo(t.$slideTrack), t.reinit());
  }, t.prototype.focusHandler = function () {
    var t = this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function (i) {
      i.stopImmediatePropagation();var n = e(this);setTimeout(function () {
        t.options.pauseOnFocus && (t.focussed = n.is(":focus"), t.autoPlay());
      }, 0);
    });
  }, t.prototype.getCurrent = t.prototype.slickCurrentSlide = function () {
    var e = this;return e.currentSlide;
  }, t.prototype.getDotCount = function () {
    var e = this,
        t = 0,
        i = 0,
        n = 0;if (e.options.infinite === !0) for (; t < e.slideCount;) {
      ++n, t = i + e.options.slidesToScroll, i += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;
    } else if (e.options.centerMode === !0) n = e.slideCount;else if (e.options.asNavFor) for (; t < e.slideCount;) {
      ++n, t = i + e.options.slidesToScroll, i += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;
    } else n = 1 + Math.ceil((e.slideCount - e.options.slidesToShow) / e.options.slidesToScroll);return n - 1;
  }, t.prototype.getLeft = function (e) {
    var t,
        i,
        n,
        o = this,
        s = 0;return o.slideOffset = 0, i = o.$slides.first().outerHeight(!0), o.options.infinite === !0 ? (o.slideCount > o.options.slidesToShow && (o.slideOffset = o.slideWidth * o.options.slidesToShow * -1, s = i * o.options.slidesToShow * -1), o.slideCount % o.options.slidesToScroll !== 0 && e + o.options.slidesToScroll > o.slideCount && o.slideCount > o.options.slidesToShow && (e > o.slideCount ? (o.slideOffset = (o.options.slidesToShow - (e - o.slideCount)) * o.slideWidth * -1, s = (o.options.slidesToShow - (e - o.slideCount)) * i * -1) : (o.slideOffset = o.slideCount % o.options.slidesToScroll * o.slideWidth * -1, s = o.slideCount % o.options.slidesToScroll * i * -1))) : e + o.options.slidesToShow > o.slideCount && (o.slideOffset = (e + o.options.slidesToShow - o.slideCount) * o.slideWidth, s = (e + o.options.slidesToShow - o.slideCount) * i), o.slideCount <= o.options.slidesToShow && (o.slideOffset = 0, s = 0), o.options.centerMode === !0 && o.options.infinite === !0 ? o.slideOffset += o.slideWidth * Math.floor(o.options.slidesToShow / 2) - o.slideWidth : o.options.centerMode === !0 && (o.slideOffset = 0, o.slideOffset += o.slideWidth * Math.floor(o.options.slidesToShow / 2)), t = o.options.vertical === !1 ? e * o.slideWidth * -1 + o.slideOffset : e * i * -1 + s, o.options.variableWidth === !0 && (n = o.slideCount <= o.options.slidesToShow || o.options.infinite === !1 ? o.$slideTrack.children(".slick-slide").eq(e) : o.$slideTrack.children(".slick-slide").eq(e + o.options.slidesToShow), t = o.options.rtl === !0 ? n[0] ? (o.$slideTrack.width() - n[0].offsetLeft - n.width()) * -1 : 0 : n[0] ? n[0].offsetLeft * -1 : 0, o.options.centerMode === !0 && (n = o.slideCount <= o.options.slidesToShow || o.options.infinite === !1 ? o.$slideTrack.children(".slick-slide").eq(e) : o.$slideTrack.children(".slick-slide").eq(e + o.options.slidesToShow + 1), t = o.options.rtl === !0 ? n[0] ? (o.$slideTrack.width() - n[0].offsetLeft - n.width()) * -1 : 0 : n[0] ? n[0].offsetLeft * -1 : 0, t += (o.$list.width() - n.outerWidth()) / 2)), t;
  }, t.prototype.getOption = t.prototype.slickGetOption = function (e) {
    var t = this;return t.options[e];
  }, t.prototype.getNavigableIndexes = function () {
    var e,
        t = this,
        i = 0,
        n = 0,
        o = [];for (t.options.infinite === !1 ? e = t.slideCount : (i = t.options.slidesToScroll * -1, n = t.options.slidesToScroll * -1, e = 2 * t.slideCount); i < e;) {
      o.push(i), i = n + t.options.slidesToScroll, n += t.options.slidesToScroll <= t.options.slidesToShow ? t.options.slidesToScroll : t.options.slidesToShow;
    }return o;
  }, t.prototype.getSlick = function () {
    return this;
  }, t.prototype.getSlideCount = function () {
    var t,
        i,
        n,
        o = this;return n = o.options.centerMode === !0 ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, o.options.swipeToSlide === !0 ? (o.$slideTrack.find(".slick-slide").each(function (t, s) {
      if (s.offsetLeft - n + e(s).outerWidth() / 2 > o.swipeLeft * -1) return i = s, !1;
    }), t = Math.abs(e(i).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll;
  }, t.prototype.goTo = t.prototype.slickGoTo = function (e, t) {
    var i = this;i.changeSlide({ data: { message: "index", index: parseInt(e) } }, t);
  }, t.prototype.init = function (t) {
    var i = this;e(i.$slider).hasClass("slick-initialized") || (e(i.$slider).addClass("slick-initialized"), i.buildRows(), i.buildOut(), i.setProps(), i.startLoad(), i.loadSlider(), i.initializeEvents(), i.updateArrows(), i.updateDots(), i.checkResponsive(!0), i.focusHandler()), t && i.$slider.trigger("init", [i]), i.options.accessibility === !0 && i.initADA(), i.options.autoplay && (i.paused = !1, i.autoPlay());
  }, t.prototype.initADA = function () {
    var t = this;t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), t.$slideTrack.attr("role", "listbox"), t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function (i) {
      e(this).attr({ role: "option", "aria-describedby": "slick-slide" + t.instanceUid + i });
    }), null !== t.$dots && t.$dots.attr("role", "tablist").find("li").each(function (i) {
      e(this).attr({ role: "presentation", "aria-selected": "false", "aria-controls": "navigation" + t.instanceUid + i, id: "slick-slide" + t.instanceUid + i });
    }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), t.activateADA();
  }, t.prototype.initArrowEvents = function () {
    var e = this;e.options.arrows === !0 && e.slideCount > e.options.slidesToShow && (e.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, e.changeSlide), e.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, e.changeSlide));
  }, t.prototype.initDotEvents = function () {
    var t = this;t.options.dots === !0 && t.slideCount > t.options.slidesToShow && e("li", t.$dots).on("click.slick", { message: "index" }, t.changeSlide), t.options.dots === !0 && t.options.pauseOnDotsHover === !0 && e("li", t.$dots).on("mouseenter.slick", e.proxy(t.interrupt, t, !0)).on("mouseleave.slick", e.proxy(t.interrupt, t, !1));
  }, t.prototype.initSlideEvents = function () {
    var t = this;t.options.pauseOnHover && (t.$list.on("mouseenter.slick", e.proxy(t.interrupt, t, !0)), t.$list.on("mouseleave.slick", e.proxy(t.interrupt, t, !1)));
  }, t.prototype.initializeEvents = function () {
    var t = this;t.initArrowEvents(), t.initDotEvents(), t.initSlideEvents(), t.$list.on("touchstart.slick mousedown.slick", { action: "start" }, t.swipeHandler), t.$list.on("touchmove.slick mousemove.slick", { action: "move" }, t.swipeHandler), t.$list.on("touchend.slick mouseup.slick", { action: "end" }, t.swipeHandler), t.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, t.swipeHandler), t.$list.on("click.slick", t.clickHandler), e(document).on(t.visibilityChange, e.proxy(t.visibility, t)), t.options.accessibility === !0 && t.$list.on("keydown.slick", t.keyHandler), t.options.focusOnSelect === !0 && e(t.$slideTrack).children().on("click.slick", t.selectHandler), e(window).on("orientationchange.slick.slick-" + t.instanceUid, e.proxy(t.orientationChange, t)), e(window).on("resize.slick.slick-" + t.instanceUid, e.proxy(t.resize, t)), e("[draggable!=true]", t.$slideTrack).on("dragstart", t.preventDefault), e(window).on("load.slick.slick-" + t.instanceUid, t.setPosition), e(document).on("ready.slick.slick-" + t.instanceUid, t.setPosition);
  }, t.prototype.initUI = function () {
    var e = this;e.options.arrows === !0 && e.slideCount > e.options.slidesToShow && (e.$prevArrow.show(), e.$nextArrow.show()), e.options.dots === !0 && e.slideCount > e.options.slidesToShow && e.$dots.show();
  }, t.prototype.keyHandler = function (e) {
    var t = this;e.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === e.keyCode && t.options.accessibility === !0 ? t.changeSlide({ data: { message: t.options.rtl === !0 ? "next" : "previous" } }) : 39 === e.keyCode && t.options.accessibility === !0 && t.changeSlide({ data: { message: t.options.rtl === !0 ? "previous" : "next" } }));
  }, t.prototype.lazyLoad = function () {
    function t(t) {
      e("img[data-lazy]", t).each(function () {
        var t = e(this),
            i = e(this).attr("data-lazy"),
            n = document.createElement("img");n.onload = function () {
          t.animate({ opacity: 0 }, 100, function () {
            t.attr("src", i).animate({ opacity: 1 }, 200, function () {
              t.removeAttr("data-lazy").removeClass("slick-loading");
            }), r.$slider.trigger("lazyLoaded", [r, t, i]);
          });
        }, n.onerror = function () {
          t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), r.$slider.trigger("lazyLoadError", [r, t, i]);
        }, n.src = i;
      });
    }var i,
        n,
        o,
        s,
        r = this;r.options.centerMode === !0 ? r.options.infinite === !0 ? (o = r.currentSlide + (r.options.slidesToShow / 2 + 1), s = o + r.options.slidesToShow + 2) : (o = Math.max(0, r.currentSlide - (r.options.slidesToShow / 2 + 1)), s = 2 + (r.options.slidesToShow / 2 + 1) + r.currentSlide) : (o = r.options.infinite ? r.options.slidesToShow + r.currentSlide : r.currentSlide, s = Math.ceil(o + r.options.slidesToShow), r.options.fade === !0 && (o > 0 && o--, s <= r.slideCount && s++)), i = r.$slider.find(".slick-slide").slice(o, s), t(i), r.slideCount <= r.options.slidesToShow ? (n = r.$slider.find(".slick-slide"), t(n)) : r.currentSlide >= r.slideCount - r.options.slidesToShow ? (n = r.$slider.find(".slick-cloned").slice(0, r.options.slidesToShow), t(n)) : 0 === r.currentSlide && (n = r.$slider.find(".slick-cloned").slice(r.options.slidesToShow * -1), t(n));
  }, t.prototype.loadSlider = function () {
    var e = this;e.setPosition(), e.$slideTrack.css({ opacity: 1 }), e.$slider.removeClass("slick-loading"), e.initUI(), "progressive" === e.options.lazyLoad && e.progressiveLazyLoad();
  }, t.prototype.next = t.prototype.slickNext = function () {
    var e = this;e.changeSlide({ data: { message: "next" } });
  }, t.prototype.orientationChange = function () {
    var e = this;e.checkResponsive(), e.setPosition();
  }, t.prototype.pause = t.prototype.slickPause = function () {
    var e = this;e.autoPlayClear(), e.paused = !0;
  }, t.prototype.play = t.prototype.slickPlay = function () {
    var e = this;e.autoPlay(), e.options.autoplay = !0, e.paused = !1, e.focussed = !1, e.interrupted = !1;
  }, t.prototype.postSlide = function (e) {
    var t = this;t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), t.options.accessibility === !0 && t.initADA());
  }, t.prototype.prev = t.prototype.slickPrev = function () {
    var e = this;e.changeSlide({ data: { message: "previous" } });
  }, t.prototype.preventDefault = function (e) {
    e.preventDefault();
  }, t.prototype.progressiveLazyLoad = function (t) {
    t = t || 1;var i,
        n,
        o,
        s = this,
        r = e("img[data-lazy]", s.$slider);r.length ? (i = r.first(), n = i.attr("data-lazy"), o = document.createElement("img"), o.onload = function () {
      i.attr("src", n).removeAttr("data-lazy").removeClass("slick-loading"), s.options.adaptiveHeight === !0 && s.setPosition(), s.$slider.trigger("lazyLoaded", [s, i, n]), s.progressiveLazyLoad();
    }, o.onerror = function () {
      t < 3 ? setTimeout(function () {
        s.progressiveLazyLoad(t + 1);
      }, 500) : (i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), s.$slider.trigger("lazyLoadError", [s, i, n]), s.progressiveLazyLoad());
    }, o.src = n) : s.$slider.trigger("allImagesLoaded", [s]);
  }, t.prototype.refresh = function (t) {
    var i,
        n,
        o = this;n = o.slideCount - o.options.slidesToShow, !o.options.infinite && o.currentSlide > n && (o.currentSlide = n), o.slideCount <= o.options.slidesToShow && (o.currentSlide = 0), i = o.currentSlide, o.destroy(!0), e.extend(o, o.initials, { currentSlide: i }), o.init(), t || o.changeSlide({ data: { message: "index", index: i } }, !1);
  }, t.prototype.registerBreakpoints = function () {
    var t,
        i,
        n,
        o = this,
        s = o.options.responsive || null;if ("array" === e.type(s) && s.length) {
      o.respondTo = o.options.respondTo || "window";for (t in s) {
        if (n = o.breakpoints.length - 1, i = s[t].breakpoint, s.hasOwnProperty(t)) {
          for (; n >= 0;) {
            o.breakpoints[n] && o.breakpoints[n] === i && o.breakpoints.splice(n, 1), n--;
          }o.breakpoints.push(i), o.breakpointSettings[i] = s[t].settings;
        }
      }o.breakpoints.sort(function (e, t) {
        return o.options.mobileFirst ? e - t : t - e;
      });
    }
  }, t.prototype.reinit = function () {
    var t = this;t.$slides = t.$slideTrack.children(t.options.slide).addClass("slick-slide"), t.slideCount = t.$slides.length, t.currentSlide >= t.slideCount && 0 !== t.currentSlide && (t.currentSlide = t.currentSlide - t.options.slidesToScroll), t.slideCount <= t.options.slidesToShow && (t.currentSlide = 0), t.registerBreakpoints(), t.setProps(), t.setupInfinite(), t.buildArrows(), t.updateArrows(), t.initArrowEvents(), t.buildDots(), t.updateDots(), t.initDotEvents(), t.cleanUpSlideEvents(), t.initSlideEvents(), t.checkResponsive(!1, !0), t.options.focusOnSelect === !0 && e(t.$slideTrack).children().on("click.slick", t.selectHandler), t.setSlideClasses("number" == typeof t.currentSlide ? t.currentSlide : 0), t.setPosition(), t.focusHandler(), t.paused = !t.options.autoplay, t.autoPlay(), t.$slider.trigger("reInit", [t]);
  }, t.prototype.resize = function () {
    var t = this;e(window).width() !== t.windowWidth && (clearTimeout(t.windowDelay), t.windowDelay = window.setTimeout(function () {
      t.windowWidth = e(window).width(), t.checkResponsive(), t.unslicked || t.setPosition();
    }, 50));
  }, t.prototype.removeSlide = t.prototype.slickRemove = function (e, t, i) {
    var n = this;return "boolean" == typeof e ? (t = e, e = t === !0 ? 0 : n.slideCount - 1) : e = t === !0 ? --e : e, !(n.slideCount < 1 || e < 0 || e > n.slideCount - 1) && (n.unload(), i === !0 ? n.$slideTrack.children().remove() : n.$slideTrack.children(this.options.slide).eq(e).remove(), n.$slides = n.$slideTrack.children(this.options.slide), n.$slideTrack.children(this.options.slide).detach(), n.$slideTrack.append(n.$slides), n.$slidesCache = n.$slides, void n.reinit());
  }, t.prototype.setCSS = function (e) {
    var t,
        i,
        n = this,
        o = {};n.options.rtl === !0 && (e = -e), t = "left" == n.positionProp ? Math.ceil(e) + "px" : "0px", i = "top" == n.positionProp ? Math.ceil(e) + "px" : "0px", o[n.positionProp] = e, n.transformsEnabled === !1 ? n.$slideTrack.css(o) : (o = {}, n.cssTransitions === !1 ? (o[n.animType] = "translate(" + t + ", " + i + ")", n.$slideTrack.css(o)) : (o[n.animType] = "translate3d(" + t + ", " + i + ", 0px)", n.$slideTrack.css(o)));
  }, t.prototype.setDimensions = function () {
    var e = this;e.options.vertical === !1 ? e.options.centerMode === !0 && e.$list.css({ padding: "0px " + e.options.centerPadding }) : (e.$list.height(e.$slides.first().outerHeight(!0) * e.options.slidesToShow), e.options.centerMode === !0 && e.$list.css({ padding: e.options.centerPadding + " 0px" })), e.listWidth = e.$list.width(), e.listHeight = e.$list.height(), e.options.vertical === !1 && e.options.variableWidth === !1 ? (e.slideWidth = Math.ceil(e.listWidth / e.options.slidesToShow), e.$slideTrack.width(Math.ceil(e.slideWidth * e.$slideTrack.children(".slick-slide").length))) : e.options.variableWidth === !0 ? e.$slideTrack.width(5e3 * e.slideCount) : (e.slideWidth = Math.ceil(e.listWidth), e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0) * e.$slideTrack.children(".slick-slide").length)));var t = e.$slides.first().outerWidth(!0) - e.$slides.first().width();e.options.variableWidth === !1 && e.$slideTrack.children(".slick-slide").width(e.slideWidth - t);
  }, t.prototype.setFade = function () {
    var t,
        i = this;i.$slides.each(function (n, o) {
      t = i.slideWidth * n * -1, i.options.rtl === !0 ? e(o).css({ position: "relative", right: t, top: 0, zIndex: i.options.zIndex - 2, opacity: 0 }) : e(o).css({ position: "relative", left: t, top: 0, zIndex: i.options.zIndex - 2, opacity: 0 });
    }), i.$slides.eq(i.currentSlide).css({ zIndex: i.options.zIndex - 1, opacity: 1 });
  }, t.prototype.setHeight = function () {
    var e = this;if (1 === e.options.slidesToShow && e.options.adaptiveHeight === !0 && e.options.vertical === !1) {
      var t = e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height", t);
    }
  }, t.prototype.setOption = t.prototype.slickSetOption = function () {
    var t,
        i,
        n,
        o,
        s,
        r = this,
        a = !1;if ("object" === e.type(arguments[0]) ? (n = arguments[0], a = arguments[1], s = "multiple") : "string" === e.type(arguments[0]) && (n = arguments[0], o = arguments[1], a = arguments[2], "responsive" === arguments[0] && "array" === e.type(arguments[1]) ? s = "responsive" : "undefined" != typeof arguments[1] && (s = "single")), "single" === s) r.options[n] = o;else if ("multiple" === s) e.each(n, function (e, t) {
      r.options[e] = t;
    });else if ("responsive" === s) for (i in o) {
      if ("array" !== e.type(r.options.responsive)) r.options.responsive = [o[i]];else {
        for (t = r.options.responsive.length - 1; t >= 0;) {
          r.options.responsive[t].breakpoint === o[i].breakpoint && r.options.responsive.splice(t, 1), t--;
        }r.options.responsive.push(o[i]);
      }
    }a && (r.unload(), r.reinit());
  }, t.prototype.setPosition = function () {
    var e = this;e.setDimensions(), e.setHeight(), e.options.fade === !1 ? e.setCSS(e.getLeft(e.currentSlide)) : e.setFade(), e.$slider.trigger("setPosition", [e]);
  }, t.prototype.setProps = function () {
    var e = this,
        t = document.body.style;e.positionProp = e.options.vertical === !0 ? "top" : "left", "top" === e.positionProp ? e.$slider.addClass("slick-vertical") : e.$slider.removeClass("slick-vertical"), void 0 === t.WebkitTransition && void 0 === t.MozTransition && void 0 === t.msTransition || e.options.useCSS === !0 && (e.cssTransitions = !0), e.options.fade && ("number" == typeof e.options.zIndex ? e.options.zIndex < 3 && (e.options.zIndex = 3) : e.options.zIndex = e.defaults.zIndex), void 0 !== t.OTransform && (e.animType = "OTransform", e.transformType = "-o-transform", e.transitionType = "OTransition", void 0 === t.perspectiveProperty && void 0 === t.webkitPerspective && (e.animType = !1)), void 0 !== t.MozTransform && (e.animType = "MozTransform", e.transformType = "-moz-transform", e.transitionType = "MozTransition", void 0 === t.perspectiveProperty && void 0 === t.MozPerspective && (e.animType = !1)), void 0 !== t.webkitTransform && (e.animType = "webkitTransform", e.transformType = "-webkit-transform", e.transitionType = "webkitTransition", void 0 === t.perspectiveProperty && void 0 === t.webkitPerspective && (e.animType = !1)), void 0 !== t.msTransform && (e.animType = "msTransform", e.transformType = "-ms-transform", e.transitionType = "msTransition", void 0 === t.msTransform && (e.animType = !1)), void 0 !== t.transform && e.animType !== !1 && (e.animType = "transform", e.transformType = "transform", e.transitionType = "transition"), e.transformsEnabled = e.options.useTransform && null !== e.animType && e.animType !== !1;
  }, t.prototype.setSlideClasses = function (e) {
    var t,
        i,
        n,
        o,
        s = this;i = s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), s.$slides.eq(e).addClass("slick-current"), s.options.centerMode === !0 ? (t = Math.floor(s.options.slidesToShow / 2), s.options.infinite === !0 && (e >= t && e <= s.slideCount - 1 - t ? s.$slides.slice(e - t, e + t + 1).addClass("slick-active").attr("aria-hidden", "false") : (n = s.options.slidesToShow + e, i.slice(n - t + 1, n + t + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === e ? i.eq(i.length - 1 - s.options.slidesToShow).addClass("slick-center") : e === s.slideCount - 1 && i.eq(s.options.slidesToShow).addClass("slick-center")), s.$slides.eq(e).addClass("slick-center")) : e >= 0 && e <= s.slideCount - s.options.slidesToShow ? s.$slides.slice(e, e + s.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : i.length <= s.options.slidesToShow ? i.addClass("slick-active").attr("aria-hidden", "false") : (o = s.slideCount % s.options.slidesToShow, n = s.options.infinite === !0 ? s.options.slidesToShow + e : e, s.options.slidesToShow == s.options.slidesToScroll && s.slideCount - e < s.options.slidesToShow ? i.slice(n - (s.options.slidesToShow - o), n + o).addClass("slick-active").attr("aria-hidden", "false") : i.slice(n, n + s.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), "ondemand" === s.options.lazyLoad && s.lazyLoad();
  }, t.prototype.setupInfinite = function () {
    var t,
        i,
        n,
        o = this;if (o.options.fade === !0 && (o.options.centerMode = !1), o.options.infinite === !0 && o.options.fade === !1 && (i = null, o.slideCount > o.options.slidesToShow)) {
      for (n = o.options.centerMode === !0 ? o.options.slidesToShow + 1 : o.options.slidesToShow, t = o.slideCount; t > o.slideCount - n; t -= 1) {
        i = t - 1, e(o.$slides[i]).clone(!0).attr("id", "").attr("data-slick-index", i - o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");
      }for (t = 0; t < n; t += 1) {
        i = t, e(o.$slides[i]).clone(!0).attr("id", "").attr("data-slick-index", i + o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");
      }o.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
        e(this).attr("id", "");
      });
    }
  }, t.prototype.interrupt = function (e) {
    var t = this;e || t.autoPlay(), t.interrupted = e;
  }, t.prototype.selectHandler = function (t) {
    var i = this,
        n = e(t.target).is(".slick-slide") ? e(t.target) : e(t.target).parents(".slick-slide"),
        o = parseInt(n.attr("data-slick-index"));return o || (o = 0), i.slideCount <= i.options.slidesToShow ? (i.setSlideClasses(o), void i.asNavFor(o)) : void i.slideHandler(o);
  }, t.prototype.slideHandler = function (e, t, i) {
    var n,
        o,
        s,
        r,
        a,
        l = null,
        d = this;if (t = t || !1, (d.animating !== !0 || d.options.waitForAnimate !== !0) && !(d.options.fade === !0 && d.currentSlide === e || d.slideCount <= d.options.slidesToShow)) return t === !1 && d.asNavFor(e), n = e, l = d.getLeft(n), r = d.getLeft(d.currentSlide), d.currentLeft = null === d.swipeLeft ? r : d.swipeLeft, d.options.infinite === !1 && d.options.centerMode === !1 && (e < 0 || e > d.getDotCount() * d.options.slidesToScroll) ? void (d.options.fade === !1 && (n = d.currentSlide, i !== !0 ? d.animateSlide(r, function () {
      d.postSlide(n);
    }) : d.postSlide(n))) : d.options.infinite === !1 && d.options.centerMode === !0 && (e < 0 || e > d.slideCount - d.options.slidesToScroll) ? void (d.options.fade === !1 && (n = d.currentSlide, i !== !0 ? d.animateSlide(r, function () {
      d.postSlide(n);
    }) : d.postSlide(n))) : (d.options.autoplay && clearInterval(d.autoPlayTimer), o = n < 0 ? d.slideCount % d.options.slidesToScroll !== 0 ? d.slideCount - d.slideCount % d.options.slidesToScroll : d.slideCount + n : n >= d.slideCount ? d.slideCount % d.options.slidesToScroll !== 0 ? 0 : n - d.slideCount : n, d.animating = !0, d.$slider.trigger("beforeChange", [d, d.currentSlide, o]), s = d.currentSlide, d.currentSlide = o, d.setSlideClasses(d.currentSlide), d.options.asNavFor && (a = d.getNavTarget(), a = a.slick("getSlick"), a.slideCount <= a.options.slidesToShow && a.setSlideClasses(d.currentSlide)), d.updateDots(), d.updateArrows(), d.options.fade === !0 ? (i !== !0 ? (d.fadeSlideOut(s), d.fadeSlide(o, function () {
      d.postSlide(o);
    })) : d.postSlide(o), void d.animateHeight()) : void (i !== !0 ? d.animateSlide(l, function () {
      d.postSlide(o);
    }) : d.postSlide(o)));
  }, t.prototype.startLoad = function () {
    var e = this;e.options.arrows === !0 && e.slideCount > e.options.slidesToShow && (e.$prevArrow.hide(), e.$nextArrow.hide()), e.options.dots === !0 && e.slideCount > e.options.slidesToShow && e.$dots.hide(), e.$slider.addClass("slick-loading");
  }, t.prototype.swipeDirection = function () {
    var e,
        t,
        i,
        n,
        o = this;return e = o.touchObject.startX - o.touchObject.curX, t = o.touchObject.startY - o.touchObject.curY, i = Math.atan2(t, e), n = Math.round(180 * i / Math.PI), n < 0 && (n = 360 - Math.abs(n)), n <= 45 && n >= 0 ? o.options.rtl === !1 ? "left" : "right" : n <= 360 && n >= 315 ? o.options.rtl === !1 ? "left" : "right" : n >= 135 && n <= 225 ? o.options.rtl === !1 ? "right" : "left" : o.options.verticalSwiping === !0 ? n >= 35 && n <= 135 ? "down" : "up" : "vertical";
  }, t.prototype.swipeEnd = function (e) {
    var t,
        i,
        n = this;if (n.dragging = !1, n.interrupted = !1, n.shouldClick = !(n.touchObject.swipeLength > 10), void 0 === n.touchObject.curX) return !1;if (n.touchObject.edgeHit === !0 && n.$slider.trigger("edge", [n, n.swipeDirection()]), n.touchObject.swipeLength >= n.touchObject.minSwipe) {
      switch (i = n.swipeDirection()) {case "left":case "down":
          t = n.options.swipeToSlide ? n.checkNavigable(n.currentSlide + n.getSlideCount()) : n.currentSlide + n.getSlideCount(), n.currentDirection = 0;break;case "right":case "up":
          t = n.options.swipeToSlide ? n.checkNavigable(n.currentSlide - n.getSlideCount()) : n.currentSlide - n.getSlideCount(), n.currentDirection = 1;}"vertical" != i && (n.slideHandler(t), n.touchObject = {}, n.$slider.trigger("swipe", [n, i]));
    } else n.touchObject.startX !== n.touchObject.curX && (n.slideHandler(n.currentSlide), n.touchObject = {});
  }, t.prototype.swipeHandler = function (e) {
    var t = this;if (!(t.options.swipe === !1 || "ontouchend" in document && t.options.swipe === !1 || t.options.draggable === !1 && e.type.indexOf("mouse") !== -1)) switch (t.touchObject.fingerCount = e.originalEvent && void 0 !== e.originalEvent.touches ? e.originalEvent.touches.length : 1, t.touchObject.minSwipe = t.listWidth / t.options.touchThreshold, t.options.verticalSwiping === !0 && (t.touchObject.minSwipe = t.listHeight / t.options.touchThreshold), e.data.action) {case "start":
        t.swipeStart(e);break;case "move":
        t.swipeMove(e);break;case "end":
        t.swipeEnd(e);}
  }, t.prototype.swipeMove = function (e) {
    var t,
        i,
        n,
        o,
        s,
        r = this;return s = void 0 !== e.originalEvent ? e.originalEvent.touches : null, !(!r.dragging || s && 1 !== s.length) && (t = r.getLeft(r.currentSlide), r.touchObject.curX = void 0 !== s ? s[0].pageX : e.clientX, r.touchObject.curY = void 0 !== s ? s[0].pageY : e.clientY, r.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(r.touchObject.curX - r.touchObject.startX, 2))), r.options.verticalSwiping === !0 && (r.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(r.touchObject.curY - r.touchObject.startY, 2)))), i = r.swipeDirection(), "vertical" !== i ? (void 0 !== e.originalEvent && r.touchObject.swipeLength > 4 && e.preventDefault(), o = (r.options.rtl === !1 ? 1 : -1) * (r.touchObject.curX > r.touchObject.startX ? 1 : -1), r.options.verticalSwiping === !0 && (o = r.touchObject.curY > r.touchObject.startY ? 1 : -1), n = r.touchObject.swipeLength, r.touchObject.edgeHit = !1, r.options.infinite === !1 && (0 === r.currentSlide && "right" === i || r.currentSlide >= r.getDotCount() && "left" === i) && (n = r.touchObject.swipeLength * r.options.edgeFriction, r.touchObject.edgeHit = !0), r.options.vertical === !1 ? r.swipeLeft = t + n * o : r.swipeLeft = t + n * (r.$list.height() / r.listWidth) * o, r.options.verticalSwiping === !0 && (r.swipeLeft = t + n * o), r.options.fade !== !0 && r.options.touchMove !== !1 && (r.animating === !0 ? (r.swipeLeft = null, !1) : void r.setCSS(r.swipeLeft))) : void 0);
  }, t.prototype.swipeStart = function (e) {
    var t,
        i = this;return i.interrupted = !0, 1 !== i.touchObject.fingerCount || i.slideCount <= i.options.slidesToShow ? (i.touchObject = {}, !1) : (void 0 !== e.originalEvent && void 0 !== e.originalEvent.touches && (t = e.originalEvent.touches[0]), i.touchObject.startX = i.touchObject.curX = void 0 !== t ? t.pageX : e.clientX, i.touchObject.startY = i.touchObject.curY = void 0 !== t ? t.pageY : e.clientY, void (i.dragging = !0));
  }, t.prototype.unfilterSlides = t.prototype.slickUnfilter = function () {
    var e = this;null !== e.$slidesCache && (e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.appendTo(e.$slideTrack), e.reinit());
  }, t.prototype.unload = function () {
    var t = this;e(".slick-cloned", t.$slider).remove(), t.$dots && t.$dots.remove(), t.$prevArrow && t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove(), t.$nextArrow && t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove(), t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
  }, t.prototype.unslick = function (e) {
    var t = this;t.$slider.trigger("unslick", [t, e]), t.destroy();
  }, t.prototype.updateArrows = function () {
    var e,
        t = this;e = Math.floor(t.options.slidesToShow / 2), t.options.arrows === !0 && t.slideCount > t.options.slidesToShow && !t.options.infinite && (t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === t.currentSlide ? (t.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : t.currentSlide >= t.slideCount - t.options.slidesToShow && t.options.centerMode === !1 ? (t.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : t.currentSlide >= t.slideCount - 1 && t.options.centerMode === !0 && (t.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
  }, t.prototype.updateDots = function () {
    var e = this;null !== e.$dots && (e.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), e.$dots.find("li").eq(Math.floor(e.currentSlide / e.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"));
  }, t.prototype.visibility = function () {
    var e = this;e.options.autoplay && (document[e.hidden] ? e.interrupted = !0 : e.interrupted = !1);
  }, e.fn.slick = function () {
    var e,
        i,
        n = this,
        o = arguments[0],
        s = Array.prototype.slice.call(arguments, 1),
        r = n.length;for (e = 0; e < r; e++) {
      if ("object" == ("undefined" == typeof o ? "undefined" : _typeof(o)) || "undefined" == typeof o ? n[e].slick = new t(n[e], o) : i = n[e].slick[o].apply(n[e].slick, s), "undefined" != typeof i) return i;
    }return n;
  };
}), jQuery(document).ready(function (e) {
  e(".slick").slick({ dots: !0, adaptiveHeight: !0, infinite: !0, speed: 500, fade: !0, cssEase: "linear" }).foundation();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIndoYXQtaW5wdXQuanMiLCJmb3VuZGF0aW9uLmNvcmUuanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94LmpzIiwiZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50cmlnZ2Vycy5qcyIsImZvdW5kYXRpb24uYWJpZGUuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24uZHJpbGxkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5vcmJpdC5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc2xpZGVyLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnRvb2x0aXAuanMiLCJmb3VuZGF0aW9uLnpmLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLmpzIiwiZm91bmRhdGlvbi1pbml0LmpzIiwic2xpY2suanMiLCJzY3JpcHRzLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImFyciIsInNsaWNlIiwiY29uY2F0IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInN1cHBvcnQiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiY2FsbCIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImkiLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJvYmoiLCJ0eXBlIiwiQXJyYXkiLCJpc1dpbmRvdyIsImlzTnVtZXJpYyIsInJlYWxTdHJpbmdPYmoiLCJwYXJzZUZsb2F0Iiwia2V5Iiwibm9kZVR5cGUiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJpbmRpcmVjdCIsImV2YWwiLCJ0cmltIiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiaXNBcnJheUxpa2UiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiT2JqZWN0IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJwcm94eSIsInRtcCIsImFyZ3MiLCJub3ciLCJEYXRlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJNQVhfTkVHQVRJVkUiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJyZXNjYXBlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm5pZHNlbGVjdCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJqb2luIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZGl2IiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJub2RlIiwiaGFzQ29tcGFyZSIsInBhcmVudCIsImRvYyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbmQiLCJmaWx0ZXIiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiZGlyIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImRpc2FibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImFkZENvbWJpbmF0b3IiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyaXNTaW1wbGUiLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwibmV4dCIsInByZXYiLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJwb3MiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwic2libGluZyIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwicmV2ZXJzZSIsInJub3R3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwicHJvbWlzZSIsImFsd2F5cyIsImRlZmVycmVkIiwiZmFpbCIsInRoZW4iLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJyZXNvbHZlVmFsdWVzIiwicmVtYWluaW5nIiwidXBkYXRlRnVuYyIsInZhbHVlcyIsInByb2dyZXNzVmFsdWVzIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvZ3Jlc3NDb250ZXh0cyIsInJlc29sdmVDb250ZXh0cyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJvZmYiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwic2V0VGltZW91dCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJyZWdpc3RlciIsImluaXRpYWwiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJzdG9yZWQiLCJjYW1lbCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2VKU09OIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzSGlkZGVuIiwiZWwiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0Iiwic3R5bGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiY3JlYXRlVGV4dE5vZGUiLCJodG1sUHJlZmlsdGVyIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJoYW5kbGVyUXVldWUiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJpc05hTiIsImJ1dHRvbiIsInByb3BzIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIm9yaWdpbmFsIiwid2hpY2giLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb3VzZUhvb2tzIiwiZXZlbnREb2MiLCJib2R5IiwicGFnZVgiLCJjbGllbnRYIiwic2Nyb2xsTGVmdCIsImNsaWVudExlZnQiLCJwYWdlWSIsImNsaWVudFkiLCJzY3JvbGxUb3AiLCJjbGllbnRUb3AiLCJvcmlnaW5hbEV2ZW50IiwiZml4SG9vayIsIkV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiZm9jdXMiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJpZnJhbWUiLCJlbGVtZGlzcGxheSIsIkhUTUwiLCJCT0RZIiwiYWN0dWFsRGlzcGxheSIsImRpc3BsYXkiLCJkZWZhdWx0RGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwidmlldyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiY3NzVGV4dCIsImNvbXB1dGVTdHlsZVRlc3RzIiwiZGl2U3R5bGUiLCJtYXJnaW5MZWZ0Iiwid2lkdGgiLCJtYXJnaW5SaWdodCIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZWxpYWJsZU1hcmdpblJpZ2h0IiwibWFyZ2luRGl2IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJjc3NQcm9wcyIsIm9yaWdOYW1lIiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJoaWRlIiwidG9nZ2xlIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInN0ZXAiLCJmeCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJ0aW1lcklkIiwicmZ4dHlwZXMiLCJycnVuIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwib3B0cyIsIm9sZGZpcmUiLCJjaGVja0Rpc3BsYXkiLCJhbmltIiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicmVqZWN0V2l0aCIsInRpbWVyIiwiY29tcGxldGUiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsInByb3BOYW1lIiwiYXR0ck5hbWVzIiwicHJvcEZpeCIsImdldHRlciIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJyY2xhc3MiLCJnZXRDbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInJzcGFjZXMiLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwiSlNPTiIsInBhcnNlIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyaGFzaCIsInJ0cyIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInRocm93cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwibG5hbWUiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0Iiwic3VjY2VzcyIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJtb2RpZmllZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwiZ2V0Q2xpZW50UmVjdHMiLCJyMjAiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ2IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJfbG9hZCIsInBhcmFtcyIsImFuaW1hdGVkIiwiZ2V0V2luZG93Iiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsInVzaW5nIiwid2luIiwiYm94IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiRk9VTkRBVElPTl9WRVJTSU9OIiwiRm91bmRhdGlvbiIsIl9wbHVnaW5zIiwiX3V1aWRzIiwicnRsIiwicGx1Z2luIiwiZnVuY3Rpb25OYW1lIiwiYXR0ck5hbWUiLCJoeXBoZW5hdGUiLCJyZWdpc3RlclBsdWdpbiIsInBsdWdpbk5hbWUiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsInVucmVnaXN0ZXJQbHVnaW4iLCJyZUluaXQiLCJwbHVnaW5zIiwiaXNKUSIsIl9pbml0IiwiX3RoaXMiLCJwbGdzIiwiZm9yRWFjaCIsImZvdW5kYXRpb24iLCJjb25zb2xlIiwicm91bmQiLCJwb3ciLCJyZWZsb3ciLCIkZWxlbSIsIiRlbCIsIndhcm4iLCJ0aGluZyIsInBhcnNlVmFsdWUiLCJlciIsImdldEZuTmFtZSIsInRyYW5zaXRpb25lbmQiLCJ0cmFuc2l0aW9ucyIsInV0aWwiLCJ0aHJvdHRsZSIsIiRtZXRhIiwiJG5vSlMiLCJNZWRpYVF1ZXJ5IiwicGx1Z0NsYXNzIiwiUmVmZXJlbmNlRXJyb3IiLCJUeXBlRXJyb3IiLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsYXN0VGltZSIsIm5leHRUaW1lIiwicGVyZm9ybWFuY2UiLCJGdW5jdGlvbiIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsImZ1bmNOYW1lUmVnZXgiLCJzdHIiLCJCb3giLCJJbU5vdFRvdWNoaW5nWW91IiwiR2V0RGltZW5zaW9ucyIsIkdldE9mZnNldHMiLCJlbGVtZW50IiwibHJPbmx5IiwidGJPbmx5IiwiZWxlRGltcyIsImJvdHRvbSIsInJpZ2h0IiwicGFyRGltcyIsIndpbmRvd0RpbXMiLCJhbGxEaXJzIiwicmVjdCIsInBhclJlY3QiLCJ3aW5SZWN0Iiwid2luWSIsIndpblgiLCJwYXJlbnREaW1zIiwiYW5jaG9yIiwidk9mZnNldCIsImhPZmZzZXQiLCJpc092ZXJmbG93IiwiJGVsZURpbXMiLCIkYW5jaG9yRGltcyIsImtleUNvZGVzIiwiY29tbWFuZHMiLCJLZXlib2FyZCIsImdldEtleUNvZGVzIiwicGFyc2VLZXkiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJoYW5kbGVLZXkiLCJjb21wb25lbnQiLCJmdW5jdGlvbnMiLCJjb21tYW5kTGlzdCIsImNtZHMiLCJjb21tYW5kIiwibHRyIiwiaGFuZGxlZCIsInVuaGFuZGxlZCIsImZpbmRGb2N1c2FibGUiLCJjb21wb25lbnROYW1lIiwidHJhcEZvY3VzIiwiJGZvY3VzYWJsZSIsIiRmaXJzdEZvY3VzYWJsZSIsIiRsYXN0Rm9jdXNhYmxlIiwicmVsZWFzZUZvY3VzIiwia2NzIiwiayIsImtjIiwiZGVmYXVsdFF1ZXJpZXMiLCJsYW5kc2NhcGUiLCJwb3J0cmFpdCIsInJldGluYSIsInF1ZXJpZXMiLCJleHRyYWN0ZWRTdHlsZXMiLCJuYW1lZFF1ZXJpZXMiLCJwYXJzZVN0eWxlVG9PYmplY3QiLCJfZ2V0Q3VycmVudFNpemUiLCJfd2F0Y2hlciIsImF0TGVhc3QiLCJxdWVyeSIsIm1hdGNoTWVkaWEiLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJzdHlsZU1lZGlhIiwibWVkaWEiLCJpbmZvIiwiY3VycmVudFN0eWxlIiwibWF0Y2hNZWRpdW0iLCJzdHlsZVNoZWV0Iiwic3R5bGVPYmplY3QiLCJyZWR1Y2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpbml0Q2xhc3NlcyIsImFjdGl2ZUNsYXNzZXMiLCJNb3Rpb24iLCJhbmltYXRlSW4iLCJjYiIsImFuaW1hdGVPdXQiLCJNb3ZlIiwicHJvZyIsIm1vdmUiLCJ0cyIsImlzSW4iLCJpbml0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsIk5lc3QiLCJGZWF0aGVyIiwibWVudSIsIml0ZW1zIiwic3ViTWVudUNsYXNzIiwic3ViSXRlbUNsYXNzIiwiaGFzU3ViQ2xhc3MiLCIkaXRlbSIsIiRzdWIiLCJCdXJuIiwiVGltZXIiLCJuYW1lU3BhY2UiLCJyZW1haW4iLCJpc1BhdXNlZCIsInJlc3RhcnQiLCJpbmZpbml0ZSIsInBhdXNlIiwib25JbWFnZXNMb2FkZWQiLCJpbWFnZXMiLCJ1bmxvYWRlZCIsInNpbmdsZUltYWdlTG9hZGVkIiwic3BvdFN3aXBlIiwiZW5hYmxlZCIsIm1vdmVUaHJlc2hvbGQiLCJ0aW1lVGhyZXNob2xkIiwic3RhcnRQb3NYIiwic3RhcnRQb3NZIiwiZWxhcHNlZFRpbWUiLCJpc01vdmluZyIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIngiLCJ0b3VjaGVzIiwieSIsImR4IiwiZHkiLCJhYnMiLCJvblRvdWNoU3RhcnQiLCJzd2lwZSIsImFkZFRvdWNoIiwiaGFuZGxlVG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsImV2ZW50VHlwZXMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJzaW11bGF0ZWRFdmVudCIsIk1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInByZWZpeGVzIiwidHJpZ2dlcnMiLCJjaGVja0xpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsInBsdWdpbklkIiwiZGVib3VuY2UiLCIkbm9kZXMiLCJsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uIiwibXV0YXRpb25SZWNvcmRzTGlzdCIsIiR0YXJnZXQiLCJhdHRyaWJ1dGVOYW1lIiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiYXR0cmlidXRlRmlsdGVyIiwiSUhlYXJZb3UiLCJBYmlkZSIsImRlZmF1bHRzIiwiJGlucHV0cyIsIl9ldmVudHMiLCJyZXNldEZvcm0iLCJ2YWxpZGF0ZUZvcm0iLCJ2YWxpZGF0ZU9uIiwidmFsaWRhdGVJbnB1dCIsImxpdmVWYWxpZGF0ZSIsInZhbGlkYXRlT25CbHVyIiwiaXNHb29kIiwiJGVycm9yIiwiZm9ybUVycm9yU2VsZWN0b3IiLCIkbGFiZWwiLCIkZWxzIiwibGFiZWxzIiwiZmluZExhYmVsIiwiJGZvcm1FcnJvciIsImZpbmRGb3JtRXJyb3IiLCJsYWJlbEVycm9yQ2xhc3MiLCJmb3JtRXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImdyb3VwTmFtZSIsIiRsYWJlbHMiLCJmaW5kUmFkaW9MYWJlbHMiLCIkZm9ybUVycm9ycyIsInJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzIiwiY2xlYXJSZXF1aXJlIiwicmVxdWlyZWRDaGVjayIsInZhbGlkYXRlZCIsImN1c3RvbVZhbGlkYXRvciIsInZhbGlkYXRvciIsImVxdWFsVG8iLCJ2YWxpZGF0ZVJhZGlvIiwidmFsaWRhdGVUZXh0IiwibWF0Y2hWYWxpZGF0aW9uIiwidmFsaWRhdG9ycyIsImdvb2RUb0dvIiwibWVzc2FnZSIsImRlcGVuZGVudEVsZW1lbnRzIiwiYWNjIiwibm9FcnJvciIsImlucHV0VGV4dCIsInZhbGlkIiwicGF0dGVybnMiLCIkZ3JvdXAiLCJyZXF1aXJlZCIsImNsZWFyIiwiJGZvcm0iLCJyZW1vdmVFcnJvckNsYXNzZXMiLCJhbHBoYSIsImFscGhhX251bWVyaWMiLCJpbnRlZ2VyIiwibnVtYmVyIiwiY2FyZCIsImN2diIsImVtYWlsIiwiZG9tYWluIiwiZGF0ZXRpbWUiLCJkYXRlIiwiZGF0ZUlTTyIsIm1vbnRoX2RheV95ZWFyIiwiZGF5X21vbnRoX3llYXIiLCJjb2xvciIsIkFjY29yZGlvbiIsIiR0YWJzIiwiJGNvbnRlbnQiLCJsaW5rSWQiLCIkaW5pdEFjdGl2ZSIsImZpcnN0VGltZUluaXQiLCJkb3duIiwiX2NoZWNrRGVlcExpbmsiLCIkbGluayIsIiRhbmNob3IiLCJkZWVwTGlua1NtdWRnZSIsImRlZXBMaW5rU211ZGdlRGVsYXkiLCJkZWVwTGluayIsIiR0YWJDb250ZW50IiwiJGEiLCJtdWx0aUV4cGFuZCIsInByZXZpb3VzIiwidXAiLCJ1cGRhdGVIaXN0b3J5IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsImZpcnN0VGltZSIsIiRjdXJyZW50QWN0aXZlIiwic2xpZGVTcGVlZCIsIiRhdW50cyIsImFsbG93QWxsQ2xvc2VkIiwiQWNjb3JkaW9uTWVudSIsIm11bHRpT3BlbiIsIiRtZW51TGlua3MiLCJzdWJJZCIsImlzQWN0aXZlIiwiaW5pdFBhbmVzIiwiJHN1Ym1lbnUiLCIkZWxlbWVudHMiLCIkcHJldkVsZW1lbnQiLCIkbmV4dEVsZW1lbnQiLCJtaW4iLCJjbG9zZUFsbCIsImhpZGVBbGwiLCIkbWVudXMiLCJEcmlsbGRvd24iLCIkc3VibWVudUFuY2hvcnMiLCIkc3VibWVudXMiLCIkbWVudUl0ZW1zIiwiX3ByZXBhcmVNZW51IiwiX3JlZ2lzdGVyRXZlbnRzIiwiX2tleWJvYXJkRXZlbnRzIiwicGFyZW50TGluayIsIiRtZW51IiwiJGJhY2siLCJiYWNrQnV0dG9uUG9zaXRpb24iLCJiYWNrQnV0dG9uIiwiX2JhY2siLCJhdXRvSGVpZ2h0IiwiJHdyYXBwZXIiLCJ3cmFwcGVyIiwiYW5pbWF0ZUhlaWdodCIsIl9nZXRNYXhEaW1zIiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2siLCIkYm9keSIsIl9oaWRlQWxsIiwiX3Jlc2l6ZSIsIl9iaW5kSGFuZGxlciIsIl9zY3JvbGxUb3AiLCIkc2Nyb2xsVG9wRWxlbWVudCIsInNjcm9sbFRvcEVsZW1lbnQiLCJzY3JvbGxQb3MiLCJzY3JvbGxUb3BPZmZzZXQiLCJhbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkVhc2luZyIsIl9oaWRlIiwicGFyZW50U3ViTWVudSIsIm1heEhlaWdodCIsIm51bU9mRWxlbXMiLCJEcm9wZG93biIsIiRpZCIsInBhcmVudENsYXNzIiwiJHBhcmVudCIsInBvc2l0aW9uQ2xhc3MiLCJnZXRQb3NpdGlvbkNsYXNzIiwiY291bnRlciIsInVzZWRQb3NpdGlvbnMiLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwiaG9yaXpvbnRhbFBvc2l0aW9uIiwiY2xhc3NDaGFuZ2VkIiwiZGlyZWN0aW9uIiwibmV3V2lkdGgiLCJwYXJlbnRIT2Zmc2V0IiwiJHBhcmVudERpbXMiLCJfcmVwb3NpdGlvbiIsIl9zZXRQb3NpdGlvbiIsImJvZHlEYXRhIiwid2hhdGlucHV0IiwiaG92ZXJEZWxheSIsImhvdmVyUGFuZSIsInZpc2libGVGb2N1c2FibGVFbGVtZW50cyIsImF1dG9Gb2N1cyIsIl9hZGRCb2R5SGFuZGxlciIsImN1clBvc2l0aW9uQ2xhc3MiLCJEcm9wZG93bk1lbnUiLCJzdWJzIiwidmVydGljYWxDbGFzcyIsInJpZ2h0Q2xhc3MiLCJhbGlnbm1lbnQiLCJjaGFuZ2VkIiwiaGFzVG91Y2giLCJvbnRvdWNoc3RhcnQiLCJwYXJDbGFzcyIsImhhbmRsZUNsaWNrRm4iLCJoYXNTdWIiLCJoYXNDbGlja2VkIiwiY2xpY2tPcGVuIiwiZm9yY2VGb2xsb3ciLCJjbG9zZU9uQ2xpY2tJbnNpZGUiLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwicHJldlNpYmxpbmciLCJvcGVuU3ViIiwiY2xvc2VTdWIiLCJfaXNWZXJ0aWNhbCIsIiRzaWJzIiwib2xkQ2xhc3MiLCIkcGFyZW50TGkiLCIkdG9DbG9zZSIsInNvbWV0aGluZ1RvQ2xvc2UiLCJFcXVhbGl6ZXIiLCJlcUlkIiwiJHdhdGNoZWQiLCJoYXNOZXN0ZWQiLCJpc05lc3RlZCIsImlzT24iLCJvblJlc2l6ZU1lQm91bmQiLCJfb25SZXNpemVNZSIsIm9uUG9zdEVxdWFsaXplZEJvdW5kIiwiX29uUG9zdEVxdWFsaXplZCIsImltZ3MiLCJ0b29TbWFsbCIsImVxdWFsaXplT24iLCJfY2hlY2tNUSIsIl9yZWZsb3ciLCJfcGF1c2VFdmVudHMiLCJlcXVhbGl6ZU9uU3RhY2siLCJfaXNTdGFja2VkIiwiZXF1YWxpemVCeVJvdyIsImdldEhlaWdodHNCeVJvdyIsImFwcGx5SGVpZ2h0QnlSb3ciLCJnZXRIZWlnaHRzIiwiYXBwbHlIZWlnaHQiLCJoZWlnaHRzIiwibGFzdEVsVG9wT2Zmc2V0IiwiZ3JvdXAiLCJlbE9mZnNldFRvcCIsImxuIiwiZ3JvdXBzSUxlbmd0aCIsImxlbkoiLCJJbnRlcmNoYW5nZSIsInJ1bGVzIiwiY3VycmVudFBhdGgiLCJfYWRkQnJlYWtwb2ludHMiLCJfZ2VuZXJhdGVSdWxlcyIsInJ1bGUiLCJwYXRoIiwiU1BFQ0lBTF9RVUVSSUVTIiwicnVsZXNMaXN0IiwiTWFnZWxsYW4iLCJjYWxjUG9pbnRzIiwiJHRhcmdldHMiLCIkbGlua3MiLCIkYWN0aXZlIiwicG9pbnRzIiwid2luSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkb2NIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkdGFyIiwicHQiLCJ0aHJlc2hvbGQiLCJ0YXJnZXRQb2ludCIsImRlZXBMaW5raW5nIiwic2Nyb2xsVG9Mb2MiLCJfdXBkYXRlQWN0aXZlIiwiYXJyaXZhbCIsImxvYyIsIl9pblRyYW5zaXRpb24iLCJiYXJPZmZzZXQiLCJ3aW5Qb3MiLCJjdXJJZHgiLCJpc0Rvd24iLCJjdXJWaXNpYmxlIiwiT2ZmQ2FudmFzIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwidHJhbnNpdGlvbiIsImNvbnRlbnRPdmVybGF5Iiwib3ZlcmxheSIsIm92ZXJsYXlQb3NpdGlvbiIsIiRvdmVybGF5IiwiaXNSZXZlYWxlZCIsInJldmVhbENsYXNzIiwicmV2ZWFsT24iLCJfc2V0TVFDaGVja2VyIiwidHJhbnNpdGlvblRpbWUiLCJfaGFuZGxlS2V5Ym9hcmQiLCJyZXZlYWwiLCIkY2xvc2VyIiwiYWxsb3dVcCIsImFsbG93RG93biIsImxhc3RZIiwiZm9yY2VUbyIsImNvbnRlbnRTY3JvbGwiLCJfc3RvcFNjcm9sbGluZyIsIl9yZWNvcmRTY3JvbGxhYmxlIiwiX3N0b3BTY3JvbGxQcm9wYWdhdGlvbiIsImNhbnZhc0ZvY3VzIiwiT3JiaXQiLCJfcmVzZXQiLCJjb250YWluZXJDbGFzcyIsIiRzbGlkZXMiLCJzbGlkZUNsYXNzIiwiJGltYWdlcyIsImluaXRBY3RpdmUiLCJ1c2VNVUkiLCJfcHJlcGFyZUZvck9yYml0IiwiYnVsbGV0cyIsIl9sb2FkQnVsbGV0cyIsImF1dG9QbGF5IiwiZ2VvU3luYyIsImFjY2Vzc2libGUiLCIkYnVsbGV0cyIsImJveE9mQnVsbGV0cyIsInRpbWVyRGVsYXkiLCJjaGFuZ2VTbGlkZSIsIl9zZXRXcmFwcGVySGVpZ2h0IiwicGF1c2VPbkhvdmVyIiwibmF2QnV0dG9ucyIsIiRjb250cm9scyIsIm5leHRDbGFzcyIsInByZXZDbGFzcyIsIiRzbGlkZSIsIl91cGRhdGVCdWxsZXRzIiwiaXNMVFIiLCJjaG9zZW5TbGlkZSIsIiRjdXJTbGlkZSIsIiRmaXJzdFNsaWRlIiwiJGxhc3RTbGlkZSIsImRpckluIiwiZGlyT3V0IiwiJG5ld1NsaWRlIiwiaW5maW5pdGVXcmFwIiwiJG9sZEJ1bGxldCIsInNwYW4iLCIkbmV3QnVsbGV0IiwiYW5pbUluRnJvbVJpZ2h0IiwiYW5pbU91dFRvUmlnaHQiLCJhbmltSW5Gcm9tTGVmdCIsImFuaW1PdXRUb0xlZnQiLCJSZXNwb25zaXZlTWVudSIsImN1cnJlbnRNcSIsImN1cnJlbnRQbHVnaW4iLCJydWxlc1RyZWUiLCJydWxlU2l6ZSIsInJ1bGVQbHVnaW4iLCJNZW51UGx1Z2lucyIsIl9jaGVja01lZGlhUXVlcmllcyIsIm1hdGNoZWRNcSIsImNzc0NsYXNzIiwiZGVzdHJveSIsImRyb3Bkb3duIiwiZHJpbGxkb3duIiwiYWNjb3JkaW9uIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsImFuaW1hdGlvbkluIiwiYW5pbWF0aW9uT3V0IiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlJldmVhbCIsIm1xIiwiaXNNb2JpbGUiLCJtb2JpbGVTbmlmZiIsImZ1bGxTY3JlZW4iLCJfbWFrZU92ZXJsYXkiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJfdXBkYXRlUG9zaXRpb24iLCJfaGFuZGxlU3RhdGUiLCJtdWx0aXBsZU9wZW5lZCIsImFkZFJldmVhbE9wZW5DbGFzc2VzIiwib3JpZ2luYWxTY3JvbGxQb3MiLCJhZnRlckFuaW1hdGlvbiIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvd0RlbGF5IiwiX2V4dHJhSGFuZGxlcnMiLCJjbG9zZU9uRXNjIiwiZmluaXNoVXAiLCJoaWRlRGVsYXkiLCJyZXNldE9uQ2xvc2UiLCJ0aXRsZSIsImJ0bU9mZnNldFBjdCIsImlQaG9uZVNuaWZmIiwiYW5kcm9pZFNuaWZmIiwiU2xpZGVyIiwiaW5wdXRzIiwiaGFuZGxlcyIsIiRoYW5kbGUiLCIkaW5wdXQiLCIkZmlsbCIsInZlcnRpY2FsIiwiaXNEYmwiLCJkaXNhYmxlZENsYXNzIiwiYmluZGluZyIsIl9zZXRJbml0QXR0ciIsImRvdWJsZVNpZGVkIiwiJGhhbmRsZTIiLCIkaW5wdXQyIiwic2V0SGFuZGxlcyIsIl9zZXRIYW5kbGVQb3MiLCJwY3RPZkJhciIsInBvc2l0aW9uVmFsdWVGdW5jdGlvbiIsIl9sb2dUcmFuc2Zvcm0iLCJfcG93VHJhbnNmb3JtIiwidG9GaXhlZCIsImJhc2VMb2ciLCJub25MaW5lYXJCYXNlIiwiJGhuZGwiLCJub0ludmVydCIsImgyVmFsIiwiaDFWYWwiLCJ2ZXJ0IiwiaE9yVyIsImxPclQiLCJoYW5kbGVEaW0iLCJlbGVtRGltIiwiX3BjdE9mQmFyIiwicHhUb01vdmUiLCJtb3ZlbWVudCIsImRlY2ltYWwiLCJfc2V0VmFsdWVzIiwiaXNMZWZ0SG5kbCIsImRpbSIsImhhbmRsZVBjdCIsImhhbmRsZVBvcyIsImluaXRpYWxTdGFydCIsIm1vdmVUaW1lIiwiY2hhbmdlZERlbGF5IiwiaW5pdFZhbCIsImluaXRpYWxFbmQiLCJoYXNWYWwiLCJldmVudE9mZnNldCIsImhhbGZPZkhhbmRsZSIsImJhckRpbSIsIndpbmRvd1Njcm9sbCIsImVsZW1PZmZzZXQiLCJldmVudEZyb21CYXIiLCJiYXJYWSIsIm9mZnNldFBjdCIsIl92YWx1ZSIsIl9hZGp1c3RWYWx1ZSIsImZpcnN0SG5kbFBvcyIsImFic1Bvc2l0aW9uIiwic2VjbmRIbmRsUG9zIiwicHJldl92YWwiLCJuZXh0X3ZhbCIsIl9ldmVudHNGb3JIYW5kbGUiLCJjdXJIYW5kbGUiLCJfaGFuZGxlRXZlbnQiLCJjbGlja1NlbGVjdCIsImRyYWdnYWJsZSIsIl8kaGFuZGxlIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImRlY3JlYXNlIiwiaW5jcmVhc2UiLCJkZWNyZWFzZV9mYXN0IiwiaW5jcmVhc2VfZmFzdCIsImludmVydFZlcnRpY2FsIiwiZnJhYyIsImNsaWNrUG9zIiwibG9nIiwiU3RpY2t5Iiwid2FzV3JhcHBlZCIsIiRjb250YWluZXIiLCJzdGlja3lDbGFzcyIsInNjcm9sbENvdW50IiwiY2hlY2tFdmVyeSIsImlzU3R1Y2siLCJjb250YWluZXJIZWlnaHQiLCJlbGVtSGVpZ2h0IiwiX3BhcnNlUG9pbnRzIiwiX3NldFNpemVzIiwic2Nyb2xsIiwiX2NhbGMiLCJfcmVtb3ZlU3RpY2t5IiwidG9wUG9pbnQiLCJ0b3BBbmNob3IiLCJidG0iLCJidG1BbmNob3IiLCJwdHMiLCJicmVha3MiLCJwbGFjZSIsImNhblN0aWNrIiwiX2V2ZW50c0hhbmRsZXIiLCJfcGF1c2VMaXN0ZW5lcnMiLCJjaGVja1NpemVzIiwiYm90dG9tUG9pbnQiLCJfc2V0U3RpY2t5Iiwic3RpY2tUbyIsIm1yZ24iLCJub3RTdHVja1RvIiwiaXNUb3AiLCJzdGlja1RvVG9wIiwiYW5jaG9yUHQiLCJhbmNob3JIZWlnaHQiLCJ0b3BPckJvdHRvbSIsInN0aWNreU9uIiwibmV3RWxlbVdpZHRoIiwiY29tcCIsInBkbmdsIiwicGRuZ3IiLCJuZXdDb250YWluZXJIZWlnaHQiLCJfc2V0QnJlYWtQb2ludHMiLCJtVG9wIiwiZW1DYWxjIiwibWFyZ2luVG9wIiwibUJ0bSIsIm1hcmdpbkJvdHRvbSIsImVtIiwiZm9udFNpemUiLCJUYWJzIiwiJHRhYlRpdGxlcyIsImxpbmtDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsIm1hdGNoSGVpZ2h0IiwiX3NldEhlaWdodCIsInNlbGVjdFRhYiIsIl9hZGRLZXlIYW5kbGVyIiwiX2FkZENsaWNrSGFuZGxlciIsIl9zZXRIZWlnaHRNcUhhbmRsZXIiLCJfaGFuZGxlVGFiQ2hhbmdlIiwid3JhcE9uS2V5cyIsImhpc3RvcnlIYW5kbGVkIiwiYWN0aXZlQ29sbGFwc2UiLCJfY29sbGFwc2VUYWIiLCIkb2xkVGFiIiwiJHRhYkxpbmsiLCIkdGFyZ2V0Q29udGVudCIsIl9vcGVuVGFiIiwicGFuZWxBY3RpdmVDbGFzcyIsIiR0YXJnZXRfYW5jaG9yIiwiaWRTdHIiLCJwYW5lbENsYXNzIiwicGFuZWwiLCJUb2dnbGVyIiwiX3VwZGF0ZUFSSUEiLCJUb29sdGlwIiwiaXNDbGljayIsImVsZW1JZCIsIl9nZXRQb3NpdGlvbkNsYXNzIiwidGlwVGV4dCIsInRlbXBsYXRlIiwiX2J1aWxkVGVtcGxhdGUiLCJhbGxvd0h0bWwiLCJ0cmlnZ2VyQ2xhc3MiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCIkdGlwRGltcyIsInNob3dPbiIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwiaXNGb2N1cyIsImRpc2FibGVGb3JUb3VjaCIsInRvdWNoQ2xvc2VUZXh0IiwiUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMiLCJfZ2V0QWxsT3B0aW9ucyIsImFsbE9wdGlvbnMiLCJkdW1teVBsdWdpbiIsInRtcFBsdWdpbiIsImtleUtleSIsIm9iak9iaiIsInN0b3JlemZEYXRhIiwiX2hhbmRsZU1hcmt1cCIsInRvU2V0IiwiZnJvbVN0cmluZyIsIiRwYW5lbHMiLCJ0YWJzVGl0bGUiLCJ0YWJzUGFuZWwiLCIkbGlIZWFkcyIsIiRsaUhlYWRzQSIsIiR0YWJzQ29udGVudCIsIiRwbGFjZWhvbGRlciIsInRlbXBWYWx1ZSIsInRhYnMiLCJzbGljayIsImRvdHMiLCJhZGFwdGl2ZUhlaWdodCIsImZhZGUiLCJjc3NFYXNlIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3R5cGVvZiIsInNlIiwidmUiLCJKIiwibyIsImtlIiwiciIsIlgiLCJGZSIsIl9lIiwiZCIsInUiLCJBZSIsImMiLCJUZSIsImgiLCJmIiwiamUiLCJEZSIsIk1lIiwiSGUiLCJnIiwiV2UiLCJTZSIsIlBlIiwiQyIsIlYiLCJuZSIsIkJlIiwiWWUiLCJUIiwiVWUiLCJRZSIsIlMiLCJHZSIsIlhlIiwiS2UiLCJGIiwibnQiLCJpdCIsInoiLCJBIiwiT2UiLCJPIiwiRSIsIkVlIiwiUCIsIkQiLCJvdCIsIkgiLCJNIiwiTCIsInJ0IiwicSIsIlIiLCJOIiwiSSIsIlN0IiwiQiIsIlciLCJZIiwiUSIsIkF0IiwiVSIsIksiLCJHIiwiWiIsImVlIiwidGUiLCJpZSIsIm9lIiwicmUiLCJhZSIsImxlIiwiZGUiLCJ1ZSIsImdlIiwid2UiLCJoZSIsInllIiwiVEFHIiwiY2UiLCJmZSIsIklEIiwiQ0xBU1MiLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJwZSIsIm1lIiwiYmUiLCJDZSIsImhlYWRlciIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwiJGUiLCJ4ZSIsInplIiwicWUiLCJMZSIsIlJlIiwiTmUiLCJJZSIsIlZlIiwiWmUiLCJKZSIsImV0IiwidHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwic3QiLCJhdCIsImR0IiwidXQiLCJmb3IiLCJjbGFzcyIsImh0IiwiZnQiLCJ2dCIsIm10IiwieXQiLCJ3dCIsImJ0Iiwia3QiLCJDdCIsIiR0IiwieHQiLCJUdCIsIl90IiwiRnQiLCJ6dCIsIk90IiwiRXQiLCJQdCIsIkR0IiwiSHQiLCJNdCIsImp0IiwicXQiLCJMdCIsIlJ0Iiwid2hhdElucHV0IiwibG9hZGVkIiwia2V5dXAiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJNU1BvaW50ZXJEb3duIiwiTVNQb2ludGVyTW92ZSIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsInBvaW50ZXJUeXBlIiwib25tb3VzZXdoZWVsIiwiYXNrIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInJvbGUiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsIl9jcmVhdGVDbGFzcyIsImVudW1lcmFibGUiLCJFTlRFUiIsIlNQQUNFIiwiQVJST1dfRE9XTiIsIkFSUk9XX1VQIiwiQVJST1dfUklHSFQiLCJBUlJPV19MRUZUIiwiRVNDQVBFIiwiVEFCIiwiU0hJRlRfVEFCIiwiU0hJRlRfQVJST1dfUklHSFQiLCJTSElGVF9BUlJPV19VUCIsIlNISUZUX0FSUk9XX0RPV04iLCJTSElGVF9BUlJPV19MRUZUIiwicmVxdWlyZSIsIlNsaWNrIiwiYWNjZXNzaWJpbGl0eSIsImFwcGVuZEFycm93cyIsImFwcGVuZERvdHMiLCJhcnJvd3MiLCJhc05hdkZvciIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY3VzdG9tUGFnaW5nIiwiZG90c0NsYXNzIiwiZWRnZUZyaWN0aW9uIiwiZm9jdXNPblNlbGVjdCIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicmVzcG9uc2l2ZSIsInJvd3MiLCJzbGlkZSIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImRyYWdnaW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsIiRsaXN0IiwidG91Y2hPYmplY3QiLCJ0cmFuc2Zvcm1zRW5hYmxlZCIsInVuc2xpY2tlZCIsImFjdGl2ZUJyZWFrcG9pbnQiLCJhbmltVHlwZSIsImFuaW1Qcm9wIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJwYXVzZWQiLCJwb3NpdGlvblByb3AiLCJyb3dDb3VudCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd1RpbWVyIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjbGlja0hhbmRsZXIiLCJzZWxlY3RIYW5kbGVyIiwic2V0UG9zaXRpb24iLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJpbnN0YW5jZVVpZCIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsInVubG9hZCIsInJlaW5pdCIsImFuaW1hdGVTbGlkZSIsImFuaW1TdGFydCIsImNlaWwiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWRlSGFuZGxlciIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiY2hlY2tSZXNwb25zaXZlIiwiaW5uZXJXaWR0aCIsInVuc2xpY2siLCJyZWZyZXNoIiwiY2hlY2tOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJmYWRlU2xpZGUiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImdldExlZnQiLCJmbG9vciIsIm9mZnNldExlZnQiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsImdvVG8iLCJzbGlja0dvVG8iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJ0YWdOYW1lIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInNsaWNrUGF1c2UiLCJwbGF5Iiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwiYnJlYWtwb2ludCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInNldENTUyIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInN3aXBlRGlyZWN0aW9uIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJzcXJ0IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0MsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7O0FBRTVCLEtBQUssUUFBT0MsTUFBUCx5Q0FBT0EsTUFBUCxPQUFrQixRQUFsQixJQUE4QixRQUFPQSxPQUFPQyxPQUFkLE1BQTBCLFFBQTdELEVBQXdFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FELFNBQU9DLE9BQVAsR0FBaUJILE9BQU9JLFFBQVAsR0FDaEJILFFBQVNELE1BQVQsRUFBaUIsSUFBakIsQ0FEZ0IsR0FFaEIsVUFBVUssQ0FBVixFQUFjO0FBQ2IsT0FBSyxDQUFDQSxFQUFFRCxRQUFSLEVBQW1CO0FBQ2xCLFVBQU0sSUFBSUUsS0FBSixDQUFXLDBDQUFYLENBQU47QUFDQTtBQUNELFVBQU9MLFFBQVNJLENBQVQsQ0FBUDtBQUNBLEdBUEY7QUFRQSxFQWhCRCxNQWdCTztBQUNOSixVQUFTRCxNQUFUO0FBQ0E7O0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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LFVBQTlGO0FBQTJHLENBQTlJLENBRDExUyIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjIuNFxuICogaHR0cDovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA1LTIwVDE3OjIzWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMi4yLjRcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIlwiLFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xuXG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0XHQoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6XG5cblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRcdHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cdFx0cmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRcdGlmICggb2JqLmNvbnN0cnVjdG9yICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLCBcImNvbnN0cnVjdG9yXCIgKSAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgfHwge30sIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd25cblx0XHRmb3IgKCBrZXkgaW4gb2JqICkge31cblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0dmFyIHNjcmlwdCxcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcblxuXHRcdGNvZGUgPSBqUXVlcnkudHJpbSggY29kZSApO1xuXG5cdFx0aWYgKCBjb2RlICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZiggXCJ1c2Ugc3RyaWN0XCIgKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXHRcdFx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHRcdC8vIGFuZCByZW1vdmFsIGJ5IHVzaW5nIGFuIGluZGlyZWN0IGdsb2JhbCBldmFsXG5cblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbi8vIEpTSGludCB3b3VsZCBlcnJvciBvbiB0aGlzIGNvZGUgZHVlIHRvIHRoZSBTeW1ib2wgbm90IGJlaW5nIGRlZmluZWQgaW4gRVM1LlxuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmpzaGludHJjIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8ganVzdCBkaXNhYmxlIEpTSGludCBmb3IgdGhlc2Vcbi8vIHRocmVlIGxpbmVzLlxuLyoganNoaW50IGlnbm9yZTogc3RhcnQgKi9cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cbi8qIGpzaGludCBpZ25vcmU6IGVuZCAqL1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjFcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTUtMTAtMTdcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxuXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBuaWRzZWxlY3QsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdG5pZHNlbGVjdCA9IHJpZGVudGlmaWVyLnRlc3QoIG5pZCApID8gXCIjXCIgKyBuaWQgOiBcIltpZD0nXCIgKyBuaWQgKyBcIiddXCI7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWRzZWxlY3QgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCAocGFyZW50ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHBhcmVudC50b3AgIT09IHBhcmVudCApIHtcblx0XHQvLyBTdXBwb3J0OiBJRSAxMVxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gbSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGRpciBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFtcXHctXSspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCBwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3R3aGl0ZSA9ICggL1xcUysvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XG5cblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8XG5cdFx0XHRcdCggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC5cblx0XHRcdC8vIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cdGlmICggIXJlYWR5TGlzdCApIHtcblxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcblx0XHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyBTdXBwb3J0OiBJRTktMTAgb25seVxuXHRcdC8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdFx0XHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2hhaW5hYmxlID9cblx0XHRlbGVtcyA6XG5cblx0XHQvLyBHZXRzXG5cdFx0YnVsayA/XG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHQvKiBqc2hpbnQgLVcwMTggKi9cblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdHJlZ2lzdGVyOiBmdW5jdGlvbiggb3duZXIsIGluaXRpYWwgKSB7XG5cdFx0dmFyIHZhbHVlID0gaW5pdGlhbCB8fCB7fTtcblxuXHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG5cdFx0Ly8gY29uZmlndXJhYmlsaXR5IG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHQvLyBkZWxldGVkIHdpdGggdGhlIGRlbGV0ZSBvcGVyYXRvclxuXHRcdH0gZWxzZSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdHJldHVybiBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdH0sXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdGlmICggIWFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5yZWdpc3Rlciggb3duZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIFRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLCBjYW1lbEtleTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApIHx8XG5cblx0XHRcdFx0XHQvLyBUcnkgdG8gZmluZCBkYXNoZWQga2V5IGlmIGl0IGV4aXN0cyAoZ2gtMjc3OSlcblx0XHRcdFx0XHQvLyBUaGlzIGlzIGZvciAyLjIueCBvbmx5XG5cdFx0XHRcdFx0ZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCkgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YVVzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZiggXCItXCIgKSA+IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHQhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7IH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldCA9IHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjMsIFNhZmFyaTw9NS4xXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUU5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gU3VwcG9ydCAoYXQgbGVhc3QpOiBDaHJvbWUsIElFOVxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDw9NDIrXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgaW4gRkYgYnV0IGRvbid0IGJsb2NrIElFIHJhZGlvIGV2ZW50cyAoIzM4NjEsIGdoLTIzNDMpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJlxuXHRcdFx0KCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgfHwgaXNOYU4oIGV2ZW50LmJ1dHRvbiApIHx8IGV2ZW50LmJ1dHRvbiA8IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogKCBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGRldGFpbCBldmVudFBoYXNlIFwiICtcblx0XHRcIm1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIiApLnNwbGl0KCBcIiBcIiApLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdCggXCIgXCIgKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiAoIFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBcIiArXG5cdFx0XHRcInNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XG5cblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICtcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLVxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICtcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLVxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcblxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fFxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGJvZHlcIiApICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gS2VlcCBkb21NYW5pcCBleHBvc2VkIHVudGlsIDMuMCAoZ2gtMjIyNSlcblx0ZG9tTWFuaXA6IGRvbU1hbmlwLFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcblx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxuXHRcdEhUTUw6IFwiYmxvY2tcIixcblx0XHRCT0RZOiBcImJsb2NrXCJcblx0fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9ICggaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSApXG5cdFx0XHRcdC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcblx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXG5cdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xuXHRcdFx0Ly8gV2UncmUgY2hlY2tpbmcgZm9yIGJveFNpemluZ1JlbGlhYmxlVmFsIGhlcmUgaW5zdGVhZCBvZiBwaXhlbE1hcmdpblJpZ2h0VmFsXG5cdFx0XHQvLyBzaW5jZSB0aGF0IGNvbXByZXNzZXMgYmV0dGVyIGFuZCB0aGV5J3JlIGNvbXB1dGVkIHRvZ2V0aGVyIGFueXdheS5cblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IG9ubHksIEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gMzdcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblx0XHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2ICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcblx0Ly8gRmFsbCBiYWNrIHRvIHN0eWxlIGV2ZW4gd2l0aG91dCBjb21wdXRlZFxuXHQvLyBjb21wdXRlZCBpcyB1bmRlZmluZWQgZm9yIGVsZW1zIG9uIGRvY3VtZW50IGZyYWdtZW50c1xuXHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuYWNjZXNzKFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXG5cdFx0XHRcdFx0ZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxuXHRcdFx0XHRcdGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3Bcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXHRcdFx0XHRcdGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiBzd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93XG5cdFx0XHRcdC8vIGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoIGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkgKSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/XG5cdFx0b3B0LmR1cmF0aW9uIDogb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgP1xuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGFiaW5kZXggP1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmIGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0XHRcdDAgOlxuXHRcdFx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBnZXRDbGFzcyggZWxlbSApICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZyxcblx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cblxuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApIDpcblxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKS5yZXBsYWNlKCByc3BhY2VzLCBcIiBcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/XG5cdFx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSwgU2FmYXJpXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSApLmVuZCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdC8vIFVzZSBPUiBpbnN0ZWFkIG9mIEFORCBhcyB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZSBpZiBlaXRoZXIgaXMgdHJ1ZVxuXHQvLyBTZWUgdGlja2V0cyAjMTA0MDYgYW5kICMxMzEzMlxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA+IDAgfHwgZWxlbS5vZmZzZXRIZWlnaHQgPiAwIHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPiAwO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpPDctOCssIENocm9tZTwzNy00NCtcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXHRzaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGg7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5yZXR1cm4galF1ZXJ5O1xufSkpO1xuIiwiLyoqXG4gKiB3aGF0LWlucHV0IC0gQSBnbG9iYWwgdXRpbGl0eSBmb3IgdHJhY2tpbmcgdGhlIGN1cnJlbnQgaW5wdXQgbWV0aG9kIChtb3VzZSwga2V5Ym9hcmQgb3IgdG91Y2gpLlxuICogQHZlcnNpb24gdjQuMC42XG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGVuMXNldmVuL3doYXQtaW5wdXRcbiAqIEBsaWNlbnNlIE1JVFxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIndoYXRJbnB1dFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ3aGF0SW5wdXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wid2hhdElucHV0XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xuXG5cdCAgLypcblx0ICAgIC0tLS0tLS0tLS0tLS0tLVxuXHQgICAgVmFyaWFibGVzXG5cdCAgICAtLS0tLS0tLS0tLS0tLS1cblx0ICAqL1xuXG5cdCAgLy8gY2FjaGUgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG5cdCAgdmFyIGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0ICAvLyBsYXN0IHVzZWQgaW5wdXQgdHlwZVxuXHQgIHZhciBjdXJyZW50SW5wdXQgPSAnaW5pdGlhbCc7XG5cblx0ICAvLyBsYXN0IHVzZWQgaW5wdXQgaW50ZW50XG5cdCAgdmFyIGN1cnJlbnRJbnRlbnQgPSBudWxsO1xuXG5cdCAgLy8gZm9ybSBpbnB1dCB0eXBlc1xuXHQgIHZhciBmb3JtSW5wdXRzID0gW1xuXHQgICAgJ2lucHV0Jyxcblx0ICAgICdzZWxlY3QnLFxuXHQgICAgJ3RleHRhcmVhJ1xuXHQgIF07XG5cblx0ICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcblx0ICAvLyBjYW4gYmUgc2FmZWx5IGlnbm9yZWQgdG8gcHJldmVudCBmYWxzZSBrZXlib2FyZCBkZXRlY3Rpb25cblx0ICB2YXIgaWdub3JlTWFwID0gW1xuXHQgICAgMTYsIC8vIHNoaWZ0XG5cdCAgICAxNywgLy8gY29udHJvbFxuXHQgICAgMTgsIC8vIGFsdFxuXHQgICAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcblx0ICAgIDkzICAvLyBXaW5kb3dzIG1lbnUgLyByaWdodCBBcHBsZSBjbWRcblx0ICBdO1xuXG5cdCAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcblx0ICB2YXIgaW5wdXRNYXAgPSB7XG5cdCAgICAna2V5dXAnOiAna2V5Ym9hcmQnLFxuXHQgICAgJ21vdXNlZG93bic6ICdtb3VzZScsXG5cdCAgICAnbW91c2Vtb3ZlJzogJ21vdXNlJyxcblx0ICAgICdNU1BvaW50ZXJEb3duJzogJ3BvaW50ZXInLFxuXHQgICAgJ01TUG9pbnRlck1vdmUnOiAncG9pbnRlcicsXG5cdCAgICAncG9pbnRlcmRvd24nOiAncG9pbnRlcicsXG5cdCAgICAncG9pbnRlcm1vdmUnOiAncG9pbnRlcicsXG5cdCAgICAndG91Y2hzdGFydCc6ICd0b3VjaCdcblx0ICB9O1xuXG5cdCAgLy8gYXJyYXkgb2YgYWxsIHVzZWQgaW5wdXQgdHlwZXNcblx0ICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG5cdCAgLy8gYm9vbGVhbjogdHJ1ZSBpZiB0b3VjaCBidWZmZXIgdGltZXIgaXMgcnVubmluZ1xuXHQgIHZhciBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXG5cdCAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG5cdCAgdmFyIHBvaW50ZXJNYXAgPSB7XG5cdCAgICAyOiAndG91Y2gnLFxuXHQgICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcblx0ICAgIDQ6ICdtb3VzZSdcblx0ICB9O1xuXG5cdCAgLy8gdG91Y2ggYnVmZmVyIHRpbWVyXG5cdCAgdmFyIHRvdWNoVGltZXIgPSBudWxsO1xuXG5cblx0ICAvKlxuXHQgICAgLS0tLS0tLS0tLS0tLS0tXG5cdCAgICBTZXQgdXBcblx0ICAgIC0tLS0tLS0tLS0tLS0tLVxuXHQgICovXG5cblx0ICB2YXIgc2V0VXAgPSBmdW5jdGlvbigpIHtcblxuXHQgICAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG5cdCAgICBpbnB1dE1hcFtkZXRlY3RXaGVlbCgpXSA9ICdtb3VzZSc7XG5cblx0ICAgIGFkZExpc3RlbmVycygpO1xuXHQgICAgc2V0SW5wdXQoKTtcblx0ICB9O1xuXG5cblx0ICAvKlxuXHQgICAgLS0tLS0tLS0tLS0tLS0tXG5cdCAgICBFdmVudHNcblx0ICAgIC0tLS0tLS0tLS0tLS0tLVxuXHQgICovXG5cblx0ICB2YXIgYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG5cblx0ICAgIC8vIGBwb2ludGVybW92ZWAsIGBNU1BvaW50ZXJNb3ZlYCwgYG1vdXNlbW92ZWAgYW5kIG1vdXNlIHdoZWVsIGV2ZW50IGJpbmRpbmdcblx0ICAgIC8vIGNhbiBvbmx5IGRlbW9uc3RyYXRlIHBvdGVudGlhbCwgYnV0IG5vdCBhY3R1YWwsIGludGVyYWN0aW9uXG5cdCAgICAvLyBhbmQgYXJlIHRyZWF0ZWQgc2VwYXJhdGVseVxuXG5cdCAgICAvLyBwb2ludGVyIGV2ZW50cyAobW91c2UsIHBlbiwgdG91Y2gpXG5cdCAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyRG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgICAgZG9jRWxlbS5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJNb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSB7XG5cblx0ICAgICAgLy8gbW91c2UgZXZlbnRzXG5cdCAgICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdXBkYXRlSW5wdXQpO1xuXHQgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNldEludGVudCk7XG5cblx0ICAgICAgLy8gdG91Y2ggZXZlbnRzXG5cdCAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHtcblx0ICAgICAgICBkb2NFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0b3VjaEJ1ZmZlcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gbW91c2Ugd2hlZWxcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcihkZXRlY3RXaGVlbCgpLCBzZXRJbnRlbnQpO1xuXG5cdCAgICAvLyBrZXlib2FyZCBldmVudHNcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVwZGF0ZUlucHV0KTtcblx0ICAgIGRvY0VsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1cGRhdGVJbnB1dCk7XG5cdCAgfTtcblxuXHQgIC8vIGNoZWNrcyBjb25kaXRpb25zIGJlZm9yZSB1cGRhdGluZyBuZXcgaW5wdXRcblx0ICB2YXIgdXBkYXRlSW5wdXQgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdCAgICAvLyBvbmx5IGV4ZWN1dGUgaWYgdGhlIHRvdWNoIGJ1ZmZlciB0aW1lciBpc24ndCBydW5uaW5nXG5cdCAgICBpZiAoIWlzQnVmZmVyaW5nKSB7XG5cdCAgICAgIHZhciBldmVudEtleSA9IGV2ZW50LndoaWNoO1xuXHQgICAgICB2YXIgdmFsdWUgPSBpbnB1dE1hcFtldmVudC50eXBlXTtcblx0ICAgICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG5cdCAgICAgIGlmIChcblx0ICAgICAgICBjdXJyZW50SW5wdXQgIT09IHZhbHVlIHx8XG5cdCAgICAgICAgY3VycmVudEludGVudCAhPT0gdmFsdWVcblx0ICAgICAgKSB7XG5cblx0ICAgICAgICB2YXIgYWN0aXZlRWxlbSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdCAgICAgICAgdmFyIGFjdGl2ZUlucHV0ID0gKFxuXHQgICAgICAgICAgYWN0aXZlRWxlbSAmJlxuXHQgICAgICAgICAgYWN0aXZlRWxlbS5ub2RlTmFtZSAmJlxuXHQgICAgICAgICAgZm9ybUlucHV0cy5pbmRleE9mKGFjdGl2ZUVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xXG5cdCAgICAgICAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgIHZhbHVlID09PSAndG91Y2gnIHx8XG5cblx0ICAgICAgICAgIC8vIGlnbm9yZSBtb3VzZSBtb2RpZmllciBrZXlzXG5cdCAgICAgICAgICAodmFsdWUgPT09ICdtb3VzZScgJiYgaWdub3JlTWFwLmluZGV4T2YoZXZlbnRLZXkpID09PSAtMSkgfHxcblxuXHQgICAgICAgICAgLy8gZG9uJ3Qgc3dpdGNoIGlmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgYSBmb3JtIGlucHV0XG5cdCAgICAgICAgICAodmFsdWUgPT09ICdrZXlib2FyZCcgJiYgYWN0aXZlSW5wdXQpXG5cdCAgICAgICAgKSB7XG5cblx0ICAgICAgICAgIC8vIHNldCB0aGUgY3VycmVudCBhbmQgY2F0Y2gtYWxsIHZhcmlhYmxlXG5cdCAgICAgICAgICBjdXJyZW50SW5wdXQgPSBjdXJyZW50SW50ZW50ID0gdmFsdWU7XG5cblx0ICAgICAgICAgIHNldElucHV0KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIHVwZGF0ZXMgdGhlIGRvYyBhbmQgYGlucHV0VHlwZXNgIGFycmF5IHdpdGggbmV3IGlucHV0XG5cdCAgdmFyIHNldElucHV0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICBkb2NFbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0aW5wdXQnLCBjdXJyZW50SW5wdXQpO1xuXHQgICAgZG9jRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGludGVudCcsIGN1cnJlbnRJbnB1dCk7XG5cblx0ICAgIGlmIChpbnB1dFR5cGVzLmluZGV4T2YoY3VycmVudElucHV0KSA9PT0gLTEpIHtcblx0ICAgICAgaW5wdXRUeXBlcy5wdXNoKGN1cnJlbnRJbnB1dCk7XG5cdCAgICAgIGRvY0VsZW0uY2xhc3NOYW1lICs9ICcgd2hhdGlucHV0LXR5cGVzLScgKyBjdXJyZW50SW5wdXQ7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIHVwZGF0ZXMgaW5wdXQgaW50ZW50IGZvciBgbW91c2Vtb3ZlYCBhbmQgYHBvaW50ZXJtb3ZlYFxuXHQgIHZhciBzZXRJbnRlbnQgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdCAgICAvLyBvbmx5IGV4ZWN1dGUgaWYgdGhlIHRvdWNoIGJ1ZmZlciB0aW1lciBpc24ndCBydW5uaW5nXG5cdCAgICBpZiAoIWlzQnVmZmVyaW5nKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGlucHV0TWFwW2V2ZW50LnR5cGVdO1xuXHQgICAgICBpZiAodmFsdWUgPT09ICdwb2ludGVyJykgdmFsdWUgPSBwb2ludGVyVHlwZShldmVudCk7XG5cblx0ICAgICAgaWYgKGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlKSB7XG5cdCAgICAgICAgY3VycmVudEludGVudCA9IHZhbHVlO1xuXG5cdCAgICAgICAgZG9jRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGludGVudCcsIGN1cnJlbnRJbnRlbnQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIGJ1ZmZlcnMgdG91Y2ggZXZlbnRzIGJlY2F1c2UgdGhleSBmcmVxdWVudGx5IGFsc28gZmlyZSBtb3VzZSBldmVudHNcblx0ICB2YXIgdG91Y2hCdWZmZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdCAgICAvLyBjbGVhciB0aGUgdGltZXIgaWYgaXQgaGFwcGVucyB0byBiZSBydW5uaW5nXG5cdCAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIpO1xuXG5cdCAgICAvLyBzZXQgdGhlIGN1cnJlbnQgaW5wdXRcblx0ICAgIHVwZGF0ZUlucHV0KGV2ZW50KTtcblxuXHQgICAgLy8gc2V0IHRoZSBpc0J1ZmZlcmluZyB0byBgdHJ1ZWBcblx0ICAgIGlzQnVmZmVyaW5nID0gdHJ1ZTtcblxuXHQgICAgLy8gcnVuIHRoZSB0aW1lclxuXHQgICAgdG91Y2hUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG5cdCAgICAgIC8vIGlmIHRoZSB0aW1lciBydW5zIG91dCwgc2V0IGlzQnVmZmVyaW5nIGJhY2sgdG8gYGZhbHNlYFxuXHQgICAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXHQgICAgfSwgMjAwKTtcblx0ICB9O1xuXG5cblx0ICAvKlxuXHQgICAgLS0tLS0tLS0tLS0tLS0tXG5cdCAgICBVdGlsaXRpZXNcblx0ICAgIC0tLS0tLS0tLS0tLS0tLVxuXHQgICovXG5cblx0ICB2YXIgcG9pbnRlclR5cGUgPSBmdW5jdGlvbihldmVudCkge1xuXHQgICBpZiAodHlwZW9mIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICByZXR1cm4gcG9pbnRlck1hcFtldmVudC5wb2ludGVyVHlwZV07XG5cdCAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAoZXZlbnQucG9pbnRlclR5cGUgPT09ICdwZW4nKSA/ICd0b3VjaCcgOiBldmVudC5wb2ludGVyVHlwZTsgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcblx0ICAgfVxuXHQgIH07XG5cblx0ICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2Vcblx0ICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG5cdCAgdmFyIGRldGVjdFdoZWVsID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gJ29ud2hlZWwnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpID9cblx0ICAgICAgJ3doZWVsJyA6IC8vIE1vZGVybiBicm93c2VycyBzdXBwb3J0IFwid2hlZWxcIlxuXG5cdCAgICAgIGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID9cblx0ICAgICAgICAnbW91c2V3aGVlbCcgOiAvLyBXZWJraXQgYW5kIElFIHN1cHBvcnQgYXQgbGVhc3QgXCJtb3VzZXdoZWVsXCJcblx0ICAgICAgICAnRE9NTW91c2VTY3JvbGwnOyAvLyBsZXQncyBhc3N1bWUgdGhhdCByZW1haW5pbmcgYnJvd3NlcnMgYXJlIG9sZGVyIEZpcmVmb3hcblx0ICB9O1xuXG5cblx0ICAvKlxuXHQgICAgLS0tLS0tLS0tLS0tLS0tXG5cdCAgICBJbml0XG5cblx0ICAgIGRvbid0IHN0YXJ0IHNjcmlwdCB1bmxlc3MgYnJvd3NlciBjdXRzIHRoZSBtdXN0YXJkXG5cdCAgICAoYWxzbyBwYXNzZXMgaWYgcG9seWZpbGxzIGFyZSB1c2VkKVxuXHQgICAgLS0tLS0tLS0tLS0tLS0tXG5cdCAgKi9cblxuXHQgIGlmIChcblx0ICAgICdhZGRFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cgJiZcblx0ICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mXG5cdCAgKSB7XG5cdCAgICBzZXRVcCgpO1xuXHQgIH1cblxuXG5cdCAgLypcblx0ICAgIC0tLS0tLS0tLS0tLS0tLVxuXHQgICAgQVBJXG5cdCAgICAtLS0tLS0tLS0tLS0tLS1cblx0ICAqL1xuXG5cdCAgcmV0dXJuIHtcblxuXHQgICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcblx0ICAgIC8vIG9wdDogJ2xvb3NlJ3wnc3RyaWN0J1xuXHQgICAgLy8gJ3N0cmljdCcgKGRlZmF1bHQpOiByZXR1cm5zIHRoZSBzYW1lIHZhbHVlIGFzIHRoZSBgZGF0YS13aGF0aW5wdXRgIGF0dHJpYnV0ZVxuXHQgICAgLy8gJ2xvb3NlJzogaW5jbHVkZXMgYGRhdGEtd2hhdGludGVudGAgdmFsdWUgaWYgaXQncyBtb3JlIGN1cnJlbnQgdGhhbiBgZGF0YS13aGF0aW5wdXRgXG5cdCAgICBhc2s6IGZ1bmN0aW9uKG9wdCkgeyByZXR1cm4gKG9wdCA9PT0gJ2xvb3NlJykgPyBjdXJyZW50SW50ZW50IDogY3VycmVudElucHV0OyB9LFxuXG5cdCAgICAvLyByZXR1cm5zIGFycmF5OiBhbGwgdGhlIGRldGVjdGVkIGlucHV0IHR5cGVzXG5cdCAgICB0eXBlczogZnVuY3Rpb24oKSB7IHJldHVybiBpbnB1dFR5cGVzOyB9XG5cblx0ICB9O1xuXG5cdH0oKSk7XG5cblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuOyIsIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMy4xJztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZiAoJ3RydWUnID09PSBzdHIpIHJldHVybiB0cnVlO1xuICBlbHNlIGlmICgnZmFsc2UnID09PSBzdHIpIHJldHVybiBmYWxzZTtcbiAgZWxzZSBpZiAoIWlzTmFOKHN0ciAqIDEpKSByZXR1cm4gcGFyc2VGbG9hdChzdHIpO1xuICByZXR1cm4gc3RyO1xufVxuLy8gQ29udmVydCBQYXNjYWxDYXNlIHRvIGtlYmFiLWNhc2Vcbi8vIFRoYW5rIHlvdTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODk1NTU4MFxuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG59XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuRm91bmRhdGlvbi5Cb3ggPSB7XG4gIEltTm90VG91Y2hpbmdZb3U6IEltTm90VG91Y2hpbmdZb3UsXG4gIEdldERpbWVuc2lvbnM6IEdldERpbWVuc2lvbnMsXG4gIEdldE9mZnNldHM6IEdldE9mZnNldHNcbn1cblxuLyoqXG4gKiBDb21wYXJlcyB0aGUgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50IHRvIGEgY29udGFpbmVyIGFuZCBkZXRlcm1pbmVzIGNvbGxpc2lvbiBldmVudHMgd2l0aCBjb250YWluZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB0ZXN0IGZvciBjb2xsaXNpb25zLlxuICogQHBhcmFtIHtqUXVlcnl9IHBhcmVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIGJvdW5kaW5nIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbHJPbmx5IC0gc2V0IHRvIHRydWUgdG8gY2hlY2sgbGVmdCBhbmQgcmlnaHQgdmFsdWVzIG9ubHkuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRiT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIHRvcCBhbmQgYm90dG9tIHZhbHVlcyBvbmx5LlxuICogQGRlZmF1bHQgaWYgbm8gcGFyZW50IG9iamVjdCBwYXNzZWQsIGRldGVjdHMgY29sbGlzaW9ucyB3aXRoIGB3aW5kb3dgLlxuICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiBjb2xsaXNpb24gZnJlZSwgZmFsc2UgaWYgYSBjb2xsaXNpb24gaW4gYW55IGRpcmVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gSW1Ob3RUb3VjaGluZ1lvdShlbGVtZW50LCBwYXJlbnQsIGxyT25seSwgdGJPbmx5KSB7XG4gIHZhciBlbGVEaW1zID0gR2V0RGltZW5zaW9ucyhlbGVtZW50KSxcbiAgICAgIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodDtcblxuICBpZiAocGFyZW50KSB7XG4gICAgdmFyIHBhckRpbXMgPSBHZXREaW1lbnNpb25zKHBhcmVudCk7XG5cbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gcGFyRGltcy5oZWlnaHQgKyBwYXJEaW1zLm9mZnNldC50b3ApO1xuICAgIHRvcCAgICA9IChlbGVEaW1zLm9mZnNldC50b3AgPj0gcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgICByaWdodCAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGggPD0gcGFyRGltcy53aWR0aCArIHBhckRpbXMub2Zmc2V0LmxlZnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIGJvdHRvbSA9IChlbGVEaW1zLm9mZnNldC50b3AgKyBlbGVEaW1zLmhlaWdodCA8PSBlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0ICsgZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3ApO1xuICAgIHRvcCAgICA9IChlbGVEaW1zLm9mZnNldC50b3AgPj0gZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3ApO1xuICAgIGxlZnQgICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IGVsZURpbXMud2luZG93RGltcy53aWR0aCk7XG4gIH1cblxuICB2YXIgYWxsRGlycyA9IFtib3R0b20sIHRvcCwgbGVmdCwgcmlnaHRdO1xuXG4gIGlmIChsck9ubHkpIHtcbiAgICByZXR1cm4gbGVmdCA9PT0gcmlnaHQgPT09IHRydWU7XG4gIH1cblxuICBpZiAodGJPbmx5KSB7XG4gICAgcmV0dXJuIHRvcCA9PT0gYm90dG9tID09PSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGFsbERpcnMuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xufTtcblxuLyoqXG4gKiBVc2VzIG5hdGl2ZSBtZXRob2RzIHRvIHJldHVybiBhbiBvYmplY3Qgb2YgZGltZW5zaW9uIHZhbHVlcy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtqUXVlcnkgfHwgSFRNTH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3Qgb3IgRE9NIGVsZW1lbnQgZm9yIHdoaWNoIHRvIGdldCB0aGUgZGltZW5zaW9ucy4gQ2FuIGJlIGFueSBlbGVtZW50IG90aGVyIHRoYXQgZG9jdW1lbnQgb3Igd2luZG93LlxuICogQHJldHVybnMge09iamVjdH0gLSBuZXN0ZWQgb2JqZWN0IG9mIGludGVnZXIgcGl4ZWwgdmFsdWVzXG4gKiBUT0RPIC0gaWYgZWxlbWVudCBpcyB3aW5kb3csIHJldHVybiBvbmx5IHRob3NlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gR2V0RGltZW5zaW9ucyhlbGVtLCB0ZXN0KXtcbiAgZWxlbSA9IGVsZW0ubGVuZ3RoID8gZWxlbVswXSA6IGVsZW07XG5cbiAgaWYgKGVsZW0gPT09IHdpbmRvdyB8fCBlbGVtID09PSBkb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkknbSBzb3JyeSwgRGF2ZS4gSSdtIGFmcmFpZCBJIGNhbid0IGRvIHRoYXQuXCIpO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgcGFyUmVjdCA9IGVsZW0ucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luWSA9IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgIHdpblggPSB3aW5kb3cucGFnZVhPZmZzZXQ7XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIG9mZnNldDoge1xuICAgICAgdG9wOiByZWN0LnRvcCArIHdpblksXG4gICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5YXG4gICAgfSxcbiAgICBwYXJlbnREaW1zOiB7XG4gICAgICB3aWR0aDogcGFyUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogcGFyUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiBwYXJSZWN0LnRvcCArIHdpblksXG4gICAgICAgIGxlZnQ6IHBhclJlY3QubGVmdCArIHdpblhcbiAgICAgIH1cbiAgICB9LFxuICAgIHdpbmRvd0RpbXM6IHtcbiAgICAgIHdpZHRoOiB3aW5SZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB3aW5SZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHdpblksXG4gICAgICAgIGxlZnQ6IHdpblhcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0b3AgYW5kIGxlZnQgaW50ZWdlciBwaXhlbCB2YWx1ZXMgZm9yIGR5bmFtaWNhbGx5IHJlbmRlcmVkIGVsZW1lbnRzLFxuICogc3VjaCBhczogVG9vbHRpcCwgUmV2ZWFsLCBhbmQgRHJvcGRvd25cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCBiZWluZyBwb3NpdGlvbmVkLlxuICogQHBhcmFtIHtqUXVlcnl9IGFuY2hvciAtIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBlbGVtZW50J3MgYW5jaG9yIHBvaW50LlxuICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gYSBzdHJpbmcgcmVsYXRpbmcgdG8gdGhlIGRlc2lyZWQgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQsIHJlbGF0aXZlIHRvIGl0J3MgYW5jaG9yXG4gKiBAcGFyYW0ge051bWJlcn0gdk9mZnNldCAtIGludGVnZXIgcGl4ZWwgdmFsdWUgb2YgZGVzaXJlZCB2ZXJ0aWNhbCBzZXBhcmF0aW9uIGJldHdlZW4gYW5jaG9yIGFuZCBlbGVtZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IGhPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgaG9yaXpvbnRhbCBzZXBhcmF0aW9uIGJldHdlZW4gYW5jaG9yIGFuZCBlbGVtZW50LlxuICogQHBhcmFtIHtCb29sZWFufSBpc092ZXJmbG93IC0gaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQsIHNldHMgdG8gdHJ1ZSB0byBkZWZhdWx0IHRoZSBlbGVtZW50IHRvIGZ1bGwgd2lkdGggLSBhbnkgZGVzaXJlZCBvZmZzZXQuXG4gKiBUT0RPIGFsdGVyL3Jld3JpdGUgdG8gd29yayB3aXRoIGBlbWAgdmFsdWVzIGFzIHdlbGwvaW5zdGVhZCBvZiBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gR2V0T2Zmc2V0cyhlbGVtZW50LCBhbmNob3IsIHBvc2l0aW9uLCB2T2Zmc2V0LCBoT2Zmc2V0LCBpc092ZXJmbG93KSB7XG4gIHZhciAkZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICAkYW5jaG9yRGltcyA9IGFuY2hvciA/IEdldERpbWVuc2lvbnMoYW5jaG9yKSA6IG51bGw7XG5cbiAgc3dpdGNoIChwb3NpdGlvbikge1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoRm91bmRhdGlvbi5ydGwoKSA/ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCA6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wIC0gKCRlbGVEaW1zLmhlaWdodCArIHZPZmZzZXQpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIHRvcCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wIC0gKCRlbGVEaW1zLmhlaWdodCArIHZPZmZzZXQpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IGlzT3ZlcmZsb3cgPyBoT2Zmc2V0IDogKCgkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICgkYW5jaG9yRGltcy53aWR0aCAvIDIpKSAtICgkZWxlRGltcy53aWR0aCAvIDIpKSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0ICsgdk9mZnNldFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGxlZnQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAoJGVsZURpbXMud2lkdGggKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAoJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICgkYW5jaG9yRGltcy5oZWlnaHQgLyAyKSkgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMilcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciByaWdodCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCArIDEsXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQgKyAoJGVsZURpbXMud2luZG93RGltcy53aWR0aCAvIDIpKSAtICgkZWxlRGltcy53aWR0aCAvIDIpLFxuICAgICAgICB0b3A6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyAoJGVsZURpbXMud2luZG93RGltcy5oZWlnaHQgLyAyKSkgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMilcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JldmVhbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICRlbGVEaW1zLndpZHRoKSAvIDIsXG4gICAgICAgIHRvcDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgdk9mZnNldFxuICAgICAgfVxuICAgIGNhc2UgJ3JldmVhbCBmdWxsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsZWZ0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0ICsgdk9mZnNldFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCAtICRlbGVEaW1zLndpZHRoLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IChGb3VuZGF0aW9uLnJ0bCgpID8gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAkZWxlRGltcy53aWR0aCArICRhbmNob3JEaW1zLndpZHRoIDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0ICsgdk9mZnNldFxuICAgICAgfVxuICB9XG59XG5cbn0oalF1ZXJ5KTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyB1dGlsIHdhcyBjcmVhdGVkIGJ5IE1hcml1cyBPbGJlcnR6ICpcbiAqIFBsZWFzZSB0aGFuayBNYXJpdXMgb24gR2l0SHViIC9vd2xiZXJ0eiAqXG4gKiBvciB0aGUgd2ViIGh0dHA6Ly93d3cubWFyaXVzb2xiZXJ0ei5kZS8gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3Qga2V5Q29kZXMgPSB7XG4gIDk6ICdUQUInLFxuICAxMzogJ0VOVEVSJyxcbiAgMjc6ICdFU0NBUEUnLFxuICAzMjogJ1NQQUNFJyxcbiAgMzc6ICdBUlJPV19MRUZUJyxcbiAgMzg6ICdBUlJPV19VUCcsXG4gIDM5OiAnQVJST1dfUklHSFQnLFxuICA0MDogJ0FSUk9XX0RPV04nXG59XG5cbnZhciBjb21tYW5kcyA9IHt9XG5cbnZhciBLZXlib2FyZCA9IHtcbiAga2V5czogZ2V0S2V5Q29kZXMoa2V5Q29kZXMpLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIChrZXlib2FyZCkgZXZlbnQgYW5kIHJldHVybnMgYSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIGl0cyBrZXlcbiAgICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJuIFN0cmluZyBrZXkgLSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBrZXkgcHJlc3NlZFxuICAgKi9cbiAgcGFyc2VLZXkoZXZlbnQpIHtcbiAgICB2YXIga2V5ID0ga2V5Q29kZXNbZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZV0gfHwgU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkudG9VcHBlckNhc2UoKTtcblxuICAgIC8vIFJlbW92ZSB1bi1wcmludGFibGUgY2hhcmFjdGVycywgZS5nLiBmb3IgYGZyb21DaGFyQ29kZWAgY2FsbHMgZm9yIENUUkwgb25seSBldmVudHNcbiAgICBrZXkgPSBrZXkucmVwbGFjZSgvXFxXKy8sICcnKTtcblxuICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gYFNISUZUXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9IGBDVFJMXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gYEFMVF8ke2tleX1gO1xuXG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHVuZGVyc2NvcmUsIGluIGNhc2Ugb25seSBtb2RpZmllcnMgd2VyZSB1c2VkIChlLmcuIG9ubHkgYENUUkxfQUxUYClcbiAgICBrZXkgPSBrZXkucmVwbGFjZSgvXyQvLCAnJyk7XG5cbiAgICByZXR1cm4ga2V5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBnaXZlbiAoa2V5Ym9hcmQpIGV2ZW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQncyBuYW1lLCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHBhcmFtIHtPYmplY3RzfSBmdW5jdGlvbnMgLSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0aGF0IGFyZSB0byBiZSBleGVjdXRlZFxuICAgKi9cbiAgaGFuZGxlS2V5KGV2ZW50LCBjb21wb25lbnQsIGZ1bmN0aW9ucykge1xuICAgIHZhciBjb21tYW5kTGlzdCA9IGNvbW1hbmRzW2NvbXBvbmVudF0sXG4gICAgICBrZXlDb2RlID0gdGhpcy5wYXJzZUtleShldmVudCksXG4gICAgICBjbWRzLFxuICAgICAgY29tbWFuZCxcbiAgICAgIGZuO1xuXG4gICAgaWYgKCFjb21tYW5kTGlzdCkgcmV0dXJuIGNvbnNvbGUud2FybignQ29tcG9uZW50IG5vdCBkZWZpbmVkIScpO1xuXG4gICAgaWYgKHR5cGVvZiBjb21tYW5kTGlzdC5sdHIgPT09ICd1bmRlZmluZWQnKSB7IC8vIHRoaXMgY29tcG9uZW50IGRvZXMgbm90IGRpZmZlcmVudGlhdGUgYmV0d2VlbiBsdHIgYW5kIHJ0bFxuICAgICAgICBjbWRzID0gY29tbWFuZExpc3Q7IC8vIHVzZSBwbGFpbiBsaXN0XG4gICAgfSBlbHNlIHsgLy8gbWVyZ2UgbHRyIGFuZCBydGw6IGlmIGRvY3VtZW50IGlzIHJ0bCwgcnRsIG92ZXJ3cml0ZXMgbHRyIGFuZCB2aWNlIHZlcnNhXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSBjbWRzID0gJC5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtcblxuICAgICAgICBlbHNlIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiAgaWYgZXhpc3RzXG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5hcHBseSgpO1xuICAgICAgaWYgKGZ1bmN0aW9ucy5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMuaGFuZGxlZCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uIHdoZW4gZXZlbnQgd2FzIGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMuaGFuZGxlZChyZXR1cm5WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmdW5jdGlvbnMudW5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMudW5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgbm90IGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgZ2l2ZW4gYCRlbGVtZW50YFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHNlYXJjaCB3aXRoaW5cbiAgICogQHJldHVybiB7alF1ZXJ5fSAkZm9jdXNhYmxlIC0gYWxsIGZvY3VzYWJsZSBlbGVtZW50cyB3aXRoaW4gYCRlbGVtZW50YFxuICAgKi9cbiAgZmluZEZvY3VzYWJsZSgkZWxlbWVudCkge1xuICAgIGlmKCEkZWxlbWVudCkge3JldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiAkZWxlbWVudC5maW5kKCdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEkKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8ICQodGhpcykuYXR0cigndGFiaW5kZXgnKSA8IDApIHsgcmV0dXJuIGZhbHNlOyB9IC8vb25seSBoYXZlIHZpc2libGUgZWxlbWVudHMgYW5kIHRob3NlIHRoYXQgaGF2ZSBhIHRhYmluZGV4IGdyZWF0ZXIgb3IgZXF1YWwgMFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3Rlcihjb21wb25lbnROYW1lLCBjbWRzKSB7XG4gICAgY29tbWFuZHNbY29tcG9uZW50TmFtZV0gPSBjbWRzO1xuICB9LCAgXG5cbiAgLyoqXG4gICAqIFRyYXBzIHRoZSBmb2N1cyBpbiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtICB7alF1ZXJ5fSAkZWxlbWVudCAgalF1ZXJ5IG9iamVjdCB0byB0cmFwIHRoZSBmb3VjcyBpbnRvLlxuICAgKi9cbiAgdHJhcEZvY3VzKCRlbGVtZW50KSB7XG4gICAgdmFyICRmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUoJGVsZW1lbnQpLFxuICAgICAgICAkZmlyc3RGb2N1c2FibGUgPSAkZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICAkbGFzdEZvY3VzYWJsZSA9ICRmb2N1c2FibGUuZXEoLTEpO1xuXG4gICAgJGVsZW1lbnQub24oJ2tleWRvd24uemYudHJhcGZvY3VzJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09ICRsYXN0Rm9jdXNhYmxlWzBdICYmIEZvdW5kYXRpb24uS2V5Ym9hcmQucGFyc2VLZXkoZXZlbnQpID09PSAnVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkZmlyc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGZpcnN0Rm9jdXNhYmxlWzBdICYmIEZvdW5kYXRpb24uS2V5Ym9hcmQucGFyc2VLZXkoZXZlbnQpID09PSAnU0hJRlRfVEFCJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkbGFzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAvKipcbiAgICogUmVsZWFzZXMgdGhlIHRyYXBwZWQgZm9jdXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtICB7alF1ZXJ5fSAkZWxlbWVudCAgalF1ZXJ5IG9iamVjdCB0byByZWxlYXNlIHRoZSBmb2N1cyBmb3IuXG4gICAqL1xuICByZWxlYXNlRm9jdXMoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudC5vZmYoJ2tleWRvd24uemYudHJhcGZvY3VzJyk7XG4gIH1cbn1cblxuLypcbiAqIENvbnN0YW50cyBmb3IgZWFzaWVyIGNvbXBhcmluZy5cbiAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICovXG5mdW5jdGlvbiBnZXRLZXlDb2RlcyhrY3MpIHtcbiAgdmFyIGsgPSB7fTtcbiAgZm9yICh2YXIga2MgaW4ga2NzKSBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgcmV0dXJuIGs7XG59XG5cbkZvdW5kYXRpb24uS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG5jb25zdCBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnIDogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlIDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICBwb3J0cmFpdCA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmEgOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAkKCcuZm91bmRhdGlvbi1tcScpLmNzcygnZm9udC1mYW1pbHknKTtcbiAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgbmFtZWRRdWVyaWVzID0gcGFyc2VTdHlsZVRvT2JqZWN0KGV4dHJhY3RlZFN0eWxlcyk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZWRRdWVyaWVzKSB7XG4gICAgICBpZihuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiBgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7bmFtZWRRdWVyaWVzW2tleV19KWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKTtcblxuICAgIHRoaXMuX3dhdGNoZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0KHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gbWF0Y2hlcyB0byBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2ssIGVpdGhlciAnc21hbGwgb25seScgb3IgJ3NtYWxsJy4gT21pdHRpbmcgJ29ubHknIGZhbGxzIGJhY2sgdG8gdXNpbmcgYXRMZWFzdCgpIG1ldGhvZC5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0IGRvZXMgbm90LlxuICAgKi9cbiAgaXMoc2l6ZSkge1xuICAgIHNpemUgPSBzaXplLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgIGlmKHNpemUubGVuZ3RoID4gMSAmJiBzaXplWzFdID09PSAnb25seScpIHtcbiAgICAgIGlmKHNpemVbMF0gPT09IHRoaXMuX2dldEN1cnJlbnRTaXplKCkpIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5hdExlYXN0KHNpemVbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgZ2V0KHNpemUpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucXVlcmllcykge1xuICAgICAgaWYodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcbiAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgX2dldEN1cnJlbnRTaXplKCkge1xuICAgIHZhciBtYXRjaGVkO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcblxuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5LnZhbHVlKS5tYXRjaGVzKSB7XG4gICAgICAgIG1hdGNoZWQgPSBxdWVyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hdGNoZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dhdGNoZXIoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYubWVkaWFxdWVyeScsICgpID0+IHtcbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSwgY3VycmVudFNpemUgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChuZXdTaXplICE9PSBjdXJyZW50U2l6ZSkge1xuICAgICAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnlcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV3U2l6ZTtcblxuICAgICAgICAvLyBCcm9hZGNhc3QgdGhlIG1lZGlhIHF1ZXJ5IGNoYW5nZSBvbiB0aGUgd2luZG93XG4gICAgICAgICQod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeTtcblxuLy8gbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLlxuLy8gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gRHVhbCBNSVQvQlNEIGxpY2Vuc2VcbndpbmRvdy5tYXRjaE1lZGlhIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBtYXRjaE1lZGl1bSBhcGkgc3VjaCBhcyBJRSA5IGFuZCB3ZWJraXRcbiAgdmFyIHN0eWxlTWVkaWEgPSAod2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhKTtcblxuICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gIGlmICghc3R5bGVNZWRpYSkge1xuICAgIHZhciBzdHlsZSAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICBpbmZvICAgICAgICA9IG51bGw7XG5cbiAgICBzdHlsZS50eXBlICA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgICAgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0ICYmIHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgaW5mbyA9ICgnZ2V0Q29tcHV0ZWRTdHlsZScgaW4gd2luZG93KSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzdHlsZSwgbnVsbCkgfHwgc3R5bGUuY3VycmVudFN0eWxlO1xuXG4gICAgc3R5bGVNZWRpYSA9IHtcbiAgICAgIG1hdGNoTWVkaXVtKG1lZGlhKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gYEBtZWRpYSAke21lZGlhfXsgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9YDtcblxuICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hdGNoZXM6IHN0eWxlTWVkaWEubWF0Y2hNZWRpdW0obWVkaWEgfHwgJ2FsbCcpLFxuICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgfTtcbiAgfVxufSgpKTtcblxuLy8gVGhhbmsgeW91OiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZ1xuZnVuY3Rpb24gcGFyc2VTdHlsZVRvT2JqZWN0KHN0cikge1xuICB2YXIgc3R5bGVPYmplY3QgPSB7fTtcblxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHIgPSBzdHIudHJpbSgpLnNsaWNlKDEsIC0xKTsgLy8gYnJvd3NlcnMgcmUtcXVvdGUgc3RyaW5nIHN0eWxlIHZhbHVlc1xuXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICB9XG5cbiAgc3R5bGVPYmplY3QgPSBzdHIuc3BsaXQoJyYnKS5yZWR1Y2UoZnVuY3Rpb24ocmV0LCBwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IHBhcnRzWzBdO1xuICAgIHZhciB2YWwgPSBwYXJ0c1sxXTtcbiAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTtcblxuICAgIC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG4gICAgLy8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG4gICAgaWYgKCFyZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldFtrZXldKSkge1xuICAgICAgcmV0W2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRba2V5XSA9IFtyZXRba2V5XSwgdmFsXTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSwge30pO1xuXG4gIHJldHVybiBzdHlsZU9iamVjdDtcbn1cblxuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE1vdGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubW90aW9uXG4gKi9cblxuY29uc3QgaW5pdENsYXNzZXMgICA9IFsnbXVpLWVudGVyJywgJ211aS1sZWF2ZSddO1xuY29uc3QgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbmNvbnN0IE1vdGlvbiA9IHtcbiAgYW5pbWF0ZUluOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZSh0cnVlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfSxcblxuICBhbmltYXRlT3V0OiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZShmYWxzZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW92ZShkdXJhdGlvbiwgZWxlbSwgZm4pe1xuICB2YXIgYW5pbSwgcHJvZywgc3RhcnQgPSBudWxsO1xuICAvLyBjb25zb2xlLmxvZygnY2FsbGVkJyk7XG5cbiAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG4gICAgZWxlbS50cmlnZ2VyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKS50cmlnZ2VySGFuZGxlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZSh0cyl7XG4gICAgaWYoIXN0YXJ0KSBzdGFydCA9IHRzO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgaXRlbXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkaXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuXG4gICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW1cbiAgICAgICAgICAuYWRkQ2xhc3MoaGFzU3ViQ2xhc3MpXG4gICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAkaXRlbS5jaGlsZHJlbignYTpmaXJzdCcpLnRleHQoKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIE5vdGU6ICBEcmlsbGRvd25zIGJlaGF2ZSBkaWZmZXJlbnRseSBpbiBob3cgdGhleSBoaWRlLCBhbmQgc28gbmVlZFxuICAgICAgICAgIC8vIGFkZGl0aW9uYWwgYXR0cmlidXRlcy4gIFdlIHNob3VsZCBsb29rIGlmIHRoaXMgcG9zc2libHkgb3Zlci1nZW5lcmFsaXplZFxuICAgICAgICAgIC8vIHV0aWxpdHkgKE5lc3QpIGlzIGFwcHJvcHJpYXRlIHdoZW4gd2UgcmV3b3JrIG1lbnVzIGluIDYuNFxuICAgICAgICAgIGlmKHR5cGUgPT09ICdkcmlsbGRvd24nKSB7XG4gICAgICAgICAgICAkaXRlbS5hdHRyKHsnYXJpYS1leHBhbmRlZCc6IGZhbHNlfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICRzdWJcbiAgICAgICAgICAuYWRkQ2xhc3MoYHN1Ym1lbnUgJHtzdWJNZW51Q2xhc3N9YClcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnZGF0YS1zdWJtZW51JzogJycsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgICBpZih0eXBlID09PSAnZHJpbGxkb3duJykge1xuICAgICAgICAgICRzdWIuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtLmFkZENsYXNzKGBpcy1zdWJtZW51LWl0ZW0gJHtzdWJJdGVtQ2xhc3N9YCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgQnVybihtZW51LCB0eXBlKSB7XG4gICAgdmFyIC8vaXRlbXMgPSBtZW51LmZpbmQoJ2xpJyksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnVgLFxuICAgICAgICBzdWJJdGVtQ2xhc3MgPSBgJHtzdWJNZW51Q2xhc3N9LWl0ZW1gLFxuICAgICAgICBoYXNTdWJDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnUtcGFyZW50YDtcblxuICAgIG1lbnVcbiAgICAgIC5maW5kKCc+bGksIC5tZW51LCAubWVudSA+IGxpJylcbiAgICAgIC5yZW1vdmVDbGFzcyhgJHtzdWJNZW51Q2xhc3N9ICR7c3ViSXRlbUNsYXNzfSAke2hhc1N1YkNsYXNzfSBpcy1zdWJtZW51LWl0ZW0gc3VibWVudSBpcy1hY3RpdmVgKVxuICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpLmNzcygnZGlzcGxheScsICcnKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKCAgICAgIG1lbnUuZmluZCgnLicgKyBzdWJNZW51Q2xhc3MgKyAnLCAuJyArIHN1Ykl0ZW1DbGFzcyArICcsIC5oYXMtc3VibWVudSwgLmlzLXN1Ym1lbnUtaXRlbSwgLnN1Ym1lbnUsIFtkYXRhLXN1Ym1lbnVdJylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUNsYXNzKHN1Yk1lbnVDbGFzcyArICcgJyArIHN1Ykl0ZW1DbGFzcyArICcgaGFzLXN1Ym1lbnUgaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUnKVxuICAgIC8vICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykpO1xuICAgIC8vIGl0ZW1zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAvLyAgIHZhciAkaXRlbSA9ICQodGhpcyksXG4gICAgLy8gICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuICAgIC8vICAgaWYoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCl7XG4gICAgLy8gICAgICRpdGVtLnJlbW92ZUNsYXNzKCdpcy1zdWJtZW51LWl0ZW0gJyArIHN1Ykl0ZW1DbGFzcyk7XG4gICAgLy8gICB9XG4gICAgLy8gICBpZigkc3ViLmxlbmd0aCl7XG4gICAgLy8gICAgICRpdGVtLnJlbW92ZUNsYXNzKCdoYXMtc3VibWVudScpO1xuICAgIC8vICAgICAkc3ViLnJlbW92ZUNsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpO1xuICAgIC8vICAgfVxuICAgIC8vIH0pO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTmVzdCA9IE5lc3Q7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuZnVuY3Rpb24gVGltZXIoZWxlbSwgb3B0aW9ucywgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgIGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiwvL29wdGlvbnMgaXMgYW4gb2JqZWN0IGZvciBlYXNpbHkgYWRkaW5nIGZlYXR1cmVzIGxhdGVyLlxuICAgICAgbmFtZVNwYWNlID0gT2JqZWN0LmtleXMoZWxlbS5kYXRhKCkpWzBdIHx8ICd0aW1lcicsXG4gICAgICByZW1haW4gPSAtMSxcbiAgICAgIHN0YXJ0LFxuICAgICAgdGltZXI7XG5cbiAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuXG4gIHRoaXMucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIHJlbWFpbiA9IC0xO1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAvLyBpZighZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiA8PSAwID8gZHVyYXRpb24gOiByZW1haW47XG4gICAgZWxlbS5kYXRhKCdwYXVzZWQnLCBmYWxzZSk7XG4gICAgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgaWYob3B0aW9ucy5pbmZpbml0ZSl7XG4gICAgICAgIF90aGlzLnJlc3RhcnQoKTsvL3JlcnVuIHRoZSB0aW1lci5cbiAgICAgIH1cbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH0sIHJlbWFpbik7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnN0YXJ0LnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIC8vaWYoZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgdHJ1ZSk7XG4gICAgdmFyIGVuZCA9IERhdGUubm93KCk7XG4gICAgcmVtYWluID0gcmVtYWluIC0gKGVuZCAtIHN0YXJ0KTtcbiAgICBlbGVtLnRyaWdnZXIoYHRpbWVycGF1c2VkLnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG59XG5cbi8qKlxuICogUnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gaW1hZ2VzIGFyZSBmdWxseSBsb2FkZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VzIC0gSW1hZ2UocykgdG8gY2hlY2sgaWYgbG9hZGVkLlxuICogQHBhcmFtIHtGdW5jfSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiBpbWFnZSBpcyBmdWxseSBsb2FkZWQuXG4gKi9cbmZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkKGltYWdlcywgY2FsbGJhY2spe1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICB1bmxvYWRlZCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGltYWdlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIC8vIENoZWNrIGlmIGltYWdlIGlzIGxvYWRlZFxuICAgIGlmICh0aGlzLmNvbXBsZXRlIHx8ICh0aGlzLnJlYWR5U3RhdGUgPT09IDQpIHx8ICh0aGlzLnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpKSB7XG4gICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgIH1cbiAgICAvLyBGb3JjZSBsb2FkIHRoZSBpbWFnZVxuICAgIGVsc2Uge1xuICAgICAgLy8gZml4IGZvciBJRS4gU2VlIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvanF1ZXJ5L2ZpeGluZy1sb2FkLWluLWllLWZvci1jYWNoZWQtaW1hZ2VzL1xuICAgICAgdmFyIHNyYyA9ICQodGhpcykuYXR0cignc3JjJyk7XG4gICAgICAkKHRoaXMpLmF0dHIoJ3NyYycsIHNyYyArIChzcmMuaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPycpICsgKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSk7XG4gICAgICAkKHRoaXMpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzaW5nbGVJbWFnZUxvYWRlZCgpIHtcbiAgICB1bmxvYWRlZC0tO1xuICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbn1cblxuRm91bmRhdGlvbi5UaW1lciA9IFRpbWVyO1xuRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCA9IG9uSW1hZ2VzTG9hZGVkO1xuXG59KGpRdWVyeSk7XG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqV29yayBpbnNwaXJlZCBieSBtdWx0aXBsZSBqcXVlcnkgc3dpcGUgcGx1Z2lucyoqXG4vLyoqRG9uZSBieSBZb2hhaSBBcmFyYXQgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4oZnVuY3Rpb24oJCkge1xuXG4gICQuc3BvdFN3aXBlID0ge1xuICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgZW5hYmxlZDogJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgIHByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICBtb3ZlVGhyZXNob2xkOiA3NSxcbiAgICB0aW1lVGhyZXNob2xkOiAyMDBcbiAgfTtcblxuICB2YXIgICBzdGFydFBvc1gsXG4gICAgICAgIHN0YXJ0UG9zWSxcbiAgICAgICAgc3RhcnRUaW1lLFxuICAgICAgICBlbGFwc2VkVGltZSxcbiAgICAgICAgaXNNb3ZpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgIC8vICBhbGVydCh0aGlzKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCk7XG4gICAgaXNNb3ZpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICBpZiAoJC5zcG90U3dpcGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgaWYoaXNNb3ZpbmcpIHtcbiAgICAgIHZhciB4ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIHkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB2YXIgZHggPSBzdGFydFBvc1ggLSB4O1xuICAgICAgdmFyIGR5ID0gc3RhcnRQb3NZIC0geTtcbiAgICAgIHZhciBkaXI7XG4gICAgICBlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xuICAgICAgaWYoTWF0aC5hYnMoZHgpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgICBkaXIgPSBkeCA+IDAgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBpZihNYXRoLmFicyhkeSkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgICAvLyAgIGRpciA9IGR5ID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgICAvLyB9XG4gICAgICBpZihkaXIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvblRvdWNoRW5kLmNhbGwodGhpcyk7XG4gICAgICAgICQodGhpcykudHJpZ2dlcignc3dpcGUnLCBkaXIpLnRyaWdnZXIoYHN3aXBlJHtkaXJ9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICBzdGFydFBvc1ggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICBzdGFydFBvc1kgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICBpc01vdmluZyA9IHRydWU7XG4gICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB9XG5cbiAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0geyBzZXR1cDogaW5pdCB9O1xuXG4gICQuZWFjaChbJ2xlZnQnLCAndXAnLCAnZG93bicsICdyaWdodCddLCBmdW5jdGlvbiAoKSB7XG4gICAgJC5ldmVudC5zcGVjaWFsW2Bzd2lwZSR7dGhpc31gXSA9IHsgc2V0dXA6IGZ1bmN0aW9uKCl7XG4gICAgICAkKHRoaXMpLm9uKCdzd2lwZScsICQubm9vcCk7XG4gICAgfSB9O1xuICB9KTtcbn0pKGpRdWVyeSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogTWV0aG9kIGZvciBhZGRpbmcgcHN1ZWRvIGRyYWcgZXZlbnRzIHRvIGVsZW1lbnRzICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4hZnVuY3Rpb24oJCl7XG4gICQuZm4uYWRkVG91Y2ggPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLGVsKXtcbiAgICAgICQoZWwpLmJpbmQoJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJyxmdW5jdGlvbigpe1xuICAgICAgICAvL3dlIHBhc3MgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdCBiZWNhdXNlIHRoZSBqUXVlcnkgZXZlbnRcbiAgICAgICAgLy9vYmplY3QgaXMgbm9ybWFsaXplZCB0byB3M2Mgc3BlY3MgYW5kIGRvZXMgbm90IHByb3ZpZGUgdGhlIFRvdWNoTGlzdFxuICAgICAgICBoYW5kbGVUb3VjaChldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBoYW5kbGVUb3VjaCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxuICAgICAgICAgIGV2ZW50VHlwZXMgPSB7XG4gICAgICAgICAgICB0b3VjaHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgICAgICAgICB0b3VjaGVuZDogJ21vdXNldXAnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0eXBlID0gZXZlbnRUeXBlc1tldmVudC50eXBlXSxcbiAgICAgICAgICBzaW11bGF0ZWRFdmVudFxuICAgICAgICA7XG5cbiAgICAgIGlmKCdNb3VzZUV2ZW50JyBpbiB3aW5kb3cgJiYgdHlwZW9mIHdpbmRvdy5Nb3VzZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50ID0gbmV3IHdpbmRvdy5Nb3VzZUV2ZW50KHR5cGUsIHtcbiAgICAgICAgICAnYnViYmxlcyc6IHRydWUsXG4gICAgICAgICAgJ2NhbmNlbGFibGUnOiB0cnVlLFxuICAgICAgICAgICdzY3JlZW5YJzogZmlyc3Quc2NyZWVuWCxcbiAgICAgICAgICAnc2NyZWVuWSc6IGZpcnN0LnNjcmVlblksXG4gICAgICAgICAgJ2NsaWVudFgnOiBmaXJzdC5jbGllbnRYLFxuICAgICAgICAgICdjbGllbnRZJzogZmlyc3QuY2xpZW50WVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQuaW5pdE1vdXNlRXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLCBmaXJzdC5zY3JlZW5YLCBmaXJzdC5zY3JlZW5ZLCBmaXJzdC5jbGllbnRYLCBmaXJzdC5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMC8qbGVmdCovLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0LnRhcmdldC5kaXNwYXRjaEV2ZW50KHNpbXVsYXRlZEV2ZW50KTtcbiAgICB9O1xuICB9O1xufShqUXVlcnkpO1xuXG5cbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKkZyb20gdGhlIGpRdWVyeSBNb2JpbGUgTGlicmFyeSoqXG4vLyoqbmVlZCB0byByZWNyZWF0ZSBmdW5jdGlvbmFsaXR5Kipcbi8vKiphbmQgdHJ5IHRvIGltcHJvdmUgaWYgcG9zc2libGUqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbi8qIFJlbW92aW5nIHRoZSBqUXVlcnkgZnVuY3Rpb24gKioqKlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7XG5cblx0dmFyICRkb2N1bWVudCA9ICQoIGRvY3VtZW50ICksXG5cdFx0Ly8gc3VwcG9ydFRvdWNoID0gJC5tb2JpbGUuc3VwcG9ydC50b3VjaCxcblx0XHR0b3VjaFN0YXJ0RXZlbnQgPSAndG91Y2hzdGFydCcvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2hzdGFydFwiIDogXCJtb3VzZWRvd25cIixcblx0XHR0b3VjaFN0b3BFdmVudCA9ICd0b3VjaGVuZCcvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2hlbmRcIiA6IFwibW91c2V1cFwiLFxuXHRcdHRvdWNoTW92ZUV2ZW50ID0gJ3RvdWNobW92ZScvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2htb3ZlXCIgOiBcIm1vdXNlbW92ZVwiO1xuXG5cdC8vIHNldHVwIG5ldyBldmVudCBzaG9ydGN1dHNcblx0JC5lYWNoKCAoIFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgXCIgK1xuXHRcdFwic3dpcGUgc3dpcGVsZWZ0IHN3aXBlcmlnaHRcIiApLnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHRcdCQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdHJldHVybiBmbiA/IHRoaXMuYmluZCggbmFtZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cblx0XHQvLyBqUXVlcnkgPCAxLjhcblx0XHRpZiAoICQuYXR0ckZuICkge1xuXHRcdFx0JC5hdHRyRm5bIG5hbWUgXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQoIG9iaiwgZXZlbnRUeXBlLCBldmVudCwgYnViYmxlICkge1xuXHRcdHZhciBvcmlnaW5hbFR5cGUgPSBldmVudC50eXBlO1xuXHRcdGV2ZW50LnR5cGUgPSBldmVudFR5cGU7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHQkLmV2ZW50LnRyaWdnZXIoIGV2ZW50LCB1bmRlZmluZWQsIG9iaiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmV2ZW50LmRpc3BhdGNoLmNhbGwoIG9iaiwgZXZlbnQgKTtcblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IG9yaWdpbmFsVHlwZTtcblx0fVxuXG5cdC8vIGFsc28gaGFuZGxlcyB0YXBob2xkXG5cblx0Ly8gQWxzbyBoYW5kbGVzIHN3aXBlbGVmdCwgc3dpcGVyaWdodFxuXHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7XG5cblx0XHQvLyBNb3JlIHRoYW4gdGhpcyBob3Jpem9udGFsIGRpc3BsYWNlbWVudCwgYW5kIHdlIHdpbGwgc3VwcHJlc3Mgc2Nyb2xsaW5nLlxuXHRcdHNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQ6IDMwLFxuXG5cdFx0Ly8gTW9yZSB0aW1lIHRoYW4gdGhpcywgYW5kIGl0IGlzbid0IGEgc3dpcGUuXG5cdFx0ZHVyYXRpb25UaHJlc2hvbGQ6IDEwMDAsXG5cblx0XHQvLyBTd2lwZSBob3Jpem9udGFsIGRpc3BsYWNlbWVudCBtdXN0IGJlIG1vcmUgdGhhbiB0aGlzLlxuXHRcdGhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHQvLyBTd2lwZSB2ZXJ0aWNhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBsZXNzIHRoYW4gdGhpcy5cblx0XHR2ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyID8gMTUgOiAzMCxcblxuXHRcdGdldExvY2F0aW9uOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXHRcdFx0dmFyIHdpblBhZ2VYID0gd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHR3aW5QYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldCxcblx0XHRcdFx0eCA9IGV2ZW50LmNsaWVudFgsXG5cdFx0XHRcdHkgPSBldmVudC5jbGllbnRZO1xuXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VZID09PSAwICYmIE1hdGguZmxvb3IoIHkgKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VZICkgfHxcblx0XHRcdFx0ZXZlbnQucGFnZVggPT09IDAgJiYgTWF0aC5mbG9vciggeCApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBpT1M0IGNsaWVudFgvY2xpZW50WSBoYXZlIHRoZSB2YWx1ZSB0aGF0IHNob3VsZCBoYXZlIGJlZW5cblx0XHRcdFx0Ly8gaW4gcGFnZVgvcGFnZVkuIFdoaWxlIHBhZ2VYL3BhZ2UvIGhhdmUgdGhlIHZhbHVlIDBcblx0XHRcdFx0eCA9IHggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IHkgLSB3aW5QYWdlWTtcblx0XHRcdH0gZWxzZSBpZiAoIHkgPCAoIGV2ZW50LnBhZ2VZIC0gd2luUGFnZVkpIHx8IHggPCAoIGV2ZW50LnBhZ2VYIC0gd2luUGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBTb21lIEFuZHJvaWQgYnJvd3NlcnMgaGF2ZSB0b3RhbGx5IGJvZ3VzIHZhbHVlcyBmb3IgY2xpZW50WC9ZXG5cdFx0XHRcdC8vIHdoZW4gc2Nyb2xsaW5nL3pvb21pbmcgYSBwYWdlLiBEZXRlY3RhYmxlIHNpbmNlIGNsaWVudFgvY2xpZW50WVxuXHRcdFx0XHQvLyBzaG91bGQgbmV2ZXIgYmUgc21hbGxlciB0aGFuIHBhZ2VYL3BhZ2VZIG1pbnVzIHBhZ2Ugc2Nyb2xsXG5cdFx0XHRcdHggPSBldmVudC5wYWdlWCAtIHdpblBhZ2VYO1xuXHRcdFx0XHR5ID0gZXZlbnQucGFnZVkgLSB3aW5QYWdlWTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeVxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF0sXG5cdFx0XHRcdFx0XHRvcmlnaW46ICQoIGV2ZW50LnRhcmdldCApXG5cdFx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgP1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLFxuXHRcdFx0XHRcdFx0Y29vcmRzOiBbIGxvY2F0aW9uLngsIGxvY2F0aW9uLnkgXVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGhhbmRsZVN3aXBlOiBmdW5jdGlvbiggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKSB7XG5cdFx0XHRpZiAoIHN0b3AudGltZSAtIHN0YXJ0LnRpbWUgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZHVyYXRpb25UaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZCAmJlxuXHRcdFx0XHRNYXRoLmFicyggc3RhcnQuY29vcmRzWyAxIF0gLSBzdG9wLmNvb3Jkc1sgMSBdICkgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUudmVydGljYWxEaXN0YW5jZVRocmVzaG9sZCApIHtcblx0XHRcdFx0dmFyIGRpcmVjdGlvbiA9IHN0YXJ0LmNvb3Jkc1swXSA+IHN0b3AuY29vcmRzWyAwIF0gPyBcInN3aXBlbGVmdFwiIDogXCJzd2lwZXJpZ2h0XCI7XG5cblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBcInN3aXBlXCIsICQuRXZlbnQoIFwic3dpcGVcIiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSksIHRydWUgKTtcblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBkaXJlY3Rpb24sJC5FdmVudCggZGlyZWN0aW9uLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9ICksIHRydWUgKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0Ly8gVGhpcyBzZXJ2ZXMgYXMgYSBmbGFnIHRvIGVuc3VyZSB0aGF0IGF0IG1vc3Qgb25lIHN3aXBlIGV2ZW50IGV2ZW50IGlzXG5cdFx0Ly8gaW4gd29yayBhdCBhbnkgZ2l2ZW4gdGltZVxuXHRcdGV2ZW50SW5Qcm9ncmVzczogZmFsc2UsXG5cblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXZlbnRzLFxuXHRcdFx0XHR0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdFx0JHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksXG5cdFx0XHRcdGNvbnRleHQgPSB7fTtcblxuXHRcdFx0Ly8gUmV0cmlldmUgdGhlIGV2ZW50cyBkYXRhIGZvciB0aGlzIGVsZW1lbnQgYW5kIGFkZCB0aGUgc3dpcGUgY29udGV4dFxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCAhZXZlbnRzICkge1xuXHRcdFx0XHRldmVudHMgPSB7IGxlbmd0aDogMCB9O1xuXHRcdFx0XHQkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiLCBldmVudHMgKTtcblx0XHRcdH1cblx0XHRcdGV2ZW50cy5sZW5ndGgrKztcblx0XHRcdGV2ZW50cy5zd2lwZSA9IGNvbnRleHQ7XG5cblx0XHRcdGNvbnRleHQuc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gQmFpbCBpZiB3ZSdyZSBhbHJlYWR5IHdvcmtpbmcgb24gYSBzd2lwZSBldmVudFxuXHRcdFx0XHRpZiAoICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSB0cnVlO1xuXG5cdFx0XHRcdHZhciBzdG9wLFxuXHRcdFx0XHRcdHN0YXJ0ID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0YXJ0KCBldmVudCApLFxuXHRcdFx0XHRcdG9yaWdUYXJnZXQgPSBldmVudC50YXJnZXQsXG5cdFx0XHRcdFx0ZW1pdHRlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGNvbnRleHQubW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoICFzdGFydCB8fCBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzdG9wID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0b3AoIGV2ZW50ICk7XG5cdFx0XHRcdFx0aWYgKCAhZW1pdHRlZCApIHtcblx0XHRcdFx0XHRcdGVtaXR0ZWQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaGFuZGxlU3dpcGUoIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICk7XG5cdFx0XHRcdFx0XHRpZiAoIGVtaXR0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBzY3JvbGxpbmdcblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29udGV4dC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBudWxsO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdCRkb2N1bWVudC5vbiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApXG5cdFx0XHRcdFx0Lm9uZSggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0fTtcblx0XHRcdCR0aGlzLm9uKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cywgY29udGV4dDtcblxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGRlbGV0ZSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGV2ZW50cy5sZW5ndGgtLTtcblx0XHRcdFx0aWYgKCBldmVudHMubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggY29udGV4dC5zdGFydCApIHtcblx0XHRcdFx0XHQkKCB0aGlzICkub2ZmKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGNvbnRleHQubW92ZSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0LnN0b3AgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHQkLmVhY2goe1xuXHRcdHN3aXBlbGVmdDogXCJzd2lwZS5sZWZ0XCIsXG5cdFx0c3dpcGVyaWdodDogXCJzd2lwZS5yaWdodFwiXG5cdH0sIGZ1bmN0aW9uKCBldmVudCwgc291cmNlRXZlbnQgKSB7XG5cblx0XHQkLmV2ZW50LnNwZWNpYWxbIGV2ZW50IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5iaW5kKCBzb3VyY2VFdmVudCwgJC5ub29wICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkudW5iaW5kKCBzb3VyY2VFdmVudCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufSkoIGpRdWVyeSwgdGhpcyApO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3QgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChgJHtwcmVmaXhlc1tpXX1NdXRhdGlvbk9ic2VydmVyYCBpbiB3aW5kb3cpIHtcbiAgICAgIHJldHVybiB3aW5kb3dbYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KCkpO1xuXG5jb25zdCB0cmlnZ2VycyA9IChlbCwgdHlwZSkgPT4ge1xuICBlbC5kYXRhKHR5cGUpLnNwbGl0KCcgJykuZm9yRWFjaChpZCA9PiB7XG4gICAgJChgIyR7aWR9YClbIHR5cGUgPT09ICdjbG9zZScgPyAndHJpZ2dlcicgOiAndHJpZ2dlckhhbmRsZXInXShgJHt0eXBlfS56Zi50cmlnZ2VyYCwgW2VsXSk7XG4gIH0pO1xufTtcbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAnb3BlbicpO1xufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2VdIHdpbGwgY2xvc2UgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4vLyBJZiB1c2VkIHdpdGhvdXQgYSB2YWx1ZSBvbiBbZGF0YS1jbG9zZV0sIHRoZSBldmVudCB3aWxsIGJ1YmJsZSwgYWxsb3dpbmcgaXQgdG8gY2xvc2UgYSBwYXJlbnQgY29tcG9uZW50LlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9ICQodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgaWYgKGlkKSB7XG4gICAgdHJpZ2dlcnMoJCh0aGlzKSwgJ2Nsb3NlJyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZS56Zi50cmlnZ2VyJyk7XG4gIH1cbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZV0gd2lsbCB0b2dnbGUgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9ICQodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICd0b2dnbGUnKTtcbiAgfSBlbHNlIHtcbiAgICAkKHRoaXMpLnRyaWdnZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gIH1cbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NhYmxlXSB3aWxsIHJlc3BvbmQgdG8gY2xvc2UuemYudHJpZ2dlciBldmVudHMuXG4kKGRvY3VtZW50KS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zYWJsZV0nLCBmdW5jdGlvbihlKXtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgbGV0IGFuaW1hdGlvbiA9ICQodGhpcykuZGF0YSgnY2xvc2FibGUnKTtcblxuICBpZihhbmltYXRpb24gIT09ICcnKXtcbiAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KCQodGhpcyksIGFuaW1hdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH0pO1xuICB9ZWxzZXtcbiAgICAkKHRoaXMpLmZhZGVPdXQoKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgfVxufSk7XG5cbiQoZG9jdW1lbnQpLm9uKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGUtZm9jdXNdJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9ICQodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICQoYCMke2lkfWApLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFskKHRoaXMpXSk7XG59KTtcblxuLyoqXG4qIEZpcmVzIG9uY2UgYWZ0ZXIgYWxsIG90aGVyIHNjcmlwdHMgaGF2ZSBsb2FkZWRcbiogQGZ1bmN0aW9uXG4qIEBwcml2YXRlXG4qL1xuJCh3aW5kb3cpLm9uKCdsb2FkJywgKCkgPT4ge1xuICBjaGVja0xpc3RlbmVycygpO1xufSk7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXJzKCkge1xuICBldmVudHNMaXN0ZW5lcigpO1xuICByZXNpemVMaXN0ZW5lcigpO1xuICBzY3JvbGxMaXN0ZW5lcigpO1xuICBjbG9zZW1lTGlzdGVuZXIoKTtcbn1cblxuLy8qKioqKioqKiBvbmx5IGZpcmVzIHRoaXMgZnVuY3Rpb24gb25jZSBvbiBsb2FkLCBpZiB0aGVyZSdzIHNvbWV0aGluZyB0byB3YXRjaCAqKioqKioqKlxuZnVuY3Rpb24gY2xvc2VtZUxpc3RlbmVyKHBsdWdpbk5hbWUpIHtcbiAgdmFyIHlldGlCb3hlcyA9ICQoJ1tkYXRhLXlldGktYm94XScpLFxuICAgICAgcGx1Z05hbWVzID0gWydkcm9wZG93bicsICd0b29sdGlwJywgJ3JldmVhbCddO1xuXG4gIGlmKHBsdWdpbk5hbWUpe1xuICAgIGlmKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMucHVzaChwbHVnaW5OYW1lKTtcbiAgICB9ZWxzZSBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBsdWdpbk5hbWVbMF0gPT09ICdzdHJpbmcnKXtcbiAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgfWVsc2V7XG4gICAgICBjb25zb2xlLmVycm9yKCdQbHVnaW4gbmFtZXMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICB9XG4gIGlmKHlldGlCb3hlcy5sZW5ndGgpe1xuICAgIGxldCBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgICByZXR1cm4gYGNsb3NlbWUuemYuJHtuYW1lfWA7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgJCh3aW5kb3cpLm9mZihsaXN0ZW5lcnMpLm9uKGxpc3RlbmVycywgZnVuY3Rpb24oZSwgcGx1Z2luSWQpe1xuICAgICAgbGV0IHBsdWdpbiA9IGUubmFtZXNwYWNlLnNwbGl0KCcuJylbMF07XG4gICAgICBsZXQgcGx1Z2lucyA9ICQoYFtkYXRhLSR7cGx1Z2lufV1gKS5ub3QoYFtkYXRhLXlldGktYm94PVwiJHtwbHVnaW5JZH1cIl1gKTtcblxuICAgICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCBfdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgX3RoaXMudHJpZ2dlckhhbmRsZXIoJ2Nsb3NlLnpmLnRyaWdnZXInLCBbX3RoaXNdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUxpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtcmVzaXplXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuemYudHJpZ2dlcicpXG4gICAgLm9uKCdyZXNpemUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aW1lcikgeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgcmVzaXplIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgcmVzaXplIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGlzdGVuZXIoZGVib3VuY2Upe1xuICBsZXQgdGltZXIsXG4gICAgICAkbm9kZXMgPSAkKCdbZGF0YS1zY3JvbGxdJyk7XG4gIGlmKCRub2Rlcy5sZW5ndGgpe1xuICAgICQod2luZG93KS5vZmYoJ3Njcm9sbC56Zi50cmlnZ2VyJylcbiAgICAub24oJ3Njcm9sbC56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZih0aW1lcil7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cblxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpey8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAgICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gICAgICB9LCBkZWJvdW5jZSB8fCAxMCk7Ly9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudHNMaXN0ZW5lcigpIHtcbiAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpeyByZXR1cm4gZmFsc2U7IH1cbiAgbGV0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uIChtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgICB2YXIgJHRhcmdldCA9ICQobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuXG5cdCAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgICAgc3dpdGNoIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnR5cGUpIHtcblxuICAgICAgICBjYXNlIFwiYXR0cmlidXRlc1wiOlxuICAgICAgICAgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJzY3JvbGxcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuXHRcdCAgXHQkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuXHRcdCAgfVxuXHRcdCAgaWYgKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpID09PSBcInJlc2l6ZVwiICYmIG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWV2ZW50c1wiKSB7XG5cdFx0ICBcdCR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuXHRcdCAgIH1cblx0XHQgIGlmIChtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwic3R5bGVcIikge1xuXHRcdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwibXV0YXRlXCIpO1xuXHRcdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcblx0XHQgIH1cblx0XHQgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJjaGlsZExpc3RcIjpcblx0XHQgICR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsXCJtdXRhdGVcIik7XG5cdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy9ub3RoaW5nXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbiAgICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgb3IgbXV0YXRpb24gYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6IFtcImRhdGEtZXZlbnRzXCIsIFwic3R5bGVcIl0gfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogQWJpZGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFiaWRlXG4gKi9cblxuY2xhc3MgQWJpZGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBBYmlkZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBYmlkZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgQWJpZGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FiaWRlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEFiaWRlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBBYmlkZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBBYmlkZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5hYmlkZScpXG4gICAgICAub24oJ3Jlc2V0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgfSlcbiAgICAgIC5vbignc3VibWl0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy52YWxpZGF0ZU9uID09PSAnZmllbGRDaGFuZ2UnKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignY2hhbmdlLnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdjaGFuZ2UuemYuYWJpZGUnLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dCgkKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGl2ZVZhbGlkYXRlKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignaW5wdXQuemYuYWJpZGUnKVxuICAgICAgICAub24oJ2lucHV0LnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnZhbGlkYXRlT25CbHVyKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignYmx1ci56Zi5hYmlkZScpXG4gICAgICAgIC5vbignYmx1ci56Zi5hYmlkZScsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KCQoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEFiaWRlIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBlbGVtZW50IGhhcyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGFuZCBpZiBpdCdzIGNoZWNrZWQgb3Igbm90XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIHJlcXVpcmVkQ2hlY2soJGVsKSB7XG4gICAgaWYgKCEkZWwuYXR0cigncmVxdWlyZWQnKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgaXNHb29kID0gdHJ1ZTtcblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgaXNHb29kID0gJGVsWzBdLmNoZWNrZWQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YXIgb3B0ID0gJGVsLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIW9wdC5sZW5ndGggfHwgIW9wdC52YWwoKSkgaXNHb29kID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZighJGVsLnZhbCgpIHx8ICEkZWwudmFsKCkubGVuZ3RoKSBpc0dvb2QgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNHb29kO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldDpcbiAgICogLSBCYXNlZCBvbiAkZWwsIHRoZSBmaXJzdCBlbGVtZW50KHMpIGNvcnJlc3BvbmRpbmcgdG8gYGZvcm1FcnJvclNlbGVjdG9yYCBpbiB0aGlzIG9yZGVyOlxuICAgKiAgIDEuIFRoZSBlbGVtZW50J3MgZGlyZWN0IHNpYmxpbmcoJ3MpLlxuICAgKiAgIDIuIFRoZSBlbGVtZW50J3MgcGFyZW50J3MgY2hpbGRyZW4uXG4gICAqIC0gRWxlbWVudChzKSB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtkYXRhLWZvcm0tZXJyb3ItZm9yXWAgc2V0IHdpdGggdGhlIGVsZW1lbnQncyBpZC5cbiAgICpcbiAgICogVGhpcyBhbGxvd3MgZm9yIG11bHRpcGxlIGZvcm0gZXJyb3JzIHBlciBpbnB1dCwgdGhvdWdoIGlmIG5vbmUgYXJlIGZvdW5kLCBubyBmb3JtIGVycm9ycyB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgcmVmZXJlbmNlIHRvIGZpbmQgdGhlIGZvcm0gZXJyb3Igc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3Qgd2l0aCB0aGUgc2VsZWN0b3IuXG4gICAqL1xuICBmaW5kRm9ybUVycm9yKCRlbCkge1xuICAgIHZhciBpZCA9ICRlbFswXS5pZDtcbiAgICB2YXIgJGVycm9yID0gJGVsLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG5cbiAgICBpZiAoISRlcnJvci5sZW5ndGgpIHtcbiAgICAgICRlcnJvciA9ICRlbC5wYXJlbnQoKS5maW5kKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgJGVycm9yID0gJGVycm9yLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWZvcm0tZXJyb3ItZm9yPVwiJHtpZH1cIl1gKSk7XG5cbiAgICByZXR1cm4gJGVycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGlzIG9yZGVyOlxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZExhYmVsKCRlbCkge1xuICAgIHZhciBpZCA9ICRlbFswXS5pZDtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy4kZWxlbWVudC5maW5kKGBsYWJlbFtmb3I9XCIke2lkfVwiXWApO1xuXG4gICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJGVsLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRsYWJlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNldCBvZiBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIGEgc2V0IG9mIHJhZGlvIGVscyBpbiB0aGlzIG9yZGVyXG4gICAqIDIuIFRoZSA8bGFiZWw+IHdpdGggdGhlIGF0dHJpYnV0ZSBgW2Zvcj1cInNvbWVJbnB1dElkXCJdYFxuICAgKiAzLiBUaGUgYC5jbG9zZXN0KClgIDxsYWJlbD5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAqL1xuICBmaW5kUmFkaW9MYWJlbHMoJGVscykge1xuICAgIHZhciBsYWJlbHMgPSAkZWxzLm1hcCgoaSwgZWwpID0+IHtcbiAgICAgIHZhciBpZCA9IGVsLmlkO1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICRsYWJlbCA9ICQoZWwpLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJGxhYmVsWzBdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICQobGFiZWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBDU1MgZXJyb3IgY2xhc3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBBYmlkZSBzZXR0aW5ncyB0byB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSBjbGFzcyB0b1xuICAgKi9cbiAgYWRkRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIHZhciAkbGFiZWwgPSB0aGlzLmZpbmRMYWJlbCgkZWwpO1xuICAgIHZhciAkZm9ybUVycm9yID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbCk7XG5cbiAgICBpZiAoJGxhYmVsLmxlbmd0aCkge1xuICAgICAgJGxhYmVsLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9yLmxlbmd0aCkge1xuICAgICAgJGZvcm1FcnJvci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKCdkYXRhLWludmFsaWQnLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIENTUyBlcnJvciBjbGFzc2VzIGV0YyBmcm9tIGFuIGVudGlyZSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqXG4gICAqL1xuXG4gIHJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGdyb3VwTmFtZSkge1xuICAgIHZhciAkZWxzID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciAkbGFiZWxzID0gdGhpcy5maW5kUmFkaW9MYWJlbHMoJGVscyk7XG4gICAgdmFyICRmb3JtRXJyb3JzID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbHMpO1xuXG4gICAgaWYgKCRsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAkbGFiZWxzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9ycy5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3JzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgZnJvbSB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gcmVtb3ZlIHRoZSBjbGFzcyBmcm9tXG4gICAqL1xuICByZW1vdmVFcnJvckNsYXNzZXMoJGVsKSB7XG4gICAgLy8gcmFkaW9zIG5lZWQgdG8gY2xlYXIgYWxsIG9mIHRoZSBlbHNcbiAgICBpZigkZWxbMF0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcygkZWwuYXR0cignbmFtZScpKTtcbiAgICB9XG5cbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSB0byBmaW5kIGlucHV0cyBhbmQgcHJvY2VlZHMgdG8gdmFsaWRhdGUgdGhlbSBpbiB3YXlzIHNwZWNpZmljIHRvIHRoZWlyIHR5cGUuIFxuICAgKiBJZ25vcmVzIGlucHV0cyB3aXRoIGRhdGEtYWJpZGUtaWdub3JlLCB0eXBlPVwiaGlkZGVuXCIgb3IgZGlzYWJsZWQgYXR0cmlidXRlcyBzZXRcbiAgICogQGZpcmVzIEFiaWRlI2ludmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI3ZhbGlkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB2YWxpZGF0ZSwgc2hvdWxkIGJlIGFuIEhUTUwgaW5wdXRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGdvb2RUb0dvIC0gSWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC5cbiAgICovXG4gIHZhbGlkYXRlSW5wdXQoJGVsKSB7XG4gICAgdmFyIGNsZWFyUmVxdWlyZSA9IHRoaXMucmVxdWlyZWRDaGVjaygkZWwpLFxuICAgICAgICB2YWxpZGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdHJ1ZSxcbiAgICAgICAgdmFsaWRhdG9yID0gJGVsLmF0dHIoJ2RhdGEtdmFsaWRhdG9yJyksXG4gICAgICAgIGVxdWFsVG8gPSB0cnVlO1xuXG4gICAgLy8gZG9uJ3QgdmFsaWRhdGUgaWdub3JlZCBpbnB1dHMgb3IgaGlkZGVuIGlucHV0cyBvciBkaXNhYmxlZCBpbnB1dHNcbiAgICBpZiAoJGVsLmlzKCdbZGF0YS1hYmlkZS1pZ25vcmVdJykgfHwgJGVsLmlzKCdbdHlwZT1cImhpZGRlblwiXScpIHx8ICRlbC5pcygnW2Rpc2FibGVkXScpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVSYWRpbygkZWwuYXR0cignbmFtZScpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVRleHQoJGVsKTtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjdXN0b21WYWxpZGF0b3IgPSB0aGlzLm1hdGNoVmFsaWRhdGlvbigkZWwsIHZhbGlkYXRvciwgJGVsLmF0dHIoJ3JlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmICgkZWwuYXR0cignZGF0YS1lcXVhbHRvJykpIHtcbiAgICAgIGVxdWFsVG8gPSB0aGlzLm9wdGlvbnMudmFsaWRhdG9ycy5lcXVhbFRvKCRlbCk7XG4gICAgfVxuXG5cbiAgICB2YXIgZ29vZFRvR28gPSBbY2xlYXJSZXF1aXJlLCB2YWxpZGF0ZWQsIGN1c3RvbVZhbGlkYXRvciwgZXF1YWxUb10uaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICAgIHZhciBtZXNzYWdlID0gKGdvb2RUb0dvID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJykgKyAnLnpmLmFiaWRlJztcblxuICAgIGlmIChnb29kVG9Hbykge1xuICAgICAgLy8gUmUtdmFsaWRhdGUgaW5wdXRzIHRoYXQgZGVwZW5kIG9uIHRoaXMgb25lIHdpdGggZXF1YWx0b1xuICAgICAgY29uc3QgZGVwZW5kZW50RWxlbWVudHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWVxdWFsdG89XCIkeyRlbC5hdHRyKCdpZCcpfVwiXWApO1xuICAgICAgaWYgKGRlcGVuZGVudEVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBkZXBlbmRlbnRFbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpKSB7XG4gICAgICAgICAgICBfdGhpcy52YWxpZGF0ZUlucHV0KCQodGhpcykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpc1tnb29kVG9HbyA/ICdyZW1vdmVFcnJvckNsYXNzZXMnIDogJ2FkZEVycm9yQ2xhc3NlcyddKCRlbCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBpbnB1dCBpcyBkb25lIGNoZWNraW5nIGZvciB2YWxpZGF0aW9uLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgdmFsaWQuemYuYWJpZGVgIG9yIGBpbnZhbGlkLnpmLmFiaWRlYFxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIERPTSBlbGVtZW50IG9mIHRoZSBpbnB1dC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjaW52YWxpZFxuICAgICAqL1xuICAgICRlbC50cmlnZ2VyKG1lc3NhZ2UsIFskZWxdKTtcblxuICAgIHJldHVybiBnb29kVG9HbztcbiAgfVxuXG4gIC8qKlxuICAgKiBHb2VzIHRocm91Z2ggYSBmb3JtIGFuZCBpZiB0aGVyZSBhcmUgYW55IGludmFsaWQgaW5wdXRzLCBpdCB3aWxsIGRpc3BsYXkgdGhlIGZvcm0gZXJyb3IgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gbm9FcnJvciAtIHRydWUgaWYgbm8gZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuLi5cbiAgICogQGZpcmVzIEFiaWRlI2Zvcm12YWxpZFxuICAgKiBAZmlyZXMgQWJpZGUjZm9ybWludmFsaWRcbiAgICovXG4gIHZhbGlkYXRlRm9ybSgpIHtcbiAgICB2YXIgYWNjID0gW107XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGlucHV0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgYWNjLnB1c2goX3RoaXMudmFsaWRhdGVJbnB1dCgkKHRoaXMpKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgbm9FcnJvciA9IGFjYy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsIChub0Vycm9yID8gJ25vbmUnIDogJ2Jsb2NrJykpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBpcyBmaW5pc2hlZCB2YWxpZGF0aW5nLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgZm9ybXZhbGlkLnpmLmFiaWRlYCBvciBgZm9ybWludmFsaWQuemYuYWJpZGVgLlxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIGVsZW1lbnQgb2YgdGhlIGZvcm0uXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm12YWxpZFxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtaW52YWxpZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigobm9FcnJvciA/ICdmb3JtdmFsaWQnIDogJ2Zvcm1pbnZhbGlkJykgKyAnLnpmLmFiaWRlJywgW3RoaXMuJGVsZW1lbnRdKTtcblxuICAgIHJldHVybiBub0Vycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHRleHQgaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gdGhlIHBhdHRlcm4gc3BlY2lmaWVkIGluIHRoZSBhdHRyaWJ1dGUuIElmIG5vIG1hdGNoaW5nIHBhdHRlcm4gaXMgZm91bmQsIHJldHVybnMgdHJ1ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhIHRleHQgaW5wdXQgSFRNTCBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIC0gc3RyaW5nIHZhbHVlIG9mIG9uZSBvZiB0aGUgUmVnRXggcGF0dGVybnMgaW4gQWJpZGUub3B0aW9ucy5wYXR0ZXJuc1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IHRoZSBpbnB1dCB2YWx1ZSBtYXRjaGVzIHRoZSBwYXR0ZXJuIHNwZWNpZmllZFxuICAgKi9cbiAgdmFsaWRhdGVUZXh0KCRlbCwgcGF0dGVybikge1xuICAgIC8vIEEgcGF0dGVybiBjYW4gYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgYmUgaW5mZXJlZCBmcm9tIHRoZSBpbnB1dCdzIFwicGF0dGVyblwiIGF0dHJpYnV0ZSwgb3IgaXQncyBcInR5cGVcIiBhdHRyaWJ1dGVcbiAgICBwYXR0ZXJuID0gKHBhdHRlcm4gfHwgJGVsLmF0dHIoJ3BhdHRlcm4nKSB8fCAkZWwuYXR0cigndHlwZScpKTtcbiAgICB2YXIgaW5wdXRUZXh0ID0gJGVsLnZhbCgpO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuXG4gICAgaWYgKGlucHV0VGV4dC5sZW5ndGgpIHtcbiAgICAgIC8vIElmIHRoZSBwYXR0ZXJuIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpcyBpbiBBYmlkZSdzIGxpc3Qgb2YgcGF0dGVybnMsIHRoZW4gdGVzdCB0aGF0IHJlZ2V4cFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJucy5oYXNPd25Qcm9wZXJ0eShwYXR0ZXJuKSkge1xuICAgICAgICB2YWxpZCA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuc1twYXR0ZXJuXS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBuYW1lIGlzbid0IGFsc28gdGhlIHR5cGUgYXR0cmlidXRlIG9mIHRoZSBmaWVsZCwgdGhlbiB0ZXN0IGl0IGFzIGEgcmVnZXhwXG4gICAgICBlbHNlIGlmIChwYXR0ZXJuICE9PSAkZWwuYXR0cigndHlwZScpKSB7XG4gICAgICAgIHZhbGlkID0gbmV3IFJlZ0V4cChwYXR0ZXJuKS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBbiBlbXB0eSBmaWVsZCBpcyB2YWxpZCBpZiBpdCdzIG5vdCByZXF1aXJlZFxuICAgIGVsc2UgaWYgKCEkZWwucHJvcCgncmVxdWlyZWQnKSkge1xuICAgICAgdmFsaWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIGEgbm90IGEgcmFkaW8gaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gd2hldGhlciBvciBub3QgaXQgaXMgcmVxdWlyZWQgYW5kIHNlbGVjdGVkLiBBbHRob3VnaCB0aGUgZnVuY3Rpb24gdGFyZ2V0cyBhIHNpbmdsZSBgPGlucHV0PmAsIGl0IHZhbGlkYXRlcyBieSBjaGVja2luZyB0aGUgYHJlcXVpcmVkYCBhbmQgYGNoZWNrZWRgIHByb3BlcnRpZXMgb2YgYWxsIHJhZGlvIGJ1dHRvbnMgaW4gaXRzIGdyb3VwLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZ3JvdXBOYW1lIC0gQSBzdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdCBsZWFzdCBvbmUgcmFkaW8gaW5wdXQgaGFzIGJlZW4gc2VsZWN0ZWQgKGlmIGl0J3MgcmVxdWlyZWQpXG4gICAqL1xuICB2YWxpZGF0ZVJhZGlvKGdyb3VwTmFtZSkge1xuICAgIC8vIElmIGF0IGxlYXN0IG9uZSByYWRpbyBpbiB0aGUgZ3JvdXAgaGFzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSwgdGhlIGdyb3VwIGlzIGNvbnNpZGVyZWQgcmVxdWlyZWRcbiAgICAvLyBQZXIgVzNDIHNwZWMsIGFsbCByYWRpbyBidXR0b25zIGluIGEgZ3JvdXAgc2hvdWxkIGhhdmUgYHJlcXVpcmVkYCwgYnV0IHdlJ3JlIGJlaW5nIG5pY2VcbiAgICB2YXIgJGdyb3VwID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlLCByZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIHRoZSBncm91cCB0byBiZSByZXF1aXJlZCwgYXQgbGVhc3Qgb25lIHJhZGlvIG5lZWRzIHRvIGJlIHJlcXVpcmVkXG4gICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgIGlmICgkKGUpLmF0dHIoJ3JlcXVpcmVkJykpIHtcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFyZXF1aXJlZCkgdmFsaWQ9dHJ1ZTtcblxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgdmFsaWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSBjaGVja2VkXG4gICAgICAkZ3JvdXAuZWFjaCgoaSwgZSkgPT4ge1xuICAgICAgICBpZiAoJChlKS5wcm9wKCdjaGVja2VkJykpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHNlbGVjdGVkIGlucHV0IHBhc3NlcyBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBNdWx0aXBsZSB2YWxpZGF0aW9ucyBjYW4gYmUgdXNlZCwgaWYgcGFzc2VkIHRvIHRoZSBlbGVtZW50IHdpdGggYGRhdGEtdmFsaWRhdG9yPVwiZm9vIGJhciBiYXpcImAgaW4gYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWxpZGF0b3JzIC0gYSBzdHJpbmcgb2YgZnVuY3Rpb24gbmFtZXMgbWF0Y2hpbmcgZnVuY3Rpb25zIGluIHRoZSBBYmlkZS5vcHRpb25zLnZhbGlkYXRvcnMgb2JqZWN0LlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcXVpcmVkIC0gc2VsZiBleHBsYW5hdG9yeT9cbiAgICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiB2YWxpZGF0aW9ucyBwYXNzZWQuXG4gICAqL1xuICBtYXRjaFZhbGlkYXRpb24oJGVsLCB2YWxpZGF0b3JzLCByZXF1aXJlZCkge1xuICAgIHJlcXVpcmVkID0gcmVxdWlyZWQgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB2YXIgY2xlYXIgPSB2YWxpZGF0b3JzLnNwbGl0KCcgJykubWFwKCh2KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZhbGlkYXRvcnNbdl0oJGVsLCByZXF1aXJlZCwgJGVsLnBhcmVudCgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2xlYXIuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBmb3JtIGlucHV0cyBhbmQgc3R5bGVzXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtcmVzZXRcbiAgICovXG4gIHJlc2V0Rm9ybSgpIHtcbiAgICB2YXIgJGZvcm0gPSB0aGlzLiRlbGVtZW50LFxuICAgICAgICBvcHRzID0gdGhpcy5vcHRpb25zO1xuXG4gICAgJChgLiR7b3B0cy5sYWJlbEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgJChgLiR7b3B0cy5pbnB1dEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgJChgJHtvcHRzLmZvcm1FcnJvclNlbGVjdG9yfS4ke29wdHMuZm9ybUVycm9yQ2xhc3N9YCkucmVtb3ZlQ2xhc3Mob3B0cy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgJGZvcm0uZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAkKCc6aW5wdXQnLCAkZm9ybSkubm90KCc6YnV0dG9uLCA6c3VibWl0LCA6cmVzZXQsIDpoaWRkZW4sIDpyYWRpbywgOmNoZWNrYm94LCBbZGF0YS1hYmlkZS1pZ25vcmVdJykudmFsKCcnKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6cmFkaW8nLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgICQoJzppbnB1dDpjaGVja2JveCcsICRmb3JtKS5ub3QoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKS5wcm9wKCdjaGVja2VkJyxmYWxzZSkucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBoYXMgYmVlbiByZXNldC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybXJlc2V0XG4gICAgICovXG4gICAgJGZvcm0udHJpZ2dlcignZm9ybXJlc2V0LnpmLmFiaWRlJywgWyRmb3JtXSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIFJlbW92ZXMgZXJyb3Igc3R5bGVzIGFuZCBjbGFzc2VzIGZyb20gZWxlbWVudHMsIHdpdGhvdXQgcmVzZXR0aW5nIHRoZWlyIHZhbHVlcy5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpXG4gICAgICAgIC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgdGhpcy4kaW5wdXRzXG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLnJlbW92ZUVycm9yQ2xhc3NlcygkKHRoaXMpKTtcbiAgICAgIH0pO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkFiaWRlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZXZlbnQgdG8gdmFsaWRhdGUgaW5wdXRzLiBDaGVja2JveGVzIGFuZCByYWRpb3MgdmFsaWRhdGUgaW1tZWRpYXRlbHkuXG4gICAqIFJlbW92ZSBvciBjaGFuZ2UgdGhpcyB2YWx1ZSBmb3IgbWFudWFsIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9zdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdmaWVsZENoYW5nZSdcbiAgICovXG4gIHZhbGlkYXRlT246ICdmaWVsZENoYW5nZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXQgbGFiZWxzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy1pbnZhbGlkLWxhYmVsJ1xuICAgKi9cbiAgbGFiZWxFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1sYWJlbCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXRzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy1pbnZhbGlkLWlucHV0J1xuICAgKi9cbiAgaW5wdXRFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1pbnB1dCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHNlbGVjdG9yIHRvIHVzZSB0byB0YXJnZXQgRm9ybSBFcnJvcnMgZm9yIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnLmZvcm0tZXJyb3InXG4gICAqL1xuICBmb3JtRXJyb3JTZWxlY3RvcjogJy5mb3JtLWVycm9yJyxcblxuICAvKipcbiAgICogQ2xhc3MgYWRkZWQgdG8gRm9ybSBFcnJvcnMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLXZpc2libGUnXG4gICAqL1xuICBmb3JtRXJyb3JDbGFzczogJ2lzLXZpc2libGUnLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB2YWxpZGF0ZSB0ZXh0IGlucHV0cyBvbiBhbnkgdmFsdWUgY2hhbmdlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbGl2ZVZhbGlkYXRlOiBmYWxzZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gdmFsaWRhdGUgaW5wdXRzIG9uIGJsdXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB2YWxpZGF0ZU9uQmx1cjogZmFsc2UsXG5cbiAgcGF0dGVybnM6IHtcbiAgICBhbHBoYSA6IC9eW2EtekEtWl0rJC8sXG4gICAgYWxwaGFfbnVtZXJpYyA6IC9eW2EtekEtWjAtOV0rJC8sXG4gICAgaW50ZWdlciA6IC9eWy0rXT9cXGQrJC8sXG4gICAgbnVtYmVyIDogL15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLFxuXG4gICAgLy8gYW1leCwgdmlzYSwgZGluZXJzXG4gICAgY2FyZCA6IC9eKD86NFswLTldezEyfSg/OlswLTldezN9KT98NVsxLTVdWzAtOV17MTR9fDYoPzowMTF8NVswLTldWzAtOV0pWzAtOV17MTJ9fDNbNDddWzAtOV17MTN9fDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfXwoPzoyMTMxfDE4MDB8MzVcXGR7M30pXFxkezExfSkkLyxcbiAgICBjdnYgOiAvXihbMC05XSl7Myw0fSQvLFxuXG4gICAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2Uvc3RhdGVzLW9mLXRoZS10eXBlLWF0dHJpYnV0ZS5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG4gICAgZW1haWwgOiAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSskLyxcblxuICAgIHVybCA6IC9eKGh0dHBzP3xmdHB8ZmlsZXxzc2gpOlxcL1xcLygoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpBLVpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC8sXG4gICAgLy8gYWJjLmRlXG4gICAgZG9tYWluIDogL14oW2EtekEtWjAtOV0oW2EtekEtWjAtOVxcLV17MCw2MX1bYS16QS1aMC05XSk/XFwuKStbYS16QS1aXXsyLDh9JC8sXG5cbiAgICBkYXRldGltZSA6IC9eKFswLTJdWzAtOV17M30pXFwtKFswLTFdWzAtOV0pXFwtKFswLTNdWzAtOV0pVChbMC01XVswLTldKVxcOihbMC01XVswLTldKVxcOihbMC01XVswLTldKShafChbXFwtXFwrXShbMC0xXVswLTldKVxcOjAwKSkkLyxcbiAgICAvLyBZWVlZLU1NLUREXG4gICAgZGF0ZSA6IC8oPzoxOXwyMClbMC05XXsyfS0oPzooPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18MVswLTldfDJbMC05XSl8KD86KD8hMDIpKD86MFsxLTldfDFbMC0yXSktKD86MzApKXwoPzooPzowWzEzNTc4XXwxWzAyXSktMzEpKSQvLFxuICAgIC8vIEhIOk1NOlNTXG4gICAgdGltZSA6IC9eKDBbMC05XXwxWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn0kLyxcbiAgICBkYXRlSVNPIDogL15cXGR7NH1bXFwvXFwtXVxcZHsxLDJ9W1xcL1xcLV1cXGR7MSwyfSQvLFxuICAgIC8vIE1NL0REL1lZWVlcbiAgICBtb250aF9kYXlfeWVhciA6IC9eKDBbMS05XXwxWzAxMl0pWy0gXFwvLl0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXVxcZHs0fSQvLFxuICAgIC8vIEREL01NL1lZWVlcbiAgICBkYXlfbW9udGhfeWVhciA6IC9eKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl0oMFsxLTldfDFbMDEyXSlbLSBcXC8uXVxcZHs0fSQvLFxuXG4gICAgLy8gI0ZGRiBvciAjRkZGRkZGXG4gICAgY29sb3IgOiAvXiM/KFthLWZBLUYwLTldezZ9fFthLWZBLUYwLTldezN9KSQvXG4gIH0sXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb25zIHRvIGJlIHVzZWQuIGBlcXVhbFRvYCBiZWluZyB0aGUgb25seSBkZWZhdWx0IGluY2x1ZGVkIGZ1bmN0aW9uLlxuICAgKiBGdW5jdGlvbnMgc2hvdWxkIHJldHVybiBvbmx5IGEgYm9vbGVhbiBpZiB0aGUgaW5wdXQgaXMgdmFsaWQgb3Igbm90LiBGdW5jdGlvbnMgYXJlIGdpdmVuIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiBlbCA6IFRoZSBqUXVlcnkgZWxlbWVudCB0byB2YWxpZGF0ZS5cbiAgICogcmVxdWlyZWQgOiBCb29sZWFuIHZhbHVlIG9mIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYmUgcHJlc2VudCBvciBub3QuXG4gICAqIHBhcmVudCA6IFRoZSBkaXJlY3QgcGFyZW50IG9mIHRoZSBpbnB1dC5cbiAgICogQG9wdGlvblxuICAgKi9cbiAgdmFsaWRhdG9yczoge1xuICAgIGVxdWFsVG86IGZ1bmN0aW9uIChlbCwgcmVxdWlyZWQsIHBhcmVudCkge1xuICAgICAgcmV0dXJuICQoYCMke2VsLmF0dHIoJ2RhdGEtZXF1YWx0bycpfWApLnZhbCgpID09PSBlbC52YWwoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFiaWRlLCAnQWJpZGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICovXG5cbmNsYXNzIEFjY29yZGlvbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhIHBsYWluIG9iamVjdCB3aXRoIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFjY29yZGlvbi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAnU1BBQ0UnOiAndG9nZ2xlJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBhY2NvcmRpb24gYnkgYW5pbWF0aW5nIHRoZSBwcmVzZXQgYWN0aXZlIHBhbmUocykuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpO1xuICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1hY2NvcmRpb24taXRlbV0nKTtcblxuICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbihpZHgsIGVsKSB7XG4gICAgICB2YXIgJGVsID0gJChlbCksXG4gICAgICAgICAgJGNvbnRlbnQgPSAkZWwuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpLFxuICAgICAgICAgIGlkID0gJGNvbnRlbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjb3JkaW9uJyksXG4gICAgICAgICAgbGlua0lkID0gZWwuaWQgfHwgYCR7aWR9LWxhYmVsYDtcblxuICAgICAgJGVsLmZpbmQoJ2E6Zmlyc3QnKS5hdHRyKHtcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBpZCxcbiAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgJ2lkJzogbGlua0lkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgJGNvbnRlbnQuYXR0cih7J3JvbGUnOiAndGFicGFuZWwnLCAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLCAnYXJpYS1oaWRkZW4nOiB0cnVlLCAnaWQnOiBpZH0pO1xuICAgIH0pO1xuICAgIHZhciAkaW5pdEFjdGl2ZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICB0aGlzLmZpcnN0VGltZUluaXQgPSB0cnVlO1xuICAgIGlmKCRpbml0QWN0aXZlLmxlbmd0aCl7XG4gICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRoaXMuZmlyc3RUaW1lSW5pdCk7XG4gICAgICB0aGlzLmZpcnN0VGltZUluaXQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9jaGVja0RlZXBMaW5rID0gKCkgPT4ge1xuICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgLy9uZWVkIGEgaGFzaCBhbmQgYSByZWxldmFudCBhbmNob3IgaW4gdGhpcyB0YWJzZXRcbiAgICAgIGlmKGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gdGhpcy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInK2FuY2hvcisnXCJdJyksXG4gICAgICAgICRhbmNob3IgPSAkKGFuY2hvcik7XG5cbiAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCAmJiAkYW5jaG9yKSB7XG4gICAgICAgICAgaWYgKCEkbGluay5wYXJlbnQoJ1tkYXRhLWFjY29yZGlvbi1pdGVtXScpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgICAgdGhpcy5kb3duKCRhbmNob3IsIHRoaXMuZmlyc3RUaW1lSW5pdCk7XG4gICAgICAgICAgICB0aGlzLmZpcnN0VGltZUluaXQgPSBmYWxzZTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy9yb2xsIHVwIGEgbGl0dGxlIHRvIHNob3cgdGhlIHRpdGxlc1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IF90aGlzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogb2Zmc2V0LnRvcCB9LCBfdGhpcy5vcHRpb25zLmRlZXBMaW5rU211ZGdlRGVsYXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHpwbHVnaW4gaGFzIGRlZXBsaW5rZWQgYXQgcGFnZWxvYWRcbiAgICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbiNkZWVwbGlua1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2RlZXBsaW5rLnpmLmFjY29yZGlvbicsIFskbGluaywgJGFuY2hvcl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy91c2UgYnJvd3NlciB0byBvcGVuIGEgdGFiLCBpZiBpdCBleGlzdHMgaW4gdGhpcyB0YWJzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB0aGlzLl9jaGVja0RlZXBMaW5rKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBhY2NvcmRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpO1xuICAgICAgdmFyICR0YWJDb250ZW50ID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgaWYgKCR0YWJDb250ZW50Lmxlbmd0aCkge1xuICAgICAgICAkZWxlbS5jaGlsZHJlbignYScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uIGtleWRvd24uemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suemYuYWNjb3JkaW9uJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHRhYkNvbnRlbnQpO1xuICAgICAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uJywge1xuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyICRhID0gJGVsZW0ubmV4dCgpLmZpbmQoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQpIHtcbiAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5wcmV2KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICQod2luZG93KS5vbigncG9wc3RhdGUnLCB0aGlzLl9jaGVja0RlZXBMaW5rKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgc2VsZWN0ZWQgY29udGVudCBwYW5lJ3Mgb3Blbi9jbG9zZSBzdGF0ZS5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBqUXVlcnkgb2JqZWN0IG9mIHRoZSBwYW5lIHRvIHRvZ2dsZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgaWYoJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG93bigkdGFyZ2V0KTtcbiAgICB9XG4gICAgLy9laXRoZXIgcmVwbGFjZSBvciB1cGRhdGUgYnJvd3NlciBoaXN0b3J5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgdmFyIGFuY2hvciA9ICR0YXJnZXQucHJldignYScpLmF0dHIoJ2hyZWYnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGRhdGVIaXN0b3J5KSB7XG4gICAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgYW5jaG9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGFjY29yZGlvbiB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHBhbmUgdG8gb3BlbiAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpcnN0VGltZSAtIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHJlZmxvdyBzaG91bGQgaGFwcGVuLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2Rvd25cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkb3duKCR0YXJnZXQsIGZpcnN0VGltZSkge1xuICAgICR0YXJnZXRcbiAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKVxuICAgICAgLnBhcmVudCgnW2RhdGEtdGFiLWNvbnRlbnRdJylcbiAgICAgIC5hZGRCYWNrKClcbiAgICAgIC5wYXJlbnQoKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCAmJiAhZmlyc3RUaW1lKSB7XG4gICAgICB2YXIgJGN1cnJlbnRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgaWYgKCRjdXJyZW50QWN0aXZlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwKCRjdXJyZW50QWN0aXZlLm5vdCgkdGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHRhcmdldC5zbGlkZURvd24odGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgdGFiIGlzIGRvbmUgb3BlbmluZy5cbiAgICAgICAqIEBldmVudCBBY2NvcmRpb24jZG93blxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uJywgWyR0YXJnZXRdKTtcbiAgICB9KTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICAnYXJpYS1leHBhbmRlZCc6IHRydWUsXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHRhYiBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBBY2NvcmRpb24gdGFiIHRvIGNsb3NlIChgLmFjY29yZGlvbi1jb250ZW50YCkuXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jdXBcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyICRhdW50cyA9ICR0YXJnZXQucGFyZW50KCkuc2libGluZ3MoKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYoKCF0aGlzLm9wdGlvbnMuYWxsb3dBbGxDbG9zZWQgJiYgISRhdW50cy5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHx8ICEkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIGNvbGxhcHNpbmcgdXAuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb24jdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvLyB9KTtcblxuICAgICR0YXJnZXQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgICAgICAgICAucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgJChgIyR7JHRhcmdldC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKX1gKS5hdHRyKHtcbiAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2Rlc3Ryb3llZFxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10YWItY29udGVudF0nKS5zdG9wKHRydWUpLnNsaWRlVXAoMCkuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignLnpmLmFjY29yZGlvbicpO1xuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgJCh3aW5kb3cpLm9mZigncG9wc3RhdGUnLCB0aGlzLl9jaGVja0RlZXBMaW5rKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhbiBhY2NvcmRpb24gcGFuZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlFeHBhbmQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBjbG9zZSBhbGwgcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBwYW5lIHNwZWNpZmllZCBieSBoYXNoIGFuY2hvclxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIGRlZXAgbGluayBzY3JvbGwgdG8gbWFrZSBzdXJlIHRoZSB0b3Agb2YgdGhlIGFjY29yZGlvbiBwYW5lbCBpcyB2aXNpYmxlXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGlua1NtdWRnZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiB0aW1lIChtcykgZm9yIHRoZSBkZWVwIGxpbmsgYWRqdXN0bWVudFxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDMwMFxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2VEZWxheTogMzAwLFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGJyb3dzZXIgaGlzdG9yeSB3aXRoIHRoZSBvcGVuIGFjY29yZGlvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXBkYXRlSGlzdG9yeTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uTWVudScpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZUFsbCdcbiAgICB9KTtcbiAgfVxuXG5cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7Ly8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgfSk7XG5cbiAgICB0aGlzLiRtZW51TGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyIGxpbmtJZCA9IHRoaXMuaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUtbGluaycpLFxuICAgICAgICAgICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICRlbGVtLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAncm9sZSc6ICdtZW51aXRlbScsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG4gICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHsgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb25NZW51Jywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgX3RoaXMudXAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7Ly8uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy51cCh0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGFsbCBwYW5lcyBvZiB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93QWxsKCkge1xuICAgIHRoaXMuZG93bih0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICBpZighJHRhcmdldC5pcygnOmFuaW1hdGVkJykpIHtcbiAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZG93blxuICAgKi9cbiAgZG93bigkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICB9XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pXG4gICAgICAucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG5cbiAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRhcmdldC5zbGlkZURvd24oX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjZG93blxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICAgIH0pO1xuICAgICAgLy99KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I3VwXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvL30pO1xuXG4gICAgdmFyICRtZW51cyA9ICR0YXJnZXQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKDApLmFkZEJhY2soKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBtdWx0aU9wZW46IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb25NZW51LCAnQWNjb3JkaW9uTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJpbGxkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcmlsbGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBEcmlsbGRvd24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyaWxsZG93biBtZW51LlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBEcmlsbGRvd24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0RyaWxsZG93bicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0RyaWxsZG93bicsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICdkb3duJyxcbiAgICAgICdTSElGVF9UQUInOiAndXAnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGRyaWxsZG93biBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMgb2YgZWxlbWVudHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaS5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignYScpO1xuICAgIHRoaXMuJHN1Ym1lbnVzID0gdGhpcy4kc3VibWVudUFuY2hvcnMucGFyZW50KCdsaScpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5ub3QoJy5qcy1kcmlsbGRvd24tYmFjaycpLmF0dHIoJ3JvbGUnLCAnbWVudWl0ZW0nKS5maW5kKCdhJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScsICh0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZHJpbGxkb3duJykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZHJpbGxkb3duJykpKTtcblxuICAgIHRoaXMuX3ByZXBhcmVNZW51KCk7XG4gICAgdGhpcy5fcmVnaXN0ZXJFdmVudHMoKTtcblxuICAgIHRoaXMuX2tleWJvYXJkRXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogcHJlcGFyZXMgZHJpbGxkb3duIG1lbnUgYnkgc2V0dGluZyBhdHRyaWJ1dGVzIHRvIGxpbmtzIGFuZCBlbGVtZW50c1xuICAgKiBzZXRzIGEgbWluIGhlaWdodCB0byBwcmV2ZW50IGNvbnRlbnQganVtcGluZ1xuICAgKiB3cmFwcyB0aGUgZWxlbWVudCBpZiBub3QgYWxyZWFkeSB3cmFwcGVkXG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX3ByZXBhcmVNZW51KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gaWYoIXRoaXMub3B0aW9ucy5ob2xkT3Blbil7XG4gICAgLy8gICB0aGlzLl9tZW51TGlua0V2ZW50cygpO1xuICAgIC8vIH1cbiAgICB0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpO1xuICAgICAgdmFyICRzdWIgPSAkbGluay5wYXJlbnQoKTtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMucGFyZW50TGluayl7XG4gICAgICAgICRsaW5rLmNsb25lKCkucHJlcGVuZFRvKCRzdWIuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpLndyYXAoJzxsaSBjbGFzcz1cImlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0gaXMtc3VibWVudS1pdGVtIGlzLWRyaWxsZG93bi1zdWJtZW51LWl0ZW1cIiByb2xlPVwibWVudS1pdGVtXCI+PC9saT4nKTtcbiAgICAgIH1cbiAgICAgICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicsICRsaW5rLmF0dHIoJ2hyZWYnKSkucmVtb3ZlQXR0cignaHJlZicpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICAkbGluay5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAwLFxuICAgICAgICAgICAgJ3JvbGUnOiAnbWVudSdcbiAgICAgICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoJGxpbmspO1xuICAgIH0pO1xuICAgIHRoaXMuJHN1Ym1lbnVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkbWVudSA9ICQodGhpcyksXG4gICAgICAgICAgJGJhY2sgPSAkbWVudS5maW5kKCcuanMtZHJpbGxkb3duLWJhY2snKTtcbiAgICAgIGlmKCEkYmFjay5sZW5ndGgpe1xuICAgICAgICBzd2l0Y2ggKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvblBvc2l0aW9uKSB7XG4gICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICAgICAgJG1lbnUuYXBwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG9wXCI6XG4gICAgICAgICAgICAkbWVudS5wcmVwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGJhY2tCdXR0b25Qb3NpdGlvbiB2YWx1ZSAnXCIgKyBfdGhpcy5vcHRpb25zLmJhY2tCdXR0b25Qb3NpdGlvbiArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc3VibWVudXMuYWRkQ2xhc3MoJ2ludmlzaWJsZScpO1xuICAgIGlmKCF0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkge1xuICAgICAgdGhpcy4kc3VibWVudXMuYWRkQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzJyk7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgd3JhcHBlciBvbiBlbGVtZW50IGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgaWYoIXRoaXMuJGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bicpKXtcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSAkKHRoaXMub3B0aW9ucy53cmFwcGVyKS5hZGRDbGFzcygnaXMtZHJpbGxkb3duJyk7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuYW5pbWF0ZUhlaWdodCkgdGhpcy4kd3JhcHBlci5hZGRDbGFzcygnYW5pbWF0ZS1oZWlnaHQnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKTtcbiAgICB9XG4gICAgLy8gc2V0IHdyYXBwZXJcbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoKTtcbiAgICB0aGlzLiR3cmFwcGVyLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpO1xuICB9XG5cbiAgX3Jlc2l6ZSgpIHtcbiAgICB0aGlzLiR3cmFwcGVyLmNzcyh7J21heC13aWR0aCc6ICdub25lJywgJ21pbi1oZWlnaHQnOiAnbm9uZSd9KTtcbiAgICAvLyBfZ2V0TWF4RGltcyBoYXMgc2lkZSBlZmZlY3RzIChib28pIGJ1dCBjYWxsaW5nIGl0IHNob3VsZCB1cGRhdGUgYWxsIG90aGVyIG5lY2Vzc2FyeSBoZWlnaHRzICYgd2lkdGhzXG4gICAgdGhpcy4kd3JhcHBlci5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIGVsZW1lbnRzIGluIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgbWVudSBpdGVtIHRvIGFkZCBoYW5kbGVycyB0by5cbiAgICovXG4gIF9ldmVudHMoJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKVxuICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZigkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ2xpJykuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpKXtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZihlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LmZpcnN0RWxlbWVudENoaWxkKXtcbiAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gfVxuICAgICAgX3RoaXMuX3Nob3coJGVsZW0ucGFyZW50KCdsaScpKTtcblxuICAgICAgaWYoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spe1xuICAgICAgICB2YXIgJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgICAgICRib2R5Lm9mZignLnpmLmRyaWxsZG93bicpLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8ICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSkgeyByZXR1cm47IH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cdCAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIHRoaXMuX3Jlc2l6ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBtZW51IGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZ2lzdGVyRXZlbnRzKCkge1xuICAgIGlmKHRoaXMub3B0aW9ucy5zY3JvbGxUb3Ape1xuICAgICAgdGhpcy5fYmluZEhhbmRsZXIgPSB0aGlzLl9zY3JvbGxUb3AuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ29wZW4uemYuZHJpbGxkb3duIGhpZGUuemYuZHJpbGxkb3duIGNsb3NlZC56Zi5kcmlsbGRvd24nLHRoaXMuX2JpbmRIYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIHRvIFRvcCBvZiBFbGVtZW50IG9yIGRhdGEtc2Nyb2xsLXRvcC1lbGVtZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI3Njcm9sbG1lXG4gICAqL1xuICBfc2Nyb2xsVG9wKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyICRzY3JvbGxUb3BFbGVtZW50ID0gX3RoaXMub3B0aW9ucy5zY3JvbGxUb3BFbGVtZW50IT0nJz8kKF90aGlzLm9wdGlvbnMuc2Nyb2xsVG9wRWxlbWVudCk6X3RoaXMuJGVsZW1lbnQsXG4gICAgICAgIHNjcm9sbFBvcyA9IHBhcnNlSW50KCRzY3JvbGxUb3BFbGVtZW50Lm9mZnNldCgpLnRvcCtfdGhpcy5vcHRpb25zLnNjcm9sbFRvcE9mZnNldCk7XG4gICAgJCgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZSh7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLGZ1bmN0aW9uKCl7XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyBhZnRlciB0aGUgbWVudSBoYXMgc2Nyb2xsZWRcbiAgICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI3Njcm9sbG1lXG4gICAgICAgICovXG4gICAgICBpZih0aGlzPT09JCgnaHRtbCcpWzBdKV90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Njcm9sbG1lLnpmLmRyaWxsZG93bicpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2V5Ym9hcmRFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJG1lbnVJdGVtcy5hZGQodGhpcy4kZWxlbWVudC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2sgPiBhLCAuaXMtc3VibWVudS1wYXJlbnQtaXRlbSA+IGEnKSkub24oJ2tleWRvd24uemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJykuY2hpbGRyZW4oJ2EnKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJpbGxkb3duJywge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIC8vIERvbid0IHRhcCBmb2N1cyBvbiBmaXJzdCBlbGVtZW50IGluIHJvb3QgdWxcbiAgICAgICAgICByZXR1cm4gISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGk6Zmlyc3QtY2hpbGQgPiBhJykpO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAvLyBEb24ndCB0YXAgZm9jdXMgb24gbGFzdCBlbGVtZW50IGluIHJvb3QgdWxcbiAgICAgICAgICByZXR1cm4gISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGk6bGFzdC1jaGlsZCA+IGEnKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBEb24ndCBjbG9zZSBvbiBlbGVtZW50IGluIHJvb3QgdWxcbiAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJz4gbGkgPiBhJykpKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoKS5wYXJlbnQoKSk7XG4gICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoKS5wYXJlbnQoKS5zaWJsaW5ncygnYScpLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRtZW51SXRlbXMpKSB7IC8vIG5vdCBtZW51IGl0ZW0gbWVhbnMgYmFjayBidXR0b25cbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jY2xvc2VkXG4gICAqL1xuICBfaGlkZUFsbCgpIHtcbiAgICB2YXIgJGVsZW0gPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1kcmlsbGRvd24tc3VibWVudS5pcy1hY3RpdmUnKS5hZGRDbGFzcygnaXMtY2xvc2luZycpO1xuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7aGVpZ2h0OiRlbGVtLnBhcmVudCgpLmNsb3Nlc3QoJ3VsJykuZGF0YSgnY2FsY0hlaWdodCcpfSk7XG4gICAgJGVsZW0ub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkZWxlbSksIGZ1bmN0aW9uKGUpe1xuICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGZ1bGx5IGNsb3NlZC5cbiAgICAgICAgICogQGV2ZW50IERyaWxsZG93biNjbG9zZWRcbiAgICAgICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYuZHJpbGxkb3duJyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgZWFjaCBgYmFja2AgYnV0dG9uLCBhbmQgY2xvc2VzIG9wZW4gbWVudXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI2JhY2tcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgc3ViLW1lbnUgdG8gYWRkIGBiYWNrYCBldmVudC5cbiAgICovXG4gIF9iYWNrKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAkZWxlbS5vZmYoJ2NsaWNrLnpmLmRyaWxsZG93bicpO1xuICAgICRlbGVtLmNoaWxkcmVuKCcuanMtZHJpbGxkb3duLWJhY2snKVxuICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21vdXNldXAgb24gYmFjaycpO1xuICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBwYXJlbnQgc3VibWVudSwgY2FsbCBzaG93XG4gICAgICAgIGxldCBwYXJlbnRTdWJNZW51ID0gJGVsZW0ucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGlmIChwYXJlbnRTdWJNZW51Lmxlbmd0aCkge1xuICAgICAgICAgIF90aGlzLl9zaG93KHBhcmVudFN1Yk1lbnUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVyIHRvIG1lbnUgaXRlbXMgdy9vIHN1Ym1lbnVzIHRvIGNsb3NlIG9wZW4gbWVudXMgb24gY2xpY2suXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21lbnVMaW5rRXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kbWVudUl0ZW1zLm5vdCgnLmlzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpXG4gICAgICAgIC5vZmYoJ2NsaWNrLnpmLmRyaWxsZG93bicpXG4gICAgICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgLy8gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfdGhpcy5faGlkZUFsbCgpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNvcGVuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IGVsZW1lbnQgd2l0aCBhIHN1Ym1lbnUgdG8gb3BlbiwgaS5lLiB0aGUgYGxpYCB0YWcuXG4gICAqL1xuICBfc2hvdygkZWxlbSkge1xuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB0aGlzLiR3cmFwcGVyLmNzcyh7aGVpZ2h0OiRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmRhdGEoJ2NhbGNIZWlnaHQnKX0pO1xuICAgICRlbGVtLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5hZGRDbGFzcygnaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2ludmlzaWJsZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIG9wZW5lZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI29wZW5cbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYuZHJpbGxkb3duJywgWyRlbGVtXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGVzIGEgc3VibWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNoaWRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGhpZGUsIGkuZS4gdGhlIGB1bGAgdGFnLlxuICAgKi9cbiAgX2hpZGUoJGVsZW0pIHtcbiAgICBpZih0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCkgdGhpcy4kd3JhcHBlci5jc3Moe2hlaWdodDokZWxlbS5wYXJlbnQoKS5jbG9zZXN0KCd1bCcpLmRhdGEoJ2NhbGNIZWlnaHQnKX0pO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgJGVsZW0ucGFyZW50KCdsaScpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgJGVsZW0uYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKS5hZGRDbGFzcygnaXMtY2xvc2luZycpXG4gICAgJGVsZW0uYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKVxuICAgICAgICAgLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW0pLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAkZWxlbS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcnKTtcbiAgICAgICAgICAgJGVsZW0uYmx1cigpLmFkZENsYXNzKCdpbnZpc2libGUnKTtcbiAgICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgKi9cbiAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1heERpbXMoKSB7XG4gICAgdmFyICBtYXhIZWlnaHQgPSAwLCByZXN1bHQgPSB7fSwgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHN1Ym1lbnVzLmFkZCh0aGlzLiRlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbnVtT2ZFbGVtcyA9ICQodGhpcykuY2hpbGRyZW4oJ2xpJykubGVuZ3RoO1xuICAgICAgdmFyIGhlaWdodCA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcykuaGVpZ2h0O1xuICAgICAgbWF4SGVpZ2h0ID0gaGVpZ2h0ID4gbWF4SGVpZ2h0ID8gaGVpZ2h0IDogbWF4SGVpZ2h0O1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICQodGhpcykuZGF0YSgnY2FsY0hlaWdodCcsaGVpZ2h0KTtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudScpKSByZXN1bHRbJ2hlaWdodCddID0gaGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYoIXRoaXMub3B0aW9ucy5hdXRvSGVpZ2h0KSByZXN1bHRbJ21pbi1oZWlnaHQnXSA9IGAke21heEhlaWdodH1weGA7XG5cbiAgICByZXN1bHRbJ21heC13aWR0aCddID0gYCR7dGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBEcmlsbGRvd24gTWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYodGhpcy5vcHRpb25zLnNjcm9sbFRvcCkgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5kcmlsbGRvd24nLHRoaXMuX2JpbmRIYW5kbGVyKTtcbiAgICB0aGlzLl9oaWRlQWxsKCk7XG5cdCAgdGhpcy4kZWxlbWVudC5vZmYoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnZHJpbGxkb3duJyk7XG4gICAgdGhpcy4kZWxlbWVudC51bndyYXAoKVxuICAgICAgICAgICAgICAgICAuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrLCAuaXMtc3VibWVudS1wYXJlbnQtaXRlbScpLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgIC5lbmQoKS5maW5kKCcuaXMtYWN0aXZlLCAuaXMtY2xvc2luZywgLmlzLWRyaWxsZG93bi1zdWJtZW51JykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nIGlzLWRyaWxsZG93bi1zdWJtZW51JylcbiAgICAgICAgICAgICAgICAgLmVuZCgpLmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXggcm9sZScpO1xuICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMpLm9mZignLnpmLmRyaWxsZG93bicpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kc3VibWVudXMucmVtb3ZlQ2xhc3MoJ2RyaWxsZG93bi1zdWJtZW51LWNvdmVyLXByZXZpb3VzJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpO1xuICAgICAgJGxpbmsucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgIGlmKCRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKXtcbiAgICAgICAgJGxpbmsuYXR0cignaHJlZicsICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKS5yZW1vdmVEYXRhKCdzYXZlZEhyZWYnKTtcbiAgICAgIH1lbHNleyByZXR1cm47IH1cbiAgICB9KTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH07XG59XG5cbkRyaWxsZG93bi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIGZvciBKUyBnZW5lcmF0ZWQgYmFjayBidXR0b24uIFByZXBlbmRlZCAgb3IgYXBwZW5kZWQgKHNlZSBiYWNrQnV0dG9uUG9zaXRpb24pIHRvIHN1Ym1lbnUgbGlzdHMgYW5kIGRlbGV0ZWQgb24gYGRlc3Ryb3lgIG1ldGhvZCwgJ2pzLWRyaWxsZG93bi1iYWNrJyBjbGFzcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJzxsaSBjbGFzcz1cImpzLWRyaWxsZG93bi1iYWNrXCI+PGEgdGFiaW5kZXg9XCIwXCI+QmFjazwvYT48L2xpPidcbiAgICovXG4gIGJhY2tCdXR0b246ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLFxuICAvKipcbiAgICogUG9zaXRpb24gdGhlIGJhY2sgYnV0dG9uIGVpdGhlciBhdCB0aGUgdG9wIG9yIGJvdHRvbSBvZiBkcmlsbGRvd24gc3VibWVudXMuIENhbiBiZSBgJ2xlZnQnYCBvciBgJ2JvdHRvbSdgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHRvcFxuICAgKi9cbiAgYmFja0J1dHRvblBvc2l0aW9uOiAndG9wJyxcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIHRvIHdyYXAgZHJpbGxkb3duIG1lbnUuIFVzZSBhIGNsYXNzIG5hbWUgZm9yIGluZGVwZW5kZW50IHN0eWxpbmc7IHRoZSBKUyBhcHBsaWVkIGNsYXNzOiBgaXMtZHJpbGxkb3duYCBpcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJzxkaXY+PC9kaXY+J1xuICAgKi9cbiAgd3JhcHBlcjogJzxkaXY+PC9kaXY+JyxcbiAgLyoqXG4gICAqIEFkZHMgdGhlIHBhcmVudCBsaW5rIHRvIHRoZSBzdWJtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcGFyZW50TGluazogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWVudSB0byByZXR1cm4gdG8gcm9vdCBsaXN0IG9uIGJvZHkgY2xpY2suXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gYXV0byBhZGp1c3QgaGVpZ2h0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbmltYXRlIHRoZSBhdXRvIGFkanVzdCBoZWlnaHQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhbmltYXRlSGVpZ2h0OiBmYWxzZSxcbiAgLyoqXG4gICAqIFNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBtZW51IGFmdGVyIG9wZW5pbmcgYSBzdWJtZW51IG9yIG5hdmlnYXRpbmcgYmFjayB1c2luZyB0aGUgbWVudSBiYWNrIGJ1dHRvblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2Nyb2xsVG9wOiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyBqcXVlcnkgc2VsZWN0b3IgKGZvciBleGFtcGxlICdib2R5Jykgb2YgZWxlbWVudCB0byB0YWtlIG9mZnNldCgpLnRvcCBmcm9tLCBpZiBlbXB0eSBzdHJpbmcgdGhlIGRyaWxsZG93biBtZW51IG9mZnNldCgpLnRvcCBpcyB0YWtlblxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBzY3JvbGxUb3BFbGVtZW50OiAnJyxcbiAgLyoqXG4gICAqIFNjcm9sbFRvcCBvZmZzZXRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzY3JvbGxUb3BPZmZzZXQ6IDAsXG4gIC8qKlxuICAgKiBTY3JvbGwgYW5pbWF0aW9uIGR1cmF0aW9uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogU2Nyb2xsIGFuaW1hdGlvbiBlYXNpbmcuIENhbiBiZSBgJ3N3aW5nJ2Agb3IgYCdsaW5lYXInYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2FuaW1hdGV8SlF1ZXJ5IGFuaW1hdGV9XG4gICAqIEBkZWZhdWx0ICdzd2luZydcbiAgICovXG4gIGFuaW1hdGlvbkVhc2luZzogJ3N3aW5nJ1xuICAvLyBob2xkT3BlbjogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcmlsbGRvd24sICdEcmlsbGRvd24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIERyb3Bkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBEcm9wZG93biB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJvcGRvd24uXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24uXG4gICAqICAgICAgICBPYmplY3Qgc2hvdWxkIGJlIG9mIHRoZSBkcm9wZG93biBwYW5lbCwgcmF0aGVyIHRoYW4gaXRzIGFuY2hvci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBEcm9wZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0Ryb3Bkb3duJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd24nLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4gYnkgc2V0dGluZy9jaGVja2luZyBvcHRpb25zIGFuZCBhdHRyaWJ1dGVzLCBhZGRpbmcgaGVscGVyIHZhcmlhYmxlcywgYW5kIHNhdmluZyB0aGUgYW5jaG9yLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRhbmNob3IgPSAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKSA6ICQoYFtkYXRhLW9wZW49XCIkeyRpZH1cIl1gKTtcbiAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAnYXJpYS1jb250cm9scyc6ICRpZCxcbiAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2VcblxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLnBhcmVudENsYXNzKXtcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLicgKyB0aGlzLm9wdGlvbnMucGFyZW50Q2xhc3MpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy4kcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICB0aGlzLmNvdW50ZXIgPSA0O1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucyA9IFtdO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6ICRpZCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLiRhbmNob3JbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZGQtYW5jaG9yJylcbiAgICB9KTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGN1cnJlbnQgb3JpZW50YXRpb24gb2YgZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHBvc2l0aW9uIC0gc3RyaW5nIHZhbHVlIG9mIGEgcG9zaXRpb24gY2xhc3MuXG4gICAqL1xuICBnZXRQb3NpdGlvbkNsYXNzKCkge1xuICAgIHZhciB2ZXJ0aWNhbFBvc2l0aW9uID0gdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO1xuICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uID0gdmVydGljYWxQb3NpdGlvbiA/IHZlcnRpY2FsUG9zaXRpb25bMF0gOiAnJztcbiAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gL2Zsb2F0LShcXFMrKS8uZXhlYyh0aGlzLiRhbmNob3JbMF0uY2xhc3NOYW1lKTtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uWzFdIDogJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uICsgJyAnICsgdmVydGljYWxQb3NpdGlvbiA6IHZlcnRpY2FsUG9zaXRpb247XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogQWRqdXN0cyB0aGUgZHJvcGRvd24gcGFuZXMgb3JpZW50YXRpb24gYnkgYWRkaW5nL3JlbW92aW5nIHBvc2l0aW9uaW5nIGNsYXNzZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBwb3NpdGlvbiBjbGFzcyB0byByZW1vdmUuXG4gICAqL1xuICBfcmVwb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uID8gcG9zaXRpb24gOiAnYm90dG9tJyk7XG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3RvcCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAndG9wJyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygncmlnaHQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfVxuXG4gICAgLy9pZiBkZWZhdWx0IGNoYW5nZSBkaWRuJ3Qgd29yaywgdHJ5IGJvdHRvbSBvciBsZWZ0IGZpcnN0XG4gICAgZWxzZSBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLy9pZiBub3RoaW5nIGNsZWFyZWQsIHNldCB0byBib3R0b21cbiAgICBlbHNle1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmNvdW50ZXItLTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gb2YgdGhlIGRyb3Bkb3duIHBhbmUsIGNoZWNrcyBmb3IgY29sbGlzaW9ucy5cbiAgICogUmVjdXJzaXZlbHkgY2FsbHMgaXRzZWxmIGlmIGEgY29sbGlzaW9uIGlzIGRldGVjdGVkLCB3aXRoIGEgbmV3IHBvc2l0aW9uIGNsYXNzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICBpZih0aGlzLiRhbmNob3IuYXR0cignYXJpYS1leHBhbmRlZCcpID09PSAnZmFsc2UnKXsgcmV0dXJuIGZhbHNlOyB9XG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCksXG4gICAgICAgICRlbGVEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgJGFuY2hvckRpbXMgPSBGb3VuZGF0aW9uLkJveC5HZXREaW1lbnNpb25zKHRoaXMuJGFuY2hvciksXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQ7XG5cbiAgICBpZigoJGVsZURpbXMud2lkdGggPj0gJGVsZURpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy4kZWxlbWVudCwgdGhpcy4kcGFyZW50KSkpe1xuICAgICAgdmFyIG5ld1dpZHRoID0gJGVsZURpbXMud2luZG93RGltcy53aWR0aCxcbiAgICAgICAgICBwYXJlbnRIT2Zmc2V0ID0gMDtcbiAgICAgIGlmKHRoaXMuJHBhcmVudCl7XG4gICAgICAgIHZhciAkcGFyZW50RGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kcGFyZW50KSxcbiAgICAgICAgICAgIHBhcmVudEhPZmZzZXQgPSAkcGFyZW50RGltcy5vZmZzZXQubGVmdDtcbiAgICAgICAgaWYgKCRwYXJlbnREaW1zLndpZHRoIDwgbmV3V2lkdGgpe1xuICAgICAgICAgIG5ld1dpZHRoID0gJHBhcmVudERpbXMud2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLiRlbGVtZW50LCB0aGlzLiRhbmNob3IsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0ICsgcGFyZW50SE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6IG5ld1dpZHRoIC0gKHRoaXMub3B0aW9ucy5oT2Zmc2V0ICogMiksXG4gICAgICAgICdoZWlnaHQnOiAnYXV0bydcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uQm94LkdldE9mZnNldHModGhpcy4kZWxlbWVudCwgdGhpcy4kYW5jaG9yLCBwb3NpdGlvbiwgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0KSk7XG5cbiAgICB3aGlsZSghRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50LCB0aGlzLiRwYXJlbnQsIHRydWUpICYmIHRoaXMuY291bnRlcil7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmhvdmVyKXtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgYm9keURhdGEgPSAkKCdib2R5JykuZGF0YSgpO1xuICAgICAgICBpZih0eXBlb2YoYm9keURhdGEud2hhdGlucHV0KSA9PT0gJ3VuZGVmaW5lZCcgfHwgYm9keURhdGEud2hhdGlucHV0ID09PSAnbW91c2UnKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgdHJ1ZSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgfSk7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuaG92ZXJQYW5lKXtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4kYW5jaG9yLmFkZCh0aGlzLiRlbGVtZW50KS5vbigna2V5ZG93bi56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgdmFyICR0YXJnZXQgPSAkKHRoaXMpLFxuICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUoX3RoaXMuJGVsZW1lbnQpO1xuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJvcGRvd24nLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKF90aGlzLiRhbmNob3IpKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KS5ub3QodGhpcy4kZWxlbWVudCksXG4gICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKVxuICAgICAgICAgIC5vbignY2xpY2suemYuZHJvcGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKF90aGlzLiRhbmNob3IuaXMoZS50YXJnZXQpIHx8IF90aGlzLiRhbmNob3IuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBkcm9wZG93biBwYW5lLCBhbmQgZmlyZXMgYSBidWJibGluZyBldmVudCB0byBjbG9zZSBvdGhlciBkcm9wZG93bnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jY2xvc2VtZVxuICAgKiBAZmlyZXMgRHJvcGRvd24jc2hvd1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIG90aGVyIG9wZW4gZHJvcGRvd25zLCB0eXBpY2FsbHkgd2hlbiBkcm9wZG93biBpcyBvcGVuaW5nXG4gICAgICogQGV2ZW50IERyb3Bkb3duI2Nsb3NlbWVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYuZHJvcGRvd24nLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgIHRoaXMuJGFuY2hvci5hZGRDbGFzcygnaG92ZXInKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgLy8gdGhpcy4kZWxlbWVudC8qLnNob3coKSovO1xuICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICB2YXIgJGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgIGlmKCRmb2N1c2FibGUubGVuZ3RoKXtcbiAgICAgICAgJGZvY3VzYWJsZS5lcSgwKS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2speyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC50cmFwRm9jdXModGhpcy4kZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bicsIFt0aGlzLiRlbGVtZW50XSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvcGVuIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuXG4gICAgdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKCdob3ZlcicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgaWYodGhpcy5jbGFzc0NoYW5nZWQpe1xuICAgICAgdmFyIGN1clBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICAgIGlmKGN1clBvc2l0aW9uQ2xhc3Mpe1xuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGN1clBvc2l0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAvKi5oaWRlKCkqLy5jc3Moe2hlaWdodDogJycsIHdpZHRoOiAnJ30pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY291bnRlciA9IDQ7XG4gICAgICB0aGlzLnVzZWRQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgbm8gbG9uZ2VyIHZpc2libGUuXG4gICAgICogQGV2ZW50IERyb3Bkb3duI2hpZGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy50cmFwRm9jdXMpIHtcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93biBwYW5lJ3MgdmlzaWJpbGl0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIGlmKHRoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicpKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56Zi5kcm9wZG93bicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ2xhc3MgdGhhdCBkZXNpZ25hdGVzIGJvdW5kaW5nIGNvbnRhaW5lciBvZiBEcm9wZG93biAoZGVmYXVsdDogd2luZG93KVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBwYXJlbnRDbGFzczogbnVsbCxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDI1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjUwLFxuICAvKipcbiAgICogQWxsb3cgc3VibWVudXMgdG8gb3BlbiBvbiBob3ZlciBldmVudHNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIERvbid0IGNsb3NlIGRyb3Bkb3duIHdoZW4gaG92ZXJpbmcgb3ZlciBkcm9wZG93biBwYW5lXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBob3ZlclBhbmU6IGZhbHNlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgdk9mZnNldDogMSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgYmV0d2VlbiB0aGUgZHJvcGRvd24gcGFuZSBhbmQgdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGhPZmZzZXQ6IDEsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGFkanVzdCBvcGVuIHBvc2l0aW9uLiBKUyB3aWxsIHRlc3QgYW5kIGZpbGwgdGhpcyBpbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgcG9zaXRpb25DbGFzczogJycsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgcGx1Z2luIHRvIHRyYXAgZm9jdXMgdG8gdGhlIGRyb3Bkb3duIHBhbmUgaWYgb3BlbmVkIHdpdGgga2V5Ym9hcmQgY29tbWFuZHMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byBzZXQgZm9jdXMgdG8gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiB0aGUgcGFuZSwgcmVnYXJkbGVzcyBvZiBtZXRob2Qgb2Ygb3BlbmluZy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keSB0byBjbG9zZSB0aGUgZHJvcGRvd24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcm9wZG93biwgJ0Ryb3Bkb3duJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcm9wZG93bk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duLW1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBEcm9wZG93bk1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBEcm9wZG93bk1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJvcGRvd25NZW51LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcm9wZG93bk1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4sIGFuZCBjYWxscyBfcHJlcGFyZU1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgc3VicyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICB0aGlzLiRtZW51SXRlbXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5yaWdodENsYXNzKSB8fCB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAncmlnaHQnIHx8IEZvdW5kYXRpb24ucnRsKCkgfHwgdGhpcy4kZWxlbWVudC5wYXJlbnRzKCcudG9wLWJhci1yaWdodCcpLmlzKCcqJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAncmlnaHQnO1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzLmFkZENsYXNzKCdvcGVucy1yaWdodCcpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfTtcblxuICBfaXNWZXJ0aWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kdGFicy5jc3MoJ2Rpc3BsYXknKSA9PT0gJ2Jsb2NrJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBlbGVtZW50cyB3aXRoaW4gdGhlIG1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGhhc1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8ICh0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcpLFxuICAgICAgICBwYXJDbGFzcyA9ICdpcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCc7XG5cbiAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICB2YXIgaGFuZGxlQ2xpY2tGbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCBgLiR7cGFyQ2xhc3N9YCksXG4gICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpLFxuICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51Jyk7XG5cbiAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrIHx8ICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4gJiYgIWhhc1RvdWNoKSB8fCAoX3RoaXMub3B0aW9ucy5mb3JjZUZvbGxvdyAmJiBoYXNUb3VjaCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAkZWxlbS5hZGQoJGVsZW0ucGFyZW50c1VudGlsKF90aGlzLiRlbGVtZW50LCBgLiR7cGFyQ2xhc3N9YCkpLmF0dHIoJ2RhdGEtaXMtY2xpY2snLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3BlbiB8fCBoYXNUb3VjaCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgTGVhZiBlbGVtZW50IENsaWNrc1xuICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrSW5zaWRlKXtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignY2xpY2suemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICBpZighaGFzU3ViKXtcbiAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgIGNsZWFyVGltZW91dCgkZWxlbS5kYXRhKCdfZGVsYXknKSk7XG4gICAgICAgICAgJGVsZW0uZGF0YSgnX2RlbGF5Jywgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLl9zaG93KCRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpKTtcbiAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICBpZiAoaGFzU3ViICYmIF90aGlzLm9wdGlvbnMuYXV0b2Nsb3NlKSB7XG4gICAgICAgICAgaWYgKCRlbGVtLmF0dHIoJ2RhdGEtaXMtY2xpY2snKSA9PT0gJ3RydWUnICYmIF90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KCRlbGVtLmRhdGEoJ19kZWxheScpKTtcbiAgICAgICAgICAkZWxlbS5kYXRhKCdfZGVsYXknLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuY2xvc2luZ1RpbWUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuJG1lbnVJdGVtcy5vbigna2V5ZG93bi56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ1tyb2xlPVwibWVudWl0ZW1cIl0nKSxcbiAgICAgICAgICBpc1RhYiA9IF90aGlzLiR0YWJzLmluZGV4KCRlbGVtZW50KSA+IC0xLFxuICAgICAgICAgICRlbGVtZW50cyA9IGlzVGFiID8gX3RoaXMuJHRhYnMgOiAkZWxlbWVudC5zaWJsaW5ncygnbGknKS5hZGQoJGVsZW1lbnQpLFxuICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKGktMSk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKGkrMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIG5leHRTaWJsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghJGVsZW1lbnQuaXMoJzpsYXN0LWNoaWxkJykpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSwgcHJldlNpYmxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHByZXZFbGVtZW50LmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgb3BlblN1YiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJHN1YiA9ICRlbGVtZW50LmNoaWxkcmVuKCd1bC5pcy1kcm9wZG93bi1zdWJtZW51Jyk7XG4gICAgICAgIGlmICgkc3ViLmxlbmd0aCkge1xuICAgICAgICAgIF90aGlzLl9zaG93KCRzdWIpO1xuICAgICAgICAgICRlbGVtZW50LmZpbmQoJ2xpID4gYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2UgeyByZXR1cm47IH1cbiAgICAgIH0sIGNsb3NlU3ViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaWYgKCRlbGVtZW50LmlzKCc6Zmlyc3QtY2hpbGQnKSkge1xuICAgICAgICB2YXIgY2xvc2UgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBjbG9zZS5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgIF90aGlzLl9oaWRlKGNsb3NlKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvL31cbiAgICAgIH07XG4gICAgICB2YXIgZnVuY3Rpb25zID0ge1xuICAgICAgICBvcGVuOiBvcGVuU3ViLFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuX2hpZGUoX3RoaXMuJGVsZW1lbnQpO1xuICAgICAgICAgIF90aGlzLiRtZW51SXRlbXMuZmluZCgnYTpmaXJzdCcpLmZvY3VzKCk7IC8vIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChpc1RhYikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzVmVydGljYWwoKSkgeyAvLyB2ZXJ0aWNhbCBtZW51XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIG5leHQ6IGNsb3NlU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogb3BlblN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgICAgcHJldmlvdXM6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIGhvcml6b250YWwgbWVudVxuICAgICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSB7IC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBuZXh0OiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgcHJldmlvdXM6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICB1cDogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICBwcmV2aW91czogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgeyAvLyBub3QgdGFicyAtPiBvbmUgc3ViXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSB7IC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgIG5leHQ6IGNsb3NlU3ViLFxuICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWIsXG4gICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWIsXG4gICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJvcGRvd25NZW51JywgZnVuY3Rpb25zKTtcblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gZXZlbnQgaGFuZGxlciB0byB0aGUgYm9keSB0byBjbG9zZSBhbnkgZHJvcGRvd25zIG9uIGEgY2xpY2suXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEJvZHlIYW5kbGVyKCkge1xuICAgIHZhciAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSksXG4gICAgICAgIF90aGlzID0gdGhpcztcbiAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpXG4gICAgICAgICAub24oJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgdmFyICRsaW5rID0gX3RoaXMuJGVsZW1lbnQuZmluZChlLnRhcmdldCk7XG4gICAgICAgICAgIGlmICgkbGluay5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgX3RoaXMuX2hpZGUoKTtcbiAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgZHJvcGRvd24gcGFuZSwgYW5kIGNoZWNrcyBmb3IgY29sbGlzaW9ucyBmaXJzdC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRzdWIgLSB1bCBlbGVtZW50IHRoYXQgaXMgYSBzdWJtZW51IHRvIHNob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBmaXJlcyBEcm9wZG93bk1lbnUjc2hvd1xuICAgKi9cbiAgX3Nob3coJHN1Yikge1xuICAgIHZhciBpZHggPSB0aGlzLiR0YWJzLmluZGV4KHRoaXMuJHRhYnMuZmlsdGVyKGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICByZXR1cm4gJChlbCkuZmluZCgkc3ViKS5sZW5ndGggPiAwO1xuICAgIH0pKTtcbiAgICB2YXIgJHNpYnMgPSAkc3ViLnBhcmVudCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5zaWJsaW5ncygnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLl9oaWRlKCRzaWJzLCBpZHgpO1xuICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLmFkZENsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKVxuICAgICAgICAucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICB2YXIgY2xlYXIgPSBGb3VuZGF0aW9uLkJveC5JbU5vdFRvdWNoaW5nWW91KCRzdWIsIG51bGwsIHRydWUpO1xuICAgIGlmICghY2xlYXIpIHtcbiAgICAgIHZhciBvbGRDbGFzcyA9IHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdsZWZ0JyA/ICctcmlnaHQnIDogJy1sZWZ0JyxcbiAgICAgICAgICAkcGFyZW50TGkgPSAkc3ViLnBhcmVudCgnLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICAkcGFyZW50TGkucmVtb3ZlQ2xhc3MoYG9wZW5zJHtvbGRDbGFzc31gKS5hZGRDbGFzcyhgb3BlbnMtJHt0aGlzLm9wdGlvbnMuYWxpZ25tZW50fWApO1xuICAgICAgY2xlYXIgPSBGb3VuZGF0aW9uLkJveC5JbU5vdFRvdWNoaW5nWW91KCRzdWIsIG51bGwsIHRydWUpO1xuICAgICAgaWYgKCFjbGVhcikge1xuICAgICAgICAkcGFyZW50TGkucmVtb3ZlQ2xhc3MoYG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKS5hZGRDbGFzcygnb3BlbnMtaW5uZXInKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgICRzdWIuY3NzKCd2aXNpYmlsaXR5JywgJycpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7IHRoaXMuX2FkZEJvZHlIYW5kbGVyKCk7IH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBuZXcgZHJvcGRvd24gcGFuZSBpcyB2aXNpYmxlLlxuICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bm1lbnUnLCBbJHN1Yl0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGVzIGEgc2luZ2xlLCBjdXJyZW50bHkgb3BlbiBkcm9wZG93biBwYW5lLCBpZiBwYXNzZWQgYSBwYXJhbWV0ZXIsIG90aGVyd2lzZSwgaGlkZXMgZXZlcnl0aGluZy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIGVsZW1lbnQgd2l0aCBhIHN1Ym1lbnUgdG8gaGlkZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlICR0YWJzIGNvbGxlY3Rpb24gdG8gaGlkZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hpZGUoJGVsZW0sIGlkeCkge1xuICAgIHZhciAkdG9DbG9zZTtcbiAgICBpZiAoJGVsZW0gJiYgJGVsZW0ubGVuZ3RoKSB7XG4gICAgICAkdG9DbG9zZSA9ICRlbGVtO1xuICAgIH0gZWxzZSBpZiAoaWR4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICR0b0Nsb3NlID0gdGhpcy4kdGFicy5ub3QoZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgICAgcmV0dXJuIGkgPT09IGlkeDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICR0b0Nsb3NlID0gdGhpcy4kZWxlbWVudDtcbiAgICB9XG4gICAgdmFyIHNvbWV0aGluZ1RvQ2xvc2UgPSAkdG9DbG9zZS5oYXNDbGFzcygnaXMtYWN0aXZlJykgfHwgJHRvQ2xvc2UuZmluZCgnLmlzLWFjdGl2ZScpLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoc29tZXRoaW5nVG9DbG9zZSkge1xuICAgICAgJHRvQ2xvc2UuZmluZCgnbGkuaXMtYWN0aXZlJykuYWRkKCR0b0Nsb3NlKS5hdHRyKHtcbiAgICAgICAgJ2RhdGEtaXMtY2xpY2snOiBmYWxzZVxuICAgICAgfSkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAkdG9DbG9zZS5maW5kKCd1bC5qcy1kcm9wZG93bi1hY3RpdmUnKS5yZW1vdmVDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZWQgfHwgJHRvQ2xvc2UuZmluZCgnb3BlbnMtaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgJHRvQ2xvc2UuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGQoJHRvQ2xvc2UpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGBvcGVucy1pbm5lciBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYG9wZW5zLSR7b2xkQ2xhc3N9YCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVuIG1lbnVzIGFyZSBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3dubWVudScsIFskdG9DbG9zZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLXJpZ2h0LWFycm93IGlzLWxlZnQtYXJyb3cgaXMtZG93bi1hcnJvdyBvcGVucy1yaWdodCBvcGVucy1sZWZ0IG9wZW5zLWlubmVyJyk7XG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRHJvcGRvd25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGlzYWxsb3dzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgc3VibWVudXNcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVIb3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyBhIHN1Ym1lbnUgdG8gYXV0b21hdGljYWxseSBjbG9zZSBvbiBhIG1vdXNlbGVhdmUgZXZlbnQsIGlmIG5vdCBjbGlja2VkIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9jbG9zZTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICBob3ZlckRlbGF5OiA1MCxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBvcGVuL3JlbWFpbiBvcGVuIG9uIHBhcmVudCBjbGljayBldmVudC4gQWxsb3dzIGN1cnNvciB0byBtb3ZlIGF3YXkgZnJvbSBtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xpY2tPcGVuOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IGNsb3NpbmcgYSBzdWJtZW51IG9uIGEgbW91c2VsZWF2ZSBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG5cbiAgY2xvc2luZ1RpbWU6IDUwMCxcbiAgLyoqXG4gICAqIFBvc2l0aW9uIG9mIHRoZSBtZW51IHJlbGF0aXZlIHRvIHdoYXQgZGlyZWN0aW9uIHRoZSBzdWJtZW51cyBzaG91bGQgb3Blbi4gSGFuZGxlZCBieSBKUy4gQ2FuIGJlIGAnbGVmdCdgIG9yIGAncmlnaHQnYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnbGVmdCdcbiAgICovXG4gIGFsaWdubWVudDogJ2xlZnQnLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIHRoZSBib2R5IHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gbGVhZiBhbmNob3IgbGlua3MgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd25NZW51LCAnRHJvcGRvd25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBFcXVhbGl6ZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmVxdWFsaXplclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXIgaWYgZXF1YWxpemVyIGNvbnRhaW5zIGltYWdlc1xuICovXG5cbmNsYXNzIEVxdWFsaXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEVxdWFsaXplci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEVxdWFsaXplciBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZXFJZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lcXVhbGl6ZXInKSB8fCAnJztcbiAgICB2YXIgJHdhdGNoZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWVxdWFsaXplci13YXRjaD1cIiR7ZXFJZH1cIl1gKTtcblxuICAgIHRoaXMuJHdhdGNoZWQgPSAkd2F0Y2hlZC5sZW5ndGggPyAkd2F0Y2hlZCA6IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoXScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1yZXNpemUnLCAoZXFJZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdlcScpKSk7XG5cdHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1tdXRhdGUnLCAoZXFJZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdlcScpKSk7XG5cbiAgICB0aGlzLmhhc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHtcbiAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgb25Qb3N0RXF1YWxpemVkQm91bmQ6IHRoaXMuX29uUG9zdEVxdWFsaXplZC5iaW5kKHRoaXMpXG4gICAgfTtcblxuICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICB2YXIgdG9vU21hbGw7XG4gICAgaWYodGhpcy5vcHRpb25zLmVxdWFsaXplT24pe1xuICAgICAgdG9vU21hbGwgPSB0aGlzLl9jaGVja01RKCk7XG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gICAgaWYoKHRvb1NtYWxsICE9PSB1bmRlZmluZWQgJiYgdG9vU21hbGwgPT09IGZhbHNlKSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGlmKGltZ3MubGVuZ3RoKXtcbiAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZChpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGlmIHRoZSBicmVha3BvaW50IGlzIHRvbyBzbWFsbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXVzZUV2ZW50cygpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAnLnpmLmVxdWFsaXplcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQsXG5cdCAgJ211dGF0ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHJlc2l6ZW1lLnpmLnRyaWdnZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZXNpemVNZShlKSB7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUG9zdEVxdWFsaXplZChlKSB7XG4gICAgaWYoZS50YXJnZXQgIT09IHRoaXMuJGVsZW1lbnRbMF0peyB0aGlzLl9yZWZsb3coKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgRXF1YWxpemVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgaWYodGhpcy5oYXNOZXN0ZWQpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcblx0ICB0aGlzLiRlbGVtZW50Lm9uKCdtdXRhdGVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcbiAgICB9XG4gICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTVEoKSB7XG4gICAgdmFyIHRvb1NtYWxsID0gIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5pcyh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbik7XG4gICAgaWYodG9vU21hbGwpe1xuICAgICAgaWYodGhpcy5pc09uKXtcbiAgICAgICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICBpZighdGhpcy5pc09uKXtcbiAgICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b29TbWFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIG5vb3AgdmVyc2lvbiBmb3IgdGhlIHBsdWdpblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2tpbGxzd2l0Y2goKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEVxdWFsaXplciB1cG9uIERPTSBjaGFuZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZWZsb3coKSB7XG4gICAgaWYoIXRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uU3RhY2spe1xuICAgICAgaWYodGhpcy5faXNTdGFja2VkKCkpe1xuICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmVxdWFsaXplQnlSb3cpIHtcbiAgICAgIHRoaXMuZ2V0SGVpZ2h0c0J5Um93KHRoaXMuYXBwbHlIZWlnaHRCeVJvdy5iaW5kKHRoaXMpKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuZ2V0SGVpZ2h0cyh0aGlzLmFwcGx5SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYW51YWxseSBkZXRlcm1pbmVzIGlmIHRoZSBmaXJzdCAyIGVsZW1lbnRzIGFyZSAqTk9UKiBzdGFja2VkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2lzU3RhY2tlZCgpIHtcbiAgICBpZiAoIXRoaXMuJHdhdGNoZWRbMF0gfHwgIXRoaXMuJHdhdGNoZWRbMV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kd2F0Y2hlZFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgIT09IHRoaXMuJHdhdGNoZWRbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAqL1xuICBnZXRIZWlnaHRzKGNiKSB7XG4gICAgdmFyIGhlaWdodHMgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgaGVpZ2h0cy5wdXNoKHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0KTtcbiAgICB9XG4gICAgY2IoaGVpZ2h0cyk7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgKi9cbiAgZ2V0SGVpZ2h0c0J5Um93KGNiKSB7XG4gICAgdmFyIGxhc3RFbFRvcE9mZnNldCA9ICh0aGlzLiR3YXRjaGVkLmxlbmd0aCA/IHRoaXMuJHdhdGNoZWQuZmlyc3QoKS5vZmZzZXQoKS50b3AgOiAwKSxcbiAgICAgICAgZ3JvdXBzID0gW10sXG4gICAgICAgIGdyb3VwID0gMDtcbiAgICAvL2dyb3VwIGJ5IFJvd1xuICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgLy9tYXliZSBjb3VsZCB1c2UgdGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRUb3BcbiAgICAgIHZhciBlbE9mZnNldFRvcCA9ICQodGhpcy4kd2F0Y2hlZFtpXSkub2Zmc2V0KCkudG9wO1xuICAgICAgaWYgKGVsT2Zmc2V0VG9wIT1sYXN0RWxUb3BPZmZzZXQpIHtcbiAgICAgICAgZ3JvdXArKztcbiAgICAgICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgICAgICBsYXN0RWxUb3BPZmZzZXQ9ZWxPZmZzZXRUb3A7XG4gICAgICB9XG4gICAgICBncm91cHNbZ3JvdXBdLnB1c2goW3RoaXMuJHdhdGNoZWRbaV0sdGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHRdKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMCwgbG4gPSBncm91cHMubGVuZ3RoOyBqIDwgbG47IGorKykge1xuICAgICAgdmFyIGhlaWdodHMgPSAkKGdyb3Vwc1tqXSkubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzWzFdOyB9KS5nZXQoKTtcbiAgICAgIHZhciBtYXggICAgICAgICA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgICAgZ3JvdXBzW2pdLnB1c2gobWF4KTtcbiAgICB9XG4gICAgY2IoZ3JvdXBzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdFxuICAgKiBAcGFyYW0ge2FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICovXG4gIGFwcGx5SGVpZ2h0KGhlaWdodHMpIHtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcblxuICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCBtYXgpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3QgYnkgcm93XG4gICAqIEBwYXJhbSB7YXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRyb3dcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkcm93XG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgKi9cbiAgYXBwbHlIZWlnaHRCeVJvdyhncm91cHMpIHtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgYXJlIGFwcGxpZWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGxlbiA7IGkrKykge1xuICAgICAgdmFyIGdyb3Vwc0lMZW5ndGggPSBncm91cHNbaV0ubGVuZ3RoLFxuICAgICAgICAgIG1heCA9IGdyb3Vwc1tpXVtncm91cHNJTGVuZ3RoIC0gMV07XG4gICAgICBpZiAoZ3JvdXBzSUxlbmd0aDw9Mikge1xuICAgICAgICAkKGdyb3Vwc1tpXVswXVswXSkuY3NzKHsnaGVpZ2h0JzonYXV0byd9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgcGVyIHJvdyBhcmUgYXBwbGllZFxuICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkcm93XG4gICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXInKTtcbiAgICAgIGZvciAodmFyIGogPSAwLCBsZW5KID0gKGdyb3Vwc0lMZW5ndGgtMSk7IGogPCBsZW5KIDsgaisrKSB7XG4gICAgICAgICQoZ3JvdXBzW2ldW2pdWzBdKS5jc3MoeydoZWlnaHQnOm1heH0pO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBwZXIgcm93IGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkcm93XG4gICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRXF1YWxpemVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gd2hlbiBzdGFja2VkIG9uIHNtYWxsZXIgc2NyZWVucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplT25TdGFjazogZmFsc2UsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXF1YWxpemVCeVJvdzogZmFsc2UsXG4gIC8qKlxuICAgKiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtaW5pbXVtIGJyZWFrcG9pbnQgc2l6ZSB0aGUgcGx1Z2luIHNob3VsZCBlcXVhbGl6ZSBoZWlnaHRzIG9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBlcXVhbGl6ZU9uOiAnJ1xufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEVxdWFsaXplciwgJ0VxdWFsaXplcicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogSW50ZXJjaGFuZ2UgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmludGVyY2hhbmdlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlclxuICovXG5cbmNsYXNzIEludGVyY2hhbmdlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgSW50ZXJjaGFuZ2UuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEludGVyY2hhbmdlLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgdGhpcy5jdXJyZW50UGF0aCA9ICcnO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnSW50ZXJjaGFuZ2UnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgSW50ZXJjaGFuZ2UgcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGludGVyY2hhbmdlIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy5fYWRkQnJlYWtwb2ludHMoKTtcbiAgICB0aGlzLl9nZW5lcmF0ZVJ1bGVzKCk7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBJbnRlcmNoYW5nZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgICQod2luZG93KS5vbigncmVzaXplLnpmLmludGVyY2hhbmdlJywgRm91bmRhdGlvbi51dGlsLnRocm90dGxlKCgpID0+IHtcbiAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgIH0sIDUwKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcbiAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKHJ1bGUucXVlcnkpLm1hdGNoZXMpIHtcbiAgICAgICAgICBtYXRjaCA9IHJ1bGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHRoaXMucmVwbGFjZShtYXRjaC5wYXRoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgRm91bmRhdGlvbiBicmVha3BvaW50cyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgb2JqZWN0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCcmVha3BvaW50cygpIHtcbiAgICBmb3IgKHZhciBpIGluIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzKSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXNbaV07XG4gICAgICAgIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeS5uYW1lXSA9IHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIEludGVyY2hhbmdlIGVsZW1lbnQgZm9yIHRoZSBwcm92aWRlZCBtZWRpYSBxdWVyeSArIGNvbnRlbnQgcGFpcmluZ3NcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0aGF0IGlzIGFuIEludGVyY2hhbmdlIGluc3RhbmNlXG4gICAqIEByZXR1cm5zIHtBcnJheX0gc2NlbmFyaW9zIC0gQXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGhhdmUgJ21xJyBhbmQgJ3BhdGgnIGtleXMgd2l0aCBjb3JyZXNwb25kaW5nIGtleXNcbiAgICovXG4gIF9nZW5lcmF0ZVJ1bGVzKGVsZW1lbnQpIHtcbiAgICB2YXIgcnVsZXNMaXN0ID0gW107XG4gICAgdmFyIHJ1bGVzO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5ydWxlcykge1xuICAgICAgcnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ2ludGVyY2hhbmdlJyk7XG4gICAgfVxuICAgIFxuICAgIHJ1bGVzID0gIHR5cGVvZiBydWxlcyA9PT0gJ3N0cmluZycgPyBydWxlcy5tYXRjaCgvXFxbLio/XFxdL2cpIDogcnVsZXM7XG5cbiAgICBmb3IgKHZhciBpIGluIHJ1bGVzKSB7XG4gICAgICBpZihydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldLnNsaWNlKDEsIC0xKS5zcGxpdCgnLCAnKTtcbiAgICAgICAgdmFyIHBhdGggPSBydWxlLnNsaWNlKDAsIC0xKS5qb2luKCcnKTtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gcnVsZVtydWxlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnldKSB7XG4gICAgICAgICAgcXVlcnkgPSBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnldO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZXNMaXN0LnB1c2goe1xuICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBydWxlc0xpc3Q7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBgc3JjYCBwcm9wZXJ0eSBvZiBhbiBpbWFnZSwgb3IgY2hhbmdlIHRoZSBIVE1MIG9mIGEgY29udGFpbmVyLCB0byB0aGUgc3BlY2lmaWVkIHBhdGguXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCAtIFBhdGggdG8gdGhlIGltYWdlIG9yIEhUTUwgcGFydGlhbC5cbiAgICogQGZpcmVzIEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAqL1xuICByZXBsYWNlKHBhdGgpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UGF0aCA9PT0gcGF0aCkgcmV0dXJuO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgdHJpZ2dlciA9ICdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZSc7XG5cbiAgICAvLyBSZXBsYWNpbmcgaW1hZ2VzXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0ubm9kZU5hbWUgPT09ICdJTUcnKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3NyYycsIHBhdGgpLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLmN1cnJlbnRQYXRoID0gcGF0aDtcbiAgICAgIH0pXG4gICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIGJhY2tncm91bmQgaW1hZ2VzXG4gICAgZWxzZSBpZiAocGF0aC5tYXRjaCgvXFwuKGdpZnxqcGd8anBlZ3xwbmd8c3ZnfHRpZmYpKFs/I10uKik/L2kpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7ICdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybCgnK3BhdGgrJyknIH0pXG4gICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgfVxuICAgIC8vIFJlcGxhY2luZyBIVE1MXG4gICAgZWxzZSB7XG4gICAgICAkLmdldChwYXRoLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBfdGhpcy4kZWxlbWVudC5odG1sKHJlc3BvbnNlKVxuICAgICAgICAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgICAgICAkKHJlc3BvbnNlKS5mb3VuZGF0aW9uKCk7XG4gICAgICAgIF90aGlzLmN1cnJlbnRQYXRoID0gcGF0aDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gY29udGVudCBpbiBhbiBJbnRlcmNoYW5nZSBlbGVtZW50IGlzIGRvbmUgYmVpbmcgbG9hZGVkLlxuICAgICAqIEBldmVudCBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgICAqL1xuICAgIC8vIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBpbnRlcmNoYW5nZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIC8vVE9ETyB0aGlzLlxuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkludGVyY2hhbmdlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogUnVsZXMgdG8gYmUgYXBwbGllZCB0byBJbnRlcmNoYW5nZSBlbGVtZW50cy4gU2V0IHdpdGggdGhlIGBkYXRhLWludGVyY2hhbmdlYCBhcnJheSBub3RhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P2FycmF5fVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihJbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqL1xuXG5jbGFzcyBNYWdlbGxhbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLmNhbGNQb2ludHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ01hZ2VsbGFuJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hZ2VsbGFuIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnbWFnZWxsYW4nKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHRhcmdldHMgPSAkKCdbZGF0YS1tYWdlbGxhbi10YXJnZXRdJyk7XG4gICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICdpZCc6IGlkXG4gICAgfSk7XG4gICAgdGhpcy4kYWN0aXZlID0gJCgpO1xuICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGNhbGNQb2ludHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJHRhciA9ICQodGhpcyksXG4gICAgICAgICAgcHQgPSBNYXRoLnJvdW5kKCR0YXIub2Zmc2V0KCkudG9wIC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgTWFnZWxsYW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICRib2R5ID0gJCgnaHRtbCwgYm9keScpLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZzogICBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgICB9O1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICAgIGlmKGxvY2F0aW9uLmhhc2gpe1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgICAgfSk7XG4gICAgJCh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpIHtcbiAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2Mod2luZG93LmxvY2F0aW9uLmhhc2gpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIGdpdmVuIGxvY2F0aW9uIG9uIHRoZSBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIHRhcmdldCBkb2VzIG5vdCBleGlzdCB0byBwcmV2ZW50IGVycm9yc1xuICAgIGlmICghJChsb2MpLmxlbmd0aCkge3JldHVybiBmYWxzZTt9XG4gICAgdGhpcy5faW5UcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxQb3MgPSBNYXRoLnJvdW5kKCQobG9jKS5vZmZzZXQoKS50b3AgLSB0aGlzLm9wdGlvbnMudGhyZXNob2xkIC8gMiAtIHRoaXMub3B0aW9ucy5iYXJPZmZzZXQpO1xuXG4gICAgJCgnaHRtbCwgYm9keScpLnN0b3AodHJ1ZSkuYW5pbWF0ZShcbiAgICAgIHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSxcbiAgICAgIHRoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgIHRoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmcsXG4gICAgICBmdW5jdGlvbigpIHtfdGhpcy5faW5UcmFuc2l0aW9uID0gZmFsc2U7IF90aGlzLl91cGRhdGVBY3RpdmUoKX1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIE1hZ2VsbGFuIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHJlZmxvdygpIHtcbiAgICB0aGlzLmNhbGNQb2ludHMoKTtcbiAgICB0aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGFjdGl2ZSBsb2NhdGlvbiBsaW5rLCBhbmQgdXBkYXRlcyB0aGUgdXJsIGhhc2ggZm9yIHRoZSBwYWdlLCBpZiBkZWVwTGlua2luZyBlbmFibGVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIE1hZ2VsbGFuI3VwZGF0ZVxuICAgKi9cbiAgX3VwZGF0ZUFjdGl2ZSgvKmV2dCwgZWxlbSwgc2Nyb2xsUG9zKi8pIHtcbiAgICBpZih0aGlzLl9pblRyYW5zaXRpb24pIHtyZXR1cm47fVxuICAgIHZhciB3aW5Qb3MgPSAvKnNjcm9sbFBvcyB8fCovIHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCwgMTApLFxuICAgICAgICBjdXJJZHg7XG5cbiAgICBpZih3aW5Qb3MgKyB0aGlzLndpbkhlaWdodCA9PT0gdGhpcy5kb2NIZWlnaHQpeyBjdXJJZHggPSB0aGlzLnBvaW50cy5sZW5ndGggLSAxOyB9XG4gICAgZWxzZSBpZih3aW5Qb3MgPCB0aGlzLnBvaW50c1swXSl7IGN1cklkeCA9IHVuZGVmaW5lZDsgfVxuICAgIGVsc2V7XG4gICAgICB2YXIgaXNEb3duID0gdGhpcy5zY3JvbGxQb3MgPCB3aW5Qb3MsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocCwgaSl7XG4gICAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLmJhck9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgICB9KTtcbiAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICB9XG5cbiAgICB0aGlzLiRhY3RpdmUucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IFwiXCI7XG4gICAgICBpZihjdXJJZHggIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIH1cbiAgICAgIGlmKGhhc2ggIT09IHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGlmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSl7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGhhc2gpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbFBvcyA9IHdpblBvcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIG1hZ2VsbGFuIGlzIGZpbmlzaGVkIHVwZGF0aW5nIHRvIHRoZSBuZXcgYWN0aXZlIGVsZW1lbnQuXG4gICAgICogQGV2ZW50IE1hZ2VsbGFuI3VwZGF0ZVxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndXBkYXRlLnpmLm1hZ2VsbGFuJywgW3RoaXMuJGFjdGl2ZV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIE1hZ2VsbGFuIGFuZCByZXNldHMgdGhlIHVybCBvZiB0aGUgd2luZG93LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5tYWdlbGxhbicpXG4gICAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3N9YCkucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoaGFzaCwgJycpO1xuICAgIH1cblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5NYWdlbGxhbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MDBcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gIC8qKlxuICAgKiBBbmltYXRpb24gc3R5bGUgdG8gdXNlIHdoZW4gc2Nyb2xsaW5nIGJldHdlZW4gbG9jYXRpb25zLiBDYW4gYmUgYCdzd2luZydgIG9yIGAnbGluZWFyJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hbmltYXRlfEpxdWVyeSBhbmltYXRlfVxuICAgKi9cbiAgYW5pbWF0aW9uRWFzaW5nOiAnbGluZWFyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gdXNlIGFzIGEgbWFya2VyIGZvciBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDUwXG4gICAqL1xuICB0aHJlc2hvbGQ6IDUwLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGxvY2F0aW9ucyBsaW5rIG9uIHRoZSBtYWdlbGxhbiBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2FjdGl2ZSdcbiAgICovXG4gIGFjdGl2ZUNsYXNzOiAnYWN0aXZlJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgc2NyaXB0IHRvIG1hbmlwdWxhdGUgdGhlIHVybCBvZiB0aGUgY3VycmVudCBwYWdlLCBhbmQgaWYgc3VwcG9ydGVkLCBhbHRlciB0aGUgaGlzdG9yeS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGJhck9mZnNldDogMFxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oTWFnZWxsYW4sICdNYWdlbGxhbicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogT2ZmQ2FudmFzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vZmZjYW52YXNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBPZmZDYW52YXMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvZmYtY2FudmFzIHdyYXBwZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGluaXRpYWxpemUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT2ZmQ2FudmFzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy4kbGFzdFRyaWdnZXIgPSAkKCk7XG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKCk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdPZmZDYW52YXMnKVxuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09mZkNhbnZhcycsIHtcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgb2ZmLWNhbnZhcyB3cmFwcGVyIGJ5IGFkZGluZyB0aGUgZXhpdCBvdmVybGF5IChpZiBuZWVkZWQpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyhgaXMtdHJhbnNpdGlvbi0ke3RoaXMub3B0aW9ucy50cmFuc2l0aW9ufWApO1xuXG4gICAgLy8gRmluZCB0cmlnZ2VycyB0aGF0IGFmZmVjdCB0aGlzIGVsZW1lbnQgYW5kIGFkZCBhcmlhLWV4cGFuZGVkIHRvIHRoZW1cbiAgICB0aGlzLiR0cmlnZ2VycyA9ICQoZG9jdW1lbnQpXG4gICAgICAuZmluZCgnW2RhdGEtb3Blbj1cIicraWQrJ1wiXSwgW2RhdGEtY2xvc2U9XCInK2lkKydcIl0sIFtkYXRhLXRvZ2dsZT1cIicraWQrJ1wiXScpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcblxuICAgIC8vIEFkZCBhbiBvdmVybGF5IG92ZXIgdGhlIGNvbnRlbnQgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBvdmVybGF5UG9zaXRpb24gPSAkKHRoaXMuJGVsZW1lbnQpLmNzcyhcInBvc2l0aW9uXCIpID09PSAnZml4ZWQnID8gJ2lzLW92ZXJsYXktZml4ZWQnIDogJ2lzLW92ZXJsYXktYWJzb2x1dGUnO1xuICAgICAgb3ZlcmxheS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2pzLW9mZi1jYW52YXMtb3ZlcmxheSAnICsgb3ZlcmxheVBvc2l0aW9uKTtcbiAgICAgIHRoaXMuJG92ZXJsYXkgPSAkKG92ZXJsYXkpO1xuICAgICAgaWYob3ZlcmxheVBvc2l0aW9uID09PSAnaXMtb3ZlcmxheS1maXhlZCcpIHtcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZCh0aGlzLiRvdmVybGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuc2libGluZ3MoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQodGhpcy4kb3ZlcmxheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzXScpWzBdKS50cmFuc2l0aW9uRHVyYXRpb24pICogMTAwMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byB0aGUgb2ZmLWNhbnZhcyB3cmFwcGVyIGFuZCB0aGUgZXhpdCBvdmVybGF5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKS5vbih7XG4gICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuY2xvc2UuYmluZCh0aGlzKSxcbiAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAna2V5ZG93bi56Zi5vZmZjYW52YXMnOiB0aGlzLl9oYW5kbGVLZXlib2FyZC5iaW5kKHRoaXMpXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSkge1xuICAgICAgdmFyICR0YXJnZXQgPSB0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPyB0aGlzLiRvdmVybGF5IDogJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpO1xuICAgICAgJHRhcmdldC5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ29wZW4uemYudHJpZ2dlciB0b2dnbGUuemYudHJpZ2dlcicpLm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgc2Nyb2xsaW5nIG9mIHRoZSBib2R5IHdoZW4gb2ZmY2FudmFzIGlzIG9wZW4gb24gbW9iaWxlIFNhZmFyaSBhbmQgb3RoZXIgdHJvdWJsZXNvbWUgYnJvd3NlcnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3RvcFNjcm9sbGluZyhldmVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRha2VuIGFuZCBhZGFwdGVkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjg4OTQ0Ny9wcmV2ZW50LWZ1bGwtcGFnZS1zY3JvbGxpbmctaW9zXG4gIC8vIE9ubHkgcmVhbGx5IHdvcmtzIGZvciB5LCBub3Qgc3VyZSBob3cgdG8gZXh0ZW5kIHRvIHggb3IgaWYgd2UgbmVlZCB0by5cbiAgX3JlY29yZFNjcm9sbGFibGUoZXZlbnQpIHtcbiAgICBsZXQgZWxlbSA9IHRoaXM7IC8vIGNhbGxlZCBmcm9tIGV2ZW50IGhhbmRsZXIgY29udGV4dCB3aXRoIHRoaXMgYXMgZWxlbVxuXG4gICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIHNjcm9sbGFibGUgKGNvbnRlbnQgb3ZlcmZsb3dzKSwgdGhlbi4uLlxuICAgIGlmIChlbGVtLnNjcm9sbEhlaWdodCAhPT0gZWxlbS5jbGllbnRIZWlnaHQpIHtcbiAgICAgIC8vIElmIHdlJ3JlIGF0IHRoZSB0b3AsIHNjcm9sbCBkb3duIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgdXBcbiAgICAgIGlmIChlbGVtLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICBlbGVtLnNjcm9sbFRvcCA9IDE7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSdyZSBhdCB0aGUgYm90dG9tLCBzY3JvbGwgdXAgb25lIHBpeGVsIHRvIGFsbG93IHNjcm9sbGluZyBkb3duXG4gICAgICBpZiAoZWxlbS5zY3JvbGxUb3AgPT09IGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0IC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxlbS5hbGxvd1VwID0gZWxlbS5zY3JvbGxUb3AgPiAwO1xuICAgIGVsZW0uYWxsb3dEb3duID0gZWxlbS5zY3JvbGxUb3AgPCAoZWxlbS5zY3JvbGxIZWlnaHQgLSBlbGVtLmNsaWVudEhlaWdodCk7XG4gICAgZWxlbS5sYXN0WSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQucGFnZVk7XG4gIH1cblxuICBfc3RvcFNjcm9sbFByb3BhZ2F0aW9uKGV2ZW50KSB7XG4gICAgbGV0IGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cbiAgICBsZXQgdXAgPSBldmVudC5wYWdlWSA8IGVsZW0ubGFzdFk7XG4gICAgbGV0IGRvd24gPSAhdXA7XG4gICAgZWxlbS5sYXN0WSA9IGV2ZW50LnBhZ2VZO1xuXG4gICAgaWYoKHVwICYmIGVsZW0uYWxsb3dVcCkgfHwgKGRvd24gJiYgZWxlbS5hbGxvd0Rvd24pKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICB0aGlzLiRsYXN0VHJpZ2dlciA9IHRyaWdnZXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvID09PSAndG9wJykge1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmZvcmNlVG8gPT09ICdib3R0b20nKSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCxkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAqIEBldmVudCBPZmZDYW52YXMjb3BlbmVkXG4gICAgICovXG4gICAgX3RoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAvLyBJZiBgY29udGVudFNjcm9sbGAgaXMgc2V0IHRvIGZhbHNlLCBhZGQgY2xhc3MgYW5kIGRpc2FibGUgc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXMuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50U2Nyb2xsID09PSBmYWxzZSkge1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpcy1vZmYtY2FudmFzLW9wZW4nKS5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCd0b3VjaG1vdmUnLCB0aGlzLl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayA9PT0gdHJ1ZSAmJiB0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ2lzLWNsb3NhYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCh0aGlzLiRlbGVtZW50KSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYW52YXNGb2N1cyA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWF1dG9mb2N1c10nKTtcbiAgICAgICAgaWYgKGNhbnZhc0ZvY3VzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FudmFzRm9jdXMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmZpbmQoJ2EsIGJ1dHRvbicpLmVxKDApLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQudHJhcEZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2IgdG8gZmlyZSBhZnRlciBjbG9zdXJlLlxuICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgKi9cbiAgY2xvc2UoY2IpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgICAqIEBldmVudCBPZmZDYW52YXMjY2xvc2VkXG4gICAgICAgKi9cbiAgICAgICAgLnRyaWdnZXIoJ2Nsb3NlZC56Zi5vZmZjYW52YXMnKTtcblxuICAgIC8vIElmIGBjb250ZW50U2Nyb2xsYCBpcyBzZXQgdG8gZmFsc2UsIHJlbW92ZSBjbGFzcyBhbmQgcmUtZW5hYmxlIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudFNjcm9sbCA9PT0gZmFsc2UpIHtcbiAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuJykub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9zdG9wU2Nyb2xsaW5nKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fcmVjb3JkU2Nyb2xsYWJsZSk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbFByb3BhZ2F0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRvdmVybGF5LnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRvdmVybGF5LnJlbW92ZUNsYXNzKCdpcy1jbG9zYWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbiBvciBjbG9zZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBFdmVudCBvYmplY3QgcGFzc2VkIGZyb20gbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgKi9cbiAgdG9nZ2xlKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSkge1xuICAgICAgdGhpcy5jbG9zZShldmVudCwgdHJpZ2dlcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5vcGVuKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBrZXlib2FyZCBpbnB1dCB3aGVuIGRldGVjdGVkLiBXaGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQsIHRoZSBvZmYtY2FudmFzIG1lbnUgY2xvc2VzLCBhbmQgZm9jdXMgaXMgcmVzdG9yZWQgdG8gdGhlIGVsZW1lbnQgdGhhdCBvcGVuZWQgdGhlIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZUtleWJvYXJkKGUpIHtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnT2ZmQ2FudmFzJywge1xuICAgICAgY2xvc2U6ICgpID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB0aGlzLiRsYXN0VHJpZ2dlci5mb2N1cygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVkOiAoKSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgb2ZmY2FudmFzIHBsdWdpbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpO1xuICAgIHRoaXMuJG92ZXJsYXkub2ZmKCcuemYub2ZmY2FudmFzJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuT2ZmQ2FudmFzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3cgdGhlIHVzZXIgdG8gY2xpY2sgb3V0c2lkZSBvZiB0aGUgbWVudSB0byBjbG9zZSBpdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIG92ZXJsYXkgb24gdG9wIG9mIGBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY29udGVudE92ZXJsYXk6IHRydWUsXG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIHNjcm9sbGluZyBvZiB0aGUgbWFpbiBjb250ZW50IHdoZW4gYW4gb2ZmIGNhbnZhcyBwYW5lbCBpcyBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjb250ZW50U2Nyb2xsOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRyYW5zaXRpb25UaW1lOiAwLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRyYW5zaXRpb24gZm9yIHRoZSBvZmZjYW52YXMgbWVudS4gT3B0aW9ucyBhcmUgJ3B1c2gnLCAnZGV0YWNoZWQnIG9yICdzbGlkZScuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcHVzaFxuICAgKi9cbiAgdHJhbnNpdGlvbjogJ3B1c2gnLFxuXG4gIC8qKlxuICAgKiBGb3JjZSB0aGUgcGFnZSB0byBzY3JvbGwgdG8gdG9wIG9yIGJvdHRvbSBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBmb3JjZVRvOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuIGZvciBjZXJ0YWluIGJyZWFrcG9pbnRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICByZXZlYWxPbjogbnVsbCxcblxuICAvKipcbiAgICogRm9yY2UgZm9jdXMgdG8gdGhlIG9mZmNhbnZhcyBvbiBvcGVuLiBJZiB0cnVlLCB3aWxsIGZvY3VzIHRoZSBvcGVuaW5nIHRyaWdnZXIgb24gY2xvc2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgcmV2ZWFsLWZvci1cbiAgICogQHRvZG8gaW1wcm92ZSB0aGUgcmVnZXggdGVzdGluZyBmb3IgdGhpcy5cbiAgICovXG4gIHJldmVhbENsYXNzOiAncmV2ZWFsLWZvci0nLFxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBvcHRpb25hbCBmb2N1cyB0cmFwcGluZyB3aGVuIG9wZW5pbmcgYW4gb2ZmY2FudmFzLiBTZXRzIHRhYmluZGV4IG9mIFtkYXRhLW9mZi1jYW52YXMtY29udGVudF0gdG8gLTEgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihPZmZDYW52YXMsICdPZmZDYW52YXMnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9yYml0IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vcmJpdFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50b3VjaFxuICovXG5cbmNsYXNzIE9yYml0IHtcbiAgLyoqXG4gICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvcmJpdCBjYXJvdXNlbC5cbiAgKiBAY2xhc3NcbiAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIE9yYml0IENhcm91c2VsLlxuICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucyl7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9yYml0LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdPcmJpdCcpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09yYml0Jywge1xuICAgICAgJ2x0cic6IHtcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgIH0sXG4gICAgICAncnRsJzoge1xuICAgICAgICAnQVJST1dfTEVGVCc6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ3ByZXZpb3VzJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMsIHNldHRpbmcgYXR0cmlidXRlcywgYW5kIHN0YXJ0aW5nIHRoZSBhbmltYXRpb24uXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gQFRPRE86IGNvbnNpZGVyIGRpc2N1c3Npb24gb24gUFIgIzkyNzggYWJvdXQgRE9NIHBvbGx1dGlvbiBieSBjaGFuZ2VTbGlkZVxuICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgdGhpcy4kc2xpZGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKTtcblxuICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSxcbiAgICAgICAgaW5pdEFjdGl2ZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKSxcbiAgICAgICAgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ29yYml0Jyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnaWQnOiBpZFxuICAgIH0pO1xuXG4gICAgaWYgKCFpbml0QWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy4kc2xpZGVzLmVxKDApLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy51c2VNVUkpIHtcbiAgICAgIHRoaXMuJHNsaWRlcy5hZGRDbGFzcygnbm8tbW90aW9udWknKTtcbiAgICB9XG5cbiAgICBpZiAoJGltYWdlcy5sZW5ndGgpIHtcbiAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoJGltYWdlcywgdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wcmVwYXJlRm9yT3JiaXQoKTsvL2hlaGVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgIHRoaXMuX2xvYWRCdWxsZXRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmIHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmdlb1N5bmMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmFjY2Vzc2libGUpIHsgLy8gYWxsb3cgd3JhcHBlciB0byBiZSBmb2N1c2FibGUgdG8gZW5hYmxlIGFycm93IG5hdmlnYXRpb25cbiAgICAgIHRoaXMuJHdyYXBwZXIuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGEgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgYnVsbGV0cywgaWYgdGhleSBhcmUgYmVpbmcgdXNlZC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfbG9hZEJ1bGxldHMoKSB7XG4gICAgdGhpcy4kYnVsbGV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKS5maW5kKCdidXR0b24nKTtcbiAgfVxuXG4gIC8qKlxuICAqIFNldHMgYSBgdGltZXJgIG9iamVjdCBvbiB0aGUgb3JiaXQsIGFuZCBzdGFydHMgdGhlIGNvdW50ZXIgZm9yIHRoZSBuZXh0IHNsaWRlLlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBnZW9TeW5jKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy50aW1lciA9IG5ldyBGb3VuZGF0aW9uLlRpbWVyKFxuICAgICAgdGhpcy4kZWxlbWVudCxcbiAgICAgIHtcbiAgICAgICAgZHVyYXRpb246IHRoaXMub3B0aW9ucy50aW1lckRlbGF5LFxuICAgICAgICBpbmZpbml0ZTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB0aGlzLnRpbWVyLnN0YXJ0KCk7XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHdyYXBwZXIgYW5kIHNsaWRlIGhlaWdodHMgZm9yIHRoZSBvcmJpdC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfcHJlcGFyZUZvck9yYml0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fc2V0V3JhcHBlckhlaWdodCgpO1xuICB9XG5cbiAgLyoqXG4gICogQ2FsdWxhdGVzIHRoZSBoZWlnaHQgb2YgZWFjaCBzbGlkZSBpbiB0aGUgY29sbGVjdGlvbiwgYW5kIHVzZXMgdGhlIHRhbGxlc3Qgb25lIGZvciB0aGUgd3JhcHBlciBoZWlnaHQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSB3aGVuIGNvbXBsZXRlLlxuICAqL1xuICBfc2V0V3JhcHBlckhlaWdodChjYikgey8vcmV3cml0ZSB0aGlzIHRvIGBmb3JgIGxvb3BcbiAgICB2YXIgbWF4ID0gMCwgdGVtcCwgY291bnRlciA9IDAsIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLXNsaWRlJywgY291bnRlcik7XG5cbiAgICAgIGlmIChfdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpWzBdICE9PSBfdGhpcy4kc2xpZGVzLmVxKGNvdW50ZXIpWzBdKSB7Ly9pZiBub3QgdGhlIGFjdGl2ZSBzbGlkZSwgc2V0IGNzcyBwb3NpdGlvbiBhbmQgZGlzcGxheSBwcm9wZXJ0eVxuICAgICAgICAkKHRoaXMpLmNzcyh7J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnbm9uZSd9KTtcbiAgICAgIH1cbiAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgY291bnRlcisrO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IHRoaXMuJHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsnaGVpZ2h0JzogbWF4fSk7IC8vb25seSBjaGFuZ2UgdGhlIHdyYXBwZXIgaGVpZ2h0IHByb3BlcnR5IG9uY2UuXG4gICAgICBpZihjYikge2NiKG1heCk7fSAvL2ZpcmUgY2FsbGJhY2sgd2l0aCBtYXggaGVpZ2h0IGRpbWVuc2lvbi5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5jc3MoJ21heC1oZWlnaHQnLCBoZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8qKk5vdyB1c2luZyBjdXN0b20gZXZlbnQgLSB0aGFua3MgdG86KipcbiAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy9cbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnJlc2l6ZW1lLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMuX3ByZXBhcmVGb3JPcmJpdC5iaW5kKHRoaXMpXG4gICAgfSlcbiAgICBpZiAodGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zd2lwZSkge1xuICAgICAgICB0aGlzLiRzbGlkZXMub2ZmKCdzd2lwZWxlZnQuemYub3JiaXQgc3dpcGVyaWdodC56Zi5vcmJpdCcpXG4gICAgICAgIC5vbignc3dpcGVsZWZ0LnpmLm9yYml0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICB9KS5vbignc3dpcGVyaWdodC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSkge1xuICAgICAgICB0aGlzLiRzbGlkZXMub24oJ2NsaWNrLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJywgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICAgIF90aGlzLnRpbWVyW190aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gJ3BhdXNlJyA6ICdzdGFydCddKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2VlbnRlci56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMudGltZXIucGF1c2UoKTtcbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSkge1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubmF2QnV0dG9ucykge1xuICAgICAgICB2YXIgJGNvbnRyb2xzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubmV4dENsYXNzfSwgLiR7dGhpcy5vcHRpb25zLnByZXZDbGFzc31gKTtcbiAgICAgICAgJGNvbnRyb2xzLmF0dHIoJ3RhYmluZGV4JywgMClcbiAgICAgICAgLy9hbHNvIG5lZWQgdG8gaGFuZGxlIGVudGVyL3JldHVybiBhbmQgc3BhY2ViYXIga2V5IHByZXNzZXNcbiAgICAgICAgLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuXHQgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSgkKHRoaXMpLmhhc0NsYXNzKF90aGlzLm9wdGlvbnMubmV4dENsYXNzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgdGhpcy4kYnVsbGV0cy5vbignY2xpY2suemYub3JiaXQgdG91Y2hlbmQuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoL2lzLWFjdGl2ZS9nLnRlc3QodGhpcy5jbGFzc05hbWUpKSB7IHJldHVybiBmYWxzZTsgfS8vaWYgdGhpcyBpcyBhY3RpdmUsIGtpY2sgb3V0IG9mIGZ1bmN0aW9uLlxuICAgICAgICAgIHZhciBpZHggPSAkKHRoaXMpLmRhdGEoJ3NsaWRlJyksXG4gICAgICAgICAgbHRyID0gaWR4ID4gX3RoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgICRzbGlkZSA9IF90aGlzLiRzbGlkZXMuZXEoaWR4KTtcblxuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGx0ciwgJHNsaWRlLCBpZHgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIuYWRkKHRoaXMuJGJ1bGxldHMpLm9uKCdrZXlkb3duLnpmLm9yYml0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnT3JiaXQnLCB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIGlmIGJ1bGxldCBpcyBmb2N1c2VkLCBtYWtlIHN1cmUgZm9jdXMgbW92ZXNcbiAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKF90aGlzLiRidWxsZXRzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLiRidWxsZXRzLmZpbHRlcignLmlzLWFjdGl2ZScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBPcmJpdCBzbyBpdCBjYW4gYmUgcmVpbml0aWFsaXplZFxuICAgKi9cbiAgX3Jlc2V0KCkge1xuICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZXJlIGFyZSBubyBzbGlkZXMgKGZpcnN0IHJ1bilcbiAgICBpZiAodHlwZW9mIHRoaXMuJHNsaWRlcyA9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgLy8gUmVtb3ZlIG9sZCBldmVudHNcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKVxuXG4gICAgICAvLyBSZXN0YXJ0IHRpbWVyIGlmIGF1dG9QbGF5IGlzIGVuYWJsZWRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2V0IGFsbCBzbGlkZGVzXG4gICAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAkKGVsKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWFjdGl2ZSBpcy1pbicpXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpXG4gICAgICAgICAgLmhpZGUoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaG93IHRoZSBmaXJzdCBzbGlkZVxuICAgICAgdGhpcy4kc2xpZGVzLmZpcnN0KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLnNob3coKTtcblxuICAgICAgLy8gVHJpZ2dlcnMgd2hlbiB0aGUgc2xpZGUgaGFzIGZpbmlzaGVkIGFuaW1hdGluZ1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFt0aGlzLiRzbGlkZXMuZmlyc3QoKV0pO1xuXG4gICAgICAvLyBTZWxlY3QgZmlyc3QgYnVsbGV0IGlmIGJ1bGxldHMgYXJlIHByZXNlbnRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICB0aGlzLl91cGRhdGVCdWxsZXRzKDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2xpZGUgdG8gYSBuZXcgb25lLlxuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAqIEBwYXJhbSB7alF1ZXJ5fSBjaG9zZW5TbGlkZSAtIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgc2xpZGUgdG8gc2hvdyBuZXh0LCBpZiBvbmUgaXMgc2VsZWN0ZWQuXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAqL1xuICBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgIGlmICghdGhpcy4kc2xpZGVzKSB7cmV0dXJuOyB9IC8vIERvbid0IGZyZWFrIG91dCBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGNsZWFudXBcbiAgICB2YXIgJGN1clNsaWRlID0gdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpLmVxKDApO1xuXG4gICAgaWYgKC9tdWkvZy50ZXN0KCRjdXJTbGlkZVswXS5jbGFzc05hbWUpKSB7IHJldHVybiBmYWxzZTsgfSAvL2lmIHRoZSBzbGlkZSBpcyBjdXJyZW50bHkgYW5pbWF0aW5nLCBraWNrIG91dCBvZiB0aGUgZnVuY3Rpb25cblxuICAgIHZhciAkZmlyc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5maXJzdCgpLFxuICAgICRsYXN0U2xpZGUgPSB0aGlzLiRzbGlkZXMubGFzdCgpLFxuICAgIGRpckluID0gaXNMVFIgPyAnUmlnaHQnIDogJ0xlZnQnLFxuICAgIGRpck91dCA9IGlzTFRSID8gJ0xlZnQnIDogJ1JpZ2h0JyxcbiAgICBfdGhpcyA9IHRoaXMsXG4gICAgJG5ld1NsaWRlO1xuXG4gICAgaWYgKCFjaG9zZW5TbGlkZSkgeyAvL21vc3Qgb2YgdGhlIHRpbWUsIHRoaXMgd2lsbCBiZSBhdXRvIHBsYXllZCBvciBjbGlja2VkIGZyb20gdGhlIG5hdkJ1dHRvbnMuXG4gICAgICAkbmV3U2xpZGUgPSBpc0xUUiA/IC8vaWYgd3JhcHBpbmcgZW5hYmxlZCwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIGEgYG5leHRgIG9yIGBwcmV2YCBzaWJsaW5nLCBpZiBub3QsIHNlbGVjdCB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZSB0byBmaWxsIGluLiBpZiB3cmFwcGluZyBub3QgZW5hYmxlZCwgYXR0ZW1wdCB0byBzZWxlY3QgYG5leHRgIG9yIGBwcmV2YCwgaWYgdGhlcmUncyBub3RoaW5nIHRoZXJlLCB0aGUgZnVuY3Rpb24gd2lsbCBraWNrIG91dCBvbiBuZXh0IHN0ZXAuIENSQVpZIE5FU1RFRCBURVJOQVJJRVMhISEhIVxuICAgICAgKHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID8gJGN1clNsaWRlLm5leHQoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApIDogJGZpcnN0U2xpZGUgOiAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkpLy9waWNrIG5leHQgc2xpZGUgaWYgbW92aW5nIGxlZnQgdG8gcmlnaHRcbiAgICAgIDpcbiAgICAgICh0aGlzLm9wdGlvbnMuaW5maW5pdGVXcmFwID8gJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApLmxlbmd0aCA/ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSA6ICRsYXN0U2xpZGUgOiAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkpOy8vcGljayBwcmV2IHNsaWRlIGlmIG1vdmluZyByaWdodCB0byBsZWZ0XG4gICAgfSBlbHNlIHtcbiAgICAgICRuZXdTbGlkZSA9IGNob3NlblNsaWRlO1xuICAgIH1cblxuICAgIGlmICgkbmV3U2xpZGUubGVuZ3RoKSB7XG4gICAgICAvKipcbiAgICAgICogVHJpZ2dlcnMgYmVmb3JlIHRoZSBuZXh0IHNsaWRlIHN0YXJ0cyBhbmltYXRpbmcgaW4gYW5kIG9ubHkgaWYgYSBuZXh0IHNsaWRlIGhhcyBiZWVuIGZvdW5kLlxuICAgICAgKiBAZXZlbnQgT3JiaXQjYmVmb3Jlc2xpZGVjaGFuZ2VcbiAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2JlZm9yZXNsaWRlY2hhbmdlLnpmLm9yYml0JywgWyRjdXJTbGlkZSwgJG5ld1NsaWRlXSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICBpZHggPSBpZHggfHwgdGhpcy4kc2xpZGVzLmluZGV4KCRuZXdTbGlkZSk7IC8vZ3JhYiBpbmRleCB0byB1cGRhdGUgYnVsbGV0c1xuICAgICAgICB0aGlzLl91cGRhdGVCdWxsZXRzKGlkeCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlTVVJICYmICF0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKFxuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsncG9zaXRpb24nOiAnYWJzb2x1dGUnLCAndG9wJzogMH0pLFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tgYW5pbUluRnJvbSR7ZGlySW59YF0sXG4gICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRuZXdTbGlkZS5jc3Moeydwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ2Jsb2NrJ30pXG4gICAgICAgICAgICAuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KFxuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2BhbmltT3V0VG8ke2Rpck91dH1gXSxcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJGN1clNsaWRlLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpO1xuICAgICAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhX3RoaXMudGltZXIuaXNQYXVzZWQpe1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKS5oaWRlKCk7XG4gICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLyoqXG4gICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nIGluLlxuICAgICogQGV2ZW50IE9yYml0I3NsaWRlY2hhbmdlXG4gICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJG5ld1NsaWRlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlcyB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSBidWxsZXRzLCBpZiBkaXNwbGF5ZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHNsaWRlLlxuICAqL1xuICBfdXBkYXRlQnVsbGV0cyhpZHgpIHtcbiAgICB2YXIgJG9sZEJ1bGxldCA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKVxuICAgIC5maW5kKCcuaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmJsdXIoKSxcbiAgICBzcGFuID0gJG9sZEJ1bGxldC5maW5kKCdzcGFuOmxhc3QnKS5kZXRhY2goKSxcbiAgICAkbmV3QnVsbGV0ID0gdGhpcy4kYnVsbGV0cy5lcShpZHgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hcHBlbmQoc3Bhbik7XG4gIH1cblxuICAvKipcbiAgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwgYW5kIGhpZGVzIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKS5lbmQoKS5oaWRlKCk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9yYml0LmRlZmF1bHRzID0ge1xuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gbG9vayBmb3IgYW5kIGxvYWRCdWxsZXRzLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHQgdHJ1ZVxuICAqL1xuICBidWxsZXRzOiB0cnVlLFxuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gYXBwbHkgZXZlbnQgbGlzdGVuZXJzIHRvIG5hdiBidXR0b25zXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIG5hdkJ1dHRvbnM6IHRydWUsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ3NsaWRlLWluLXJpZ2h0J1xuICAqL1xuICBhbmltSW5Gcm9tUmlnaHQ6ICdzbGlkZS1pbi1yaWdodCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ3NsaWRlLW91dC1yaWdodCdcbiAgKi9cbiAgYW5pbU91dFRvUmlnaHQ6ICdzbGlkZS1vdXQtcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdzbGlkZS1pbi1sZWZ0J1xuICAqXG4gICovXG4gIGFuaW1JbkZyb21MZWZ0OiAnc2xpZGUtaW4tbGVmdCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ3NsaWRlLW91dC1sZWZ0J1xuICAqL1xuICBhbmltT3V0VG9MZWZ0OiAnc2xpZGUtb3V0LWxlZnQnLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYXV0b21hdGljYWxseSBhbmltYXRlIG9uIHBhZ2UgbG9hZC5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgYXV0b1BsYXk6IHRydWUsXG4gIC8qKlxuICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgYmV0d2VlbiBzbGlkZSB0cmFuc2l0aW9uc1xuICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgKiBAZGVmYXVsdCA1MDAwXG4gICovXG4gIHRpbWVyRGVsYXk6IDUwMDAsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBpbmZpbml0ZWx5IGxvb3AgdGhyb3VnaCB0aGUgc2xpZGVzXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIGluZmluaXRlV3JhcDogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIHRoZSBPcmJpdCBzbGlkZXMgdG8gYmluZCB0byBzd2lwZSBldmVudHMgZm9yIG1vYmlsZSwgcmVxdWlyZXMgYW4gYWRkaXRpb25hbCB1dGlsIGxpYnJhcnlcbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgc3dpcGU6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyB0aGUgdGltaW5nIGZ1bmN0aW9uIHRvIHBhdXNlIGFuaW1hdGlvbiBvbiBob3Zlci5cbiAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0IHRydWVcbiAgKi9cbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYmluZCBrZXlib2FyZCBldmVudHMgdG8gdGhlIHNsaWRlciwgdG8gYW5pbWF0ZSBmcmFtZXMgd2l0aCBhcnJvdyBrZXlzXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIGFjY2Vzc2libGU6IHRydWUsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBvZiBPcmJpdFxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnb3JiaXQtY29udGFpbmVyJ1xuICAqL1xuICBjb250YWluZXJDbGFzczogJ29yYml0LWNvbnRhaW5lcicsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gaW5kaXZpZHVhbCBzbGlkZXMuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdvcmJpdC1zbGlkZSdcbiAgKi9cbiAgc2xpZGVDbGFzczogJ29yYml0LXNsaWRlJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYnVsbGV0IGNvbnRhaW5lci4gWW91J3JlIHdlbGNvbWUuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdvcmJpdC1idWxsZXRzJ1xuICAqL1xuICBib3hPZkJ1bGxldHM6ICdvcmJpdC1idWxsZXRzJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYG5leHRgIG5hdmlnYXRpb24gYnV0dG9uLlxuICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgKiBAZGVmYXVsdCAnb3JiaXQtbmV4dCdcbiAgKi9cbiAgbmV4dENsYXNzOiAnb3JiaXQtbmV4dCcsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGBwcmV2aW91c2AgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAqIEBkZWZhdWx0ICdvcmJpdC1wcmV2aW91cydcbiAgKi9cbiAgcHJldkNsYXNzOiAnb3JiaXQtcHJldmlvdXMnLFxuICAvKipcbiAgKiBCb29sZWFuIHRvIGZsYWcgdGhlIGpzIHRvIHVzZSBtb3Rpb24gdWkgY2xhc3NlcyBvciBub3QuIERlZmF1bHQgdG8gdHJ1ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkuXG4gICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKiBAZGVmYXVsdCB0cnVlXG4gICovXG4gIHVzZU1VSTogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9yYml0LCAnT3JiaXQnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJlc3BvbnNpdmVNZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZU1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5ydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS1tZW51Jyk7XG4gICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXNwb25zaXZlTWVudScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICAvLyBUaGUgZmlyc3QgdGltZSBhbiBJbnRlcmNoYW5nZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQsIHRoaXMucnVsZXMgaXMgY29udmVydGVkIGZyb20gYSBzdHJpbmcgb2YgXCJjbGFzc2VzXCIgdG8gYW4gb2JqZWN0IG9mIHJ1bGVzXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAvLyBQYXJzZSBydWxlcyBmcm9tIFwiY2xhc3Nlc1wiIHB1bGxlZCBmcm9tIGRhdGEgYXR0cmlidXRlXG4gICAgICBsZXQgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgbGV0IHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgIGxldCBydWxlUGx1Z2luID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVsxXSA6IHJ1bGVbMF07XG5cbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgfVxuXG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcykpIHtcbiAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgfVxuICAgIC8vIEFkZCBkYXRhLW11dGF0ZSBzaW5jZSBjaGlsZHJlbiBtYXkgbmVlZCBpdC5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgKHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1tdXRhdGUnKSB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdyZXNwb25zaXZlLW1lbnUnKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICAgIC8vICQod2luZG93KS5vbigncmVzaXplLnpmLlJlc3BvbnNpdmVNZW51JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAvLyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICB2YXIgbWF0Y2hlZE1xLCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgJC5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICQuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVNZW51Jyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICBkcm9wZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJvcGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJvcGRvd24tbWVudSddIHx8IG51bGxcbiAgfSxcbiBkcmlsbGRvd246IHtcbiAgICBjc3NDbGFzczogJ2RyaWxsZG93bicsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydkcmlsbGRvd24nXSB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uLW1lbnUnLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snYWNjb3JkaW9uLW1lbnUnXSB8fCBudWxsXG4gIH1cbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlTWVudSwgJ1Jlc3BvbnNpdmVNZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlVG9nZ2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91ciB0YWIgYmFyIG5lZWRzIGFuIElEIG9mIGEgTWVudSBhcyB0aGUgdmFsdWUgb2YgZGF0YS10YWItYmFyLicpO1xuICAgIH1cblxuICAgIHRoaXMuJHRhcmdldE1lbnUgPSAkKGAjJHt0YXJnZXRJRH1gKTtcbiAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuZGF0YSgndG9nZ2xlJyk7XG4gICAgICByZXR1cm4gKHRhcmdldCA9PT0gdGFyZ2V0SUQgfHwgdGFyZ2V0ID09PSBcIlwiKTtcbiAgICB9KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLiR0YXJnZXRNZW51LmRhdGEoKSk7XG5cbiAgICAvLyBJZiB0aGV5IHdlcmUgc2V0LCBwYXJzZSB0aGUgYW5pbWF0aW9uIGNsYXNzZXNcbiAgICBpZih0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgbGV0IGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX3VwZGF0ZU1xSGFuZGxlciA9IHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIC8vIE1vYmlsZVxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIERlc2t0b3BcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIuIFRoZSB0b2dnbGUgb25seSBoYXBwZW5zIGlmIHRoZSBzY3JlZW4gaXMgc21hbGwgZW5vdWdoIHRvIGFsbG93IGl0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgKi9cbiAgdG9nZ2xlTWVudSgpIHtcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyIHRvZ2dsZXMuXG4gICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgKi9cbiAgICAgIGlmKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLiR0YXJnZXRNZW51LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25JbiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgICAgIHRoaXMuJHRhcmdldE1lbnUuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXJIYW5kbGVyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiR0YXJnZXRNZW51LCB0aGlzLmFuaW1hdGlvbk91dCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuJHRhcmdldE1lbnUudG9nZ2xlKDApO1xuICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG5cbiAgICAkKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBhZnRlciB3aGljaCB0aGUgbWVudSBpcyBhbHdheXMgc2hvd24sIGFuZCB0aGUgdGFiIGJhciBpcyBoaWRkZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGhpZGVGb3I6ICdtZWRpdW0nLFxuXG4gIC8qKlxuICAgKiBUbyBkZWNpZGUgaWYgdGhlIHRvZ2dsZSBzaG91bGQgYmUgYW5pbWF0ZWQgb3Igbm90LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmV2ZWFsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXZlYWxcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uIGlmIHVzaW5nIGFuaW1hdGlvbnNcbiAqL1xuXG5jbGFzcyBSZXZlYWwge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXZlYWwuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmV2ZWFsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmV2ZWFsJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignUmV2ZWFsJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZGFsIGJ5IGFkZGluZyB0aGUgb3ZlcmxheSBhbmQgY2xvc2UgYnV0dG9ucywgKGlmIHNlbGVjdGVkKS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuY2FjaGVkID0ge21xOiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuY3VycmVudH07XG4gICAgdGhpcy5pc01vYmlsZSA9IG1vYmlsZVNuaWZmKCk7XG5cbiAgICB0aGlzLiRhbmNob3IgPSAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApLmxlbmd0aCA/ICQoYFtkYXRhLW9wZW49XCIke3RoaXMuaWR9XCJdYCkgOiAkKGBbZGF0YS10b2dnbGU9XCIke3RoaXMuaWR9XCJdYCk7XG4gICAgdGhpcy4kYW5jaG9yLmF0dHIoe1xuICAgICAgJ2FyaWEtY29udHJvbHMnOiB0aGlzLmlkLFxuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgJ3RhYmluZGV4JzogMFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Z1bGwnKSkge1xuICAgICAgdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgdGhpcy5vcHRpb25zLm92ZXJsYXkgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5ICYmICF0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5ID0gdGhpcy5fbWFrZU92ZXJsYXkodGhpcy5pZCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAnZGlhbG9nJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgJ2RhdGEteWV0aS1ib3gnOiB0aGlzLmlkLFxuICAgICAgICAnZGF0YS1yZXNpemUnOiB0aGlzLmlkXG4gICAgfSk7XG5cbiAgICBpZih0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKHRoaXMuJG92ZXJsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKCQodGhpcy5vcHRpb25zLmFwcGVuZFRvKSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd3aXRob3V0LW92ZXJsYXknKTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluayAmJiB3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gKCBgIyR7dGhpcy5pZH1gKSkge1xuICAgICAgJCh3aW5kb3cpLm9uZSgnbG9hZC56Zi5yZXZlYWwnLCB0aGlzLm9wZW4uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gb3ZlcmxheSBkaXYgdG8gZGlzcGxheSBiZWhpbmQgdGhlIG1vZGFsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21ha2VPdmVybGF5KCkge1xuICAgIHJldHVybiAkKCc8ZGl2PjwvZGl2PicpXG4gICAgICAuYWRkQ2xhc3MoJ3JldmVhbC1vdmVybGF5JylcbiAgICAgIC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcG9zaXRpb24gb2YgbW9kYWxcbiAgICogVE9ETzogIEZpZ3VyZSBvdXQgaWYgd2UgYWN0dWFsbHkgbmVlZCB0byBjYWNoZSB0aGVzZSB2YWx1ZXMgb3IgaWYgaXQgZG9lc24ndCBtYXR0ZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVQb3NpdGlvbigpIHtcbiAgICB2YXIgd2lkdGggPSB0aGlzLiRlbGVtZW50Lm91dGVyV2lkdGgoKTtcbiAgICB2YXIgb3V0ZXJXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgdmFyIG91dGVySGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgIHZhciBsZWZ0LCB0b3A7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5oT2Zmc2V0ID09PSAnYXV0bycpIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCgob3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy5oT2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMudk9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBpZiAoaGVpZ2h0ID4gb3V0ZXJIZWlnaHQpIHtcbiAgICAgICAgdG9wID0gcGFyc2VJbnQoTWF0aC5taW4oMTAwLCBvdXRlckhlaWdodCAvIDEwKSwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gcGFyc2VJbnQoKG91dGVySGVpZ2h0IC0gaGVpZ2h0KSAvIDQsIDEwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gcGFyc2VJbnQodGhpcy5vcHRpb25zLnZPZmZzZXQsIDEwKTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe3RvcDogdG9wICsgJ3B4J30pO1xuICAgIC8vIG9ubHkgd29ycnkgYWJvdXQgbGVmdCBpZiB3ZSBkb24ndCBoYXZlIGFuIG92ZXJsYXkgb3Igd2UgaGF2ZWEgIGhvcml6b250YWwgb2Zmc2V0LFxuICAgIC8vIG90aGVyd2lzZSB3ZSdyZSBwZXJmZWN0bHkgaW4gdGhlIG1pZGRsZVxuICAgIGlmKCF0aGlzLiRvdmVybGF5IHx8ICh0aGlzLm9wdGlvbnMuaE9mZnNldCAhPT0gJ2F1dG8nKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe2xlZnQ6IGxlZnQgKyAncHgnfSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7bWFyZ2luOiAnMHB4J30pO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiAoZXZlbnQsICRlbGVtZW50KSA9PiB7XG4gICAgICAgIGlmICgoZXZlbnQudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSkgfHxcbiAgICAgICAgICAgICgkKGV2ZW50LnRhcmdldCkucGFyZW50cygnW2RhdGEtY2xvc2FibGVdJylbMF0gPT09ICRlbGVtZW50KSkgeyAvLyBvbmx5IGNsb3NlIHJldmVhbCB3aGVuIGl0J3MgZXhwbGljaXRseSBjYWxsZWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZS5hcHBseSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMgfHwgZS53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLnJldmVhbCcpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHxcbiAgICAgICAgICAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkgfHxcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgJCh3aW5kb3cpLm9uKGBwb3BzdGF0ZS56Zi5yZXZlYWw6JHt0aGlzLmlkfWAsIHRoaXMuX2hhbmRsZVN0YXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIG1vZGFsIG1ldGhvZHMgb24gYmFjay9mb3J3YXJkIGJ1dHRvbiBjbGlja3Mgb3IgYW55IG90aGVyIGV2ZW50IHRoYXQgdHJpZ2dlcnMgcG9wc3RhdGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlU3RhdGUoZSkge1xuICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAoICcjJyArIHRoaXMuaWQpICYmICF0aGlzLmlzQWN0aXZlKXsgdGhpcy5vcGVuKCk7IH1cbiAgICBlbHNleyB0aGlzLmNsb3NlKCk7IH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBtb2RhbCBjb250cm9sbGVkIGJ5IGB0aGlzLiRhbmNob3JgLCBhbmQgY2xvc2VzIGFsbCBvdGhlcnMgYnkgZGVmYXVsdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VtZVxuICAgKiBAZmlyZXMgUmV2ZWFsI29wZW5cbiAgICovXG4gIG9wZW4oKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgdmFyIGhhc2ggPSBgIyR7dGhpcy5pZH1gO1xuXG4gICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIC8vIE1ha2UgZWxlbWVudHMgaW52aXNpYmxlLCBidXQgcmVtb3ZlIGRpc3BsYXk6IG5vbmUgc28gd2UgY2FuIGdldCBzaXplIGFuZCBwb3NpdGlvbmluZ1xuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSlcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApO1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5jc3Moeyd2aXNpYmlsaXR5JzogJ2hpZGRlbid9KS5zaG93KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5oaWRlKClcbiAgICAgIC5jc3MoeyAndmlzaWJpbGl0eSc6ICcnIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5jc3Moeyd2aXNpYmlsaXR5JzogJyd9KS5oaWRlKCk7XG4gICAgICBpZih0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYXN0JykpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnZmFzdCcpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbG93JykpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnc2xvdycpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlwbGVPcGVuZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBtb2RhbCBvcGVucy5cbiAgICAgICAqIENsb3NlcyBhbnkgb3RoZXIgbW9kYWxzIHRoYXQgYXJlIGN1cnJlbnRseSBvcGVuXG4gICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlbWVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLnJldmVhbCcsIHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBhZGRSZXZlYWxPcGVuQ2xhc3NlcygpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vYmlsZSkge1xuICAgICAgICBpZighX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICBfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICAkKCdodG1sLCBib2R5JykuYWRkQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBNb3Rpb24gVUkgbWV0aG9kIG9mIHJldmVhbFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4pIHtcbiAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uKCl7XG4gICAgICAgIF90aGlzLiRlbGVtZW50XG4gICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgIGFkZFJldmVhbE9wZW5DbGFzc2VzKCk7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQudHJhcEZvY3VzKF90aGlzLiRlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kb3ZlcmxheSwgJ2ZhZGUtaW4nKTtcbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4sICgpID0+IHtcbiAgICAgICAgaWYodGhpcy4kZWxlbWVudCkgeyAvLyBwcm90ZWN0IGFnYWluc3Qgb2JqZWN0IGhhdmluZyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICAgIGFmdGVyQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIHJldmVhbFxuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuc2hvdygwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdyh0aGlzLm9wdGlvbnMuc2hvd0RlbGF5KTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgYWNjZXNzaWJpbGl0eVxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KVxuICAgICAgLmZvY3VzKCk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC50cmFwRm9jdXModGhpcy4kZWxlbWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBoYXMgc3VjY2Vzc2Z1bGx5IG9wZW5lZC5cbiAgICAgKiBAZXZlbnQgUmV2ZWFsI29wZW5cbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYucmV2ZWFsJyk7XG5cbiAgICBhZGRSZXZlYWxPcGVuQ2xhc3NlcygpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLl9leHRyYUhhbmRsZXJzKCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBleHRyYSBldmVudCBoYW5kbGVycyBmb3IgdGhlIGJvZHkgYW5kIHdpbmRvdyBpZiBuZWNlc3NhcnkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXh0cmFIYW5kbGVycygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIGlmKCF0aGlzLiRlbGVtZW50KSB7IHJldHVybjsgfSAvLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGNsZWFudXAsIGRvbid0IGZyZWFrIG91dFxuICAgIHRoaXMuZm9jdXNhYmxlRWxlbWVudHMgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgIXRoaXMub3B0aW9ucy5mdWxsU2NyZWVuKSB7XG4gICAgICAkKCdib2R5Jykub24oJ2NsaWNrLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fFxuICAgICAgICAgICAgISQuY29udGFpbnMoZG9jdW1lbnQsIGUudGFyZ2V0KSkgeyByZXR1cm47IH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgJCh3aW5kb3cpLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbG9jayBmb2N1cyB3aXRoaW4gbW9kYWwgd2hpbGUgdGFiYmluZ1xuICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkKHRoaXMpO1xuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWNsb3NlXScpKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8gc2V0IGZvY3VzIGJhY2sgdG8gYW5jaG9yIGlmIGNsb3NlIGJ1dHRvbiBoYXMgYmVlbiBhY3RpdmF0ZWRcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkdGFyZ2V0LmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzKSkgeyAvLyBkb250J3QgdHJpZ2dlciBpZiBhY3VhbCBlbGVtZW50IGhhcyBmb2N1cyAoaS5lLiBpbnB1dHMsIGxpbmtzLCAuLi4pXG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJldmVhbCNjbG9zZWRcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiBoaWRpbmdcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbk91dCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kb3ZlcmxheSwgJ2ZhZGUtb3V0JywgZmluaXNoVXApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICB9XG5cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbk91dCk7XG4gICAgfVxuICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgZWxzZSB7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSh0aGlzLm9wdGlvbnMuaGlkZURlbGF5KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoVXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb25kaXRpb25hbHMgdG8gcmVtb3ZlIGV4dHJhIGV2ZW50IGxpc3RlbmVycyBhZGRlZCBvbiBvcGVuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgJCgnYm9keScpLm9mZignY2xpY2suemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG5cbiAgICBmdW5jdGlvbiBmaW5pc2hVcCgpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vYmlsZSkge1xuICAgICAgICBpZiAoJCgnLnJldmVhbDp2aXNpYmxlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJCgnaHRtbCwgYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmKF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKSB7XG4gICAgICAgICAgJCgnYm9keScpLnNjcm9sbFRvcChfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyk7XG4gICAgICAgICAgX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCQoJy5yZXZlYWw6dmlzaWJsZScpLmxlbmd0aCAgPT09IDApIHtcbiAgICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlbGVhc2VGb2N1cyhfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIC8qKlxuICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGNsb3NpbmcuXG4gICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VkXG4gICAgICAqL1xuICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVzZXRzIHRoZSBtb2RhbCBjb250ZW50XG4gICAgKiBUaGlzIHByZXZlbnRzIGEgcnVubmluZyB2aWRlbyB0byBrZWVwIGdvaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgKi9cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc2V0T25DbG9zZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5odG1sKHRoaXMuJGVsZW1lbnQuaHRtbCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCcnLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShgIyR7dGhpcy5pZH1gLCAnJykpO1xuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgIH1cbiAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2VkIHN0YXRlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmRUbygkKHRoaXMub3B0aW9ucy5hcHBlbmRUbykpOyAvLyBtb3ZlICRlbGVtZW50IG91dHNpZGUgb2YgJG92ZXJsYXkgdG8gcHJldmVudCBlcnJvciB1bnJlZ2lzdGVyUGx1Z2luKClcbiAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgpLm9mZigpLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5vZmYoKTtcbiAgICB0aGlzLiRhbmNob3Iub2ZmKCcuemYnKTtcbiAgICAkKHdpbmRvdykub2ZmKGAuemYucmV2ZWFsOiR7dGhpcy5pZH1gKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfTtcbn1cblxuUmV2ZWFsLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5pbWF0aW9uSW46ICcnLFxuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5pbWF0aW9uT3V0OiAnJyxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgb3BlbmluZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc2hvd0RlbGF5OiAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGRlbGF5IHRoZSBjbG9zaW5nIG9mIGEgbW9kYWwgYWZ0ZXIgYSBjbGljayBpZiBubyBhbmltYXRpb24gdXNlZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBoaWRlRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keS9vdmVybGF5IHRvIGNsb3NlIHRoZSBtb2RhbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBjbG9zZSBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBgRVNDQVBFYCBrZXkuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25Fc2M6IHRydWUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBhbGxvd3MgbXVsdGlwbGUgbW9kYWxzIHRvIGJlIGRpc3BsYXllZCBhdCBvbmNlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGVPcGVuZWQ6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGRvd24gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcnxzdHJpbmd9XG4gICAqIEBkZWZhdWx0IGF1dG9cbiAgICovXG4gIHZPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBpbiBmcm9tIHRoZSBzaWRlIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcnxzdHJpbmd9XG4gICAqIEBkZWZhdWx0IGF1dG9cbiAgICovXG4gIGhPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYmUgZnVsbHNjcmVlbiwgY29tcGxldGVseSBibG9ja2luZyBvdXQgdGhlIHJlc3Qgb2YgdGhlIHZpZXcuIEpTIGNoZWNrcyBmb3IgdGhpcyBhcyB3ZWxsLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFNjcmVlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBQZXJjZW50YWdlIG9mIHNjcmVlbiBoZWlnaHQgdGhlIG1vZGFsIHNob3VsZCBwdXNoIHVwIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxMFxuICAgKi9cbiAgYnRtT2Zmc2V0UGN0OiAxMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gZ2VuZXJhdGUgYW4gb3ZlcmxheSBkaXYsIHdoaWNoIHdpbGwgY292ZXIgdGhlIHZpZXcgd2hlbiBtb2RhbCBvcGVucy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgb3ZlcmxheTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gcmVtb3ZlIGFuZCByZWluamVjdCBtYXJrdXAgb24gY2xvc2UuIFNob3VsZCBiZSB0cnVlIGlmIHVzaW5nIHZpZGVvIGVsZW1lbnRzIHcvbyB1c2luZyBwcm92aWRlcidzIGFwaSwgb3RoZXJ3aXNlLCB2aWRlb3Mgd2lsbCBjb250aW51ZSB0byBwbGF5IGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVzZXRPbkNsb3NlOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYWx0ZXIgdGhlIHVybCBvbiBvcGVuL2Nsb3NlLCBhbmQgYWxsb3dzIHRoZSB1c2Ugb2YgdGhlIGBiYWNrYCBidXR0b24gdG8gY2xvc2UgbW9kYWxzLiBBTFNPLCBhbGxvd3MgYSBtb2RhbCB0byBhdXRvLW1hbmlhY2FsbHkgb3BlbiBvbiBwYWdlIGxvYWQgSUYgdGhlIGhhc2ggPT09IHRoZSBtb2RhbCdzIHVzZXItc2V0IGlkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlLFxuICAgIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFwcGVuZCB0byBjdXN0b20gZGl2LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IFwiYm9keVwiXG4gICAqL1xuICBhcHBlbmRUbzogXCJib2R5XCJcblxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJldmVhbCwgJ1JldmVhbCcpO1xuXG5mdW5jdGlvbiBpUGhvbmVTbmlmZigpIHtcbiAgcmV0dXJuIC9pUChhZHxob25lfG9kKS4qT1MvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xufVxuXG5mdW5jdGlvbiBhbmRyb2lkU25pZmYoKSB7XG4gIHJldHVybiAvQW5kcm9pZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIG1vYmlsZVNuaWZmKCkge1xuICByZXR1cm4gaVBob25lU25pZmYoKSB8fCBhbmRyb2lkU25pZmYoKTtcbn1cblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFNsaWRlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc2xpZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50b3VjaFxuICovXG5cbmNsYXNzIFNsaWRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc2xpZGVyIGNvbnRyb2wuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgc2xpZGVyIGNvbnRyb2wuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU2xpZGVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTbGlkZXInKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdTbGlkZXInLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfVVAnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkZWNyZWFzZScsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfVVAnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19ET1dOJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpbGl6ZXMgdGhlIHBsdWdpbiBieSByZWFkaW5nL3NldHRpbmcgYXR0cmlidXRlcywgY3JlYXRpbmcgY29sbGVjdGlvbnMgYW5kIHNldHRpbmcgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGhhbmRsZShzKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJyk7XG5cbiAgICB0aGlzLiRoYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCk7XG4gICAgdGhpcy4kaW5wdXQgPSB0aGlzLmlucHV0cy5sZW5ndGggPyB0aGlzLmlucHV0cy5lcSgwKSA6ICQoYCMke3RoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YCk7XG4gICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICB2YXIgaXNEYmwgPSBmYWxzZSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gJCgpLmFkZCh0aGlzLiRpbnB1dCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYmluZGluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0SW5pdEF0dHIoMCk7XG5cbiAgICBpZiAodGhpcy5oYW5kbGVzWzFdKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kaGFuZGxlMiA9IHRoaXMuaGFuZGxlcy5lcSgxKTtcbiAgICAgIHRoaXMuJGlucHV0MiA9IHRoaXMuaW5wdXRzLmxlbmd0aCA+IDEgPyB0aGlzLmlucHV0cy5lcSgxKSA6ICQoYCMke3RoaXMuJGhhbmRsZTIuYXR0cignYXJpYS1jb250cm9scycpfWApO1xuXG4gICAgICBpZiAoIXRoaXMuaW5wdXRzWzFdKSB7XG4gICAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMuYWRkKHRoaXMuJGlucHV0Mik7XG4gICAgICB9XG4gICAgICBpc0RibCA9IHRydWU7XG5cbiAgICAgIC8vIHRoaXMuJGhhbmRsZS50cmlnZ2VySGFuZGxlcignY2xpY2suemYuc2xpZGVyJyk7XG4gICAgICB0aGlzLl9zZXRJbml0QXR0cigxKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgaGFuZGxlIHBvc2l0aW9uc1xuICAgIHRoaXMuc2V0SGFuZGxlcygpO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICBzZXRIYW5kbGVzKCkge1xuICAgIGlmKHRoaXMuaGFuZGxlc1sxXSkge1xuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5pbnB1dHMuZXEoMCkudmFsKCksIHRydWUsICgpID0+IHtcbiAgICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZTIsIHRoaXMuaW5wdXRzLmVxKDEpLnZhbCgpLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLmlucHV0cy5lcSgwKS52YWwoKSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgX3JlZmxvdygpIHtcbiAgICB0aGlzLnNldEhhbmRsZXMoKTtcbiAgfVxuICAvKipcbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIGZsb2F0aW5nIHBvaW50ICh0aGUgdmFsdWUpIHRvIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRvIGEgcmVsYXRpdmUgcG9zaXRpb24gb24gdGhlIHNsaWRlciAodGhlIGludmVyc2Ugb2YgX3ZhbHVlKVxuICAqL1xuICBfcGN0T2ZCYXIodmFsdWUpIHtcbiAgICB2YXIgcGN0T2ZCYXIgPSBwZXJjZW50KHZhbHVlIC0gdGhpcy5vcHRpb25zLnN0YXJ0LCB0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KVxuXG4gICAgc3dpdGNoKHRoaXMub3B0aW9ucy5wb3NpdGlvblZhbHVlRnVuY3Rpb24pIHtcbiAgICBjYXNlIFwicG93XCI6XG4gICAgICBwY3RPZkJhciA9IHRoaXMuX2xvZ1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibG9nXCI6XG4gICAgICBwY3RPZkJhciA9IHRoaXMuX3Bvd1RyYW5zZm9ybShwY3RPZkJhcik7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gcGN0T2ZCYXIudG9GaXhlZCgyKVxuICB9XG5cbiAgLyoqXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gcGN0T2ZCYXIgLSBmbG9hdGluZyBwb2ludCwgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBzbGlkZXIgKHR5cGljYWxseSBiZXR3ZWVuIDAtMSkgdG8gYmUgdHJhbnNmb3JtZWQgdG8gYSB2YWx1ZVxuICAqL1xuICBfdmFsdWUocGN0T2ZCYXIpIHtcbiAgICBzd2l0Y2godGhpcy5vcHRpb25zLnBvc2l0aW9uVmFsdWVGdW5jdGlvbikge1xuICAgIGNhc2UgXCJwb3dcIjpcbiAgICAgIHBjdE9mQmFyID0gdGhpcy5fcG93VHJhbnNmb3JtKHBjdE9mQmFyKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsb2dcIjpcbiAgICAgIHBjdE9mQmFyID0gdGhpcy5fbG9nVHJhbnNmb3JtKHBjdE9mQmFyKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSAodGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkgKiBwY3RPZkJhciArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBmbG9hdGluZyBwb2ludCAodHlwaWNhbGx5IGJldHdlZW4gMC0xKSB0byBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0aGUgbG9nIGZ1bmN0aW9uXG4gICovXG4gIF9sb2dUcmFuc2Zvcm0odmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZUxvZyh0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZSwgKCh2YWx1ZSoodGhpcy5vcHRpb25zLm5vbkxpbmVhckJhc2UtMSkpKzEpKVxuICB9XG5cbiAgLyoqXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSBmbG9hdGluZyBwb2ludCAodHlwaWNhbGx5IGJldHdlZW4gMC0xKSB0byBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0aGUgcG93ZXIgZnVuY3Rpb25cbiAgKi9cbiAgX3Bvd1RyYW5zZm9ybSh2YWx1ZSkge1xuICAgIHJldHVybiAoTWF0aC5wb3codGhpcy5vcHRpb25zLm5vbkxpbmVhckJhc2UsIHZhbHVlKSAtIDEpIC8gKHRoaXMub3B0aW9ucy5ub25MaW5lYXJCYXNlIC0gMSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2VsZWN0ZWQgaGFuZGxlIGFuZCBmaWxsIGJhci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaG5kbCAtIHRoZSBzZWxlY3RlZCBoYW5kbGUgdG8gbW92ZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxvY2F0aW9uIC0gZmxvYXRpbmcgcG9pbnQgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMgb2YgdGhlIHNsaWRlciBiYXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uLlxuICAgKiBAZmlyZXMgU2xpZGVyI21vdmVkXG4gICAqIEBmaXJlcyBTbGlkZXIjY2hhbmdlZFxuICAgKi9cbiAgX3NldEhhbmRsZVBvcygkaG5kbCwgbG9jYXRpb24sIG5vSW52ZXJ0LCBjYikge1xuICAgIC8vIGRvbid0IG1vdmUgaWYgdGhlIHNsaWRlciBoYXMgYmVlbiBkaXNhYmxlZCBzaW5jZSBpdHMgaW5pdGlhbGl6YXRpb25cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9taWdodCBuZWVkIHRvIGFsdGVyIHRoYXQgc2xpZ2h0bHkgZm9yIGJhcnMgdGhhdCB3aWxsIGhhdmUgb2RkIG51bWJlciBzZWxlY3Rpb25zLlxuICAgIGxvY2F0aW9uID0gcGFyc2VGbG9hdChsb2NhdGlvbik7Ly9vbiBpbnB1dCBjaGFuZ2UgZXZlbnRzLCBjb252ZXJ0IHN0cmluZyB0byBudW1iZXIuLi5ncnVtYmxlLlxuXG4gICAgLy8gcHJldmVudCBzbGlkZXIgZnJvbSBydW5uaW5nIG91dCBvZiBib3VuZHMsIGlmIHZhbHVlIGV4Y2VlZHMgdGhlIGxpbWl0cyBzZXQgdGhyb3VnaCBvcHRpb25zLCBvdmVycmlkZSB0aGUgdmFsdWUgdG8gbWluL21heFxuICAgIGlmIChsb2NhdGlvbiA8IHRoaXMub3B0aW9ucy5zdGFydCkgeyBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5zdGFydDsgfVxuICAgIGVsc2UgaWYgKGxvY2F0aW9uID4gdGhpcy5vcHRpb25zLmVuZCkgeyBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5lbmQ7IH1cblxuICAgIHZhciBpc0RibCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZDtcblxuICAgIGlmIChpc0RibCkgeyAvL3RoaXMgYmxvY2sgaXMgdG8gcHJldmVudCAyIGhhbmRsZXMgZnJvbSBjcm9zc2luZyBlYWNob3RoZXIuIENvdWxkL3Nob3VsZCBiZSBpbXByb3ZlZC5cbiAgICAgIGlmICh0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwKSB7XG4gICAgICAgIHZhciBoMlZhbCA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMi5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uID49IGgyVmFsID8gaDJWYWwgLSB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGgxVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUuYXR0cignYXJpYS12YWx1ZW5vdycpKTtcbiAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbiA8PSBoMVZhbCA/IGgxVmFsICsgdGhpcy5vcHRpb25zLnN0ZXAgOiBsb2NhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL3RoaXMgaXMgZm9yIHNpbmdsZS1oYW5kbGVkIHZlcnRpY2FsIHNsaWRlcnMsIGl0IGFkanVzdHMgdGhlIHZhbHVlIHRvIGFjY291bnQgZm9yIHRoZSBzbGlkZXIgYmVpbmcgXCJ1cHNpZGUtZG93blwiXG4gICAgLy9mb3IgY2xpY2sgYW5kIGRyYWcgZXZlbnRzLCBpdCdzIHdlaXJkIGR1ZSB0byB0aGUgc2NhbGUoLTEsIDEpIGNzcyBwcm9wZXJ0eVxuICAgIGlmICh0aGlzLm9wdGlvbnMudmVydGljYWwgJiYgIW5vSW52ZXJ0KSB7XG4gICAgICBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5lbmQgLSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB2ZXJ0ID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICBoT3JXID0gdmVydCA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgbE9yVCA9IHZlcnQgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgaGFuZGxlRGltID0gJGhuZGxbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgIGVsZW1EaW0gPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2hPclddLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIG1pbi9tYXggdmFsdWUgYmFzZWQgb24gY2xpY2sgb3IgZHJhZyBwb2ludFxuICAgICAgICBwY3RPZkJhciA9IHRoaXMuX3BjdE9mQmFyKGxvY2F0aW9uKSxcbiAgICAgICAgLy9udW1iZXIgb2YgYWN0dWFsIHBpeGVscyB0byBzaGlmdCB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvYnRhaW5lZCBhYm92ZVxuICAgICAgICBweFRvTW92ZSA9IChlbGVtRGltIC0gaGFuZGxlRGltKSAqIHBjdE9mQmFyLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIHRvIHNoaWZ0IHRoZSBoYW5kbGVcbiAgICAgICAgbW92ZW1lbnQgPSAocGVyY2VudChweFRvTW92ZSwgZWxlbURpbSkgKiAxMDApLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpO1xuICAgICAgICAvL2ZpeGluZyB0aGUgZGVjaW1hbCB2YWx1ZSBmb3IgdGhlIGxvY2F0aW9uIG51bWJlciwgaXMgcGFzc2VkIHRvIG90aGVyIG1ldGhvZHMgYXMgYSBmaXhlZCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICAgICAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24udG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCkpO1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IG9iamVjdCBmb3IgY3NzIGFkanVzdG1lbnRzLCBvbmx5IHVzZWQgd2l0aCAyIGhhbmRsZWQtc2xpZGVyc1xuICAgIHZhciBjc3MgPSB7fTtcblxuICAgIHRoaXMuX3NldFZhbHVlcygkaG5kbCwgbG9jYXRpb24pO1xuXG4gICAgLy8gVE9ETyB1cGRhdGUgdG8gY2FsY3VsYXRlIGJhc2VkIG9uIHZhbHVlcyBzZXQgdG8gcmVzcGVjdGl2ZSBpbnB1dHM/P1xuICAgIGlmIChpc0RibCkge1xuICAgICAgdmFyIGlzTGVmdEhuZGwgPSB0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwLFxuICAgICAgICAgIC8vZW1wdHkgdmFyaWFibGUsIHdpbGwgYmUgdXNlZCBmb3IgbWluLWhlaWdodC93aWR0aCBmb3IgZmlsbCBiYXJcbiAgICAgICAgICBkaW0sXG4gICAgICAgICAgLy9wZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGNvbXBhcmVkIHRvIHRoZSBzbGlkZXIgYmFyXG4gICAgICAgICAgaGFuZGxlUGN0ID0gIH5+KHBlcmNlbnQoaGFuZGxlRGltLCBlbGVtRGltKSAqIDEwMCk7XG4gICAgICAvL2lmIGxlZnQgaGFuZGxlLCB0aGUgbWF0aCBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBpZiBpdCdzIHRoZSByaWdodCBoYW5kbGUsIGFuZCB0aGUgbGVmdC90b3AgcHJvcGVydHkgbmVlZHMgdG8gYmUgY2hhbmdlZCBmb3IgdGhlIGZpbGwgYmFyXG4gICAgICBpZiAoaXNMZWZ0SG5kbCkge1xuICAgICAgICAvL2xlZnQgb3IgdG9wIHBlcmNlbnRhZ2UgdmFsdWUgdG8gYXBwbHkgdG8gdGhlIGZpbGwgYmFyLlxuICAgICAgICBjc3NbbE9yVF0gPSBgJHttb3ZlbWVudH0lYDtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuXG4gICAgICAgIGRpbSA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMlswXS5zdHlsZVtsT3JUXSkgLSBtb3ZlbWVudCArIGhhbmRsZVBjdDtcbiAgICAgICAgLy90aGlzIGNhbGxiYWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGVycm9ycyBhbmQgYWxsb3cgdGhlIHByb3BlciBwbGFjZW1lbnQgYW5kIGluaXRpYWxpemF0aW9uIG9mIGEgMi1oYW5kbGVkIHNsaWRlclxuICAgICAgICAvL3BsdXMsIGl0IG1lYW5zIHdlIGRvbid0IGNhcmUgaWYgJ2RpbScgaXNOYU4gb24gaW5pdCwgaXQgd29uJ3QgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9Ly90aGlzIGlzIG9ubHkgbmVlZGVkIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gb2YgMiBoYW5kbGVkIHNsaWRlcnNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vanVzdCBjYWNoaW5nIHRoZSB2YWx1ZSBvZiB0aGUgbGVmdC9ib3R0b20gaGFuZGxlJ3MgbGVmdC90b3AgcHJvcGVydHlcbiAgICAgICAgdmFyIGhhbmRsZVBvcyA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlWzBdLnN0eWxlW2xPclRdKTtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuIFVzZSBpc05hTiB0byBwcmV2ZW50IGZhbHNlIHBvc2l0aXZlcyBmb3IgbnVtYmVycyA8PSAwXG4gICAgICAgIC8vYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2YgbW92ZW1lbnQgb2YgdGhlIGhhbmRsZSBiZWluZyBtYW5pcHVsYXRlZCwgbGVzcyB0aGUgb3Bwb3NpbmcgaGFuZGxlJ3MgbGVmdC90b3AgcG9zaXRpb24sIHBsdXMgdGhlIHBlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgaXRzZWxmXG4gICAgICAgIGRpbSA9IG1vdmVtZW50IC0gKGlzTmFOKGhhbmRsZVBvcykgPyAodGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIHRoaXMub3B0aW9ucy5zdGFydCkvKCh0aGlzLm9wdGlvbnMuZW5kLXRoaXMub3B0aW9ucy5zdGFydCkvMTAwKSA6IGhhbmRsZVBvcykgKyBoYW5kbGVQY3Q7XG4gICAgICB9XG4gICAgICAvLyBhc3NpZ24gdGhlIG1pbi1oZWlnaHQvd2lkdGggdG8gb3VyIGNzcyBvYmplY3RcbiAgICAgIGNzc1tgbWluLSR7aE9yV31gXSA9IGAke2RpbX0lYDtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uZSgnZmluaXNoZWQuemYuYW5pbWF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgaGFuZGxlIGlzIGRvbmUgbW92aW5nLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgU2xpZGVyI21vdmVkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdtb3ZlZC56Zi5zbGlkZXInLCBbJGhuZGxdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgIC8vYmVjYXVzZSB3ZSBkb24ndCBrbm93IGV4YWN0bHkgaG93IHRoZSBoYW5kbGUgd2lsbCBiZSBtb3ZlZCwgY2hlY2sgdGhlIGFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIG1vdmUuXG4gICAgdmFyIG1vdmVUaW1lID0gdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycpID8gMTAwMC82MCA6IHRoaXMub3B0aW9ucy5tb3ZlVGltZTtcblxuICAgIEZvdW5kYXRpb24uTW92ZShtb3ZlVGltZSwgJGhuZGwsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYWRqdXN0aW5nIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBjYWxjdWxhdGVkIGFib3ZlXG4gICAgICAvLyBpZiBtb3ZlbWVudCBpc05hTiwgdGhhdCBpcyBiZWNhdXNlIHRoZSBzbGlkZXIgaXMgaGlkZGVuIGFuZCB3ZSBjYW5ub3QgZGV0ZXJtaW5lIGhhbmRsZSB3aWR0aCxcbiAgICAgIC8vIGZhbGwgYmFjayB0byBuZXh0IGJlc3QgZ3Vlc3MuXG4gICAgICBpZiAoaXNOYU4obW92ZW1lbnQpKSB7XG4gICAgICAgICRobmRsLmNzcyhsT3JULCBgJHtwY3RPZkJhciAqIDEwMH0lYCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJGhuZGwuY3NzKGxPclQsIGAke21vdmVtZW50fSVgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkKSB7XG4gICAgICAgIC8vaWYgc2luZ2xlLWhhbmRsZWQsIGEgc2ltcGxlIG1ldGhvZCB0byBleHBhbmQgdGhlIGZpbGwgYmFyXG4gICAgICAgIF90aGlzLiRmaWxsLmNzcyhoT3JXLCBgJHtwY3RPZkJhciAqIDEwMH0lYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL290aGVyd2lzZSwgdXNlIHRoZSBjc3Mgb2JqZWN0IHdlIGNyZWF0ZWQgYWJvdmVcbiAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGNzcyk7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgYmVlbiBjaGFuZ2UgZm9yIGEgZ2l2ZW4gdGltZS5cbiAgICAgKiBAZXZlbnQgU2xpZGVyI2NoYW5nZWRcbiAgICAgKi9cbiAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgfSwgX3RoaXMub3B0aW9ucy5jaGFuZ2VkRGVsYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgYXR0cmlidXRlIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgaGFuZGxlL2lucHV0IHRvIHVzZS5cbiAgICovXG4gIF9zZXRJbml0QXR0cihpZHgpIHtcbiAgICB2YXIgaW5pdFZhbCA9IChpZHggPT09IDAgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0IDogdGhpcy5vcHRpb25zLmluaXRpYWxFbmQpXG4gICAgdmFyIGlkID0gdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKCdpZCcpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3NsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkuYXR0cih7XG4gICAgICAnaWQnOiBpZCxcbiAgICAgICdtYXgnOiB0aGlzLm9wdGlvbnMuZW5kLFxuICAgICAgJ21pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICdzdGVwJzogdGhpcy5vcHRpb25zLnN0ZXBcbiAgICB9KTtcbiAgICB0aGlzLmlucHV0cy5lcShpZHgpLnZhbChpbml0VmFsKTtcbiAgICB0aGlzLmhhbmRsZXMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICdyb2xlJzogJ3NsaWRlcicsXG4gICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgJ2FyaWEtdmFsdWVtYXgnOiB0aGlzLm9wdGlvbnMuZW5kLFxuICAgICAgJ2FyaWEtdmFsdWVtaW4nOiB0aGlzLm9wdGlvbnMuc3RhcnQsXG4gICAgICAnYXJpYS12YWx1ZW5vdyc6IGluaXRWYWwsXG4gICAgICAnYXJpYS1vcmllbnRhdGlvbic6IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAndGFiaW5kZXgnOiAwXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5wdXQgYW5kIGBhcmlhLXZhbHVlbm93YCB2YWx1ZXMgZm9yIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWwgLSBmbG9hdGluZyBwb2ludCBvZiB0aGUgbmV3IHZhbHVlLlxuICAgKi9cbiAgX3NldFZhbHVlcygkaGFuZGxlLCB2YWwpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID8gdGhpcy5oYW5kbGVzLmluZGV4KCRoYW5kbGUpIDogMDtcbiAgICB0aGlzLmlucHV0cy5lcShpZHgpLnZhbCh2YWwpO1xuICAgICRoYW5kbGUuYXR0cignYXJpYS12YWx1ZW5vdycsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBldmVudHMgb24gdGhlIHNsaWRlciBlbGVtZW50LlxuICAgKiBDYWxjdWxhdGVzIHRoZSBuZXcgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgaGFuZGxlLlxuICAgKiBJZiB0aGVyZSBhcmUgdHdvIGhhbmRsZXMgYW5kIHRoZSBiYXIgd2FzIGNsaWNrZWQsIGl0IGRldGVybWluZXMgd2hpY2ggaGFuZGxlIHRvIG1vdmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZSAtIHRoZSBgZXZlbnRgIG9iamVjdCBwYXNzZWQgZnJvbSB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnQgaGFuZGxlIHRvIGNhbGN1bGF0ZSBmb3IsIGlmIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGZvciB0aGUgbmV3IHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFRPRE8gY2xlYW4gdGhpcyB1cCwgdGhlcmUncyBhIGxvdCBvZiByZXBlYXRlZCBjb2RlIGJldHdlZW4gdGhpcyBhbmQgdGhlIF9zZXRIYW5kbGVQb3MgZm4uXG4gICAqL1xuICBfaGFuZGxlRXZlbnQoZSwgJGhhbmRsZSwgdmFsKSB7XG4gICAgdmFyIHZhbHVlLCBoYXNWYWw7XG4gICAgaWYgKCF2YWwpIHsvL2NsaWNrIG9yIGRyYWcgZXZlbnRzXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIHZlcnRpY2FsID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICAgIHBhcmFtID0gdmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsXG4gICAgICAgICAgZGlyZWN0aW9uID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICBldmVudE9mZnNldCA9IHZlcnRpY2FsID8gZS5wYWdlWSA6IGUucGFnZVgsXG4gICAgICAgICAgaGFsZk9mSGFuZGxlID0gdGhpcy4kaGFuZGxlWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3BhcmFtXSAvIDIsXG4gICAgICAgICAgYmFyRGltID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtwYXJhbV0sXG4gICAgICAgICAgd2luZG93U2Nyb2xsID0gdmVydGljYWwgPyAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xuXG5cbiAgICAgIHZhciBlbGVtT2Zmc2V0ID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVtkaXJlY3Rpb25dO1xuXG4gICAgICAvLyB0b3VjaCBldmVudHMgZW11bGF0ZWQgYnkgdGhlIHRvdWNoIHV0aWwgZ2l2ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JlZW4sIGFkZCB3aW5kb3cuc2Nyb2xsIHRvIGV2ZW50IGNvb3JkaW5hdGVzLi4uXG4gICAgICAvLyBiZXN0IHdheSB0byBndWVzcyB0aGlzIGlzIHNpbXVsYXRlZCBpcyBpZiBjbGllbnRZID09IHBhZ2VZXG4gICAgICBpZiAoZS5jbGllbnRZID09PSBlLnBhZ2VZKSB7IGV2ZW50T2Zmc2V0ID0gZXZlbnRPZmZzZXQgKyB3aW5kb3dTY3JvbGw7IH1cbiAgICAgIHZhciBldmVudEZyb21CYXIgPSBldmVudE9mZnNldCAtIGVsZW1PZmZzZXQ7XG4gICAgICB2YXIgYmFyWFk7XG4gICAgICBpZiAoZXZlbnRGcm9tQmFyIDwgMCkge1xuICAgICAgICBiYXJYWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50RnJvbUJhciA+IGJhckRpbSkge1xuICAgICAgICBiYXJYWSA9IGJhckRpbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhclhZID0gZXZlbnRGcm9tQmFyO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldFBjdCA9IHBlcmNlbnQoYmFyWFksIGJhckRpbSk7XG5cbiAgICAgIHZhbHVlID0gdGhpcy5fdmFsdWUob2Zmc2V0UGN0KTtcblxuICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHt2YWx1ZSA9IHRoaXMub3B0aW9ucy5lbmQgLSB2YWx1ZTt9XG5cbiAgICAgIHZhbHVlID0gX3RoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbHVlKTtcbiAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgIGhhc1ZhbCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRoYW5kbGUpIHsvL2ZpZ3VyZSBvdXQgd2hpY2ggaGFuZGxlIGl0IGlzLCBwYXNzIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICBzZWNuZEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUyLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSk7XG4gICAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICB9XG5cbiAgICB9IGVsc2Ugey8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICB2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbCk7XG4gICAgICBoYXNWYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEhhbmRsZVBvcygkaGFuZGxlLCB2YWx1ZSwgaGFzVmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RlcyB2YWx1ZSBmb3IgaGFuZGxlIGluIHJlZ2FyZCB0byBzdGVwIHZhbHVlLiByZXR1cm5zIGFkanVzdGVkIHZhbHVlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGFkanVzdC4gdXNlZCBpZiAkaGFuZGxlIGlzIGZhbHN5XG4gICAqL1xuICBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsLFxuICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgZGl2ID0gcGFyc2VGbG9hdChzdGVwLzIpLFxuICAgICAgbGVmdCwgcHJldl92YWwsIG5leHRfdmFsO1xuICAgIGlmICghISRoYW5kbGUpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICBwcmV2X3ZhbCA9IHZhbCAtIGxlZnQ7XG4gICAgbmV4dF92YWwgPSBwcmV2X3ZhbCArIHN0ZXA7XG4gICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc2xpZGVyIGVsZW1lbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy5fZXZlbnRzRm9ySGFuZGxlKHRoaXMuJGhhbmRsZSk7XG4gICAgaWYodGhpcy5oYW5kbGVzWzFdKSB7XG4gICAgICB0aGlzLl9ldmVudHNGb3JIYW5kbGUodGhpcy4kaGFuZGxlMik7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgYSBwYXJ0aWN1bGFyIGhhbmRsZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gYXBwbHkgbGlzdGVuZXJzIHRvLlxuICAgKi9cbiAgX2V2ZW50c0ZvckhhbmRsZSgkaGFuZGxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgY3VySGFuZGxlLFxuICAgICAgICB0aW1lcjtcblxuICAgICAgdGhpcy5pbnB1dHMub2ZmKCdjaGFuZ2UuemYuc2xpZGVyJykub24oJ2NoYW5nZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBpZHggPSBfdGhpcy5pbnB1dHMuaW5kZXgoJCh0aGlzKSk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy5oYW5kbGVzLmVxKGlkeCksICQodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmhhbmRsZXMuYWRkVG91Y2goKTtcblxuICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgJGhhbmRsZVxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJylcbiAgICAgICAgLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7Ly9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIHRydWUpO1xuXG4gICAgICAgICAgY3VySGFuZGxlID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcblxuICAgICAgICAgIH0pLm9uKCdtb3VzZXVwLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgXyRoYW5kbGUgPSAkKHRoaXMpLFxuICAgICAgICAgIGlkeCA9IF90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyBfdGhpcy5oYW5kbGVzLmluZGV4KF8kaGFuZGxlKSA6IDAsXG4gICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICBuZXdWYWx1ZTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1NsaWRlcicsIHtcbiAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZWFzZV9mYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlIC0gX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIG9ubHkgc2V0IGhhbmRsZSBwb3Mgd2hlbiBldmVudCB3YXMgaGFuZGxlZCBzcGVjaWFsbHlcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICB9Ki9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgc2xpZGVyIHBsdWdpbi5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5TbGlkZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNaW5pbXVtIHZhbHVlIGZvciB0aGUgc2xpZGVyIHNjYWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHN0YXJ0OiAwLFxuICAvKipcbiAgICogTWF4aW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIGVuZDogMTAwLFxuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBjaGFuZ2UgcGVyIGNoYW5nZSBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBzdGVwOiAxLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIGhhbmRsZS9pbnB1dCAqKGxlZnQgaGFuZGxlL2ZpcnN0IGlucHV0KSogc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBpbml0aWFsU3RhcnQ6IDAsXG4gIC8qKlxuICAgKiBWYWx1ZSBhdCB3aGljaCB0aGUgcmlnaHQgaGFuZGxlL3NlY29uZCBpbnB1dCBzaG91bGQgYmUgc2V0IHRvIG9uIGluaXRpYWxpemF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgaW5pdGlhbEVuZDogMTAwLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBpbnB1dCB0byBiZSBsb2NhdGVkIG91dHNpZGUgdGhlIGNvbnRhaW5lciBhbmQgdmlzaWJsZS4gU2V0IHRvIGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYmluZGluZzogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gY2xpY2svdGFwIG9uIHRoZSBzbGlkZXIgYmFyIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbGlja1NlbGVjdDogdHJ1ZSxcbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGFuZCB1c2UgdGhlIGB2ZXJ0aWNhbGAgY2xhc3MgdG8gY2hhbmdlIGFsaWdubWVudCB0byB2ZXJ0aWNhbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHZlcnRpY2FsOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlciB0byBkcmFnIHRoZSBzbGlkZXIgaGFuZGxlKHMpIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgc2xpZGVyIGFuZCBwcmV2ZW50cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBiZWluZyBhcHBsaWVkLiBEb3VibGUgY2hlY2tlZCBieSBKUyB3aXRoIGBkaXNhYmxlZENsYXNzYC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlIG9mIHR3byBoYW5kbGVzLiBEb3VibGUgY2hlY2tlZCBieSB0aGUgSlMuIENoYW5nZXMgc29tZSBsb2dpYyBoYW5kbGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRvdWJsZVNpZGVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIFBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZS5cbiAgICovXG4gIC8vIHN0ZXBzOiAxMDAsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdGhlIHBsdWdpbiBzaG91bGQgZ28gdG8gZm9yIGZsb2F0aW5nIHBvaW50IHByZWNpc2lvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyXG4gICAqL1xuICBkZWNpbWFsOiAyLFxuICAvKipcbiAgICogVGltZSBkZWxheSBmb3IgZHJhZ2dlZCBlbGVtZW50cy5cbiAgICovXG4gIC8vIGRyYWdEZWxheTogMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBhbmltYXRlIHRoZSBtb3ZlbWVudCBvZiBhIHNsaWRlciBoYW5kbGUgaWYgdXNlciBjbGlja3MvdGFwcyBvbiB0aGUgYmFyLiBOZWVkcyB0byBiZSBtYW51YWxseSBzZXQgaWYgdXBkYXRpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgU2FzcyBzZXR0aW5ncy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAyMDBcbiAgICovXG4gIG1vdmVUaW1lOiAyMDAsLy91cGRhdGUgdGhpcyBpZiBjaGFuZ2luZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBzYXNzXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGRpc2FibGVkIHNsaWRlcnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2Rpc2FibGVkJ1xuICAgKi9cbiAgZGlzYWJsZWRDbGFzczogJ2Rpc2FibGVkJyxcbiAgLyoqXG4gICAqIFdpbGwgaW52ZXJ0IHRoZSBkZWZhdWx0IGxheW91dCBmb3IgYSB2ZXJ0aWNhbDxzcGFuIGRhdGEtdG9vbHRpcCB0aXRsZT1cIndobyB3b3VsZCBkbyB0aGlzPz8/XCI+IDwvc3Bhbj5zbGlkZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMCxcbiAgLyoqXG4gICogQmFzZXZhbHVlIGZvciBub24tbGluZWFyIHNsaWRlcnNcbiAgKiBAb3B0aW9uXG4gICogQHR5cGUge251bWJlcn1cbiAgKiBAZGVmYXVsdCA1XG4gICovXG4gIG5vbkxpbmVhckJhc2U6IDUsXG4gIC8qKlxuICAqIEJhc2V2YWx1ZSBmb3Igbm9uLWxpbmVhciBzbGlkZXJzLCBwb3NzaWJsZSB2YWx1ZXMgYXJlOiBgJ2xpbmVhcidgLCBgJ3BvdydgICYgYCdsb2cnYC4gUG93IGFuZCBMb2cgdXNlIHRoZSBub25MaW5lYXJCYXNlIHNldHRpbmcuXG4gICogQG9wdGlvblxuICAqIEB0eXBlIHtzdHJpbmd9XG4gICogQGRlZmF1bHQgJ2xpbmVhcidcbiAgKi9cbiAgcG9zaXRpb25WYWx1ZUZ1bmN0aW9uOiAnbGluZWFyJyxcbn07XG5cbmZ1bmN0aW9uIHBlcmNlbnQoZnJhYywgbnVtKSB7XG4gIHJldHVybiAoZnJhYyAvIG51bSk7XG59XG5mdW5jdGlvbiBhYnNQb3NpdGlvbigkaGFuZGxlLCBkaXIsIGNsaWNrUG9zLCBwYXJhbSkge1xuICByZXR1cm4gTWF0aC5hYnMoKCRoYW5kbGUucG9zaXRpb24oKVtkaXJdICsgKCRoYW5kbGVbcGFyYW1dKCkgLyAyKSkgLSBjbGlja1Bvcyk7XG59XG5mdW5jdGlvbiBiYXNlTG9nKGJhc2UsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLmxvZyh2YWx1ZSkvTWF0aC5sb2coYmFzZSlcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFNsaWRlciwgJ1NsaWRlcicpO1xuXG59KGpRdWVyeSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBTdGlja3kgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnN0aWNreVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgU3RpY2t5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBzdGlja3kgdGhpbmcuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBzdGlja3kuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QgcGFzc2VkIHdoZW4gY3JlYXRpbmcgdGhlIGVsZW1lbnQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU3RpY2t5LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTdGlja3knKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc3RpY2t5IGVsZW1lbnQgYnkgYWRkaW5nIGNsYXNzZXMsIGdldHRpbmcvc2V0dGluZyBkaW1lbnNpb25zLCBicmVha3BvaW50cyBhbmQgYXR0cmlidXRlc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN0aWNreS1jb250YWluZXJdJyksXG4gICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdzdGlja3knKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdGhpcy53YXNXcmFwcGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy4kY29udGFpbmVyID0gJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJCh0aGlzLm9wdGlvbnMuY29udGFpbmVyKS53cmFwSW5uZXIodGhpcy4kZWxlbWVudCk7XG4gICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5zdGlja3lDbGFzcykuYXR0cih7ICdkYXRhLXJlc2l6ZSc6IGlkLCAnZGF0YS1tdXRhdGUnOiBpZCB9KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpIHtcbiAgICAgICAgJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcikuYXR0cih7ICdkYXRhLW11dGF0ZSc6IGlkIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsQ291bnQgPSB0aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub25lKCdsb2FkLnpmLnN0aWNreScsIGZ1bmN0aW9uKCl7XG4gICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgIF90aGlzLmNvbnRhaW5lckhlaWdodCA9IF90aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIgPyAwIDogX3RoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgX3RoaXMuJGNvbnRhaW5lci5jc3MoJ2hlaWdodCcsIF90aGlzLmNvbnRhaW5lckhlaWdodCk7XG4gICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKXtcbiAgICAgICAgX3RoaXMuJGFuY2hvciA9ICQoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIF90aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHNjcm9sbCk7XG4gICAgICAgIC8vVW5zdGljayB0aGUgZWxlbWVudCB3aWxsIGVuc3VyZSB0aGF0IHByb3BlciBjbGFzc2VzIGFyZSBzZXQuXG4gICAgICAgIGlmICghX3RoaXMuaXNTdHVjaykge1xuICAgICAgICAgIF90aGlzLl9yZW1vdmVTdGlja3koKHNjcm9sbCA+PSBfdGhpcy50b3BQb2ludCkgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoaWQuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlUG9pbnRzKCkge1xuICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgYnRtID0gdGhpcy5vcHRpb25zLmJ0bUFuY2hvcj09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgcHRzID0gW3RvcCwgYnRtXSxcbiAgICAgICAgYnJlYWtzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgIHZhciBwdDtcbiAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgYW5jaG9yID0gJChgIyR7cGxhY2VbMF19YCk7XG5cbiAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAocGxhY2VbMV0gJiYgcGxhY2VbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha3NbaV0gPSBwdDtcbiAgICB9XG5cblxuICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzdWVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBfZXZlbnRzKGlkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gYHNjcm9sbC56Zi4ke2lkfWA7XG4gICAgaWYgKHRoaXMuaXNPbikgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpXG4gICAgICAgICAgICAgICAub24oc2Nyb2xsTGlzdGVuZXIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpXG4gICAgICAgICAgICAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHNIYW5kbGVyKGlkKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgX3RoaXMuX2V2ZW50c0hhbmRsZXIoaWQpO1xuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kYW5jaG9yKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgZXZlbnRzLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBwc3VlZG8tcmFuZG9tIGlkIGZvciB1bmlxdWUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyLlxuICAgKi9cbiAgX2V2ZW50c0hhbmRsZXIoaWQpIHtcbiAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXIgPSBgc2Nyb2xsLnpmLiR7aWR9YDtcblxuICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICBpZiAoIV90aGlzLmlzT24pIHtcbiAgICAgICAgICAgX3RoaXMuX2V2ZW50cyhpZCk7XG4gICAgICAgICB9XG4gICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc09uKSB7XG4gICAgICAgICBfdGhpcy5fcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpO1xuICAgICAgIH1cbiAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3Igc2Nyb2xsIGFuZCBjaGFuZ2UgZXZlbnRzIG9uIGFuY2hvci5cbiAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsTGlzdGVuZXIgLSB1bmlxdWUsIG5hbWVzcGFjZWQgc2Nyb2xsIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGB3aW5kb3dgXG4gICAqL1xuICBfcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICogQGV2ZW50IFN0aWNreSNwYXVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrU2l6ZXMgLSB0cnVlIGlmIHBsdWdpbiBzaG91bGQgcmVjYWxjdWxhdGUgc2l6ZXMgYW5kIGJyZWFrcG9pbnRzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICovXG4gIF9jYWxjKGNoZWNrU2l6ZXMsIHNjcm9sbCkge1xuICAgIGlmIChjaGVja1NpemVzKSB7IHRoaXMuX3NldFNpemVzKCk7IH1cblxuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzY3JvbGwpIHsgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0OyB9XG5cbiAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgc3R1Y2suXG4gICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTdGlja3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGNzc1ttcmduXSA9IGAke3RoaXMub3B0aW9uc1ttcmduXX1lbWA7XG4gICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICBjc3Nbbm90U3R1Y2tUb10gPSAnYXV0byc7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgaXMtc3R1Y2sgaXMtYXQtJHtzdGlja1RvfWApXG4gICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtYW5jaG9yZWQgaXMtYXQtJHt0b3BPckJvdHRvbX1gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi51bnN0dWNrZnJvbTpib3R0b21gXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC50cmlnZ2VyKGBzdGlja3kuemYudW5zdHVja2Zyb206JHt0b3BPckJvdHRvbX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSAkZWxlbWVudCBhbmQgJGNvbnRhaW5lciBzaXplcyBmb3IgcGx1Z2luLlxuICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24gb2YgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U2l6ZXMoY2IpIHtcbiAgICB0aGlzLmNhblN0aWNrID0gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgbmV3RWxlbVdpZHRoID0gdGhpcy4kY29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICBjb21wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKSxcbiAgICAgICAgcGRuZ2wgPSBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApLFxuICAgICAgICBwZG5nciA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctcmlnaHQnXSwgMTApO1xuXG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFuY2hvckhlaWdodCA9IHRoaXMuJGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgJ21heC13aWR0aCc6IGAke25ld0VsZW1XaWR0aCAtIHBkbmdsIC0gcGRuZ3J9cHhgXG4gICAgfSk7XG5cbiAgICB2YXIgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgbmV3Q29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG4gICAgdGhpcy4kY29udGFpbmVyLmNzcyh7XG4gICAgICBoZWlnaHQ6IG5ld0NvbnRhaW5lckhlaWdodFxuICAgIH0pO1xuICAgIHRoaXMuZWxlbUhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcblxuICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtYXQtYm90dG9tJykpIHtcbiAgICAgICAgdmFyIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkudG9wIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0O1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgYW5jaG9yUHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYnJlYWtwb2ludHMgZm9yIHRoZSBlbGVtZW50IHRvIGJlY29tZSBzdGlja3kvdW5zdGlja3kuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGVtSGVpZ2h0IC0gcHggdmFsdWUgZm9yIHN0aWNreS4kZWxlbWVudCBoZWlnaHQsIGNhbGN1bGF0ZWQgYnkgYF9zZXRTaXplc2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0QnJlYWtQb2ludHMoZWxlbUhlaWdodCwgY2IpIHtcbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgICAgZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICB2YXIgbVRvcCA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luVG9wKSxcbiAgICAgICAgbUJ0bSA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxcbiAgICAgICAgdG9wUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzBdIDogdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCxcbiAgICAgICAgYm90dG9tUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIDogdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCxcbiAgICAgICAgLy8gdG9wUG9pbnQgPSB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wIHx8IHRoaXMucG9pbnRzWzBdLFxuICAgICAgICAvLyBib3R0b21Qb2ludCA9IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQgfHwgdGhpcy5wb2ludHNbMV0sXG4gICAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ3RvcCcpIHtcbiAgICAgIHRvcFBvaW50IC09IG1Ub3A7XG4gICAgICBib3R0b21Qb2ludCAtPSAoZWxlbUhlaWdodCArIG1Ub3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICdib3R0b20nKSB7XG4gICAgICB0b3BQb2ludCAtPSAod2luSGVpZ2h0IC0gKGVsZW1IZWlnaHQgKyBtQnRtKSk7XG4gICAgICBib3R0b21Qb2ludCAtPSAod2luSGVpZ2h0IC0gbUJ0bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vdGhpcyB3b3VsZCBiZSB0aGUgc3RpY2tUbzogYm90aCBvcHRpb24uLi4gdHJpY2t5XG4gICAgfVxuXG4gICAgdGhpcy50b3BQb2ludCA9IHRvcFBvaW50O1xuICAgIHRoaXMuYm90dG9tUG9pbnQgPSBib3R0b21Qb2ludDtcblxuICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgJHt0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3N9IGlzLWFuY2hvcmVkIGlzLWF0LXRvcGApXG4gICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgICAgICAgICAgICAgICAgLm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignY2hhbmdlLnpmLnN0aWNreScpO1xuICAgIH1cbiAgICAkKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgaWYgKHRoaXMud2FzV3JhcHBlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblN0aWNreS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbWl6YWJsZSBjb250YWluZXIgdGVtcGxhdGUuIEFkZCB5b3VyIG93biBjbGFzc2VzIGZvciBzdHlsaW5nIGFuZCBzaXppbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJyZsdDtkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uIENhbiBiZSBgJ3RvcCdgIG9yIGAnYm90dG9tJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRvcEFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSBib3R0b20gYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBidG1BbmNob3I6ICcnLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpblRvcDogMSxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSBib3R0b20gb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtYXJnaW5Cb3R0b206IDEsXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IHN0cmluZyB0aGF0IGlzIHRoZSBtaW5pbXVtIHNjcmVlbiBzaXplIGFuIGVsZW1lbnQgc2hvdWxkIGJlY29tZSBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHN0aWNreU9uOiAnbWVkaXVtJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGVsZW1lbnQsIGFuZCByZW1vdmVkIG9uIGRlc3RydWN0aW9uLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3lgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3knXG4gICAqL1xuICBzdGlja3lDbGFzczogJ3N0aWNreScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBjb250YWluZXIuIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreS1jb250YWluZXJgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3ktY29udGFpbmVyJ1xuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdzdGlja3ktY29udGFpbmVyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBzY3JvbGwgZXZlbnRzIGJldHdlZW4gdGhlIHBsdWdpbidzIHJlY2FsY3VsYXRpbmcgc3RpY2t5IHBvaW50cy4gU2V0dGluZyBpdCB0byBgMGAgd2lsbCBjYXVzZSBpdCB0byByZWNhbGMgZXZlcnkgc2Nyb2xsIGV2ZW50LCBzZXR0aW5nIGl0IHRvIGAtMWAgd2lsbCBwcmV2ZW50IHJlY2FsYyBvbiBzY3JvbGwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG4gIGNoZWNrRXZlcnk6IC0xXG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZW0gdmFsdWVzXG4gKiBAcGFyYW0gTnVtYmVyIHtlbX0gLSBudW1iZXIgb2YgZW0ncyB0byBjYWxjdWxhdGUgaW50byBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZW1DYWxjKGVtKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKS5mb250U2l6ZSwgMTApICogZW07XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihTdGlja3ksICdTdGlja3knKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRhYnMgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRhYnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlciBpZiB0YWJzIGNvbnRhaW4gaW1hZ2VzXG4gKi9cblxuY2xhc3MgVGFicyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRhYnMuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVGFicyNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gdGFicy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUYWJzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVGFicycpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1RhYnMnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnbmV4dCcsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgIC8vICdUQUInOiAnbmV4dCcsXG4gICAgICAvLyAnU0hJRlRfVEFCJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWJzIGJ5IHNob3dpbmcgYW5kIGZvY3VzaW5nIChpZiBhdXRvRm9jdXM9dHJ1ZSkgdGhlIHByZXNldCBhY3RpdmUgdGFiLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7J3JvbGUnOiAndGFibGlzdCd9KTtcbiAgICB0aGlzLiR0YWJUaXRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCk7XG4gICAgdGhpcy4kdGFiQ29udGVudCA9ICQoYFtkYXRhLXRhYnMtY29udGVudD1cIiR7dGhpcy4kZWxlbWVudFswXS5pZH1cIl1gKTtcblxuICAgIHRoaXMuJHRhYlRpdGxlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRsaW5rID0gJGVsZW0uZmluZCgnYScpLFxuICAgICAgICAgIGlzQWN0aXZlID0gJGVsZW0uaGFzQ2xhc3MoYCR7X3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCksXG4gICAgICAgICAgaGFzaCA9ICRsaW5rWzBdLmhhc2guc2xpY2UoMSksXG4gICAgICAgICAgbGlua0lkID0gJGxpbmtbMF0uaWQgPyAkbGlua1swXS5pZCA6IGAke2hhc2h9LWxhYmVsYCxcbiAgICAgICAgICAkdGFiQ29udGVudCA9ICQoYCMke2hhc2h9YCk7XG5cbiAgICAgICRlbGVtLmF0dHIoeydyb2xlJzogJ3ByZXNlbnRhdGlvbid9KTtcblxuICAgICAgJGxpbmsuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaGFzaCxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgJHRhYkNvbnRlbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogIWlzQWN0aXZlLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgaWYoaXNBY3RpdmUgJiYgX3RoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogJGVsZW0ub2Zmc2V0KCkudG9wIH0sIF90aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2VEZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgJGxpbmsuZm9jdXMoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB2YXIgJGltYWdlcyA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnaW1nJyk7XG5cbiAgICAgIGlmICgkaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NldEhlaWdodCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgICAvL2N1cnJlbnQgY29udGV4dC1ib3VuZCBmdW5jdGlvbiB0byBvcGVuIHRhYnMgb24gcGFnZSBsb2FkIG9yIGhpc3RvcnkgcG9wc3RhdGVcbiAgICB0aGlzLl9jaGVja0RlZXBMaW5rID0gKCkgPT4ge1xuICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgLy9uZWVkIGEgaGFzaCBhbmQgYSByZWxldmFudCBhbmNob3IgaW4gdGhpcyB0YWJzZXRcbiAgICAgIGlmKGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gdGhpcy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInK2FuY2hvcisnXCJdJyk7XG4gICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdFRhYigkKGFuY2hvciksIHRydWUpO1xuXG4gICAgICAgICAgLy9yb2xsIHVwIGEgbGl0dGxlIHRvIHNob3cgdGhlIHRpdGxlc1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IG9mZnNldC50b3AgfSwgdGhpcy5vcHRpb25zLmRlZXBMaW5rU211ZGdlRGVsYXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB6cGx1Z2luIGhhcyBkZWVwbGlua2VkIGF0IHBhZ2Vsb2FkXG4gICAgICAgICAgICAqIEBldmVudCBUYWJzI2RlZXBsaW5rXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2RlZXBsaW5rLnpmLnRhYnMnLCBbJGxpbmssICQoYW5jaG9yKV0pO1xuICAgICAgICAgfVxuICAgICAgIH1cbiAgICAgfVxuXG4gICAgLy91c2UgYnJvd3NlciB0byBvcGVuIGEgdGFiLCBpZiBpdCBleGlzdHMgaW4gdGhpcyB0YWJzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB0aGlzLl9jaGVja0RlZXBMaW5rKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLl9hZGRLZXlIYW5kbGVyKCk7XG4gICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpO1xuXG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY2xpY2sgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRDbGlja0hhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vZmYoJ2NsaWNrLnpmLnRhYnMnKVxuICAgICAgLm9uKCdjbGljay56Zi50YWJzJywgYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCwgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkKHRoaXMpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRLZXlIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMub2ZmKCdrZXlkb3duLnpmLnRhYnMnKS5vbigna2V5ZG93bi56Zi50YWJzJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZiAoZS53aGljaCA9PT0gOSkgcmV0dXJuO1xuXG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMud3JhcE9uS2V5cykge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gaSA9PT0gMCA/ICRlbGVtZW50cy5sYXN0KCkgOiAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9IGkgPT09ICRlbGVtZW50cy5sZW5ndGggLTEgPyAkZWxlbWVudHMuZmlyc3QoKSA6ICRlbGVtZW50cy5lcShpKzEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1RhYnMnLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRlbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkcHJldkVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJG5leHRFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQ29sbGFwc2VzIGFjdGl2ZSB0YWIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIG9wZW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlzdG9yeUhhbmRsZWQgLSBicm93c2VyIGhhcyBhbHJlYWR5IGhhbmRsZWQgYSBoaXN0b3J5IHVwZGF0ZVxuICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQsIGhpc3RvcnlIYW5kbGVkKSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgYWN0aXZlIGNsYXNzIG9uIHRhcmdldC4gQ29sbGFwc2UgaWYgZXhpc3RzLlxuICAgICAqL1xuICAgIGlmICgkdGFyZ2V0Lmhhc0NsYXNzKGAke3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCkpIHtcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLmFjdGl2ZUNvbGxhcHNlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2xsYXBzZVRhYigkdGFyZ2V0KTtcblxuICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgenBsdWdpbiBoYXMgc3VjY2Vzc2Z1bGx5IGNvbGxhcHNlZCB0YWJzLlxuICAgICAgICAgICAgKiBAZXZlbnQgVGFicyNjb2xsYXBzZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY29sbGFwc2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkb2xkVGFiID0gdGhpcy4kZWxlbWVudC5cbiAgICAgICAgICBmaW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfS4ke3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCksXG4gICAgICAgICAgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICAgJHRhcmdldENvbnRlbnQgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoaGFzaCk7XG5cbiAgICAvL2Nsb3NlIG9sZCB0YWJcbiAgICB0aGlzLl9jb2xsYXBzZVRhYigkb2xkVGFiKTtcblxuICAgIC8vb3BlbiBuZXcgdGFiXG4gICAgdGhpcy5fb3BlblRhYigkdGFyZ2V0KTtcblxuICAgIC8vZWl0aGVyIHJlcGxhY2Ugb3IgdXBkYXRlIGJyb3dzZXIgaGlzdG9yeVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgIWhpc3RvcnlIYW5kbGVkKSB7XG4gICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQgdGFicy5cbiAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZS56Zi50YWJzJywgWyR0YXJnZXQsICR0YXJnZXRDb250ZW50XSk7XG5cbiAgICAvL2ZpcmUgdG8gY2hpbGRyZW4gYSBtdXRhdGlvbiBldmVudFxuICAgICR0YXJnZXRDb250ZW50LmZpbmQoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gT3Blbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfb3BlblRhYigkdGFyZ2V0KSB7XG4gICAgICB2YXIgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICAgJHRhcmdldENvbnRlbnQgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoaGFzaCk7XG5cbiAgICAgICR0YXJnZXQuYWRkQ2xhc3MoYCR7dGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzc31gKTtcblxuICAgICAgJHRhYkxpbmsuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZSd9KTtcblxuICAgICAgJHRhcmdldENvbnRlbnRcbiAgICAgICAgLmFkZENsYXNzKGAke3RoaXMub3B0aW9ucy5wYW5lbEFjdGl2ZUNsYXNzfWApXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiAnZmFsc2UnfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGFwc2VzIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIE9wZW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2NvbGxhcHNlVGFiKCR0YXJnZXQpIHtcbiAgICB2YXIgJHRhcmdldF9hbmNob3IgPSAkdGFyZ2V0XG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7dGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzc31gKVxuICAgICAgLmZpbmQoJ1tyb2xlPVwidGFiXCJdJylcbiAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnIH0pO1xuXG4gICAgJChgIyR7JHRhcmdldF9hbmNob3IuYXR0cignYXJpYS1jb250cm9scycpfWApXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7dGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3N9YClcbiAgICAgIC5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogJ3RydWUnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgZm9yIHNlbGVjdGluZyBhIGNvbnRlbnQgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge2pRdWVyeSB8IFN0cmluZ30gZWxlbSAtIGpRdWVyeSBvYmplY3Qgb3Igc3RyaW5nIG9mIHRoZSBpZCBvZiB0aGUgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzZWxlY3RUYWIoZWxlbSwgaGlzdG9yeUhhbmRsZWQpIHtcbiAgICB2YXIgaWRTdHI7XG5cbiAgICBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkU3RyID0gZWxlbTtcbiAgICB9XG5cbiAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgaWRTdHIgPSBgIyR7aWRTdHJ9YDtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKGBbaHJlZiQ9XCIke2lkU3RyfVwiXWApLnBhcmVudChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKTtcblxuICAgIHRoaXMuX2hhbmRsZVRhYkNoYW5nZSgkdGFyZ2V0LCBoaXN0b3J5SGFuZGxlZCk7XG4gIH07XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgZWFjaCBwYW5lbCB0byB0aGUgaGVpZ2h0IG9mIHRoZSB0YWxsZXN0IHBhbmVsLlxuICAgKiBJZiBlbmFibGVkIGluIG9wdGlvbnMsIGdldHMgY2FsbGVkIG9uIG1lZGlhIHF1ZXJ5IGNoYW5nZS5cbiAgICogSWYgbG9hZGluZyBjb250ZW50IHZpYSBleHRlcm5hbCBzb3VyY2UsIGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgb3Igd2l0aCBfcmVmbG93LlxuICAgKiBJZiBlbmFibGVkIHdpdGggYGRhdGEtbWF0Y2gtaGVpZ2h0PVwidHJ1ZVwiYCwgdGFicyBzZXRzIHRvIGVxdWFsIGhlaWdodFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRIZWlnaHQoKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIF90aGlzID0gdGhpczsgLy8gTG9jayBkb3duIHRoZSBgdGhpc2AgdmFsdWUgZm9yIHRoZSByb290IHRhYnMgb2JqZWN0XG5cbiAgICB0aGlzLiR0YWJDb250ZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5jc3MoJ2hlaWdodCcsICcnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoYCR7X3RoaXMub3B0aW9ucy5wYW5lbEFjdGl2ZUNsYXNzfWApOyAvLyBnZXQgdGhlIG9wdGlvbnMgZnJvbSB0aGUgcGFyZW50IGluc3RlYWQgb2YgdHJ5aW5nIHRvIGdldCB0aGVtIGZyb20gdGhlIGNoaWxkXG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJywgJ2Rpc3BsYXknOiAnYmxvY2snfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moe1xuICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnJyxcbiAgICAgICAgICAgICdkaXNwbGF5JzogJydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgfSlcbiAgICAgIC5jc3MoJ2hlaWdodCcsIGAke21heH1weGApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIHRhYnMuXG4gICAqIEBmaXJlcyBUYWJzI2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKVxuICAgICAgLm9mZignLnpmLnRhYnMnKS5oaWRlKCkuZW5kKClcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmhpZGUoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgIH1cblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5UYWJzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgcGFuZSBzcGVjaWZpZWQgYnkgaGFzaCBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBkZWVwIGxpbmsgc2Nyb2xsIHRvIG1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSB0YWIgcGFuZWwgaXMgdmlzaWJsZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbmltYXRpb24gdGltZSAobXMpIGZvciB0aGUgZGVlcCBsaW5rIGFkanVzdG1lbnRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAzMDBcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlRGVsYXk6IDMwMCxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiB0YWJcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBOb3QgcmVjb21tZW5kZWQgaWYgbW9yZSB0aGFuIG9uZSB0YWIgcGFuZWwgcGVyIHBhZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB3cmFwT25LZXlzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRhYiBjb250ZW50IHBhbmVzIHRvIG1hdGNoIGhlaWdodHMgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXRjaEhlaWdodDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFsbG93cyBhY3RpdmUgdGFicyB0byBjb2xsYXBzZSB3aGVuIGNsaWNrZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhY3RpdmVDb2xsYXBzZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYGxpYCdzIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RhYnMtdGl0bGUnXG4gICAqL1xuICBsaW5rQ2xhc3M6ICd0YWJzLXRpdGxlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGBsaWAgaW4gdGFiIGxpbmsgbGlzdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtYWN0aXZlJ1xuICAgKi9cbiAgbGlua0FjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGVudCBjb250YWluZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0YWJzLXBhbmVsJ1xuICAgKi9cbiAgcGFuZWxDbGFzczogJ3RhYnMtcGFuZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgY29udGVudCBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIHBhbmVsQWN0aXZlQ2xhc3M6ICdpcy1hY3RpdmUnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVGFicywgJ1RhYnMnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvZ2dsZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvZ2dsZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9nZ2xlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRvZ2dsZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9nZ2xlciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUb2dnbGVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFRvZ2dsZXIgcGx1Z2luIGJ5IHBhcnNpbmcgdGhlIHRvZ2dsZSBjbGFzcyBmcm9tIGRhdGEtdG9nZ2xlciwgb3IgYW5pbWF0aW9uIGNsYXNzZXMgZnJvbSBkYXRhLWFuaW1hdGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIC8vIFBhcnNlIGFuaW1hdGlvbiBjbGFzc2VzIGlmIHRoZXkgd2VyZSBzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIHBhcnNlIHRvZ2dsZSBjbGFzc1xuICAgIGVsc2Uge1xuICAgICAgaW5wdXQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RvZ2dsZXInKTtcbiAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGlucHV0WzBdID09PSAnLicgPyBpbnB1dC5zbGljZSgxKSA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIEFkZCBBUklBIGF0dHJpYnV0ZXMgdG8gdHJpZ2dlcnNcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICQoYFtkYXRhLW9wZW49XCIke2lkfVwiXSwgW2RhdGEtY2xvc2U9XCIke2lkfVwiXSwgW2RhdGEtdG9nZ2xlPVwiJHtpZH1cIl1gKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBoaWRkZW4sIGFkZCBhcmlhLWhpZGRlblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSA/IGZhbHNlIDogdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgdG9nZ2xlIHRyaWdnZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZigndG9nZ2xlLnpmLnRyaWdnZXInKS5vbigndG9nZ2xlLnpmLnRyaWdnZXInLCB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSB0YXJnZXQgY2xhc3Mgb24gdGhlIHRhcmdldCBlbGVtZW50LiBBbiBldmVudCBpcyBmaXJlZCBmcm9tIHRoZSBvcmlnaW5hbCB0cmlnZ2VyIGRlcGVuZGluZyBvbiBpZiB0aGUgcmVzdWx0YW50IHN0YXRlIHdhcyBcIm9uXCIgb3IgXCJvZmZcIi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29mZlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXNbIHRoaXMub3B0aW9ucy5hbmltYXRlID8gJ190b2dnbGVBbmltYXRlJyA6ICdfdG9nZ2xlQ2xhc3MnXSgpO1xuICB9XG5cbiAgX3RvZ2dsZUNsYXNzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuXG4gICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICBpZiAoaXNPbikge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAqIEBldmVudCBUb2dnbGVyI29uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaWYgdGhlIHRhcmdldCBlbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb2ZmLnpmLnRvZ2dsZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBUklBKGlzT24pO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgfVxuXG4gIF90b2dnbGVBbmltYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpKSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKHRydWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29uLnpmLnRvZ2dsZXInKTtcbiAgICAgICAgdGhpcy5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKGZhbHNlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgICB0aGlzLmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPbiA/IHRydWUgOiBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIFRvZ2dsZXIgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRvZ2dsZXInKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9nZ2xlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBwbHVnaW4gaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGVkIHdoZW4gdG9nZ2xlZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9nZ2xlciwgJ1RvZ2dsZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvb2x0aXAgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvb2x0aXBcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBUb29sdGlwIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBUb29sdGlwLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIFRvb2x0aXAjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYXR0YWNoIGEgdG9vbHRpcCB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvYmplY3QgdG8gZXh0ZW5kIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFRvb2x0aXAuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUb29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRvb2x0aXAgYnkgc2V0dGluZyB0aGUgY3JlYXRpbmcgdGhlIHRpcCBlbGVtZW50LCBhZGRpbmcgaXQncyB0ZXh0LCBzZXR0aW5nIHByaXZhdGUgdmFyaWFibGVzIGFuZCBzZXR0aW5nIGF0dHJpYnV0ZXMgb24gdGhlIGFuY2hvci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBlbGVtSWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICd0b29sdGlwJyk7XG5cbiAgICB0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzIHx8IHRoaXMuX2dldFBvc2l0aW9uQ2xhc3ModGhpcy4kZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zLnRpcFRleHQgPSB0aGlzLm9wdGlvbnMudGlwVGV4dCB8fCB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJyk7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMub3B0aW9ucy50ZW1wbGF0ZSA/ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKSA6IHRoaXMuX2J1aWxkVGVtcGxhdGUoZWxlbUlkKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dIdG1sKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC5odG1sKHRoaXMub3B0aW9ucy50aXBUZXh0KVxuICAgICAgICAuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC50ZXh0KHRoaXMub3B0aW9ucy50aXBUZXh0KVxuICAgICAgICAuaGlkZSgpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAndGl0bGUnOiAnJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZWxlbUlkLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAnZGF0YS10b2dnbGUnOiBlbGVtSWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiBlbGVtSWRcbiAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgIC8vaGVscGVyIHZhcmlhYmxlcyB0byB0cmFjayBtb3ZlbWVudCBvbiBjb2xsaXNpb25zXG4gICAgdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgY2xhc3MsIGlmIHByZXNlbnQsIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UG9zaXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7IHJldHVybiAnJzsgfVxuICAgIC8vIHZhciBwb3NpdGlvbiA9IGVsZW1lbnQuYXR0cignY2xhc3MnKS5tYXRjaCgvdG9wfGxlZnR8cmlnaHQvZyk7XG4gICAgdmFyIHBvc2l0aW9uID0gZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goL1xcYih0b3B8bGVmdHxyaWdodClcXGIvZyk7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICcnO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1aWxkcyB0aGUgdG9vbHRpcCBlbGVtZW50LCBhZGRzIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm5zIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFRlbXBsYXRlKGlkKSB7XG4gICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9IChgJHt0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzfSAke3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzfSAke3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXN9YCkudHJpbSgpO1xuICAgIHZhciAkdGVtcGxhdGUgPSAgJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyh0ZW1wbGF0ZUNsYXNzZXMpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2UsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gJHRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uaW5nIGNsYXNzIHRvIHRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuXG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZiAoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5hZGRDbGFzcygndG9wJyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdyaWdodCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICAvL2lmIGRlZmF1bHQgY2hhbmdlIGRpZG4ndCB3b3JrLCB0cnkgYm90dG9tIG9yIGxlZnQgZmlyc3RcbiAgICBlbHNlIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLFxuICAgICAgICAkdGlwRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICgoJHRpcERpbXMud2lkdGggPj0gJHRpcERpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkpKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCAnY2VudGVyIGJvdHRvbScsIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6ICRhbmNob3JEaW1zLndpbmRvd0RpbXMud2lkdGggLSAodGhpcy5vcHRpb25zLmhPZmZzZXQgKiAyKSxcbiAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCdjZW50ZXIgJyArIChwb3NpdGlvbiB8fCAnYm90dG9tJyksIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkgJiYgdGhpcy5jb3VudGVyKSB7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAqIEBmaXJlcyBUb29sdGlwI3Nob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zaG93T24pKSB7XG4gICAgICAvLyBjb25zb2xlLmVycm9yKCdUaGUgc2NyZWVuIGlzIHRvbyBzbWFsbCB0byBkaXNwbGF5IHRoaXMgdG9vbHRpcCcpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy50ZW1wbGF0ZS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuc2hvdygpO1xuICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB0byBjbG9zZSBhbGwgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgICAqIEBldmVudCBDbG9zZW1lI3Rvb2x0aXBcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYudG9vbHRpcCcsIHRoaXMudGVtcGxhdGUuYXR0cignaWQnKSk7XG5cblxuICAgIHRoaXMudGVtcGxhdGUuYXR0cih7XG4gICAgICAnZGF0YS1pcy1hY3RpdmUnOiB0cnVlLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2VcbiAgICB9KTtcbiAgICBfdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy50ZW1wbGF0ZSk7XG4gICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuaGlkZSgpLmNzcygndmlzaWJpbGl0eScsICcnKS5mYWRlSW4odGhpcy5vcHRpb25zLmZhZGVJbkR1cmF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vbWF5YmUgZG8gc3R1ZmY/XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdG9vbHRpcCBpcyBzaG93blxuICAgICAqIEBldmVudCBUb29sdGlwI3Nob3dcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYudG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBjdXJyZW50IHRvb2x0aXAsIGFuZCByZXNldHMgdGhlIHBvc2l0aW9uaW5nIGNsYXNzIGlmIGl0IHdhcyBjaGFuZ2VkIGR1ZSB0byBjb2xsaXNpb25cbiAgICogQGZpcmVzIFRvb2x0aXAjaGlkZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGUoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2hpZGluZycsIHRoaXMuJGVsZW1lbnQuZGF0YSgneWV0aS1ib3gnKSk7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5hdHRyKHtcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAnZGF0YS1pcy1hY3RpdmUnOiBmYWxzZVxuICAgIH0pLmZhZGVPdXQodGhpcy5vcHRpb25zLmZhZGVPdXREdXJhdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgaWYgKF90aGlzLmNsYXNzQ2hhbmdlZCkge1xuICAgICAgICBfdGhpcy50ZW1wbGF0ZVxuICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhfdGhpcy5fZ2V0UG9zaXRpb25DbGFzcyhfdGhpcy50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgLmFkZENsYXNzKF90aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcyk7XG5cbiAgICAgICBfdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgICAgX3RoaXMuY291bnRlciA9IDQ7XG4gICAgICAgX3RoaXMuY2xhc3NDaGFuZ2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogZmlyZXMgd2hlbiB0aGUgdG9vbHRpcCBpcyBoaWRkZW5cbiAgICAgKiBAZXZlbnQgVG9vbHRpcCNoaWRlXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLnRvb2x0aXAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhZGRzIGV2ZW50IGxpc3RlbmVycyBmb3IgdGhlIHRvb2x0aXAgYW5kIGl0cyBhbmNob3JcbiAgICogVE9ETyBjb21iaW5lIHNvbWUgb2YgdGhlIGxpc3RlbmVycyBsaWtlIGZvY3VzIGFuZCBtb3VzZWVudGVyLCBldGMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyICR0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGU7XG4gICAgdmFyIGlzRm9jdXMgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ21vdXNlZW50ZXIuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlbGVhdmUuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICBpZiAoIWlzRm9jdXMgfHwgKF90aGlzLmlzQ2xpY2sgJiYgIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSkge1xuICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja09wZW4pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgIC8vX3RoaXMuaGlkZSgpO1xuICAgICAgICAgIC8vIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoKF90aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyIHx8ICFfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcpKSAmJiAhX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWRvd24uemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXMuaXNDbGljayA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlRm9yVG91Y2gpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbigndGFwLnpmLnRvb2x0aXAgdG91Y2hlbmQuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgX3RoaXMuaXNBY3RpdmUgPyBfdGhpcy5oaWRlKCkgOiBfdGhpcy5zaG93KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgIC8vICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAvLyAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuaGlkZS5iaW5kKHRoaXMpXG4gICAgICAnY2xvc2UuemYudHJpZ2dlcic6IHRoaXMuaGlkZS5iaW5kKHRoaXMpXG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ2ZvY3VzLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlzRm9jdXMgPSB0cnVlO1xuICAgICAgICBpZiAoX3RoaXMuaXNDbGljaykge1xuICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBzaG93aW5nIG9wZW4gb24gY2xpY2tzLCB3ZSBuZWVkIHRvIHByZXRlbmQgYSBjbGljay1sYXVuY2hlZCBmb2N1cyBpc24ndFxuICAgICAgICAgIC8vIGEgcmVhbCBmb2N1cywgb3RoZXJ3aXNlIG9uIGhvdmVyIGFuZCBjb21lIGJhY2sgd2UgZ2V0IGJhZCBiZWhhdmlvclxuICAgICAgICAgIGlmKCFfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikgeyBpc0ZvY3VzID0gZmFsc2U7IH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICAub24oJ2ZvY3Vzb3V0LnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICB9KVxuXG4gICAgICAub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKF90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgYSB0b2dnbGUgbWV0aG9kLCBpbiBhZGRpdGlvbiB0byB0aGUgc3RhdGljIHNob3coKSAmIGhpZGUoKSBmdW5jdGlvbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgdG9vbHRpcCwgcmVtb3ZlcyB0ZW1wbGF0ZSBlbGVtZW50IGZyb20gdGhlIHZpZXcuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJywgdGhpcy50ZW1wbGF0ZS50ZXh0KCkpXG4gICAgICAgICAgICAgICAgIC5vZmYoJy56Zi50cmlnZ2VyIC56Zi50b29sdGlwJylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdoYXMtdGlwIHRvcCByaWdodCBsZWZ0JylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnkgYXJpYS1oYXNwb3B1cCBkYXRhLWRpc2FibGUtaG92ZXIgZGF0YS1yZXNpemUgZGF0YS10b2dnbGUgZGF0YS10b29sdGlwIGRhdGEteWV0aS1ib3gnKTtcblxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVIb3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBPcHRpb25hbCBhZGR0aW9uYWwgY2xhc3NlcyB0byBhcHBseSB0byB0aGUgdG9vbHRpcCB0ZW1wbGF0ZSBvbiBpbml0LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICB0ZW1wbGF0ZUNsYXNzZXM6ICcnLFxuICAvKipcbiAgICogTm9uLW9wdGlvbmFsIGNsYXNzIGFkZGVkIHRvIHRvb2x0aXAgdGVtcGxhdGVzLiBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgJ3Rvb2x0aXAnLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0b29sdGlwJ1xuICAgKi9cbiAgdG9vbHRpcENsYXNzOiAndG9vbHRpcCcsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIGFuY2hvciBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdoYXMtdGlwJ1xuICAgKi9cbiAgdHJpZ2dlckNsYXNzOiAnaGFzLXRpcCcsXG4gIC8qKlxuICAgKiBNaW5pbXVtIGJyZWFrcG9pbnQgc2l6ZSBhdCB3aGljaCB0byBvcGVuIHRoZSB0b29sdGlwLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzbWFsbCdcbiAgICovXG4gIHNob3dPbjogJ3NtYWxsJyxcbiAgLyoqXG4gICAqIEN1c3RvbSB0ZW1wbGF0ZSB0byBiZSB1c2VkIHRvIGdlbmVyYXRlIG1hcmt1cCBmb3IgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgdGlwVGV4dDogJycsXG4gIHRvdWNoQ2xvc2VUZXh0OiAnVGFwIHRvIGNsb3NlLicsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRvb2x0aXAgdG8gcmVtYWluIG9wZW4gaWYgdHJpZ2dlcmVkIHdpdGggYSBjbGljayBvciB0b3VjaCBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xpY2tPcGVuOiB0cnVlLFxuICAvKipcbiAgICogQWRkaXRpb25hbCBwb3NpdGlvbmluZyBjbGFzc2VzLCBzZXQgYnkgdGhlIEpTXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBZIGF4aXMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTBcbiAgICovXG4gIHZPZmZzZXQ6IDEwLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBYIGF4aXMsIGlmIGFsaWduZWQgdG8gYSBzaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDEyXG4gICAqL1xuICBoT2Zmc2V0OiAxMixcbiAgICAvKipcbiAgICogQWxsb3cgSFRNTCBpbiB0b29sdGlwLiBXYXJuaW5nOiBJZiB5b3UgYXJlIGxvYWRpbmcgdXNlci1nZW5lcmF0ZWQgY29udGVudCBpbnRvIHRvb2x0aXBzLFxuICAgKiBhbGxvd2luZyBIVE1MIG1heSBvcGVuIHlvdXJzZWxmIHVwIHRvIFhTUyBhdHRhY2tzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dIdG1sOiBmYWxzZVxufTtcblxuLyoqXG4gKiBUT0RPIHV0aWxpemUgcmVzaXplIGV2ZW50IHRyaWdnZXJcbiAqL1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9vbHRpcCwgJ1Rvb2x0aXAnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlQWNjb3JkaW9uVGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi50YWJzXG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgYWNjb3JkaW9uIHRhYnMuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtYWNjb3JkaW9uLXRhYnMnKTtcbiAgICB0aGlzLmN1cnJlbnRNcSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuYXR0cignaWQnKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcsRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAncmVzcG9uc2l2ZWFjY29yZGlvbnRhYnMnKSk7XG4gICAgfTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1lbnUgYnkgcGFyc2luZyB0aGUgY2xhc3NlcyBmcm9tIHRoZSAnZGF0YS1yZXNwb25zaXZlLWFjY29yZGlvbi10YWJzJyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgbGV0IHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgIGxldCBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICBsZXQgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEFsbE9wdGlvbnMoKTtcblxuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRBbGxPcHRpb25zKCkge1xuICAgIC8vZ2V0IGFsbCBkZWZhdWx0cyBhbmQgb3B0aW9uc1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuYWxsT3B0aW9ucyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBNZW51UGx1Z2lucykge1xuICAgICAgaWYgKE1lbnVQbHVnaW5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIG9iaiA9IE1lbnVQbHVnaW5zW2tleV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGR1bW15UGx1Z2luID0gJCgnPHVsPjwvdWw+Jyk7XG4gICAgICAgICAgdmFyIHRtcFBsdWdpbiA9IG5ldyBvYmoucGx1Z2luKGR1bW15UGx1Z2luLF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIGZvciAodmFyIGtleUtleSBpbiB0bXBQbHVnaW4ub3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHRtcFBsdWdpbi5vcHRpb25zLmhhc093blByb3BlcnR5KGtleUtleSkgJiYga2V5S2V5ICE9PSAnemZQbHVnaW4nKSB7XG4gICAgICAgICAgICAgIHZhciBvYmpPYmogPSB0bXBQbHVnaW4ub3B0aW9uc1trZXlLZXldO1xuICAgICAgICAgICAgICBfdGhpcy5hbGxPcHRpb25zW2tleUtleV0gPSBvYmpPYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRtcFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGggYWdhaW5zdCBhdmFpbGFibGUgbWVkaWEgcXVlcmllcy4gSWYgdGhlIG1lZGlhIHF1ZXJ5IGhhcyBjaGFuZ2VkLCBhbmQgdGhlIHBsdWdpbiBuZWVkZWQgaGFzIGNoYW5nZWQsIHRoZSBwbHVnaW5zIHdpbGwgc3dhcCBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTWVkaWFRdWVyaWVzKCkge1xuICAgIHZhciBtYXRjaGVkTXEsIF90aGlzID0gdGhpcztcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlIGFuZCBmaW5kIHRoZSBsYXN0IG1hdGNoaW5nIHJ1bGVcbiAgICAkLmVhY2godGhpcy5ydWxlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3Qoa2V5KSkge1xuICAgICAgICBtYXRjaGVkTXEgPSBrZXk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBObyBtYXRjaD8gTm8gZGljZVxuICAgIGlmICghbWF0Y2hlZE1xKSByZXR1cm47XG5cbiAgICAvLyBQbHVnaW4gYWxyZWFkeSBpbml0aWFsaXplZD8gV2UgZ29vZFxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4gaW5zdGFuY2VvZiB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKSByZXR1cm47XG5cbiAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcGx1Z2luLXNwZWNpZmljIENTUyBjbGFzc2VzXG4gICAgJC5lYWNoKE1lbnVQbHVnaW5zLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZS5jc3NDbGFzcyk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgdGhlIENTUyBjbGFzcyBmb3IgdGhlIG5ldyBwbHVnaW5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5jc3NDbGFzcyk7XG5cbiAgICAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5ldyBwbHVnaW5cbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luKSB7XG4gICAgICAvL2Rvbid0IGtub3cgd2h5IGJ1dCBvbiBuZXN0ZWQgZWxlbWVudHMgZGF0YSB6ZlBsdWdpbiBnZXQncyBsb3N0XG4gICAgICBpZiAoIXRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpICYmIHRoaXMuc3RvcmV6ZkRhdGEpIHRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsdGhpcy5zdG9yZXpmRGF0YSk7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVNYXJrdXAodGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gICAgdGhpcy5zdG9yZXpmRGF0YSA9IHRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpO1xuXG4gIH1cblxuICBfaGFuZGxlTWFya3VwKHRvU2V0KXtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLCBmcm9tU3RyaW5nID0gJ2FjY29yZGlvbic7XG4gICAgdmFyICRwYW5lbHMgPSAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9Jyt0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykrJ10nKTtcbiAgICBpZiAoJHBhbmVscy5sZW5ndGgpIGZyb21TdHJpbmcgPSAndGFicyc7XG4gICAgaWYgKGZyb21TdHJpbmcgPT09IHRvU2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfTtcblxuICAgIHZhciB0YWJzVGl0bGUgPSBfdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzcz9fdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzczondGFicy10aXRsZSc7XG4gICAgdmFyIHRhYnNQYW5lbCA9IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcz9fdGhpcy5hbGxPcHRpb25zLnBhbmVsQ2xhc3M6J3RhYnMtcGFuZWwnO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdyb2xlJyk7XG4gICAgdmFyICRsaUhlYWRzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLicrdGFic1RpdGxlKycsW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJykucmVtb3ZlQ2xhc3ModGFic1RpdGxlKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5yZW1vdmVBdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJyk7XG4gICAgdmFyICRsaUhlYWRzQSA9ICRsaUhlYWRzLmNoaWxkcmVuKCdhJykucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi10aXRsZScpO1xuXG4gICAgaWYgKGZyb21TdHJpbmcgPT09ICd0YWJzJykge1xuICAgICAgJHBhbmVscyA9ICRwYW5lbHMuY2hpbGRyZW4oJy4nK3RhYnNQYW5lbCkucmVtb3ZlQ2xhc3ModGFic1BhbmVsKS5yZW1vdmVBdHRyKCdyb2xlJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICRwYW5lbHMuY2hpbGRyZW4oJ2EnKS5yZW1vdmVBdHRyKCdyb2xlJykucmVtb3ZlQXR0cignYXJpYS1jb250cm9scycpLnJlbW92ZUF0dHIoJ2FyaWEtc2VsZWN0ZWQnKTtcbiAgICB9ZWxzZXtcbiAgICAgICRwYW5lbHMgPSAkbGlIZWFkcy5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJykucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi1jb250ZW50Jyk7XG4gICAgfTtcblxuICAgICRwYW5lbHMuY3NzKHtkaXNwbGF5OicnLHZpc2liaWxpdHk6Jyd9KTtcbiAgICAkbGlIZWFkcy5jc3Moe2Rpc3BsYXk6JycsdmlzaWJpbGl0eTonJ30pO1xuICAgIGlmICh0b1NldCA9PT0gJ2FjY29yZGlvbicpIHtcbiAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbihrZXksdmFsdWUpe1xuICAgICAgICAkKHZhbHVlKS5hcHBlbmRUbygkbGlIZWFkcy5nZXQoa2V5KSkuYWRkQ2xhc3MoJ2FjY29yZGlvbi1jb250ZW50JykuYXR0cignZGF0YS10YWItY29udGVudCcsJycpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5jc3Moe2hlaWdodDonJ30pO1xuICAgICAgICAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9JytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKyddJykuYWZ0ZXIoJzxkaXYgaWQ9XCJ0YWJzLXBsYWNlaG9sZGVyLScrX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSsnXCI+PC9kaXY+JykucmVtb3ZlKCk7XG4gICAgICAgICRsaUhlYWRzLmFkZENsYXNzKCdhY2NvcmRpb24taXRlbScpLmF0dHIoJ2RhdGEtYWNjb3JkaW9uLWl0ZW0nLCcnKTtcbiAgICAgICAgJGxpSGVhZHNBLmFkZENsYXNzKCdhY2NvcmRpb24tdGl0bGUnKTtcbiAgICAgIH0pO1xuICAgIH1lbHNlIGlmICh0b1NldCA9PT0gJ3RhYnMnKXtcbiAgICAgIHZhciAkdGFic0NvbnRlbnQgPSAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9JytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKyddJyk7XG4gICAgICB2YXIgJHBsYWNlaG9sZGVyID0gJCgnI3RhYnMtcGxhY2Vob2xkZXItJytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgIGlmICgkcGxhY2Vob2xkZXIubGVuZ3RoKSB7XG4gICAgICAgICR0YWJzQ29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcigkcGxhY2Vob2xkZXIpLmF0dHIoJ2RhdGEtdGFicy1jb250ZW50JyxfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgICAgJHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgfWVsc2V7XG4gICAgICAgICR0YWJzQ29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcihfdGhpcy4kZWxlbWVudCkuYXR0cignZGF0YS10YWJzLWNvbnRlbnQnLF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgfTtcbiAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbihrZXksdmFsdWUpe1xuICAgICAgICB2YXIgdGVtcFZhbHVlID0gJCh2YWx1ZSkuYXBwZW5kVG8oJHRhYnNDb250ZW50KS5hZGRDbGFzcyh0YWJzUGFuZWwpO1xuICAgICAgICB2YXIgaGFzaCA9ICRsaUhlYWRzQS5nZXQoa2V5KS5oYXNoLnNsaWNlKDEpO1xuICAgICAgICB2YXIgaWQgPSAkKHZhbHVlKS5hdHRyKCdpZCcpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjY29yZGlvbicpO1xuICAgICAgICBpZiAoaGFzaCAhPT0gaWQpIHtcbiAgICAgICAgICBpZiAoaGFzaCAhPT0gJycpIHtcbiAgICAgICAgICAgICQodmFsdWUpLmF0dHIoJ2lkJyxoYXNoKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGhhc2ggPSBpZDtcbiAgICAgICAgICAgICQodmFsdWUpLmF0dHIoJ2lkJyxoYXNoKTtcbiAgICAgICAgICAgICQoJGxpSGVhZHNBLmdldChrZXkpKS5hdHRyKCdocmVmJywkKCRsaUhlYWRzQS5nZXQoa2V5KSkuYXR0cignaHJlZicpLnJlcGxhY2UoJyMnLCcnKSsnIycraGFzaCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCgkbGlIZWFkcy5nZXQoa2V5KSkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICB0ZW1wVmFsdWUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICAkbGlIZWFkcy5hZGRDbGFzcyh0YWJzVGl0bGUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICB0YWJzOiB7XG4gICAgY3NzQ2xhc3M6ICd0YWJzJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnMudGFicyB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnMuYWNjb3JkaW9uIHx8IG51bGxcbiAgfVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCAnUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnKTtcblxufShqUXVlcnkpO1xuIiwialF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoJCkge1xuXG4gICAgIC8vIEluaXRpYWxpemUgRm91bmRhdGlvblxuICAgIGpRdWVyeShkb2N1bWVudCkuZm91bmRhdGlvbigpO1xuXG4gICAgY29uc29sZS5sb2coXCJoZWxsb1wiKTtcblxufSk7XG4iLCJqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KCgkKSA9PiB7XG4gICAgIC8vIEFkZCBzbGljay5qcyB0byBhbnl3aGVyZSB5b3UgcHV0IGEgY2xhc3Mgb2Ygc2xpY2tcbiAgICAgJCgnLnNsaWNrJykuc2xpY2soe1xuICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsXG4gICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICBmYWRlOiB0cnVlLFxuICAgICAgICAgIGNzc0Vhc2U6ICdsaW5lYXInLFxuICAgICB9KS5mb3VuZGF0aW9uKCk7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX12YXIgX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTshZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBtb2R1bGU/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKG1vZHVsZSkpJiZcIm9iamVjdFwiPT09X3R5cGVvZihtb2R1bGUuZXhwb3J0cyk/bW9kdWxlLmV4cG9ydHM9ZS5kb2N1bWVudD90KGUsITApOmZ1bmN0aW9uKGUpe2lmKCFlLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIHQoZSl9OnQoZSl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnZvaWQgMCxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIGkoZSl7dmFyIHQ9ISFlJiZcImxlbmd0aFwiaW4gZSYmZS5sZW5ndGgsaT1zZS50eXBlKGUpO3JldHVyblwiZnVuY3Rpb25cIiE9PWkmJiFzZS5pc1dpbmRvdyhlKSYmKFwiYXJyYXlcIj09PWl8fDA9PT10fHxcIm51bWJlclwiPT10eXBlb2YgdCYmdD4wJiZ0LTEgaW4gZSl9ZnVuY3Rpb24gbihlLHQsaSl7aWYoc2UuaXNGdW5jdGlvbih0KSlyZXR1cm4gc2UuZ3JlcChlLGZ1bmN0aW9uKGUsbil7cmV0dXJuISF0LmNhbGwoZSxuLGUpIT09aX0pO2lmKHQubm9kZVR5cGUpcmV0dXJuIHNlLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4gZT09PXQhPT1pfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZlLnRlc3QodCkpcmV0dXJuIHNlLmZpbHRlcih0LGUsaSk7dD1zZS5maWx0ZXIodCxlKX1yZXR1cm4gc2UuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBKLmNhbGwodCxlKT4tMSE9PWl9KX1mdW5jdGlvbiBvKGUsdCl7Zm9yKDsoZT1lW3RdKSYmMSE9PWUubm9kZVR5cGU7KTtyZXR1cm4gZX1mdW5jdGlvbiBzKGUpe3ZhciB0PXt9O3JldHVybiBzZS5lYWNoKGUubWF0Y2goa2UpfHxbXSxmdW5jdGlvbihlLGkpe3RbaV09ITB9KSx0fWZ1bmN0aW9uIHIoKXtYLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsciksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHIpLHNlLnJlYWR5KCl9ZnVuY3Rpb24gYSgpe3RoaXMuZXhwYW5kbz1zZS5leHBhbmRvK2EudWlkKyt9ZnVuY3Rpb24gbChlLHQsaSl7dmFyIG47aWYodm9pZCAwPT09aSYmMT09PWUubm9kZVR5cGUpaWYobj1cImRhdGEtXCIrdC5yZXBsYWNlKEZlLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksaT1lLmdldEF0dHJpYnV0ZShuKSxcInN0cmluZ1wiPT10eXBlb2YgaSl7dHJ5e2k9XCJ0cnVlXCI9PT1pfHxcImZhbHNlXCIhPT1pJiYoXCJudWxsXCI9PT1pP251bGw6K2krXCJcIj09PWk/K2k6X2UudGVzdChpKT9zZS5wYXJzZUpTT04oaSk6aSl9Y2F0Y2goZSl7fVNlLnNldChlLHQsaSl9ZWxzZSBpPXZvaWQgMDtyZXR1cm4gaX1mdW5jdGlvbiBkKGUsdCxpLG4pe3ZhciBvLHM9MSxyPTIwLGE9bj9mdW5jdGlvbigpe3JldHVybiBuLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiBzZS5jc3MoZSx0LFwiXCIpfSxsPWEoKSxkPWkmJmlbM118fChzZS5jc3NOdW1iZXJbdF0/XCJcIjpcInB4XCIpLHU9KHNlLmNzc051bWJlclt0XXx8XCJweFwiIT09ZCYmK2wpJiZBZS5leGVjKHNlLmNzcyhlLHQpKTtpZih1JiZ1WzNdIT09ZCl7ZD1kfHx1WzNdLGk9aXx8W10sdT0rbHx8MTtkbyBzPXN8fFwiLjVcIix1Lz1zLHNlLnN0eWxlKGUsdCx1K2QpO3doaWxlKHMhPT0ocz1hKCkvbCkmJjEhPT1zJiYtLXIpfXJldHVybiBpJiYodT0rdXx8K2x8fDAsbz1pWzFdP3UrKGlbMV0rMSkqaVsyXToraVsyXSxuJiYobi51bml0PWQsbi5zdGFydD11LG4uZW5kPW8pKSxvfWZ1bmN0aW9uIHUoZSx0KXt2YXIgaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZT9lLmdldEVsZW1lbnRzQnlUYWdOYW1lKHR8fFwiKlwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsP2UucXVlcnlTZWxlY3RvckFsbCh0fHxcIipcIik6W107cmV0dXJuIHZvaWQgMD09PXR8fHQmJnNlLm5vZGVOYW1lKGUsdCk/c2UubWVyZ2UoW2VdLGkpOml9ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgaT0wLG49ZS5sZW5ndGg7aTxuO2krKylUZS5zZXQoZVtpXSxcImdsb2JhbEV2YWxcIiwhdHx8VGUuZ2V0KHRbaV0sXCJnbG9iYWxFdmFsXCIpKX1mdW5jdGlvbiBoKGUsdCxpLG4sbyl7Zm9yKHZhciBzLHIsYSxsLGQsaCxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sdj0wLG09ZS5sZW5ndGg7djxtO3YrKylpZihzPWVbdl0sc3x8MD09PXMpaWYoXCJvYmplY3RcIj09PXNlLnR5cGUocykpc2UubWVyZ2UocCxzLm5vZGVUeXBlP1tzXTpzKTtlbHNlIGlmKGplLnRlc3Qocykpe2ZvcihyPXJ8fGYuYXBwZW5kQ2hpbGQodC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxhPShEZS5leGVjKHMpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKSxsPU1lW2FdfHxNZS5fZGVmYXVsdCxyLmlubmVySFRNTD1sWzFdK3NlLmh0bWxQcmVmaWx0ZXIocykrbFsyXSxoPWxbMF07aC0tOylyPXIubGFzdENoaWxkO3NlLm1lcmdlKHAsci5jaGlsZE5vZGVzKSxyPWYuZmlyc3RDaGlsZCxyLnRleHRDb250ZW50PVwiXCJ9ZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShzKSk7Zm9yKGYudGV4dENvbnRlbnQ9XCJcIix2PTA7cz1wW3YrK107KWlmKG4mJnNlLmluQXJyYXkocyxuKT4tMSlvJiZvLnB1c2gocyk7ZWxzZSBpZihkPXNlLmNvbnRhaW5zKHMub3duZXJEb2N1bWVudCxzKSxyPXUoZi5hcHBlbmRDaGlsZChzKSxcInNjcmlwdFwiKSxkJiZjKHIpLGkpZm9yKGg9MDtzPXJbaCsrXTspSGUudGVzdChzLnR5cGV8fFwiXCIpJiZpLnB1c2gocyk7cmV0dXJuIGZ9ZnVuY3Rpb24gZigpe3JldHVybiEwfWZ1bmN0aW9uIHAoKXtyZXR1cm4hMX1mdW5jdGlvbiB2KCl7dHJ5e3JldHVybiBYLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX1mdW5jdGlvbiBtKGUsdCxpLG4sbyxzKXt2YXIgcixhO2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHQpKSl7XCJzdHJpbmdcIiE9dHlwZW9mIGkmJihuPW58fGksaT12b2lkIDApO2ZvcihhIGluIHQpbShlLGEsaSxuLHRbYV0scyk7cmV0dXJuIGV9aWYobnVsbD09biYmbnVsbD09bz8obz1pLG49aT12b2lkIDApOm51bGw9PW8mJihcInN0cmluZ1wiPT10eXBlb2YgaT8obz1uLG49dm9pZCAwKToobz1uLG49aSxpPXZvaWQgMCkpLG89PT0hMSlvPXA7ZWxzZSBpZighbylyZXR1cm4gZTtyZXR1cm4gMT09PXMmJihyPW8sbz1mdW5jdGlvbihlKXtyZXR1cm4gc2UoKS5vZmYoZSksci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG8uZ3VpZD1yLmd1aWR8fChyLmd1aWQ9c2UuZ3VpZCsrKSksZS5lYWNoKGZ1bmN0aW9uKCl7c2UuZXZlbnQuYWRkKHRoaXMsdCxvLG4saSl9KX1mdW5jdGlvbiBnKGUsdCl7cmV0dXJuIHNlLm5vZGVOYW1lKGUsXCJ0YWJsZVwiKSYmc2Uubm9kZU5hbWUoMTEhPT10Lm5vZGVUeXBlP3Q6dC5maXJzdENoaWxkLFwidHJcIik/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxlLmFwcGVuZENoaWxkKGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikpOmV9ZnVuY3Rpb24geShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIitlLnR5cGUsZX1mdW5jdGlvbiB3KGUpe3ZhciB0PVdlLmV4ZWMoZS50eXBlKTtyZXR1cm4gdD9lLnR5cGU9dFsxXTplLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksZX1mdW5jdGlvbiBiKGUsdCl7dmFyIGksbixvLHMscixhLGwsZDtpZigxPT09dC5ub2RlVHlwZSl7aWYoVGUuaGFzRGF0YShlKSYmKHM9VGUuYWNjZXNzKGUpLHI9VGUuc2V0KHQscyksZD1zLmV2ZW50cykpe2RlbGV0ZSByLmhhbmRsZSxyLmV2ZW50cz17fTtmb3IobyBpbiBkKWZvcihpPTAsbj1kW29dLmxlbmd0aDtpPG47aSsrKXNlLmV2ZW50LmFkZCh0LG8sZFtvXVtpXSl9U2UuaGFzRGF0YShlKSYmKGE9U2UuYWNjZXNzKGUpLGw9c2UuZXh0ZW5kKHt9LGEpLFNlLnNldCh0LGwpKX19ZnVuY3Rpb24gayhlLHQpe3ZhciBpPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcImlucHV0XCI9PT1pJiZQZS50ZXN0KGUudHlwZSk/dC5jaGVja2VkPWUuY2hlY2tlZDpcImlucHV0XCIhPT1pJiZcInRleHRhcmVhXCIhPT1pfHwodC5kZWZhdWx0VmFsdWU9ZS5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIEMoZSx0LGksbil7dD1WLmFwcGx5KFtdLHQpO3ZhciBvLHMscixhLGwsZCxjPTAsZj1lLmxlbmd0aCxwPWYtMSx2PXRbMF0sbT1zZS5pc0Z1bmN0aW9uKHYpO2lmKG18fGY+MSYmXCJzdHJpbmdcIj09dHlwZW9mIHYmJiFuZS5jaGVja0Nsb25lJiZCZS50ZXN0KHYpKXJldHVybiBlLmVhY2goZnVuY3Rpb24obyl7dmFyIHM9ZS5lcShvKTttJiYodFswXT12LmNhbGwodGhpcyxvLHMuaHRtbCgpKSksQyhzLHQsaSxuKX0pO2lmKGYmJihvPWgodCxlWzBdLm93bmVyRG9jdW1lbnQsITEsZSxuKSxzPW8uZmlyc3RDaGlsZCwxPT09by5jaGlsZE5vZGVzLmxlbmd0aCYmKG89cyksc3x8bikpe2ZvcihyPXNlLm1hcCh1KG8sXCJzY3JpcHRcIikseSksYT1yLmxlbmd0aDtjPGY7YysrKWw9byxjIT09cCYmKGw9c2UuY2xvbmUobCwhMCwhMCksYSYmc2UubWVyZ2Uocix1KGwsXCJzY3JpcHRcIikpKSxpLmNhbGwoZVtjXSxsLGMpO2lmKGEpZm9yKGQ9cltyLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHNlLm1hcChyLHcpLGM9MDtjPGE7YysrKWw9cltjXSxIZS50ZXN0KGwudHlwZXx8XCJcIikmJiFUZS5hY2Nlc3MobCxcImdsb2JhbEV2YWxcIikmJnNlLmNvbnRhaW5zKGQsbCkmJihsLnNyYz9zZS5fZXZhbFVybCYmc2UuX2V2YWxVcmwobC5zcmMpOnNlLmdsb2JhbEV2YWwobC50ZXh0Q29udGVudC5yZXBsYWNlKFllLFwiXCIpKSl9cmV0dXJuIGV9ZnVuY3Rpb24gJChlLHQsaSl7Zm9yKHZhciBuLG89dD9zZS5maWx0ZXIodCxlKTplLHM9MDtudWxsIT0obj1vW3NdKTtzKyspaXx8MSE9PW4ubm9kZVR5cGV8fHNlLmNsZWFuRGF0YSh1KG4pKSxuLnBhcmVudE5vZGUmJihpJiZzZS5jb250YWlucyhuLm93bmVyRG9jdW1lbnQsbikmJmModShuLFwic2NyaXB0XCIpKSxuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobikpO3JldHVybiBlfWZ1bmN0aW9uIHgoZSx0KXt2YXIgaT1zZSh0LmNyZWF0ZUVsZW1lbnQoZSkpLmFwcGVuZFRvKHQuYm9keSksbj1zZS5jc3MoaVswXSxcImRpc3BsYXlcIik7cmV0dXJuIGkuZGV0YWNoKCksbn1mdW5jdGlvbiBUKGUpe3ZhciB0PVgsaT1VZVtlXTtyZXR1cm4gaXx8KGk9eChlLHQpLFwibm9uZVwiIT09aSYmaXx8KFFlPShRZXx8c2UoXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIpKS5hcHBlbmRUbyh0LmRvY3VtZW50RWxlbWVudCksdD1RZVswXS5jb250ZW50RG9jdW1lbnQsdC53cml0ZSgpLHQuY2xvc2UoKSxpPXgoZSx0KSxRZS5kZXRhY2goKSksVWVbZV09aSksaX1mdW5jdGlvbiBTKGUsdCxpKXt2YXIgbixvLHMscixhPWUuc3R5bGU7cmV0dXJuIGk9aXx8R2UoZSkscj1pP2kuZ2V0UHJvcGVydHlWYWx1ZSh0KXx8aVt0XTp2b2lkIDAsXCJcIiE9PXImJnZvaWQgMCE9PXJ8fHNlLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8KHI9c2Uuc3R5bGUoZSx0KSksaSYmIW5lLnBpeGVsTWFyZ2luUmlnaHQoKSYmWGUudGVzdChyKSYmS2UudGVzdCh0KSYmKG49YS53aWR0aCxvPWEubWluV2lkdGgscz1hLm1heFdpZHRoLGEubWluV2lkdGg9YS5tYXhXaWR0aD1hLndpZHRoPXIscj1pLndpZHRoLGEud2lkdGg9bixhLm1pbldpZHRoPW8sYS5tYXhXaWR0aD1zKSx2b2lkIDAhPT1yP3IrXCJcIjpyfWZ1bmN0aW9uIF8oZSx0KXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUoKT92b2lkIGRlbGV0ZSB0aGlzLmdldDoodGhpcy5nZXQ9dCkuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19ZnVuY3Rpb24gRihlKXtpZihlIGluIG50KXJldHVybiBlO2Zvcih2YXIgdD1lWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxpPWl0Lmxlbmd0aDtpLS07KWlmKGU9aXRbaV0rdCxlIGluIG50KXJldHVybiBlfWZ1bmN0aW9uIHooZSx0LGkpe3ZhciBuPUFlLmV4ZWModCk7cmV0dXJuIG4/TWF0aC5tYXgoMCxuWzJdLShpfHwwKSkrKG5bM118fFwicHhcIik6dH1mdW5jdGlvbiBBKGUsdCxpLG4sbyl7Zm9yKHZhciBzPWk9PT0obj9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PXQ/MTowLHI9MDtzPDQ7cys9MilcIm1hcmdpblwiPT09aSYmKHIrPXNlLmNzcyhlLGkrT2Vbc10sITAsbykpLG4/KFwiY29udGVudFwiPT09aSYmKHItPXNlLmNzcyhlLFwicGFkZGluZ1wiK09lW3NdLCEwLG8pKSxcIm1hcmdpblwiIT09aSYmKHItPXNlLmNzcyhlLFwiYm9yZGVyXCIrT2Vbc10rXCJXaWR0aFwiLCEwLG8pKSk6KHIrPXNlLmNzcyhlLFwicGFkZGluZ1wiK09lW3NdLCEwLG8pLFwicGFkZGluZ1wiIT09aSYmKHIrPXNlLmNzcyhlLFwiYm9yZGVyXCIrT2Vbc10rXCJXaWR0aFwiLCEwLG8pKSk7cmV0dXJuIHJ9ZnVuY3Rpb24gTyhlLHQsaSl7dmFyIG49ITAsbz1cIndpZHRoXCI9PT10P2Uub2Zmc2V0V2lkdGg6ZS5vZmZzZXRIZWlnaHQscz1HZShlKSxyPVwiYm9yZGVyLWJveFwiPT09c2UuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxzKTtpZihvPD0wfHxudWxsPT1vKXtpZihvPVMoZSx0LHMpLChvPDB8fG51bGw9PW8pJiYobz1lLnN0eWxlW3RdKSxYZS50ZXN0KG8pKXJldHVybiBvO249ciYmKG5lLmJveFNpemluZ1JlbGlhYmxlKCl8fG89PT1lLnN0eWxlW3RdKSxvPXBhcnNlRmxvYXQobyl8fDB9cmV0dXJuIG8rQShlLHQsaXx8KHI/XCJib3JkZXJcIjpcImNvbnRlbnRcIiksbixzKStcInB4XCJ9ZnVuY3Rpb24gRShlLHQpe2Zvcih2YXIgaSxuLG8scz1bXSxyPTAsYT1lLmxlbmd0aDtyPGE7cisrKW49ZVtyXSxuLnN0eWxlJiYoc1tyXT1UZS5nZXQobixcIm9sZGRpc3BsYXlcIiksaT1uLnN0eWxlLmRpc3BsYXksdD8oc1tyXXx8XCJub25lXCIhPT1pfHwobi5zdHlsZS5kaXNwbGF5PVwiXCIpLFwiXCI9PT1uLnN0eWxlLmRpc3BsYXkmJkVlKG4pJiYoc1tyXT1UZS5hY2Nlc3MobixcIm9sZGRpc3BsYXlcIixUKG4ubm9kZU5hbWUpKSkpOihvPUVlKG4pLFwibm9uZVwiPT09aSYmb3x8VGUuc2V0KG4sXCJvbGRkaXNwbGF5XCIsbz9pOnNlLmNzcyhuLFwiZGlzcGxheVwiKSkpKTtmb3Iocj0wO3I8YTtyKyspbj1lW3JdLG4uc3R5bGUmJih0JiZcIm5vbmVcIiE9PW4uc3R5bGUuZGlzcGxheSYmXCJcIiE9PW4uc3R5bGUuZGlzcGxheXx8KG4uc3R5bGUuZGlzcGxheT10P3Nbcl18fFwiXCI6XCJub25lXCIpKTtyZXR1cm4gZX1mdW5jdGlvbiBQKGUsdCxpLG4sbyl7cmV0dXJuIG5ldyBQLnByb3RvdHlwZS5pbml0KGUsdCxpLG4sbyl9ZnVuY3Rpb24gRCgpe3JldHVybiBlLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtvdD12b2lkIDB9KSxvdD1zZS5ub3coKX1mdW5jdGlvbiBIKGUsdCl7dmFyIGksbj0wLG89e2hlaWdodDplfTtmb3IodD10PzE6MDtuPDQ7bis9Mi10KWk9T2Vbbl0sb1tcIm1hcmdpblwiK2ldPW9bXCJwYWRkaW5nXCIraV09ZTtyZXR1cm4gdCYmKG8ub3BhY2l0eT1vLndpZHRoPWUpLG99ZnVuY3Rpb24gTShlLHQsaSl7Zm9yKHZhciBuLG89KEwudHdlZW5lcnNbdF18fFtdKS5jb25jYXQoTC50d2VlbmVyc1tcIipcIl0pLHM9MCxyPW8ubGVuZ3RoO3M8cjtzKyspaWYobj1vW3NdLmNhbGwoaSx0LGUpKXJldHVybiBufWZ1bmN0aW9uIGooZSx0LGkpe3ZhciBuLG8scyxyLGEsbCxkLHUsYz10aGlzLGg9e30sZj1lLnN0eWxlLHA9ZS5ub2RlVHlwZSYmRWUoZSksdj1UZS5nZXQoZSxcImZ4c2hvd1wiKTtpLnF1ZXVlfHwoYT1zZS5fcXVldWVIb29rcyhlLFwiZnhcIiksbnVsbD09YS51bnF1ZXVlZCYmKGEudW5xdWV1ZWQ9MCxsPWEuZW1wdHkuZmlyZSxhLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXthLnVucXVldWVkfHxsKCl9KSxhLnVucXVldWVkKyssYy5hbHdheXMoZnVuY3Rpb24oKXtjLmFsd2F5cyhmdW5jdGlvbigpe2EudW5xdWV1ZWQtLSxzZS5xdWV1ZShlLFwiZnhcIikubGVuZ3RofHxhLmVtcHR5LmZpcmUoKX0pfSkpLDE9PT1lLm5vZGVUeXBlJiYoXCJoZWlnaHRcImluIHR8fFwid2lkdGhcImluIHQpJiYoaS5vdmVyZmxvdz1bZi5vdmVyZmxvdyxmLm92ZXJmbG93WCxmLm92ZXJmbG93WV0sZD1zZS5jc3MoZSxcImRpc3BsYXlcIiksdT1cIm5vbmVcIj09PWQ/VGUuZ2V0KGUsXCJvbGRkaXNwbGF5XCIpfHxUKGUubm9kZU5hbWUpOmQsXCJpbmxpbmVcIj09PXUmJlwibm9uZVwiPT09c2UuY3NzKGUsXCJmbG9hdFwiKSYmKGYuZGlzcGxheT1cImlubGluZS1ibG9ja1wiKSksaS5vdmVyZmxvdyYmKGYub3ZlcmZsb3c9XCJoaWRkZW5cIixjLmFsd2F5cyhmdW5jdGlvbigpe2Yub3ZlcmZsb3c9aS5vdmVyZmxvd1swXSxmLm92ZXJmbG93WD1pLm92ZXJmbG93WzFdLGYub3ZlcmZsb3dZPWkub3ZlcmZsb3dbMl19KSk7Zm9yKG4gaW4gdClpZihvPXRbbl0scnQuZXhlYyhvKSl7aWYoZGVsZXRlIHRbbl0scz1zfHxcInRvZ2dsZVwiPT09byxvPT09KHA/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PW98fCF2fHx2b2lkIDA9PT12W25dKWNvbnRpbnVlO3A9ITB9aFtuXT12JiZ2W25dfHxzZS5zdHlsZShlLG4pfWVsc2UgZD12b2lkIDA7aWYoc2UuaXNFbXB0eU9iamVjdChoKSlcImlubGluZVwiPT09KFwibm9uZVwiPT09ZD9UKGUubm9kZU5hbWUpOmQpJiYoZi5kaXNwbGF5PWQpO2Vsc2V7dj9cImhpZGRlblwiaW4gdiYmKHA9di5oaWRkZW4pOnY9VGUuYWNjZXNzKGUsXCJmeHNob3dcIix7fSkscyYmKHYuaGlkZGVuPSFwKSxwP3NlKGUpLnNob3coKTpjLmRvbmUoZnVuY3Rpb24oKXtzZShlKS5oaWRlKCl9KSxjLmRvbmUoZnVuY3Rpb24oKXt2YXIgdDtUZS5yZW1vdmUoZSxcImZ4c2hvd1wiKTtmb3IodCBpbiBoKXNlLnN0eWxlKGUsdCxoW3RdKX0pO2ZvcihuIGluIGgpcj1NKHA/dltuXTowLG4sYyksbiBpbiB2fHwodltuXT1yLnN0YXJ0LHAmJihyLmVuZD1yLnN0YXJ0LHIuc3RhcnQ9XCJ3aWR0aFwiPT09bnx8XCJoZWlnaHRcIj09PW4/MTowKSl9fWZ1bmN0aW9uIHEoZSx0KXt2YXIgaSxuLG8scyxyO2ZvcihpIGluIGUpaWYobj1zZS5jYW1lbENhc2UoaSksbz10W25dLHM9ZVtpXSxzZS5pc0FycmF5KHMpJiYobz1zWzFdLHM9ZVtpXT1zWzBdKSxpIT09biYmKGVbbl09cyxkZWxldGUgZVtpXSkscj1zZS5jc3NIb29rc1tuXSxyJiZcImV4cGFuZFwiaW4gcil7cz1yLmV4cGFuZChzKSxkZWxldGUgZVtuXTtmb3IoaSBpbiBzKWkgaW4gZXx8KGVbaV09c1tpXSx0W2ldPW8pfWVsc2UgdFtuXT1vfWZ1bmN0aW9uIEwoZSx0LGkpe3ZhciBuLG8scz0wLHI9TC5wcmVmaWx0ZXJzLmxlbmd0aCxhPXNlLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIGwuZWxlbX0pLGw9ZnVuY3Rpb24oKXtpZihvKXJldHVybiExO2Zvcih2YXIgdD1vdHx8RCgpLGk9TWF0aC5tYXgoMCxkLnN0YXJ0VGltZStkLmR1cmF0aW9uLXQpLG49aS9kLmR1cmF0aW9ufHwwLHM9MS1uLHI9MCxsPWQudHdlZW5zLmxlbmd0aDtyPGw7cisrKWQudHdlZW5zW3JdLnJ1bihzKTtyZXR1cm4gYS5ub3RpZnlXaXRoKGUsW2QscyxpXSksczwxJiZsP2k6KGEucmVzb2x2ZVdpdGgoZSxbZF0pLCExKX0sZD1hLnByb21pc2Uoe2VsZW06ZSxwcm9wczpzZS5leHRlbmQoe30sdCksb3B0czpzZS5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOnNlLmVhc2luZy5fZGVmYXVsdH0saSksb3JpZ2luYWxQcm9wZXJ0aWVzOnQsb3JpZ2luYWxPcHRpb25zOmksc3RhcnRUaW1lOm90fHxEKCksZHVyYXRpb246aS5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24odCxpKXt2YXIgbj1zZS5Ud2VlbihlLGQub3B0cyx0LGksZC5vcHRzLnNwZWNpYWxFYXNpbmdbdF18fGQub3B0cy5lYXNpbmcpO3JldHVybiBkLnR3ZWVucy5wdXNoKG4pLG59LHN0b3A6ZnVuY3Rpb24odCl7dmFyIGk9MCxuPXQ/ZC50d2VlbnMubGVuZ3RoOjA7aWYobylyZXR1cm4gdGhpcztmb3Iobz0hMDtpPG47aSsrKWQudHdlZW5zW2ldLnJ1bigxKTtyZXR1cm4gdD8oYS5ub3RpZnlXaXRoKGUsW2QsMSwwXSksYS5yZXNvbHZlV2l0aChlLFtkLHRdKSk6YS5yZWplY3RXaXRoKGUsW2QsdF0pLHRoaXN9fSksdT1kLnByb3BzO2ZvcihxKHUsZC5vcHRzLnNwZWNpYWxFYXNpbmcpO3M8cjtzKyspaWYobj1MLnByZWZpbHRlcnNbc10uY2FsbChkLGUsdSxkLm9wdHMpKXJldHVybiBzZS5pc0Z1bmN0aW9uKG4uc3RvcCkmJihzZS5fcXVldWVIb29rcyhkLmVsZW0sZC5vcHRzLnF1ZXVlKS5zdG9wPXNlLnByb3h5KG4uc3RvcCxuKSksbjtyZXR1cm4gc2UubWFwKHUsTSxkKSxzZS5pc0Z1bmN0aW9uKGQub3B0cy5zdGFydCkmJmQub3B0cy5zdGFydC5jYWxsKGUsZCksc2UuZngudGltZXIoc2UuZXh0ZW5kKGwse2VsZW06ZSxhbmltOmQscXVldWU6ZC5vcHRzLnF1ZXVlfSkpLGQucHJvZ3Jlc3MoZC5vcHRzLnByb2dyZXNzKS5kb25lKGQub3B0cy5kb25lLGQub3B0cy5jb21wbGV0ZSkuZmFpbChkLm9wdHMuZmFpbCkuYWx3YXlzKGQub3B0cy5hbHdheXMpfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGZ1bmN0aW9uKHQsaSl7XCJzdHJpbmdcIiE9dHlwZW9mIHQmJihpPXQsdD1cIipcIik7dmFyIG4sbz0wLHM9dC50b0xvd2VyQ2FzZSgpLm1hdGNoKGtlKXx8W107aWYoc2UuaXNGdW5jdGlvbihpKSlmb3IoO249c1tvKytdOylcIitcIj09PW5bMF0/KG49bi5zbGljZSgxKXx8XCIqXCIsKGVbbl09ZVtuXXx8W10pLnVuc2hpZnQoaSkpOihlW25dPWVbbl18fFtdKS5wdXNoKGkpfX1mdW5jdGlvbiBJKGUsdCxpLG4pe2Z1bmN0aW9uIG8oYSl7dmFyIGw7cmV0dXJuIHNbYV09ITAsc2UuZWFjaChlW2FdfHxbXSxmdW5jdGlvbihlLGEpe3ZhciBkPWEodCxpLG4pO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBkfHxyfHxzW2RdP3I/IShsPWQpOnZvaWQgMDoodC5kYXRhVHlwZXMudW5zaGlmdChkKSxvKGQpLCExKX0pLGx9dmFyIHM9e30scj1lPT09U3Q7cmV0dXJuIG8odC5kYXRhVHlwZXNbMF0pfHwhc1tcIipcIl0mJm8oXCIqXCIpfWZ1bmN0aW9uIEIoZSx0KXt2YXIgaSxuLG89c2UuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IoaSBpbiB0KXZvaWQgMCE9PXRbaV0mJigob1tpXT9lOm58fChuPXt9KSlbaV09dFtpXSk7cmV0dXJuIG4mJnNlLmV4dGVuZCghMCxlLG4pLGV9ZnVuY3Rpb24gVyhlLHQsaSl7Zm9yKHZhciBuLG8scyxyLGE9ZS5jb250ZW50cyxsPWUuZGF0YVR5cGVzO1wiKlwiPT09bFswXTspbC5zaGlmdCgpLHZvaWQgMD09PW4mJihuPWUubWltZVR5cGV8fHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKG4pZm9yKG8gaW4gYSlpZihhW29dJiZhW29dLnRlc3Qobikpe2wudW5zaGlmdChvKTticmVha31pZihsWzBdaW4gaSlzPWxbMF07ZWxzZXtmb3IobyBpbiBpKXtpZighbFswXXx8ZS5jb252ZXJ0ZXJzW28rXCIgXCIrbFswXV0pe3M9bzticmVha31yfHwocj1vKX1zPXN8fHJ9aWYocylyZXR1cm4gcyE9PWxbMF0mJmwudW5zaGlmdChzKSxpW3NdfWZ1bmN0aW9uIFkoZSx0LGksbil7dmFyIG8scyxyLGEsbCxkPXt9LHU9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZih1WzFdKWZvcihyIGluIGUuY29udmVydGVycylkW3IudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW3JdO2ZvcihzPXUuc2hpZnQoKTtzOylpZihlLnJlc3BvbnNlRmllbGRzW3NdJiYoaVtlLnJlc3BvbnNlRmllbGRzW3NdXT10KSwhbCYmbiYmZS5kYXRhRmlsdGVyJiYodD1lLmRhdGFGaWx0ZXIodCxlLmRhdGFUeXBlKSksbD1zLHM9dS5zaGlmdCgpKWlmKFwiKlwiPT09cylzPWw7ZWxzZSBpZihcIipcIiE9PWwmJmwhPT1zKXtpZihyPWRbbCtcIiBcIitzXXx8ZFtcIiogXCIrc10sIXIpZm9yKG8gaW4gZClpZihhPW8uc3BsaXQoXCIgXCIpLGFbMV09PT1zJiYocj1kW2wrXCIgXCIrYVswXV18fGRbXCIqIFwiK2FbMF1dKSl7cj09PSEwP3I9ZFtvXTpkW29dIT09ITAmJihzPWFbMF0sdS51bnNoaWZ0KGFbMV0pKTticmVha31pZihyIT09ITApaWYociYmZS50aHJvd3MpdD1yKHQpO2Vsc2UgdHJ5e3Q9cih0KX1jYXRjaChlKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOnI/ZTpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIitsK1wiIHRvIFwiK3N9fX1yZXR1cm57c3RhdGU6XCJzdWNjZXNzXCIsZGF0YTp0fX1mdW5jdGlvbiBRKGUsdCxpLG4pe3ZhciBvO2lmKHNlLmlzQXJyYXkodCkpc2UuZWFjaCh0LGZ1bmN0aW9uKHQsbyl7aXx8QXQudGVzdChlKT9uKGUsbyk6UShlK1wiW1wiKyhcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBvP1widW5kZWZpbmVkXCI6X3R5cGVvZihvKSkmJm51bGwhPW8/dDpcIlwiKStcIl1cIixvLGksbil9KTtlbHNlIGlmKGl8fFwib2JqZWN0XCIhPT1zZS50eXBlKHQpKW4oZSx0KTtlbHNlIGZvcihvIGluIHQpUShlK1wiW1wiK28rXCJdXCIsdFtvXSxpLG4pfWZ1bmN0aW9uIFUoZSl7cmV0dXJuIHNlLmlzV2luZG93KGUpP2U6OT09PWUubm9kZVR5cGUmJmUuZGVmYXVsdFZpZXd9dmFyIEs9W10sWD1lLmRvY3VtZW50LEc9Sy5zbGljZSxWPUsuY29uY2F0LFo9Sy5wdXNoLEo9Sy5pbmRleE9mLGVlPXt9LHRlPWVlLnRvU3RyaW5nLGllPWVlLmhhc093blByb3BlcnR5LG5lPXt9LG9lPVwiMi4yLjRcIixzZT1mdW5jdGlvbiBlKHQsaSl7cmV0dXJuIG5ldyBlLmZuLmluaXQodCxpKX0scmU9L15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLGFlPS9eLW1zLS8sbGU9Ly0oW1xcZGEtel0pL2dpLGRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX07c2UuZm49c2UucHJvdG90eXBlPXtqcXVlcnk6b2UsY29uc3RydWN0b3I6c2Usc2VsZWN0b3I6XCJcIixsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIEcuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lP2U8MD90aGlzW2UrdGhpcy5sZW5ndGhdOnRoaXNbZV06Ry5jYWxsKHRoaXMpfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9c2UubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0LmNvbnRleHQ9dGhpcy5jb250ZXh0LHR9LGVhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIHNlLmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhzZS5tYXAodGhpcyxmdW5jdGlvbih0LGkpe3JldHVybiBlLmNhbGwodCxpLHQpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhHLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RoLGk9K2UrKGU8MD90OjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhpPj0wJiZpPHQ/W3RoaXNbaV1dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcigpfSxwdXNoOlosc29ydDpLLnNvcnQsc3BsaWNlOksuc3BsaWNlfSxzZS5leHRlbmQ9c2UuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxpLG4sbyxzLHI9YXJndW1lbnRzWzBdfHx7fSxhPTEsbD1hcmd1bWVudHMubGVuZ3RoLGQ9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgciYmKGQ9cixyPWFyZ3VtZW50c1thXXx8e30sYSsrKSxcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiByP1widW5kZWZpbmVkXCI6X3R5cGVvZihyKSl8fHNlLmlzRnVuY3Rpb24ocil8fChyPXt9KSxhPT09bCYmKHI9dGhpcyxhLS0pO2E8bDthKyspaWYobnVsbCE9KGU9YXJndW1lbnRzW2FdKSlmb3IodCBpbiBlKWk9clt0XSxuPWVbdF0sciE9PW4mJihkJiZuJiYoc2UuaXNQbGFpbk9iamVjdChuKXx8KG89c2UuaXNBcnJheShuKSkpPyhvPyhvPSExLHM9aSYmc2UuaXNBcnJheShpKT9pOltdKTpzPWkmJnNlLmlzUGxhaW5PYmplY3QoaSk/aTp7fSxyW3RdPXNlLmV4dGVuZChkLHMsbikpOnZvaWQgMCE9PW4mJihyW3RdPW4pKTtyZXR1cm4gcn0sc2UuZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKG9lK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGUpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09PXNlLnR5cGUoZSl9LGlzQXJyYXk6QXJyYXkuaXNBcnJheSxpc1dpbmRvdzpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmZT09PWUud2luZG93fSxpc051bWVyaWM6ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS50b1N0cmluZygpO3JldHVybiFzZS5pc0FycmF5KGUpJiZ0LXBhcnNlRmxvYXQodCkrMT49MH0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihlKXt2YXIgdDtpZihcIm9iamVjdFwiIT09c2UudHlwZShlKXx8ZS5ub2RlVHlwZXx8c2UuaXNXaW5kb3coZSkpcmV0dXJuITE7aWYoZS5jb25zdHJ1Y3RvciYmIWllLmNhbGwoZSxcImNvbnN0cnVjdG9yXCIpJiYhaWUuY2FsbChlLmNvbnN0cnVjdG9yLnByb3RvdHlwZXx8e30sXCJpc1Byb3RvdHlwZU9mXCIpKXJldHVybiExO2Zvcih0IGluIGUpO3JldHVybiB2b2lkIDA9PT10fHxpZS5jYWxsKGUsdCl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9lK1wiXCI6XCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOl90eXBlb2YoZSkpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2VlW3RlLmNhbGwoZSldfHxcIm9iamVjdFwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6X3R5cGVvZihlKX0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlKXt2YXIgdCxpPWV2YWw7ZT1zZS50cmltKGUpLGUmJigxPT09ZS5pbmRleE9mKFwidXNlIHN0cmljdFwiKT8odD1YLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksdC50ZXh0PWUsWC5oZWFkLmFwcGVuZENoaWxkKHQpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCkpOmkoZSkpfSxjYW1lbENhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShhZSxcIm1zLVwiKS5yZXBsYWNlKGxlLGRlKX0sbm9kZU5hbWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfSxlYWNoOmZ1bmN0aW9uKGUsdCl7dmFyIG4sbz0wO2lmKGkoZSkpZm9yKG49ZS5sZW5ndGg7bzxuJiZ0LmNhbGwoZVtvXSxvLGVbb10pIT09ITE7bysrKTtlbHNlIGZvcihvIGluIGUpaWYodC5jYWxsKGVbb10sbyxlW29dKT09PSExKWJyZWFrO3JldHVybiBlfSx0cmltOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP1wiXCI6KGUrXCJcIikucmVwbGFjZShyZSxcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dHx8W107cmV0dXJuIG51bGwhPWUmJihpKE9iamVjdChlKSk/c2UubWVyZ2UobixcInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSk6Wi5jYWxsKG4sZSkpLG59LGluQXJyYXk6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiBudWxsPT10Py0xOkouY2FsbCh0LGUsaSl9LG1lcmdlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPSt0Lmxlbmd0aCxuPTAsbz1lLmxlbmd0aDtuPGk7bisrKWVbbysrXT10W25dO3JldHVybiBlLmxlbmd0aD1vLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LGkpe2Zvcih2YXIgbixvPVtdLHM9MCxyPWUubGVuZ3RoLGE9IWk7czxyO3MrKyluPSF0KGVbc10scyksbiE9PWEmJm8ucHVzaChlW3NdKTtyZXR1cm4gb30sbWFwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbyxzLHI9MCxhPVtdO2lmKGkoZSkpZm9yKG89ZS5sZW5ndGg7cjxvO3IrKylzPXQoZVtyXSxyLG4pLG51bGwhPXMmJmEucHVzaChzKTtlbHNlIGZvcihyIGluIGUpcz10KGVbcl0scixuKSxudWxsIT1zJiZhLnB1c2gocyk7cmV0dXJuIFYuYXBwbHkoW10sYSl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbiBlKHQsaSl7dmFyIG4sbyxlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobj10W2ldLGk9dCx0PW4pLHNlLmlzRnVuY3Rpb24odCkpcmV0dXJuIG89Ry5jYWxsKGFyZ3VtZW50cywyKSxlPWZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoaXx8dGhpcyxvLmNvbmNhdChHLmNhbGwoYXJndW1lbnRzKSkpfSxlLmd1aWQ9dC5ndWlkPXQuZ3VpZHx8c2UuZ3VpZCsrLGV9LG5vdzpEYXRlLm5vdyxzdXBwb3J0Om5lfSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoc2UuZm5bU3ltYm9sLml0ZXJhdG9yXT1LW1N5bWJvbC5pdGVyYXRvcl0pLHNlLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe2VlW1wiW29iamVjdCBcIit0K1wiXVwiXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgdWU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQsaSxuKXt2YXIgbyxzLHIsYSxsLGQsYyxmLHA9dCYmdC5vd25lckRvY3VtZW50LHY9dD90Lm5vZGVUeXBlOjk7aWYoaT1pfHxbXSxcInN0cmluZ1wiIT10eXBlb2YgZXx8IWV8fDEhPT12JiY5IT09diYmMTEhPT12KXJldHVybiBpO2lmKCFuJiYoKHQ/dC5vd25lckRvY3VtZW50fHx0OlIpIT09RSYmTyh0KSx0PXR8fEUsRCkpe2lmKDExIT09diYmKGQ9Z2UuZXhlYyhlKSkpaWYobz1kWzFdKXtpZig5PT09dil7aWYoIShyPXQuZ2V0RWxlbWVudEJ5SWQobykpKXJldHVybiBpO2lmKHIuaWQ9PT1vKXJldHVybiBpLnB1c2gociksaX1lbHNlIGlmKHAmJihyPXAuZ2V0RWxlbWVudEJ5SWQobykpJiZxKHQscikmJnIuaWQ9PT1vKXJldHVybiBpLnB1c2gociksaX1lbHNle2lmKGRbMl0pcmV0dXJuIFouYXBwbHkoaSx0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpKSxpO2lmKChvPWRbM10pJiZrLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gWi5hcHBseShpLHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShvKSksaX1pZihrLnFzYSYmIVlbZStcIiBcIl0mJighSHx8IUgudGVzdChlKSkpe2lmKDEhPT12KXA9dCxmPWU7ZWxzZSBpZihcIm9iamVjdFwiIT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtmb3IoKGE9dC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/YT1hLnJlcGxhY2Uod2UsXCJcXFxcJCZcIik6dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLGE9TCksYz1UKGUpLHM9Yy5sZW5ndGgsbD1oZS50ZXN0KGEpP1wiI1wiK2E6XCJbaWQ9J1wiK2ErXCInXVwiO3MtLTspY1tzXT1sK1wiIFwiK2goY1tzXSk7Zj1jLmpvaW4oXCIsXCIpLHA9eWUudGVzdChlKSYmdSh0LnBhcmVudE5vZGUpfHx0fWlmKGYpdHJ5e3JldHVybiBaLmFwcGx5KGkscC5xdWVyeVNlbGVjdG9yQWxsKGYpKSxpfWNhdGNoKGUpe31maW5hbGx5e2E9PT1MJiZ0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIF8oZS5yZXBsYWNlKGFlLFwiJDFcIiksdCxpLG4pfWZ1bmN0aW9uIGkoKXtmdW5jdGlvbiBlKGksbil7cmV0dXJuIHQucHVzaChpK1wiIFwiKT5DLmNhY2hlTGVuZ3RoJiZkZWxldGUgZVt0LnNoaWZ0KCldLGVbaStcIiBcIl09bn12YXIgdD1bXTtyZXR1cm4gZX1mdW5jdGlvbiBuKGUpe3JldHVybiBlW0xdPSEwLGV9ZnVuY3Rpb24gbyhlKXt2YXIgdD1FLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dHJ5e3JldHVybiEhZSh0KX1jYXRjaChlKXtyZXR1cm4hMX1maW5hbGx5e3QucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLHQ9bnVsbH19ZnVuY3Rpb24gcyhlLHQpe2Zvcih2YXIgaT1lLnNwbGl0KFwifFwiKSxuPWkubGVuZ3RoO24tLTspQy5hdHRySGFuZGxlW2lbbl1dPXR9ZnVuY3Rpb24gcihlLHQpe3ZhciBpPXQmJmUsbj1pJiYxPT09ZS5ub2RlVHlwZSYmMT09PXQubm9kZVR5cGUmJih+dC5zb3VyY2VJbmRleHx8VSktKH5lLnNvdXJjZUluZGV4fHxVKTtpZihuKXJldHVybiBuO2lmKGkpZm9yKDtpPWkubmV4dFNpYmxpbmc7KWlmKGk9PT10KXJldHVybi0xO3JldHVybiBlPzE6LTF9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGk9dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWkmJnQudHlwZT09PWV9fWZ1bmN0aW9uIGwoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBpPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09aXx8XCJidXR0b25cIj09PWkpJiZ0LnR5cGU9PT1lfX1mdW5jdGlvbiBkKGUpe3JldHVybiBuKGZ1bmN0aW9uKHQpe3JldHVybiB0PSt0LG4oZnVuY3Rpb24oaSxuKXtmb3IodmFyIG8scz1lKFtdLGkubGVuZ3RoLHQpLHI9cy5sZW5ndGg7ci0tOylpW289c1tyXV0mJihpW29dPSEobltvXT1pW29dKSl9KX0pfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZlfWZ1bmN0aW9uIGMoKXt9ZnVuY3Rpb24gaChlKXtmb3IodmFyIHQ9MCxpPWUubGVuZ3RoLG49XCJcIjt0PGk7dCsrKW4rPWVbdF0udmFsdWU7cmV0dXJuIG59ZnVuY3Rpb24gZihlLHQsaSl7dmFyIG49dC5kaXIsbz1pJiZcInBhcmVudE5vZGVcIj09PW4scz1JKys7cmV0dXJuIHQuZmlyc3Q/ZnVuY3Rpb24odCxpLHMpe2Zvcig7dD10W25dOylpZigxPT09dC5ub2RlVHlwZXx8bylyZXR1cm4gZSh0LGkscyl9OmZ1bmN0aW9uKHQsaSxyKXt2YXIgYSxsLGQsdT1bTixzXTtpZihyKXtmb3IoO3Q9dFtuXTspaWYoKDE9PT10Lm5vZGVUeXBlfHxvKSYmZSh0LGkscikpcmV0dXJuITB9ZWxzZSBmb3IoO3Q9dFtuXTspaWYoMT09PXQubm9kZVR5cGV8fG8pe2lmKGQ9dFtMXXx8KHRbTF09e30pLGw9ZFt0LnVuaXF1ZUlEXXx8KGRbdC51bmlxdWVJRF09e30pLChhPWxbbl0pJiZhWzBdPT09TiYmYVsxXT09PXMpcmV0dXJuIHVbMl09YVsyXTtpZihsW25dPXUsdVsyXT1lKHQsaSxyKSlyZXR1cm4hMH19fWZ1bmN0aW9uIHAoZSl7cmV0dXJuIGUubGVuZ3RoPjE/ZnVuY3Rpb24odCxpLG4pe2Zvcih2YXIgbz1lLmxlbmd0aDtvLS07KWlmKCFlW29dKHQsaSxuKSlyZXR1cm4hMTtyZXR1cm4hMH06ZVswXX1mdW5jdGlvbiB2KGUsaSxuKXtmb3IodmFyIG89MCxzPWkubGVuZ3RoO288cztvKyspdChlLGlbb10sbik7cmV0dXJuIG59ZnVuY3Rpb24gbShlLHQsaSxuLG8pe2Zvcih2YXIgcyxyPVtdLGE9MCxsPWUubGVuZ3RoLGQ9bnVsbCE9dDthPGw7YSsrKShzPWVbYV0pJiYoaSYmIWkocyxuLG8pfHwoci5wdXNoKHMpLGQmJnQucHVzaChhKSkpO3JldHVybiByfWZ1bmN0aW9uIGcoZSx0LGksbyxzLHIpe3JldHVybiBvJiYhb1tMXSYmKG89ZyhvKSkscyYmIXNbTF0mJihzPWcocyxyKSksbihmdW5jdGlvbihuLHIsYSxsKXt2YXIgZCx1LGMsaD1bXSxmPVtdLHA9ci5sZW5ndGgsZz1ufHx2KHR8fFwiKlwiLGEubm9kZVR5cGU/W2FdOmEsW10pLHk9IWV8fCFuJiZ0P2c6bShnLGgsZSxhLGwpLHc9aT9zfHwobj9lOnB8fG8pP1tdOnI6eTtpZihpJiZpKHksdyxhLGwpLG8pZm9yKGQ9bSh3LGYpLG8oZCxbXSxhLGwpLHU9ZC5sZW5ndGg7dS0tOykoYz1kW3VdKSYmKHdbZlt1XV09ISh5W2ZbdV1dPWMpKTtpZihuKXtpZihzfHxlKXtpZihzKXtmb3IoZD1bXSx1PXcubGVuZ3RoO3UtLTspKGM9d1t1XSkmJmQucHVzaCh5W3VdPWMpO3MobnVsbCx3PVtdLGQsbCl9Zm9yKHU9dy5sZW5ndGg7dS0tOykoYz13W3VdKSYmKGQ9cz9lZShuLGMpOmhbdV0pPi0xJiYobltkXT0hKHJbZF09YykpfX1lbHNlIHc9bSh3PT09cj93LnNwbGljZShwLHcubGVuZ3RoKTp3KSxzP3MobnVsbCxyLHcsbCk6Wi5hcHBseShyLHcpfSl9ZnVuY3Rpb24geShlKXtmb3IodmFyIHQsaSxuLG89ZS5sZW5ndGgscz1DLnJlbGF0aXZlW2VbMF0udHlwZV0scj1zfHxDLnJlbGF0aXZlW1wiIFwiXSxhPXM/MTowLGw9ZihmdW5jdGlvbihlKXtyZXR1cm4gZT09PXR9LHIsITApLGQ9ZihmdW5jdGlvbihlKXtyZXR1cm4gZWUodCxlKT4tMX0sciwhMCksdT1bZnVuY3Rpb24oZSxpLG4pe3ZhciBvPSFzJiYobnx8aSE9PUYpfHwoKHQ9aSkubm9kZVR5cGU/bChlLGksbik6ZChlLGksbikpO3JldHVybiB0PW51bGwsb31dO2E8bzthKyspaWYoaT1DLnJlbGF0aXZlW2VbYV0udHlwZV0pdT1bZihwKHUpLGkpXTtlbHNle2lmKGk9Qy5maWx0ZXJbZVthXS50eXBlXS5hcHBseShudWxsLGVbYV0ubWF0Y2hlcyksaVtMXSl7Zm9yKG49KythO248byYmIUMucmVsYXRpdmVbZVtuXS50eXBlXTtuKyspO3JldHVybiBnKGE+MSYmcCh1KSxhPjEmJmgoZS5zbGljZSgwLGEtMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWVbYS0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZShhZSxcIiQxXCIpLGksYTxuJiZ5KGUuc2xpY2UoYSxuKSksbjxvJiZ5KGU9ZS5zbGljZShuKSksbjxvJiZoKGUpKX11LnB1c2goaSl9cmV0dXJuIHAodSl9ZnVuY3Rpb24gdyhlLGkpe3ZhciBvPWkubGVuZ3RoPjAscz1lLmxlbmd0aD4wLHI9ZnVuY3Rpb24obixyLGEsbCxkKXt2YXIgdSxjLGgsZj0wLHA9XCIwXCIsdj1uJiZbXSxnPVtdLHk9Rix3PW58fHMmJkMuZmluZC5UQUcoXCIqXCIsZCksYj1OKz1udWxsPT15PzE6TWF0aC5yYW5kb20oKXx8LjEsaz13Lmxlbmd0aDtmb3IoZCYmKEY9cj09PUV8fHJ8fGQpO3AhPT1rJiZudWxsIT0odT13W3BdKTtwKyspe2lmKHMmJnUpe2ZvcihjPTAscnx8dS5vd25lckRvY3VtZW50PT09RXx8KE8odSksYT0hRCk7aD1lW2MrK107KWlmKGgodSxyfHxFLGEpKXtsLnB1c2godSk7YnJlYWt9ZCYmKE49Yil9byYmKCh1PSFoJiZ1KSYmZi0tLG4mJnYucHVzaCh1KSl9aWYoZis9cCxvJiZwIT09Zil7Zm9yKGM9MDtoPWlbYysrXTspaCh2LGcscixhKTtpZihuKXtpZihmPjApZm9yKDtwLS07KXZbcF18fGdbcF18fChnW3BdPUcuY2FsbChsKSk7Zz1tKGcpfVouYXBwbHkobCxnKSxkJiYhbiYmZy5sZW5ndGg+MCYmZitpLmxlbmd0aD4xJiZ0LnVuaXF1ZVNvcnQobCl9cmV0dXJuIGQmJihOPWIsRj15KSx2fTtyZXR1cm4gbz9uKHIpOnJ9dmFyIGIsayxDLCQseCxULFMsXyxGLHosQSxPLEUsUCxELEgsTSxqLHEsTD1cInNpenpsZVwiKzEqbmV3IERhdGUsUj1lLmRvY3VtZW50LE49MCxJPTAsQj1pKCksVz1pKCksWT1pKCksUT1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKEE9ITApLDB9LFU9MTw8MzEsSz17fS5oYXNPd25Qcm9wZXJ0eSxYPVtdLEc9WC5wb3AsVj1YLnB1c2gsWj1YLnB1c2gsSj1YLnNsaWNlLGVlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPTAsbj1lLmxlbmd0aDtpPG47aSsrKWlmKGVbaV09PT10KXJldHVybiBpO3JldHVybi0xfSx0ZT1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsaWU9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLG5lPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsb2U9XCJcXFxcW1wiK2llK1wiKihcIituZStcIikoPzpcIitpZStcIiooWypeJHwhfl0/PSlcIitpZStcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK25lK1wiKSl8KVwiK2llK1wiKlxcXFxdXCIsc2U9XCI6KFwiK25lK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitvZStcIikqKXwuKilcXFxcKXwpXCIscmU9bmV3IFJlZ0V4cChpZStcIitcIixcImdcIiksYWU9bmV3IFJlZ0V4cChcIl5cIitpZStcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIraWUrXCIrJFwiLFwiZ1wiKSxsZT1uZXcgUmVnRXhwKFwiXlwiK2llK1wiKixcIitpZStcIipcIiksZGU9bmV3IFJlZ0V4cChcIl5cIitpZStcIiooWz4rfl18XCIraWUrXCIpXCIraWUrXCIqXCIpLHVlPW5ldyBSZWdFeHAoXCI9XCIraWUrXCIqKFteXFxcXF0nXFxcIl0qPylcIitpZStcIipcXFxcXVwiLFwiZ1wiKSxjZT1uZXcgUmVnRXhwKHNlKSxoZT1uZXcgUmVnRXhwKFwiXlwiK25lK1wiJFwiKSxmZT17SUQ6bmV3IFJlZ0V4cChcIl4jKFwiK25lK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK25lK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrbmUrXCJ8WypdKVwiKSxBVFRSOm5ldyBSZWdFeHAoXCJeXCIrb2UpLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK3NlKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitpZStcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiK2llK1wiKig/OihbKy1dfClcIitpZStcIiooXFxcXGQrKXwpKVwiK2llK1wiKlxcXFwpfClcIixcImlcIiksYm9vbDpuZXcgUmVnRXhwKFwiXig/OlwiK3RlK1wiKSRcIixcImlcIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoXCJeXCIraWUrXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK2llK1wiKigoPzotXFxcXGQpP1xcXFxkKilcIitpZStcIipcXFxcKXwpKD89W14tXXwkKVwiLFwiaVwiKX0scGU9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSx2ZT0vXmhcXGQkL2ksbWU9L15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxnZT0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyx5ZT0vWyt+XS8sd2U9Lyd8XFxcXC9nLGJlPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitpZStcIj98KFwiK2llK1wiKXwuKVwiLFwiaWdcIiksa2U9ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPVwiMHhcIit0LTY1NTM2O3JldHVybiBuIT09bnx8aT90Om48MD9TdHJpbmcuZnJvbUNoYXJDb2RlKG4rNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUobj4+MTB8NTUyOTYsMTAyMyZufDU2MzIwKX0sQ2U9ZnVuY3Rpb24oKXtPKCl9O3RyeXtaLmFwcGx5KFg9Si5jYWxsKFIuY2hpbGROb2RlcyksUi5jaGlsZE5vZGVzKSxYW1IuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe1o9e2FwcGx5OlgubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7Vi5hcHBseShlLEouY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPWUubGVuZ3RoLG49MDtlW2krK109dFtuKytdOyk7ZS5sZW5ndGg9aS0xfX19az10LnN1cHBvcnQ9e30seD10LmlzWE1MPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJihlLm93bmVyRG9jdW1lbnR8fGUpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hIXQmJlwiSFRNTFwiIT09dC5ub2RlTmFtZX0sTz10LnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LGksbj1lP2Uub3duZXJEb2N1bWVudHx8ZTpSO3JldHVybiBuIT09RSYmOT09PW4ubm9kZVR5cGUmJm4uZG9jdW1lbnRFbGVtZW50PyhFPW4sUD1FLmRvY3VtZW50RWxlbWVudCxEPSF4KEUpLChpPUUuZGVmYXVsdFZpZXcpJiZpLnRvcCE9PWkmJihpLmFkZEV2ZW50TGlzdGVuZXI/aS5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsQ2UsITEpOmkuYXR0YWNoRXZlbnQmJmkuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLENlKSksay5hdHRyaWJ1dGVzPW8oZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2xhc3NOYW1lPVwiaVwiLCFlLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGsuZ2V0RWxlbWVudHNCeVRhZ05hbWU9byhmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChFLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxrLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9bWUudGVzdChFLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGsuZ2V0QnlJZD1vKGZ1bmN0aW9uKGUpe3JldHVybiBQLmFwcGVuZENoaWxkKGUpLmlkPUwsIUUuZ2V0RWxlbWVudHNCeU5hbWV8fCFFLmdldEVsZW1lbnRzQnlOYW1lKEwpLmxlbmd0aH0pLGsuZ2V0QnlJZD8oQy5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJkQpe3ZhciBpPXQuZ2V0RWxlbWVudEJ5SWQoZSk7cmV0dXJuIGk/W2ldOltdfX0sQy5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKGJlLGtlKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT10fX0pOihkZWxldGUgQy5maW5kLklELEMuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShiZSxrZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUmJmUuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBpJiZpLnZhbHVlPT09dH19KSxDLmZpbmQuVEFHPWsuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOmsucXNhP3QucXVlcnlTZWxlY3RvckFsbChlKTp2b2lkIDB9OmZ1bmN0aW9uKGUsdCl7dmFyIGksbj1bXSxvPTAscz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKFwiKlwiPT09ZSl7Zm9yKDtpPXNbbysrXTspMT09PWkubm9kZVR5cGUmJm4ucHVzaChpKTtyZXR1cm4gbn1yZXR1cm4gc30sQy5maW5kLkNMQVNTPWsuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZEKXJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LE09W10sSD1bXSwoay5xc2E9bWUudGVzdChFLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKG8oZnVuY3Rpb24oZSl7UC5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrTCtcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK0wrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJkgucHVzaChcIlsqXiRdPVwiK2llK1wiKig/OicnfFxcXCJcXFwiKVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8SC5wdXNoKFwiXFxcXFtcIitpZStcIiooPzp2YWx1ZXxcIit0ZStcIilcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIitMK1wiLV1cIikubGVuZ3RofHxILnB1c2goXCJ+PVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fEgucHVzaChcIjpjaGVja2VkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcImEjXCIrTCtcIisqXCIpLmxlbmd0aHx8SC5wdXNoKFwiLiMuK1srfl1cIil9KSxvKGZ1bmN0aW9uKGUpe3ZhciB0PUUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3Quc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJkgucHVzaChcIm5hbWVcIitpZStcIipbKl4kfCF+XT89XCIpLGUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aHx8SC5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLEgucHVzaChcIiwuKjpcIil9KSksKGsubWF0Y2hlc1NlbGVjdG9yPW1lLnRlc3Qoaj1QLm1hdGNoZXN8fFAud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxQLm1vek1hdGNoZXNTZWxlY3Rvcnx8UC5vTWF0Y2hlc1NlbGVjdG9yfHxQLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJm8oZnVuY3Rpb24oZSl7ay5kaXNjb25uZWN0ZWRNYXRjaD1qLmNhbGwoZSxcImRpdlwiKSxqLmNhbGwoZSxcIltzIT0nJ106eFwiKSxNLnB1c2goXCIhPVwiLHNlKX0pLEg9SC5sZW5ndGgmJm5ldyBSZWdFeHAoSC5qb2luKFwifFwiKSksTT1NLmxlbmd0aCYmbmV3IFJlZ0V4cChNLmpvaW4oXCJ8XCIpKSx0PW1lLnRlc3QoUC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikscT10fHxtZS50ZXN0KFAuY29udGFpbnMpP2Z1bmN0aW9uKGUsdCl7dmFyIGk9OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxuPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PW58fCEoIW58fDEhPT1uLm5vZGVUeXBlfHwhKGkuY29udGFpbnM/aS5jb250YWlucyhuKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4pKSl9OmZ1bmN0aW9uKGUsdCl7aWYodClmb3IoO3Q9dC5wYXJlbnROb2RlOylpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sUT10P2Z1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIEE9ITAsMDt2YXIgaT0hZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gaT9pOihpPShlLm93bmVyRG9jdW1lbnR8fGUpPT09KHQub3duZXJEb2N1bWVudHx8dCk/ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KToxLDEmaXx8IWsuc29ydERldGFjaGVkJiZ0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpPT09aT9lPT09RXx8ZS5vd25lckRvY3VtZW50PT09UiYmcShSLGUpPy0xOnQ9PT1FfHx0Lm93bmVyRG9jdW1lbnQ9PT1SJiZxKFIsdCk/MTp6P2VlKHosZSktZWUoeix0KTowOjQmaT8tMToxKX06ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gQT0hMCwwO3ZhciBpLG49MCxvPWUucGFyZW50Tm9kZSxzPXQucGFyZW50Tm9kZSxhPVtlXSxsPVt0XTtpZighb3x8IXMpcmV0dXJuIGU9PT1FPy0xOnQ9PT1FPzE6bz8tMTpzPzE6ej9lZSh6LGUpLWVlKHosdCk6MDtpZihvPT09cylyZXR1cm4gcihlLHQpO2ZvcihpPWU7aT1pLnBhcmVudE5vZGU7KWEudW5zaGlmdChpKTtmb3IoaT10O2k9aS5wYXJlbnROb2RlOylsLnVuc2hpZnQoaSk7Zm9yKDthW25dPT09bFtuXTspbisrO3JldHVybiBuP3IoYVtuXSxsW25dKTphW25dPT09Uj8tMTpsW25dPT09Uj8xOjB9LEUpOkV9LHQubWF0Y2hlcz1mdW5jdGlvbihlLGkpe3JldHVybiB0KGUsbnVsbCxudWxsLGkpfSx0Lm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihlLGkpe2lmKChlLm93bmVyRG9jdW1lbnR8fGUpIT09RSYmTyhlKSxpPWkucmVwbGFjZSh1ZSxcIj0nJDEnXVwiKSxrLm1hdGNoZXNTZWxlY3RvciYmRCYmIVlbaStcIiBcIl0mJighTXx8IU0udGVzdChpKSkmJighSHx8IUgudGVzdChpKSkpdHJ5e3ZhciBuPWouY2FsbChlLGkpO2lmKG58fGsuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXt9cmV0dXJuIHQoaSxFLG51bGwsW2VdKS5sZW5ndGg+MH0sdC5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09RSYmTyhlKSxxKGUsdCl9LHQuYXR0cj1mdW5jdGlvbihlLHQpeyhlLm93bmVyRG9jdW1lbnR8fGUpIT09RSYmTyhlKTt2YXIgaT1DLmF0dHJIYW5kbGVbdC50b0xvd2VyQ2FzZSgpXSxuPWkmJksuY2FsbChDLmF0dHJIYW5kbGUsdC50b0xvd2VyQ2FzZSgpKT9pKGUsdCwhRCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1uP246ay5hdHRyaWJ1dGVzfHwhRD9lLmdldEF0dHJpYnV0ZSh0KToobj1lLmdldEF0dHJpYnV0ZU5vZGUodCkpJiZuLnNwZWNpZmllZD9uLnZhbHVlOm51bGx9LHQuZXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrZSl9LHQudW5pcXVlU29ydD1mdW5jdGlvbihlKXt2YXIgdCxpPVtdLG49MCxvPTA7aWYoQT0hay5kZXRlY3REdXBsaWNhdGVzLHo9IWsuc29ydFN0YWJsZSYmZS5zbGljZSgwKSxlLnNvcnQoUSksQSl7Zm9yKDt0PWVbbysrXTspdD09PWVbb10mJihuPWkucHVzaChvKSk7Zm9yKDtuLS07KWUuc3BsaWNlKGlbbl0sMSl9cmV0dXJuIHo9bnVsbCxlfSwkPXQuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxpPVwiXCIsbj0wLG89ZS5ub2RlVHlwZTtpZihvKXtpZigxPT09b3x8OT09PW98fDExPT09byl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUudGV4dENvbnRlbnQpcmV0dXJuIGUudGV4dENvbnRlbnQ7Zm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWkrPSQoZSl9ZWxzZSBpZigzPT09b3x8ND09PW8pcmV0dXJuIGUubm9kZVZhbHVlfWVsc2UgZm9yKDt0PWVbbisrXTspaSs9JCh0KTtyZXR1cm4gaX0sQz10LnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOm4sbWF0Y2g6ZmUsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UoYmUsa2UpLGVbM109KGVbM118fGVbNF18fGVbNV18fFwiXCIpLnJlcGxhY2UoYmUsa2UpLFwifj1cIj09PWVbMl0mJihlWzNdPVwiIFwiK2VbM10rXCIgXCIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1lWzFdLnNsaWNlKDAsMyk/KGVbM118fHQuZXJyb3IoZVswXSksZVs0XT0rKGVbNF0/ZVs1XSsoZVs2XXx8MSk6MiooXCJldmVuXCI9PT1lWzNdfHxcIm9kZFwiPT09ZVszXSkpLGVbNV09KyhlWzddK2VbOF18fFwib2RkXCI9PT1lWzNdKSk6ZVszXSYmdC5lcnJvcihlWzBdKSxlfSxQU0VVRE86ZnVuY3Rpb24oZSl7dmFyIHQsaT0hZVs2XSYmZVsyXTtyZXR1cm4gZmUuQ0hJTEQudGVzdChlWzBdKT9udWxsOihlWzNdP2VbMl09ZVs0XXx8ZVs1XXx8XCJcIjppJiZjZS50ZXN0KGkpJiYodD1UKGksITApKSYmKHQ9aS5pbmRleE9mKFwiKVwiLGkubGVuZ3RoLXQpLWkubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09aS5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKGJlLGtlKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09ZT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dH19LENMQVNTOmZ1bmN0aW9uKGUpe3ZhciB0PUJbZStcIiBcIl07cmV0dXJuIHR8fCh0PW5ldyBSZWdFeHAoXCIoXnxcIitpZStcIilcIitlK1wiKFwiK2llK1wifCQpXCIpKSYmQihlLGZ1bmN0aW9uKGUpe3JldHVybiB0LnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGUsaSxuKXtyZXR1cm4gZnVuY3Rpb24obyl7dmFyIHM9dC5hdHRyKG8sZSk7cmV0dXJuIG51bGw9PXM/XCIhPVwiPT09aTohaXx8KHMrPVwiXCIsXCI9XCI9PT1pP3M9PT1uOlwiIT1cIj09PWk/cyE9PW46XCJePVwiPT09aT9uJiYwPT09cy5pbmRleE9mKG4pOlwiKj1cIj09PWk/biYmcy5pbmRleE9mKG4pPi0xOlwiJD1cIj09PWk/biYmcy5zbGljZSgtbi5sZW5ndGgpPT09bjpcIn49XCI9PT1pPyhcIiBcIitzLnJlcGxhY2UocmUsXCIgXCIpK1wiIFwiKS5pbmRleE9mKG4pPi0xOlwifD1cIj09PWkmJihzPT09bnx8cy5zbGljZSgwLG4ubGVuZ3RoKzEpPT09bitcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oZSx0LGksbixvKXt2YXIgcz1cIm50aFwiIT09ZS5zbGljZSgwLDMpLHI9XCJsYXN0XCIhPT1lLnNsaWNlKC00KSxhPVwib2YtdHlwZVwiPT09dDtyZXR1cm4gMT09PW4mJjA9PT1vP2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbih0LGksbCl7dmFyIGQsdSxjLGgsZixwLHY9cyE9PXI/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIsbT10LnBhcmVudE5vZGUsZz1hJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkseT0hbCYmIWEsdz0hMTtpZihtKXtpZihzKXtmb3IoO3Y7KXtmb3IoaD10O2g9aFt2XTspaWYoYT9oLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1nOjE9PT1oLm5vZGVUeXBlKXJldHVybiExO3A9dj1cIm9ubHlcIj09PWUmJiFwJiZcIm5leHRTaWJsaW5nXCJ9cmV0dXJuITB9aWYocD1bcj9tLmZpcnN0Q2hpbGQ6bS5sYXN0Q2hpbGRdLHImJnkpe2ZvcihoPW0sYz1oW0xdfHwoaFtMXT17fSksdT1jW2gudW5pcXVlSURdfHwoY1toLnVuaXF1ZUlEXT17fSksZD11W2VdfHxbXSxmPWRbMF09PT1OJiZkWzFdLHc9ZiYmZFsyXSxoPWYmJm0uY2hpbGROb2Rlc1tmXTtoPSsrZiYmaCYmaFt2XXx8KHc9Zj0wKXx8cC5wb3AoKTspaWYoMT09PWgubm9kZVR5cGUmJisrdyYmaD09PXQpe1xudVtlXT1bTixmLHddO2JyZWFrfX1lbHNlIGlmKHkmJihoPXQsYz1oW0xdfHwoaFtMXT17fSksdT1jW2gudW5pcXVlSURdfHwoY1toLnVuaXF1ZUlEXT17fSksZD11W2VdfHxbXSxmPWRbMF09PT1OJiZkWzFdLHc9Ziksdz09PSExKWZvcig7KGg9KytmJiZoJiZoW3ZdfHwodz1mPTApfHxwLnBvcCgpKSYmKChhP2gubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PWc6MSE9PWgubm9kZVR5cGUpfHwhKyt3fHwoeSYmKGM9aFtMXXx8KGhbTF09e30pLHU9Y1toLnVuaXF1ZUlEXXx8KGNbaC51bmlxdWVJRF09e30pLHVbZV09W04sd10pLGghPT10KSk7KTtyZXR1cm4gdy09byx3PT09bnx8dyVuPT09MCYmdy9uPj0wfX19LFBTRVVETzpmdW5jdGlvbihlLGkpe3ZhciBvLHM9Qy5wc2V1ZG9zW2VdfHxDLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8dC5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrZSk7cmV0dXJuIHNbTF0/cyhpKTpzLmxlbmd0aD4xPyhvPVtlLGUsXCJcIixpXSxDLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9uKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLG89cyhlLGkpLHI9by5sZW5ndGg7ci0tOyluPWVlKGUsb1tyXSksZVtuXT0hKHRbbl09b1tyXSl9KTpmdW5jdGlvbihlKXtyZXR1cm4gcyhlLDAsbyl9KTpzfX0scHNldWRvczp7bm90Om4oZnVuY3Rpb24oZSl7dmFyIHQ9W10saT1bXSxvPVMoZS5yZXBsYWNlKGFlLFwiJDFcIikpO3JldHVybiBvW0xdP24oZnVuY3Rpb24oZSx0LGksbil7Zm9yKHZhciBzLHI9byhlLG51bGwsbixbXSksYT1lLmxlbmd0aDthLS07KShzPXJbYV0pJiYoZVthXT0hKHRbYV09cykpfSk6ZnVuY3Rpb24oZSxuLHMpe3JldHVybiB0WzBdPWUsbyh0LG51bGwscyxpKSx0WzBdPW51bGwsIWkucG9wKCl9fSksaGFzOm4oZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiB0KGUsaSkubGVuZ3RoPjB9fSksY29udGFpbnM6bihmdW5jdGlvbihlKXtyZXR1cm4gZT1lLnJlcGxhY2UoYmUsa2UpLGZ1bmN0aW9uKHQpe3JldHVybih0LnRleHRDb250ZW50fHx0LmlubmVyVGV4dHx8JCh0KSkuaW5kZXhPZihlKT4tMX19KSxsYW5nOm4oZnVuY3Rpb24oZSl7cmV0dXJuIGhlLnRlc3QoZXx8XCJcIil8fHQuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIitlKSxlPWUucmVwbGFjZShiZSxrZSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbih0KXt2YXIgaTtkbyBpZihpPUQ/dC5sYW5nOnQuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fHQuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4gaT1pLnRvTG93ZXJDYXNlKCksaT09PWV8fDA9PT1pLmluZGV4T2YoZStcIi1cIik7d2hpbGUoKHQ9dC5wYXJlbnROb2RlKSYmMT09PXQubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbih0KXt2YXIgaT1lLmxvY2F0aW9uJiZlLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGkmJmkuc2xpY2UoMSk9PT10LmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09UH0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1FLmFjdGl2ZUVsZW1lbnQmJighRS5oYXNGb2N1c3x8RS5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSExfSxkaXNhYmxlZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5kaXNhYmxlZD09PSEwfSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiYhIWUuY2hlY2tlZHx8XCJvcHRpb25cIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsZS5zZWxlY3RlZD09PSEwfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIUMucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiB2ZS50ZXN0KGUubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihlKXtyZXR1cm4gcGUudGVzdChlLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiZcImJ1dHRvblwiPT09ZS50eXBlfHxcImJ1dHRvblwiPT09dH0sdGV4dDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm5cImlucHV0XCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT10LnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpkKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpkKGZ1bmN0aW9uKGUsdCl7cmV0dXJuW3QtMV19KSxlcTpkKGZ1bmN0aW9uKGUsdCxpKXtyZXR1cm5baTwwP2krdDppXX0pLGV2ZW46ZChmdW5jdGlvbihlLHQpe2Zvcih2YXIgaT0wO2k8dDtpKz0yKWUucHVzaChpKTtyZXR1cm4gZX0pLG9kZDpkKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpPTE7aTx0O2krPTIpZS5wdXNoKGkpO3JldHVybiBlfSksbHQ6ZChmdW5jdGlvbihlLHQsaSl7Zm9yKHZhciBuPWk8MD9pK3Q6aTstLW4+PTA7KWUucHVzaChuKTtyZXR1cm4gZX0pLGd0OmQoZnVuY3Rpb24oZSx0LGkpe2Zvcih2YXIgbj1pPDA/aSt0Omk7KytuPHQ7KWUucHVzaChuKTtyZXR1cm4gZX0pfX0sQy5wc2V1ZG9zLm50aD1DLnBzZXVkb3MuZXE7Zm9yKGIgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pQy5wc2V1ZG9zW2JdPWEoYik7Zm9yKGIgaW57c3VibWl0OiEwLHJlc2V0OiEwfSlDLnBzZXVkb3NbYl09bChiKTtyZXR1cm4gYy5wcm90b3R5cGU9Qy5maWx0ZXJzPUMucHNldWRvcyxDLnNldEZpbHRlcnM9bmV3IGMsVD10LnRva2VuaXplPWZ1bmN0aW9uKGUsaSl7dmFyIG4sbyxzLHIsYSxsLGQsdT1XW2UrXCIgXCJdO2lmKHUpcmV0dXJuIGk/MDp1LnNsaWNlKDApO2ZvcihhPWUsbD1bXSxkPUMucHJlRmlsdGVyO2E7KXtuJiYhKG89bGUuZXhlYyhhKSl8fChvJiYoYT1hLnNsaWNlKG9bMF0ubGVuZ3RoKXx8YSksbC5wdXNoKHM9W10pKSxuPSExLChvPWRlLmV4ZWMoYSkpJiYobj1vLnNoaWZ0KCkscy5wdXNoKHt2YWx1ZTpuLHR5cGU6b1swXS5yZXBsYWNlKGFlLFwiIFwiKX0pLGE9YS5zbGljZShuLmxlbmd0aCkpO2ZvcihyIGluIEMuZmlsdGVyKSEobz1mZVtyXS5leGVjKGEpKXx8ZFtyXSYmIShvPWRbcl0obykpfHwobj1vLnNoaWZ0KCkscy5wdXNoKHt2YWx1ZTpuLHR5cGU6cixtYXRjaGVzOm99KSxhPWEuc2xpY2Uobi5sZW5ndGgpKTtpZighbilicmVha31yZXR1cm4gaT9hLmxlbmd0aDphP3QuZXJyb3IoZSk6VyhlLGwpLnNsaWNlKDApfSxTPXQuY29tcGlsZT1mdW5jdGlvbihlLHQpe3ZhciBpLG49W10sbz1bXSxzPVlbZStcIiBcIl07aWYoIXMpe2Zvcih0fHwodD1UKGUpKSxpPXQubGVuZ3RoO2ktLTspcz15KHRbaV0pLHNbTF0/bi5wdXNoKHMpOm8ucHVzaChzKTtzPVkoZSx3KG8sbikpLHMuc2VsZWN0b3I9ZX1yZXR1cm4gc30sXz10LnNlbGVjdD1mdW5jdGlvbihlLHQsaSxuKXt2YXIgbyxzLHIsYSxsLGQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSxjPSFuJiZUKGU9ZC5zZWxlY3Rvcnx8ZSk7aWYoaT1pfHxbXSwxPT09Yy5sZW5ndGgpe2lmKHM9Y1swXT1jWzBdLnNsaWNlKDApLHMubGVuZ3RoPjImJlwiSURcIj09PShyPXNbMF0pLnR5cGUmJmsuZ2V0QnlJZCYmOT09PXQubm9kZVR5cGUmJkQmJkMucmVsYXRpdmVbc1sxXS50eXBlXSl7aWYodD0oQy5maW5kLklEKHIubWF0Y2hlc1swXS5yZXBsYWNlKGJlLGtlKSx0KXx8W10pWzBdLCF0KXJldHVybiBpO2QmJih0PXQucGFyZW50Tm9kZSksZT1lLnNsaWNlKHMuc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWZvcihvPWZlLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6cy5sZW5ndGg7by0tJiYocj1zW29dLCFDLnJlbGF0aXZlW2E9ci50eXBlXSk7KWlmKChsPUMuZmluZFthXSkmJihuPWwoci5tYXRjaGVzWzBdLnJlcGxhY2UoYmUsa2UpLHllLnRlc3Qoc1swXS50eXBlKSYmdSh0LnBhcmVudE5vZGUpfHx0KSkpe2lmKHMuc3BsaWNlKG8sMSksZT1uLmxlbmd0aCYmaChzKSwhZSlyZXR1cm4gWi5hcHBseShpLG4pLGk7YnJlYWt9fXJldHVybihkfHxTKGUsYykpKG4sdCwhRCxpLCF0fHx5ZS50ZXN0KGUpJiZ1KHQucGFyZW50Tm9kZSl8fHQpLGl9LGsuc29ydFN0YWJsZT1MLnNwbGl0KFwiXCIpLnNvcnQoUSkuam9pbihcIlwiKT09PUwsay5kZXRlY3REdXBsaWNhdGVzPSEhQSxPKCksay5zb3J0RGV0YWNoZWQ9byhmdW5jdGlvbihlKXtyZXR1cm4gMSZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSl9KSxvKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fHMoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsZnVuY3Rpb24oZSx0LGkpe2lmKCFpKXJldHVybiBlLmdldEF0dHJpYnV0ZSh0LFwidHlwZVwiPT09dC50b0xvd2VyQ2FzZSgpPzE6Mil9KSxrLmF0dHJpYnV0ZXMmJm8oZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fHMoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGUsdCxpKXtpZighaSYmXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBlLmRlZmF1bHRWYWx1ZX0pLG8oZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIil9KXx8cyh0ZSxmdW5jdGlvbihlLHQsaSl7dmFyIG47aWYoIWkpcmV0dXJuIGVbdF09PT0hMD90LnRvTG93ZXJDYXNlKCk6KG49ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmbi5zcGVjaWZpZWQ/bi52YWx1ZTpudWxsfSksdH0oZSk7c2UuZmluZD11ZSxzZS5leHByPXVlLnNlbGVjdG9ycyxzZS5leHByW1wiOlwiXT1zZS5leHByLnBzZXVkb3Msc2UudW5pcXVlU29ydD1zZS51bmlxdWU9dWUudW5pcXVlU29ydCxzZS50ZXh0PXVlLmdldFRleHQsc2UuaXNYTUxEb2M9dWUuaXNYTUwsc2UuY29udGFpbnM9dWUuY29udGFpbnM7dmFyIGNlPWZ1bmN0aW9uKGUsdCxpKXtmb3IodmFyIG49W10sbz12b2lkIDAhPT1pOyhlPWVbdF0pJiY5IT09ZS5ub2RlVHlwZTspaWYoMT09PWUubm9kZVR5cGUpe2lmKG8mJnNlKGUpLmlzKGkpKWJyZWFrO24ucHVzaChlKX1yZXR1cm4gbn0saGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIGk9W107ZTtlPWUubmV4dFNpYmxpbmcpMT09PWUubm9kZVR5cGUmJmUhPT10JiZpLnB1c2goZSk7cmV0dXJuIGl9LGZlPXNlLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LHBlPS9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyx2ZT0vXi5bXjojXFxbXFwuLF0qJC87c2UuZmlsdGVyPWZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10WzBdO3JldHVybiBpJiYoZT1cIjpub3QoXCIrZStcIilcIiksMT09PXQubGVuZ3RoJiYxPT09bi5ub2RlVHlwZT9zZS5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpP1tuXTpbXTpzZS5maW5kLm1hdGNoZXMoZSxzZS5ncmVwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfSkpfSxzZS5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsaT10aGlzLmxlbmd0aCxuPVtdLG89dGhpcztpZihcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gdGhpcy5wdXNoU3RhY2soc2UoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDt0PGk7dCsrKWlmKHNlLmNvbnRhaW5zKG9bdF0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKHQ9MDt0PGk7dCsrKXNlLmZpbmQoZSxvW3RdLG4pO3JldHVybiBuPXRoaXMucHVzaFN0YWNrKGk+MT9zZS51bmlxdWUobik6biksbi5zZWxlY3Rvcj10aGlzLnNlbGVjdG9yP3RoaXMuc2VsZWN0b3IrXCIgXCIrZTplLG59LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobih0aGlzLGV8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobih0aGlzLGV8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGUpe3JldHVybiEhbih0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBlJiZmZS50ZXN0KGUpP3NlKGUpOmV8fFtdLCExKS5sZW5ndGh9fSk7dmFyIG1lLGdlPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLHllPXNlLmZuLmluaXQ9ZnVuY3Rpb24oZSx0LGkpe3ZhciBuLG87aWYoIWUpcmV0dXJuIHRoaXM7aWYoaT1pfHxtZSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYobj1cIjxcIj09PWVbMF0mJlwiPlwiPT09ZVtlLmxlbmd0aC0xXSYmZS5sZW5ndGg+PTM/W251bGwsZSxudWxsXTpnZS5leGVjKGUpLCFufHwhblsxXSYmdClyZXR1cm4hdHx8dC5qcXVlcnk/KHR8fGkpLmZpbmQoZSk6dGhpcy5jb25zdHJ1Y3Rvcih0KS5maW5kKGUpO2lmKG5bMV0pe2lmKHQ9dCBpbnN0YW5jZW9mIHNlP3RbMF06dCxzZS5tZXJnZSh0aGlzLHNlLnBhcnNlSFRNTChuWzFdLHQmJnQubm9kZVR5cGU/dC5vd25lckRvY3VtZW50fHx0OlgsITApKSxwZS50ZXN0KG5bMV0pJiZzZS5pc1BsYWluT2JqZWN0KHQpKWZvcihuIGluIHQpc2UuaXNGdW5jdGlvbih0aGlzW25dKT90aGlzW25dKHRbbl0pOnRoaXMuYXR0cihuLHRbbl0pO3JldHVybiB0aGlzfXJldHVybiBvPVguZ2V0RWxlbWVudEJ5SWQoblsyXSksbyYmby5wYXJlbnROb2RlJiYodGhpcy5sZW5ndGg9MSx0aGlzWzBdPW8pLHRoaXMuY29udGV4dD1YLHRoaXMuc2VsZWN0b3I9ZSx0aGlzfXJldHVybiBlLm5vZGVUeXBlPyh0aGlzLmNvbnRleHQ9dGhpc1swXT1lLHRoaXMubGVuZ3RoPTEsdGhpcyk6c2UuaXNGdW5jdGlvbihlKT92b2lkIDAhPT1pLnJlYWR5P2kucmVhZHkoZSk6ZShzZSk6KHZvaWQgMCE9PWUuc2VsZWN0b3ImJih0aGlzLnNlbGVjdG9yPWUuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWUuY29udGV4dCksc2UubWFrZUFycmF5KGUsdGhpcykpfTt5ZS5wcm90b3R5cGU9c2UuZm4sbWU9c2UoWCk7dmFyIHdlPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLGJlPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O3NlLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGUpe3ZhciB0PXNlKGUsdGhpcyksaT10Lmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPGk7ZSsrKWlmKHNlLmNvbnRhaW5zKHRoaXMsdFtlXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgaSxuPTAsbz10aGlzLmxlbmd0aCxzPVtdLHI9ZmUudGVzdChlKXx8XCJzdHJpbmdcIiE9dHlwZW9mIGU/c2UoZSx0fHx0aGlzLmNvbnRleHQpOjA7bjxvO24rKylmb3IoaT10aGlzW25dO2kmJmkhPT10O2k9aS5wYXJlbnROb2RlKWlmKGkubm9kZVR5cGU8MTEmJihyP3IuaW5kZXgoaSk+LTE6MT09PWkubm9kZVR5cGUmJnNlLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGksZSkpKXtzLnB1c2goaSk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKHMubGVuZ3RoPjE/c2UudW5pcXVlU29ydChzKTpzKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/Si5jYWxsKHNlKGUpLHRoaXNbMF0pOkouY2FsbCh0aGlzLGUuanF1ZXJ5P2VbMF06ZSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soc2UudW5pcXVlU29ydChzZS5tZXJnZSh0aGlzLmdldCgpLHNlKGUsdCkpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWU/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoZSkpfX0pLHNlLmVhY2goe3BhcmVudDpmdW5jdGlvbiBlKHQpe3ZhciBlPXQucGFyZW50Tm9kZTtyZXR1cm4gZSYmMTEhPT1lLm5vZGVUeXBlP2U6bnVsbH0scGFyZW50czpmdW5jdGlvbihlKXtyZXR1cm4gY2UoZSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIGNlKGUsXCJwYXJlbnROb2RlXCIsaSl9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBvKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIGNlKGUsXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihlKXtyZXR1cm4gY2UoZSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gY2UoZSxcIm5leHRTaWJsaW5nXCIsaSl9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIGNlKGUsXCJwcmV2aW91c1NpYmxpbmdcIixpKX0sc2libGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGhlKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gaGUoZS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29udGVudERvY3VtZW50fHxzZS5tZXJnZShbXSxlLmNoaWxkTm9kZXMpfX0sZnVuY3Rpb24oZSx0KXtzZS5mbltlXT1mdW5jdGlvbihpLG4pe3ZhciBvPXNlLm1hcCh0aGlzLHQsaSk7cmV0dXJuXCJVbnRpbFwiIT09ZS5zbGljZSgtNSkmJihuPWkpLG4mJlwic3RyaW5nXCI9PXR5cGVvZiBuJiYobz1zZS5maWx0ZXIobixvKSksdGhpcy5sZW5ndGg+MSYmKGJlW2VdfHxzZS51bmlxdWVTb3J0KG8pLHdlLnRlc3QoZSkmJm8ucmV2ZXJzZSgpKSx0aGlzLnB1c2hTdGFjayhvKX19KTt2YXIga2U9L1xcUysvZztzZS5DYWxsYmFja3M9ZnVuY3Rpb24oZSl7ZT1cInN0cmluZ1wiPT10eXBlb2YgZT9zKGUpOnNlLmV4dGVuZCh7fSxlKTt2YXIgdCxpLG4sbyxyPVtdLGE9W10sbD0tMSxkPWZ1bmN0aW9uKCl7Zm9yKG89ZS5vbmNlLG49dD0hMDthLmxlbmd0aDtsPS0xKWZvcihpPWEuc2hpZnQoKTsrK2w8ci5sZW5ndGg7KXJbbF0uYXBwbHkoaVswXSxpWzFdKT09PSExJiZlLnN0b3BPbkZhbHNlJiYobD1yLmxlbmd0aCxpPSExKTtlLm1lbW9yeXx8KGk9ITEpLHQ9ITEsbyYmKHI9aT9bXTpcIlwiKX0sdT17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIHImJihpJiYhdCYmKGw9ci5sZW5ndGgtMSxhLnB1c2goaSkpLGZ1bmN0aW9uIHQoaSl7c2UuZWFjaChpLGZ1bmN0aW9uKGksbil7c2UuaXNGdW5jdGlvbihuKT9lLnVuaXF1ZSYmdS5oYXMobil8fHIucHVzaChuKTpuJiZuLmxlbmd0aCYmXCJzdHJpbmdcIiE9PXNlLnR5cGUobikmJnQobil9KX0oYXJndW1lbnRzKSxpJiYhdCYmZCgpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gc2UuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXtmb3IodmFyIGk7KGk9c2UuaW5BcnJheSh0LHIsaSkpPi0xOylyLnNwbGljZShpLDEpLGk8PWwmJmwtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT9zZS5pbkFycmF5KGUscik+LTE6ci5sZW5ndGg+MH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gciYmKHI9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbz1hPVtdLHI9aT1cIlwiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIXJ9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gbz1hPVtdLGl8fChyPWk9XCJcIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFvfSxmaXJlV2l0aDpmdW5jdGlvbihlLGkpe3JldHVybiBvfHwoaT1pfHxbXSxpPVtlLGkuc2xpY2U/aS5zbGljZSgpOmldLGEucHVzaChpKSx0fHxkKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gdS5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIW59fTtyZXR1cm4gdX0sc2UuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgdD1bW1wicmVzb2x2ZVwiLFwiZG9uZVwiLHNlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFwicmVzb2x2ZWRcIl0sW1wicmVqZWN0XCIsXCJmYWlsXCIsc2UuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXCJyZWplY3RlZFwiXSxbXCJub3RpZnlcIixcInByb2dyZXNzXCIsc2UuQ2FsbGJhY2tzKFwibWVtb3J5XCIpXV0saT1cInBlbmRpbmdcIixuPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBpfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gby5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LHRoZW46ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHM7cmV0dXJuIHNlLkRlZmVycmVkKGZ1bmN0aW9uKGkpe3NlLmVhY2godCxmdW5jdGlvbih0LHMpe3ZhciByPXNlLmlzRnVuY3Rpb24oZVt0XSkmJmVbdF07b1tzWzFdXShmdW5jdGlvbigpe3ZhciBlPXImJnIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJnNlLmlzRnVuY3Rpb24oZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyhpLm5vdGlmeSkuZG9uZShpLnJlc29sdmUpLmZhaWwoaS5yZWplY3QpOmlbc1swXStcIldpdGhcIl0odGhpcz09PW4/aS5wcm9taXNlKCk6dGhpcyxyP1tlXTphcmd1bWVudHMpfSl9KSxlPW51bGx9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWU/c2UuZXh0ZW5kKGUsbik6bn19LG89e307cmV0dXJuIG4ucGlwZT1uLnRoZW4sc2UuZWFjaCh0LGZ1bmN0aW9uKGUscyl7dmFyIHI9c1syXSxhPXNbM107bltzWzFdXT1yLmFkZCxhJiZyLmFkZChmdW5jdGlvbigpe2k9YX0sdFsxXmVdWzJdLmRpc2FibGUsdFsyXVsyXS5sb2NrKSxvW3NbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIG9bc1swXStcIldpdGhcIl0odGhpcz09PW8/bjp0aGlzLGFyZ3VtZW50cyksdGhpc30sb1tzWzBdK1wiV2l0aFwiXT1yLmZpcmVXaXRofSksbi5wcm9taXNlKG8pLGUmJmUuY2FsbChvLG8pLG99LHdoZW46ZnVuY3Rpb24oZSl7dmFyIHQsaSxuLG89MCxzPUcuY2FsbChhcmd1bWVudHMpLHI9cy5sZW5ndGgsYT0xIT09cnx8ZSYmc2UuaXNGdW5jdGlvbihlLnByb21pc2UpP3I6MCxsPTE9PT1hP2U6c2UuRGVmZXJyZWQoKSxkPWZ1bmN0aW9uKGUsaSxuKXtyZXR1cm4gZnVuY3Rpb24obyl7aVtlXT10aGlzLG5bZV09YXJndW1lbnRzLmxlbmd0aD4xP0cuY2FsbChhcmd1bWVudHMpOm8sbj09PXQ/bC5ub3RpZnlXaXRoKGksbik6LS1hfHxsLnJlc29sdmVXaXRoKGksbil9fTtpZihyPjEpZm9yKHQ9bmV3IEFycmF5KHIpLGk9bmV3IEFycmF5KHIpLG49bmV3IEFycmF5KHIpO288cjtvKyspc1tvXSYmc2UuaXNGdW5jdGlvbihzW29dLnByb21pc2UpP3Nbb10ucHJvbWlzZSgpLnByb2dyZXNzKGQobyxpLHQpKS5kb25lKGQobyxuLHMpKS5mYWlsKGwucmVqZWN0KTotLWE7cmV0dXJuIGF8fGwucmVzb2x2ZVdpdGgobixzKSxsLnByb21pc2UoKX19KTt2YXIgQ2U7c2UuZm4ucmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIHNlLnJlYWR5LnByb21pc2UoKS5kb25lKGUpLHRoaXN9LHNlLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxob2xkUmVhZHk6ZnVuY3Rpb24oZSl7ZT9zZS5yZWFkeVdhaXQrKzpzZS5yZWFkeSghMCl9LHJlYWR5OmZ1bmN0aW9uKGUpeyhlPT09ITA/LS1zZS5yZWFkeVdhaXQ6c2UuaXNSZWFkeSl8fChzZS5pc1JlYWR5PSEwLGUhPT0hMCYmLS1zZS5yZWFkeVdhaXQ+MHx8KENlLnJlc29sdmVXaXRoKFgsW3NlXSksc2UuZm4udHJpZ2dlckhhbmRsZXImJihzZShYKS50cmlnZ2VySGFuZGxlcihcInJlYWR5XCIpLHNlKFgpLm9mZihcInJlYWR5XCIpKSkpfX0pLHNlLnJlYWR5LnByb21pc2U9ZnVuY3Rpb24odCl7cmV0dXJuIENlfHwoQ2U9c2UuRGVmZXJyZWQoKSxcImNvbXBsZXRlXCI9PT1YLnJlYWR5U3RhdGV8fFwibG9hZGluZ1wiIT09WC5yZWFkeVN0YXRlJiYhWC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGw/ZS5zZXRUaW1lb3V0KHNlLnJlYWR5KTooWC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLHIpLGUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixyKSkpLENlLnByb21pc2UodCl9LHNlLnJlYWR5LnByb21pc2UoKTt2YXIgJGU9ZnVuY3Rpb24gZSh0LGksbixvLHMscixhKXt2YXIgbD0wLGQ9dC5sZW5ndGgsdT1udWxsPT1uO2lmKFwib2JqZWN0XCI9PT1zZS50eXBlKG4pKXtzPSEwO2ZvcihsIGluIG4pZSh0LGksbCxuW2xdLCEwLHIsYSl9ZWxzZSBpZih2b2lkIDAhPT1vJiYocz0hMCxzZS5pc0Z1bmN0aW9uKG8pfHwoYT0hMCksdSYmKGE/KGkuY2FsbCh0LG8pLGk9bnVsbCk6KHU9aSxpPWZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gdS5jYWxsKHNlKGUpLGkpfSkpLGkpKWZvcig7bDxkO2wrKylpKHRbbF0sbixhP286by5jYWxsKHRbbF0sbCxpKHRbbF0sbikpKTtyZXR1cm4gcz90OnU/aS5jYWxsKHQpOmQ/aSh0WzBdLG4pOnJ9LHhlPWZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZXx8OT09PWUubm9kZVR5cGV8fCErZS5ub2RlVHlwZX07YS51aWQ9MSxhLnByb3RvdHlwZT17cmVnaXN0ZXI6ZnVuY3Rpb24oZSx0KXt2YXIgaT10fHx7fTtyZXR1cm4gZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109aTpPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLmV4cGFuZG8se3ZhbHVlOmksd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZVt0aGlzLmV4cGFuZG9dfSxjYWNoZTpmdW5jdGlvbihlKXtpZigheGUoZSkpcmV0dXJue307dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB0fHwodD17fSx4ZShlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxpKXt2YXIgbixvPXRoaXMuY2FjaGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpb1t0XT1pO2Vsc2UgZm9yKG4gaW4gdClvW25dPXRbbl07cmV0dXJuIG99LGdldDpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3RoaXMuY2FjaGUoZSk6ZVt0aGlzLmV4cGFuZG9dJiZlW3RoaXMuZXhwYW5kb11bdF19LGFjY2VzczpmdW5jdGlvbihlLHQsaSl7dmFyIG47cmV0dXJuIHZvaWQgMD09PXR8fHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1pPyhuPXRoaXMuZ2V0KGUsdCksdm9pZCAwIT09bj9uOnRoaXMuZ2V0KGUsc2UuY2FtZWxDYXNlKHQpKSk6KHRoaXMuc2V0KGUsdCxpKSx2b2lkIDAhPT1pP2k6dCl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBpLG4sbyxzPWVbdGhpcy5leHBhbmRvXTtpZih2b2lkIDAhPT1zKXtpZih2b2lkIDA9PT10KXRoaXMucmVnaXN0ZXIoZSk7ZWxzZXtzZS5pc0FycmF5KHQpP249dC5jb25jYXQodC5tYXAoc2UuY2FtZWxDYXNlKSk6KG89c2UuY2FtZWxDYXNlKHQpLHQgaW4gcz9uPVt0LG9dOihuPW8sbj1uIGluIHM/W25dOm4ubWF0Y2goa2UpfHxbXSkpLGk9bi5sZW5ndGg7Zm9yKDtpLS07KWRlbGV0ZSBzW25baV1dfSh2b2lkIDA9PT10fHxzZS5pc0VtcHR5T2JqZWN0KHMpKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgZVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT10JiYhc2UuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBUZT1uZXcgYSxTZT1uZXcgYSxfZT0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sRmU9L1tBLVpdL2c7c2UuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBTZS5oYXNEYXRhKGUpfHxUZS5oYXNEYXRhKGUpfSxkYXRhOmZ1bmN0aW9uKGUsdCxpKXtyZXR1cm4gU2UuYWNjZXNzKGUsdCxpKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe1NlLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIFRlLmFjY2VzcyhlLHQsaSl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGUsdCl7VGUucmVtb3ZlKGUsdCl9fSksc2UuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uIGUodCxpKXt2YXIgbixvLGUscz10aGlzWzBdLHI9cyYmcy5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PXQpe2lmKHRoaXMubGVuZ3RoJiYoZT1TZS5nZXQocyksMT09PXMubm9kZVR5cGUmJiFUZS5nZXQocyxcImhhc0RhdGFBdHRyc1wiKSkpe2ZvcihuPXIubGVuZ3RoO24tLTspcltuXSYmKG89cltuXS5uYW1lLDA9PT1vLmluZGV4T2YoXCJkYXRhLVwiKSYmKG89c2UuY2FtZWxDYXNlKG8uc2xpY2UoNSkpLGwocyxvLGVbb10pKSk7VGUuc2V0KHMsXCJoYXNEYXRhQXR0cnNcIiwhMCl9cmV0dXJuIGV9cmV0dXJuXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOl90eXBlb2YodCkpP3RoaXMuZWFjaChmdW5jdGlvbigpe1NlLnNldCh0aGlzLHQpfSk6JGUodGhpcyxmdW5jdGlvbihlKXt2YXIgaSxuO2lmKHMmJnZvaWQgMD09PWUpe2lmKGk9U2UuZ2V0KHMsdCl8fFNlLmdldChzLHQucmVwbGFjZShGZSxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpKSx2b2lkIDAhPT1pKXJldHVybiBpO2lmKG49c2UuY2FtZWxDYXNlKHQpLGk9U2UuZ2V0KHMsbiksdm9pZCAwIT09aSlyZXR1cm4gaTtpZihpPWwocyxuLHZvaWQgMCksdm9pZCAwIT09aSlyZXR1cm4gaX1lbHNlIG49c2UuY2FtZWxDYXNlKHQpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPVNlLmdldCh0aGlzLG4pO1NlLnNldCh0aGlzLG4sZSksdC5pbmRleE9mKFwiLVwiKT4tMSYmdm9pZCAwIT09aSYmU2Uuc2V0KHRoaXMsdCxlKX0pfSxudWxsLGksYXJndW1lbnRzLmxlbmd0aD4xLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtTZS5yZW1vdmUodGhpcyxlKX0pfX0pLHNlLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24gZSh0LGksbil7dmFyIGU7aWYodClyZXR1cm4gaT0oaXx8XCJmeFwiKStcInF1ZXVlXCIsZT1UZS5nZXQodCxpKSxuJiYoIWV8fHNlLmlzQXJyYXkobik/ZT1UZS5hY2Nlc3ModCxpLHNlLm1ha2VBcnJheShuKSk6ZS5wdXNoKG4pKSxlfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8XCJmeFwiO3ZhciBpPXNlLnF1ZXVlKGUsdCksbj1pLmxlbmd0aCxvPWkuc2hpZnQoKSxzPXNlLl9xdWV1ZUhvb2tzKGUsdCkscj1mdW5jdGlvbigpe3NlLmRlcXVldWUoZSx0KX07XCJpbnByb2dyZXNzXCI9PT1vJiYobz1pLnNoaWZ0KCksbi0tKSxvJiYoXCJmeFwiPT09dCYmaS51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSxkZWxldGUgcy5zdG9wLG8uY2FsbChlLHIscykpLCFuJiZzJiZzLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oZSx0KXt2YXIgaT10K1wicXVldWVIb29rc1wiO3JldHVybiBUZS5nZXQoZSxpKXx8VGUuYWNjZXNzKGUsaSx7ZW1wdHk6c2UuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7VGUucmVtb3ZlKGUsW3QrXCJxdWV1ZVwiLGldKX0pfSl9fSksc2UuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihlLHQpe3ZhciBpPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGUmJih0PWUsZT1cImZ4XCIsaS0tKSxhcmd1bWVudHMubGVuZ3RoPGk/c2UucXVldWUodGhpc1swXSxlKTp2b2lkIDA9PT10P3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9c2UucXVldWUodGhpcyxlLHQpO3NlLl9xdWV1ZUhvb2tzKHRoaXMsZSksXCJmeFwiPT09ZSYmXCJpbnByb2dyZXNzXCIhPT1pWzBdJiZzZS5kZXF1ZXVlKHRoaXMsZSl9KX0sZGVxdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7c2UuZGVxdWV1ZSh0aGlzLGUpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihlLHQpe3ZhciBpLG49MSxvPXNlLkRlZmVycmVkKCkscz10aGlzLHI9dGhpcy5sZW5ndGgsYT1mdW5jdGlvbigpey0tbnx8by5yZXNvbHZlV2l0aChzLFtzXSl9O2ZvcihcInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHxcImZ4XCI7ci0tOylpPVRlLmdldChzW3JdLGUrXCJxdWV1ZUhvb2tzXCIpLGkmJmkuZW1wdHkmJihuKyssaS5lbXB0eS5hZGQoYSkpO3JldHVybiBhKCksby5wcm9taXNlKHQpfX0pO3ZhciB6ZT0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsQWU9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIremUrXCIpKFthLXolXSopJFwiLFwiaVwiKSxPZT1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sRWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT10fHxlLFwibm9uZVwiPT09c2UuY3NzKGUsXCJkaXNwbGF5XCIpfHwhc2UuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfSxQZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxEZT0vPChbXFx3Oi1dKykvLEhlPS9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksTWU9e29wdGlvbjpbMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTtNZS5vcHRncm91cD1NZS5vcHRpb24sTWUudGJvZHk9TWUudGZvb3Q9TWUuY29sZ3JvdXA9TWUuY2FwdGlvbj1NZS50aGVhZCxNZS50aD1NZS50ZDt2YXIgamU9Lzx8JiM/XFx3KzsvOyFmdW5jdGlvbigpe3ZhciBlPVguY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHQ9ZS5hcHBlbmRDaGlsZChYLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGk9WC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7aS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxpLnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIixcImNoZWNrZWRcIiksaS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJ0XCIpLHQuYXBwZW5kQ2hpbGQoaSksbmUuY2hlY2tDbG9uZT10LmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCx0LmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixuZS5ub0Nsb25lQ2hlY2tlZD0hIXQuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciBxZT0vXmtleS8sTGU9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFJlPS9eKFteLl0qKSg/OlxcLiguKyl8KS87c2UuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oZSx0LGksbixvKXt2YXIgcyxyLGEsbCxkLHUsYyxoLGYscCx2LG09VGUuZ2V0KGUpO2lmKG0pZm9yKGkuaGFuZGxlciYmKHM9aSxpPXMuaGFuZGxlcixvPXMuc2VsZWN0b3IpLGkuZ3VpZHx8KGkuZ3VpZD1zZS5ndWlkKyspLChsPW0uZXZlbnRzKXx8KGw9bS5ldmVudHM9e30pLChyPW0uaGFuZGxlKXx8KHI9bS5oYW5kbGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlJiZzZS5ldmVudC50cmlnZ2VyZWQhPT10LnR5cGU/c2UuZXZlbnQuZGlzcGF0Y2guYXBwbHkoZSxhcmd1bWVudHMpOnZvaWQgMH0pLHQ9KHR8fFwiXCIpLm1hdGNoKGtlKXx8W1wiXCJdLGQ9dC5sZW5ndGg7ZC0tOylhPVJlLmV4ZWModFtkXSl8fFtdLGY9dj1hWzFdLHA9KGFbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksZiYmKGM9c2UuZXZlbnQuc3BlY2lhbFtmXXx8e30sZj0obz9jLmRlbGVnYXRlVHlwZTpjLmJpbmRUeXBlKXx8ZixjPXNlLmV2ZW50LnNwZWNpYWxbZl18fHt9LHU9c2UuZXh0ZW5kKHt0eXBlOmYsb3JpZ1R5cGU6dixkYXRhOm4saGFuZGxlcjppLGd1aWQ6aS5ndWlkLHNlbGVjdG9yOm8sbmVlZHNDb250ZXh0Om8mJnNlLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QobyksbmFtZXNwYWNlOnAuam9pbihcIi5cIil9LHMpLChoPWxbZl0pfHwoaD1sW2ZdPVtdLGguZGVsZWdhdGVDb3VudD0wLGMuc2V0dXAmJmMuc2V0dXAuY2FsbChlLG4scCxyKSE9PSExfHxlLmFkZEV2ZW50TGlzdGVuZXImJmUuYWRkRXZlbnRMaXN0ZW5lcihmLHIpKSxjLmFkZCYmKGMuYWRkLmNhbGwoZSx1KSx1LmhhbmRsZXIuZ3VpZHx8KHUuaGFuZGxlci5ndWlkPWkuZ3VpZCkpLG8/aC5zcGxpY2UoaC5kZWxlZ2F0ZUNvdW50KyssMCx1KTpoLnB1c2godSksc2UuZXZlbnQuZ2xvYmFsW2ZdPSEwKX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxpLG4sbyl7dmFyIHMscixhLGwsZCx1LGMsaCxmLHAsdixtPVRlLmhhc0RhdGEoZSkmJlRlLmdldChlKTtpZihtJiYobD1tLmV2ZW50cykpe2Zvcih0PSh0fHxcIlwiKS5tYXRjaChrZSl8fFtcIlwiXSxkPXQubGVuZ3RoO2QtLTspaWYoYT1SZS5leGVjKHRbZF0pfHxbXSxmPXY9YVsxXSxwPShhWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGYpe2ZvcihjPXNlLmV2ZW50LnNwZWNpYWxbZl18fHt9LGY9KG4/Yy5kZWxlZ2F0ZVR5cGU6Yy5iaW5kVHlwZSl8fGYsaD1sW2ZdfHxbXSxhPWFbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitwLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxyPXM9aC5sZW5ndGg7cy0tOyl1PWhbc10sIW8mJnYhPT11Lm9yaWdUeXBlfHxpJiZpLmd1aWQhPT11Lmd1aWR8fGEmJiFhLnRlc3QodS5uYW1lc3BhY2UpfHxuJiZuIT09dS5zZWxlY3RvciYmKFwiKipcIiE9PW58fCF1LnNlbGVjdG9yKXx8KGguc3BsaWNlKHMsMSksdS5zZWxlY3RvciYmaC5kZWxlZ2F0ZUNvdW50LS0sYy5yZW1vdmUmJmMucmVtb3ZlLmNhbGwoZSx1KSk7ciYmIWgubGVuZ3RoJiYoYy50ZWFyZG93biYmYy50ZWFyZG93bi5jYWxsKGUscCxtLmhhbmRsZSkhPT0hMXx8c2UucmVtb3ZlRXZlbnQoZSxmLG0uaGFuZGxlKSxkZWxldGUgbFtmXSl9ZWxzZSBmb3IoZiBpbiBsKXNlLmV2ZW50LnJlbW92ZShlLGYrdFtkXSxpLG4sITApO3NlLmlzRW1wdHlPYmplY3QobCkmJlRlLnJlbW92ZShlLFwiaGFuZGxlIGV2ZW50c1wiKX19LGRpc3BhdGNoOmZ1bmN0aW9uKGUpe2U9c2UuZXZlbnQuZml4KGUpO3ZhciB0LGksbixvLHMscj1bXSxhPUcuY2FsbChhcmd1bWVudHMpLGw9KFRlLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbZS50eXBlXXx8W10sZD1zZS5ldmVudC5zcGVjaWFsW2UudHlwZV18fHt9O2lmKGFbMF09ZSxlLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWQucHJlRGlzcGF0Y2h8fGQucHJlRGlzcGF0Y2guY2FsbCh0aGlzLGUpIT09ITEpe2ZvcihyPXNlLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxlLGwpLHQ9MDsobz1yW3QrK10pJiYhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOylmb3IoZS5jdXJyZW50VGFyZ2V0PW8uZWxlbSxpPTA7KHM9by5oYW5kbGVyc1tpKytdKSYmIWUuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTspZS5ybmFtZXNwYWNlJiYhZS5ybmFtZXNwYWNlLnRlc3Qocy5uYW1lc3BhY2UpfHwoZS5oYW5kbGVPYmo9cyxlLmRhdGE9cy5kYXRhLG49KChzZS5ldmVudC5zcGVjaWFsW3Mub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxzLmhhbmRsZXIpLmFwcGx5KG8uZWxlbSxhKSx2b2lkIDAhPT1uJiYoZS5yZXN1bHQ9bik9PT0hMSYmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKSk7cmV0dXJuIGQucG9zdERpc3BhdGNoJiZkLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsZSksZS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLHQpe3ZhciBpLG4sbyxzLHI9W10sYT10LmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZihhJiZsLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09ZS50eXBlfHxpc05hTihlLmJ1dHRvbil8fGUuYnV0dG9uPDEpKWZvcig7bCE9PXRoaXM7bD1sLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWwubm9kZVR5cGUmJihsLmRpc2FibGVkIT09ITB8fFwiY2xpY2tcIiE9PWUudHlwZSkpe2ZvcihuPVtdLGk9MDtpPGE7aSsrKXM9dFtpXSxvPXMuc2VsZWN0b3IrXCIgXCIsdm9pZCAwPT09bltvXSYmKG5bb109cy5uZWVkc0NvbnRleHQ/c2Uobyx0aGlzKS5pbmRleChsKT4tMTpzZS5maW5kKG8sdGhpcyxudWxsLFtsXSkubGVuZ3RoKSxuW29dJiZuLnB1c2gocyk7bi5sZW5ndGgmJnIucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOm59KX1yZXR1cm4gYTx0Lmxlbmd0aCYmci5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6dC5zbGljZShhKX0pLHJ9LHByb3BzOlwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxmaXhIb29rczp7fSxrZXlIb29rczp7cHJvcHM6XCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLGZpbHRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1lLndoaWNoJiYoZS53aGljaD1udWxsIT10LmNoYXJDb2RlP3QuY2hhckNvZGU6dC5rZXlDb2RlKSxlfX0sbW91c2VIb29rczp7cHJvcHM6XCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksZmlsdGVyOmZ1bmN0aW9uKGUsdCl7dmFyIGksbixvLHM9dC5idXR0b247cmV0dXJuIG51bGw9PWUucGFnZVgmJm51bGwhPXQuY2xpZW50WCYmKGk9ZS50YXJnZXQub3duZXJEb2N1bWVudHx8WCxuPWkuZG9jdW1lbnRFbGVtZW50LG89aS5ib2R5LGUucGFnZVg9dC5jbGllbnRYKyhuJiZuLnNjcm9sbExlZnR8fG8mJm8uc2Nyb2xsTGVmdHx8MCktKG4mJm4uY2xpZW50TGVmdHx8byYmby5jbGllbnRMZWZ0fHwwKSxlLnBhZ2VZPXQuY2xpZW50WSsobiYmbi5zY3JvbGxUb3B8fG8mJm8uc2Nyb2xsVG9wfHwwKS0obiYmbi5jbGllbnRUb3B8fG8mJm8uY2xpZW50VG9wfHwwKSksZS53aGljaHx8dm9pZCAwPT09c3x8KGUud2hpY2g9MSZzPzE6MiZzPzM6NCZzPzI6MCksZX19LGZpeDpmdW5jdGlvbihlKXtpZihlW3NlLmV4cGFuZG9dKXJldHVybiBlO3ZhciB0LGksbixvPWUudHlwZSxzPWUscj10aGlzLmZpeEhvb2tzW29dO2ZvcihyfHwodGhpcy5maXhIb29rc1tvXT1yPUxlLnRlc3Qobyk/dGhpcy5tb3VzZUhvb2tzOnFlLnRlc3Qobyk/dGhpcy5rZXlIb29rczp7fSksbj1yLnByb3BzP3RoaXMucHJvcHMuY29uY2F0KHIucHJvcHMpOnRoaXMucHJvcHMsZT1uZXcgc2UuRXZlbnQocyksdD1uLmxlbmd0aDt0LS07KWk9blt0XSxlW2ldPXNbaV07cmV0dXJuIGUudGFyZ2V0fHwoZS50YXJnZXQ9WCksMz09PWUudGFyZ2V0Lm5vZGVUeXBlJiYoZS50YXJnZXQ9ZS50YXJnZXQucGFyZW50Tm9kZSksci5maWx0ZXI/ci5maWx0ZXIoZSxzKTplfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09digpJiZ0aGlzLmZvY3VzKXJldHVybiB0aGlzLmZvY3VzKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3VzaW5cIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXM9PT12KCkmJnRoaXMuYmx1cilyZXR1cm4gdGhpcy5ibHVyKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3Vzb3V0XCJ9LGNsaWNrOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYoXCJjaGVja2JveFwiPT09dGhpcy50eXBlJiZ0aGlzLmNsaWNrJiZzZS5ub2RlTmFtZSh0aGlzLFwiaW5wdXRcIikpcmV0dXJuIHRoaXMuY2xpY2soKSwhMX0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHNlLm5vZGVOYW1lKGUudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSxzZS5yZW1vdmVFdmVudD1mdW5jdGlvbihlLHQsaSl7ZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxpKX0sc2UuRXZlbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHNlLkV2ZW50PyhlJiZlLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1lLHRoaXMudHlwZT1lLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDA9PT1lLmRlZmF1bHRQcmV2ZW50ZWQmJmUucmV0dXJuVmFsdWU9PT0hMT9mOnApOnRoaXMudHlwZT1lLHQmJnNlLmV4dGVuZCh0aGlzLHQpLHRoaXMudGltZVN0YW1wPWUmJmUudGltZVN0YW1wfHxzZS5ub3coKSx2b2lkKHRoaXNbc2UuZXhwYW5kb109ITApKTpuZXcgc2UuRXZlbnQoZSx0KX0sc2UuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpzZS5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6cCxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpwLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOnAsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZixlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BQcm9wYWdhdGlvbigpfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD1mLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxzZS5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGUsdCl7c2UuZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOnQsYmluZFR5cGU6dCxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIGksbj10aGlzLG89ZS5yZWxhdGVkVGFyZ2V0LHM9ZS5oYW5kbGVPYmo7cmV0dXJuIG8mJihvPT09bnx8c2UuY29udGFpbnMobixvKSl8fChlLnR5cGU9cy5vcmlnVHlwZSxpPXMuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZS50eXBlPXQpLGl9fX0pLHNlLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oZSx0LGksbil7cmV0dXJuIG0odGhpcyxlLHQsaSxuKX0sb25lOmZ1bmN0aW9uKGUsdCxpLG4pe3JldHVybiBtKHRoaXMsZSx0LGksbiwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbixvO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiBuPWUuaGFuZGxlT2JqLHNlKGUuZGVsZWdhdGVUYXJnZXQpLm9mZihuLm5hbWVzcGFjZT9uLm9yaWdUeXBlK1wiLlwiK24ubmFtZXNwYWNlOm4ub3JpZ1R5cGUsbi5zZWxlY3RvcixuLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOl90eXBlb2YoZSkpKXtmb3IobyBpbiBlKXRoaXMub2ZmKG8sdCxlW29dKTtyZXR1cm4gdGhpc31yZXR1cm4gdCE9PSExJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwoaT10LHQ9dm9pZCAwKSxpPT09ITEmJihpPXApLHRoaXMuZWFjaChmdW5jdGlvbigpe3NlLmV2ZW50LnJlbW92ZSh0aGlzLGUsaSx0KX0pfX0pO3ZhciBOZT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLEllPS88c2NyaXB0fDxzdHlsZXw8bGluay9pLEJlPS9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksV2U9L150cnVlXFwvKC4qKS8sWWU9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO3NlLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKE5lLFwiPCQxPjwvJDI+XCIpfSxjbG9uZTpmdW5jdGlvbiBlKHQsaSxuKXt2YXIgbyxzLHIsYSxlPXQuY2xvbmVOb2RlKCEwKSxsPXNlLmNvbnRhaW5zKHQub3duZXJEb2N1bWVudCx0KTtpZighKG5lLm5vQ2xvbmVDaGVja2VkfHwxIT09dC5ub2RlVHlwZSYmMTEhPT10Lm5vZGVUeXBlfHxzZS5pc1hNTERvYyh0KSkpZm9yKGE9dShlKSxyPXUodCksbz0wLHM9ci5sZW5ndGg7bzxzO28rKylrKHJbb10sYVtvXSk7aWYoaSlpZihuKWZvcihyPXJ8fHUodCksYT1hfHx1KGUpLG89MCxzPXIubGVuZ3RoO288cztvKyspYihyW29dLGFbb10pO2Vsc2UgYih0LGUpO3JldHVybiBhPXUoZSxcInNjcmlwdFwiKSxhLmxlbmd0aD4wJiZjKGEsIWwmJnUodCxcInNjcmlwdFwiKSksZX0sY2xlYW5EYXRhOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxpLG4sbz1zZS5ldmVudC5zcGVjaWFsLHM9MDt2b2lkIDAhPT0oaT1lW3NdKTtzKyspaWYoeGUoaSkpe2lmKHQ9aVtUZS5leHBhbmRvXSl7aWYodC5ldmVudHMpZm9yKG4gaW4gdC5ldmVudHMpb1tuXT9zZS5ldmVudC5yZW1vdmUoaSxuKTpzZS5yZW1vdmVFdmVudChpLG4sdC5oYW5kbGUpO2lbVGUuZXhwYW5kb109dm9pZCAwfWlbU2UuZXhwYW5kb10mJihpW1NlLmV4cGFuZG9dPXZvaWQgMCl9fX0pLHNlLmZuLmV4dGVuZCh7ZG9tTWFuaXA6QyxkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuICQodGhpcyxlLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiAkKHRoaXMsZSl9LHRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuICRlKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/c2UudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBDKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1nKHRoaXMsZSk7dC5hcHBlbmRDaGlsZChlKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBDKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1nKHRoaXMsZSk7dC5pbnNlcnRCZWZvcmUoZSx0LmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gQyh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBDKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJihzZS5jbGVhbkRhdGEodShlLCExKSksZS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsIT1lJiZlLHQ9bnVsbD09dD9lOnQsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gc2UuY2xvbmUodGhpcyxlLHQpfSl9LGh0bWw6ZnVuY3Rpb24oZSl7cmV0dXJuICRlKHRoaXMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc1swXXx8e30saT0wLG49dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09ZSYmMT09PXQubm9kZVR5cGUpcmV0dXJuIHQuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhSWUudGVzdChlKSYmIU1lWyhEZS5leGVjKGUpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2U9c2UuaHRtbFByZWZpbHRlcihlKTt0cnl7Zm9yKDtpPG47aSsrKXQ9dGhpc1tpXXx8e30sMT09PXQubm9kZVR5cGUmJihzZS5jbGVhbkRhdGEodSh0LCExKSksdC5pbm5lckhUTUw9ZSk7dD0wfWNhdGNoKGUpe319dCYmdGhpcy5lbXB0eSgpLmFwcGVuZChlKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBDKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMucGFyZW50Tm9kZTtzZS5pbkFycmF5KHRoaXMsZSk8MCYmKHNlLmNsZWFuRGF0YSh1KHRoaXMpKSxpJiZpLnJlcGxhY2VDaGlsZCh0LHRoaXMpKX0sZSl9fSksc2UuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihlLHQpe3NlLmZuW2VdPWZ1bmN0aW9uKGUpe2Zvcih2YXIgaSxuPVtdLG89c2UoZSkscz1vLmxlbmd0aC0xLHI9MDtyPD1zO3IrKylpPXI9PT1zP3RoaXM6dGhpcy5jbG9uZSghMCksc2Uob1tyXSlbdF0oaSksWi5hcHBseShuLGkuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgUWUsVWU9e0hUTUw6XCJibG9ja1wiLEJPRFk6XCJibG9ja1wifSxLZT0vXm1hcmdpbi8sWGU9bmV3IFJlZ0V4cChcIl4oXCIremUrXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksR2U9ZnVuY3Rpb24odCl7dmFyIGk9dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBpJiZpLm9wZW5lcnx8KGk9ZSksaS5nZXRDb21wdXRlZFN0eWxlKHQpfSxWZT1mdW5jdGlvbihlLHQsaSxuKXt2YXIgbyxzLHI9e307Zm9yKHMgaW4gdClyW3NdPWUuc3R5bGVbc10sZS5zdHlsZVtzXT10W3NdO289aS5hcHBseShlLG58fFtdKTtmb3IocyBpbiB0KWUuc3R5bGVbc109cltzXTtyZXR1cm4gb30sWmU9WC5kb2N1bWVudEVsZW1lbnQ7IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2Euc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7dG9wOjElO3dpZHRoOjUwJVwiLGEuaW5uZXJIVE1MPVwiXCIsWmUuYXBwZW5kQ2hpbGQocik7dmFyIHQ9ZS5nZXRDb21wdXRlZFN0eWxlKGEpO2k9XCIxJVwiIT09dC50b3Ascz1cIjJweFwiPT09dC5tYXJnaW5MZWZ0LG49XCI0cHhcIj09PXQud2lkdGgsYS5zdHlsZS5tYXJnaW5SaWdodD1cIjUwJVwiLG89XCI0cHhcIj09PXQubWFyZ2luUmlnaHQsWmUucmVtb3ZlQ2hpbGQocil9dmFyIGksbixvLHMscj1YLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYT1YLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5zdHlsZSYmKGEuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGEuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cIlwiLG5lLmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1hLnN0eWxlLmJhY2tncm91bmRDbGlwLHIuc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsci5hcHBlbmRDaGlsZChhKSxzZS5leHRlbmQobmUse3BpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLGl9LGJveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW4mJnQoKSxufSxwaXhlbE1hcmdpblJpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW4mJnQoKSxvfSxyZWxpYWJsZU1hcmdpbkxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09biYmdCgpLHN9LHJlbGlhYmxlTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXt2YXIgdCxpPWEuYXBwZW5kQ2hpbGQoWC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtyZXR1cm4gaS5zdHlsZS5jc3NUZXh0PWEuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCIsaS5zdHlsZS5tYXJnaW5SaWdodD1pLnN0eWxlLndpZHRoPVwiMFwiLGEuc3R5bGUud2lkdGg9XCIxcHhcIixaZS5hcHBlbmRDaGlsZChyKSx0PSFwYXJzZUZsb2F0KGUuZ2V0Q29tcHV0ZWRTdHlsZShpKS5tYXJnaW5SaWdodCksWmUucmVtb3ZlQ2hpbGQociksYS5yZW1vdmVDaGlsZChpKSx0fX0pKX0oKTt2YXIgSmU9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLGV0PXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSx0dD17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9LGl0PVtcIldlYmtpdFwiLFwiT1wiLFwiTW96XCIsXCJtc1wiXSxudD1YLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7c2UuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIGk9UyhlLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09aT9cIjFcIjppfX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOntmbG9hdDpcImNzc0Zsb2F0XCJ9LHN0eWxlOmZ1bmN0aW9uIGUodCxpLG4sbyl7aWYodCYmMyE9PXQubm9kZVR5cGUmJjghPT10Lm5vZGVUeXBlJiZ0LnN0eWxlKXt2YXIgcyxyLGEsbD1zZS5jYW1lbENhc2UoaSksZT10LnN0eWxlO3JldHVybiBpPXNlLmNzc1Byb3BzW2xdfHwoc2UuY3NzUHJvcHNbbF09RihsKXx8bCksYT1zZS5jc3NIb29rc1tpXXx8c2UuY3NzSG9va3NbbF0sdm9pZCAwPT09bj9hJiZcImdldFwiaW4gYSYmdm9pZCAwIT09KHM9YS5nZXQodCwhMSxvKSk/czplW2ldOihyPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBuP1widW5kZWZpbmVkXCI6X3R5cGVvZihuKSxcInN0cmluZ1wiPT09ciYmKHM9QWUuZXhlYyhuKSkmJnNbMV0mJihuPWQodCxpLHMpLHI9XCJudW1iZXJcIiksbnVsbCE9biYmbj09PW4mJihcIm51bWJlclwiPT09ciYmKG4rPXMmJnNbM118fChzZS5jc3NOdW1iZXJbbF0/XCJcIjpcInB4XCIpKSxuZS5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1ufHwwIT09aS5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGVbaV09XCJpbmhlcml0XCIpLGEmJlwic2V0XCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldCh0LG4sbykpfHwoZVtpXT1uKSksdm9pZCAwKX19LGNzczpmdW5jdGlvbihlLHQsaSxuKXt2YXIgbyxzLHIsYT1zZS5jYW1lbENhc2UodCk7cmV0dXJuIHQ9c2UuY3NzUHJvcHNbYV18fChzZS5jc3NQcm9wc1thXT1GKGEpfHxhKSxyPXNlLmNzc0hvb2tzW3RdfHxzZS5jc3NIb29rc1thXSxyJiZcImdldFwiaW4gciYmKG89ci5nZXQoZSwhMCxpKSksdm9pZCAwPT09byYmKG89UyhlLHQsbikpLFwibm9ybWFsXCI9PT1vJiZ0IGluIHR0JiYobz10dFt0XSksXCJcIj09PWl8fGk/KHM9cGFyc2VGbG9hdChvKSxpPT09ITB8fGlzRmluaXRlKHMpP3N8fDA6byk6b319KSxzZS5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oZSx0KXtzZS5jc3NIb29rc1t0XT17Z2V0OmZ1bmN0aW9uKGUsaSxuKXtpZihpKXJldHVybiBKZS50ZXN0KHNlLmNzcyhlLFwiZGlzcGxheVwiKSkmJjA9PT1lLm9mZnNldFdpZHRoP1ZlKGUsZXQsZnVuY3Rpb24oKXtyZXR1cm4gTyhlLHQsbil9KTpPKGUsdCxuKX0sc2V0OmZ1bmN0aW9uKGUsaSxuKXt2YXIgbyxzPW4mJkdlKGUpLHI9biYmQShlLHQsbixcImJvcmRlci1ib3hcIj09PXNlLmNzcyhlLFwiYm94U2l6aW5nXCIsITEscykscyk7cmV0dXJuIHImJihvPUFlLmV4ZWMoaSkpJiZcInB4XCIhPT0ob1szXXx8XCJweFwiKSYmKGUuc3R5bGVbdF09aSxpPXNlLmNzcyhlLHQpKSx6KGUsaSxyKX19fSksc2UuY3NzSG9va3MubWFyZ2luTGVmdD1fKG5lLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoUyhlLFwibWFyZ2luTGVmdFwiKSl8fGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1WZShlLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKStcInB4XCJ9KSxzZS5jc3NIb29rcy5tYXJnaW5SaWdodD1fKG5lLnJlbGlhYmxlTWFyZ2luUmlnaHQsZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybiBWZShlLHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9LFMsW2UsXCJtYXJnaW5SaWdodFwiXSl9KSxzZS5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oZSx0KXtzZS5jc3NIb29rc1tlK3RdPXtleHBhbmQ6ZnVuY3Rpb24oaSl7Zm9yKHZhciBuPTAsbz17fSxzPVwic3RyaW5nXCI9PXR5cGVvZiBpP2kuc3BsaXQoXCIgXCIpOltpXTtuPDQ7bisrKW9bZStPZVtuXSt0XT1zW25dfHxzW24tMl18fHNbMF07cmV0dXJuIG99fSxLZS50ZXN0KGUpfHwoc2UuY3NzSG9va3NbZSt0XS5zZXQ9eil9KSxzZS5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihlLHQpe3JldHVybiAkZSh0aGlzLGZ1bmN0aW9uKGUsdCxpKXt2YXIgbixvLHM9e30scj0wO2lmKHNlLmlzQXJyYXkodCkpe2ZvcihuPUdlKGUpLG89dC5sZW5ndGg7cjxvO3IrKylzW3Rbcl1dPXNlLmNzcyhlLHRbcl0sITEsbik7cmV0dXJuIHN9cmV0dXJuIHZvaWQgMCE9PWk/c2Uuc3R5bGUoZSx0LGkpOnNlLmNzcyhlLHQpfSxlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0sc2hvdzpmdW5jdGlvbigpe3JldHVybiBFKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIEUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtFZSh0aGlzKT9zZSh0aGlzKS5zaG93KCk6c2UodGhpcykuaGlkZSgpfSl9fSksc2UuVHdlZW49UCxQLnByb3RvdHlwZT17Y29uc3RydWN0b3I6UCxpbml0OmZ1bmN0aW9uKGUsdCxpLG4sbyxzKXt0aGlzLmVsZW09ZSx0aGlzLnByb3A9aSx0aGlzLmVhc2luZz1vfHxzZS5lYXNpbmcuX2RlZmF1bHQsdGhpcy5vcHRpb25zPXQsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPW4sdGhpcy51bml0PXN8fChzZS5jc3NOdW1iZXJbaV0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1QLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBlJiZlLmdldD9lLmdldCh0aGlzKTpQLnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihlKXt2YXIgdCxpPVAucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PXNlLmVhc2luZ1t0aGlzLmVhc2luZ10oZSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qZSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTp0aGlzLnBvcz10PWUsdGhpcy5ub3c9KHRoaXMuZW5kLXRoaXMuc3RhcnQpKnQrdGhpcy5zdGFydCx0aGlzLm9wdGlvbnMuc3RlcCYmdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sdGhpcy5ub3csdGhpcyksaSYmaS5zZXQ/aS5zZXQodGhpcyk6UC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxQLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1QLnByb3RvdHlwZSxQLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PXNlLmNzcyhlLmVsZW0sZS5wcm9wLFwiXCIpLHQmJlwiYXV0b1wiIT09dD90OjApfSxzZXQ6ZnVuY3Rpb24oZSl7c2UuZnguc3RlcFtlLnByb3BdP3NlLmZ4LnN0ZXBbZS5wcm9wXShlKToxIT09ZS5lbGVtLm5vZGVUeXBlfHxudWxsPT1lLmVsZW0uc3R5bGVbc2UuY3NzUHJvcHNbZS5wcm9wXV0mJiFzZS5jc3NIb29rc1tlLnByb3BdP2UuZWxlbVtlLnByb3BdPWUubm93OnNlLnN0eWxlKGUuZWxlbSxlLnByb3AsZS5ub3crZS51bml0KX19fSxQLnByb3BIb29rcy5zY3JvbGxUb3A9UC5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGUpe2UuZWxlbS5ub2RlVHlwZSYmZS5lbGVtLnBhcmVudE5vZGUmJihlLmVsZW1bZS5wcm9wXT1lLm5vdyl9fSxzZS5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yO1xufSxfZGVmYXVsdDpcInN3aW5nXCJ9LHNlLmZ4PVAucHJvdG90eXBlLmluaXQsc2UuZnguc3RlcD17fTt2YXIgb3Qsc3QscnQ9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGF0PS9xdWV1ZUhvb2tzJC87c2UuQW5pbWF0aW9uPXNlLmV4dGVuZChMLHt0d2VlbmVyczp7XCIqXCI6W2Z1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcy5jcmVhdGVUd2VlbihlLHQpO3JldHVybiBkKGkuZWxlbSxlLEFlLmV4ZWModCksaSksaX1dfSx0d2VlbmVyOmZ1bmN0aW9uKGUsdCl7c2UuaXNGdW5jdGlvbihlKT8odD1lLGU9W1wiKlwiXSk6ZT1lLm1hdGNoKGtlKTtmb3IodmFyIGksbj0wLG89ZS5sZW5ndGg7bjxvO24rKylpPWVbbl0sTC50d2VlbmVyc1tpXT1MLnR3ZWVuZXJzW2ldfHxbXSxMLnR3ZWVuZXJzW2ldLnVuc2hpZnQodCl9LHByZWZpbHRlcnM6W2pdLHByZWZpbHRlcjpmdW5jdGlvbihlLHQpe3Q/TC5wcmVmaWx0ZXJzLnVuc2hpZnQoZSk6TC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksc2Uuc3BlZWQ9ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWUmJlwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGUpKT9zZS5leHRlbmQoe30sZSk6e2NvbXBsZXRlOml8fCFpJiZ0fHxzZS5pc0Z1bmN0aW9uKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOmkmJnR8fHQmJiFzZS5pc0Z1bmN0aW9uKHQpJiZ0fTtyZXR1cm4gbi5kdXJhdGlvbj1zZS5meC5vZmY/MDpcIm51bWJlclwiPT10eXBlb2Ygbi5kdXJhdGlvbj9uLmR1cmF0aW9uOm4uZHVyYXRpb24gaW4gc2UuZnguc3BlZWRzP3NlLmZ4LnNwZWVkc1tuLmR1cmF0aW9uXTpzZS5meC5zcGVlZHMuX2RlZmF1bHQsbnVsbCE9bi5xdWV1ZSYmbi5xdWV1ZSE9PSEwfHwobi5xdWV1ZT1cImZ4XCIpLG4ub2xkPW4uY29tcGxldGUsbi5jb21wbGV0ZT1mdW5jdGlvbigpe3NlLmlzRnVuY3Rpb24obi5vbGQpJiZuLm9sZC5jYWxsKHRoaXMpLG4ucXVldWUmJnNlLmRlcXVldWUodGhpcyxuLnF1ZXVlKX0sbn0sc2UuZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oZSx0LGksbil7cmV0dXJuIHRoaXMuZmlsdGVyKEVlKS5jc3MoXCJvcGFjaXR5XCIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6dH0sZSxpLG4pfSxhbmltYXRlOmZ1bmN0aW9uKGUsdCxpLG4pe3ZhciBvPXNlLmlzRW1wdHlPYmplY3QoZSkscz1zZS5zcGVlZCh0LGksbikscj1mdW5jdGlvbigpe3ZhciB0PUwodGhpcyxzZS5leHRlbmQoe30sZSkscyk7KG98fFRlLmdldCh0aGlzLFwiZmluaXNoXCIpKSYmdC5zdG9wKCEwKX07cmV0dXJuIHIuZmluaXNoPXIsb3x8cy5xdWV1ZT09PSExP3RoaXMuZWFjaChyKTp0aGlzLnF1ZXVlKHMucXVldWUscil9LHN0b3A6ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RvcDtkZWxldGUgZS5zdG9wLHQoaSl9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlJiYoaT10LHQ9ZSxlPXZvaWQgMCksdCYmZSE9PSExJiZ0aGlzLnF1ZXVlKGV8fFwiZnhcIixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ITAsbz1udWxsIT1lJiZlK1wicXVldWVIb29rc1wiLHM9c2UudGltZXJzLHI9VGUuZ2V0KHRoaXMpO2lmKG8pcltvXSYmcltvXS5zdG9wJiZuKHJbb10pO2Vsc2UgZm9yKG8gaW4gcilyW29dJiZyW29dLnN0b3AmJmF0LnRlc3QobykmJm4ocltvXSk7Zm9yKG89cy5sZW5ndGg7by0tOylzW29dLmVsZW0hPT10aGlzfHxudWxsIT1lJiZzW29dLnF1ZXVlIT09ZXx8KHNbb10uYW5pbS5zdG9wKGkpLHQ9ITEscy5zcGxpY2UobywxKSk7IXQmJml8fHNlLmRlcXVldWUodGhpcyxlKX0pfSxmaW5pc2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPT0hMSYmKGU9ZXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdCxpPVRlLmdldCh0aGlzKSxuPWlbZStcInF1ZXVlXCJdLG89aVtlK1wicXVldWVIb29rc1wiXSxzPXNlLnRpbWVycyxyPW4/bi5sZW5ndGg6MDtmb3IoaS5maW5pc2g9ITAsc2UucXVldWUodGhpcyxlLFtdKSxvJiZvLnN0b3AmJm8uc3RvcC5jYWxsKHRoaXMsITApLHQ9cy5sZW5ndGg7dC0tOylzW3RdLmVsZW09PT10aGlzJiZzW3RdLnF1ZXVlPT09ZSYmKHNbdF0uYW5pbS5zdG9wKCEwKSxzLnNwbGljZSh0LDEpKTtmb3IodD0wO3Q8cjt0Kyspblt0XSYmblt0XS5maW5pc2gmJm5bdF0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIGkuZmluaXNofSl9fSksc2UuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSx0KXt2YXIgaT1zZS5mblt0XTtzZS5mblt0XT1mdW5jdGlvbihlLG4sbyl7cmV0dXJuIG51bGw9PWV8fFwiYm9vbGVhblwiPT10eXBlb2YgZT9pLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUoSCh0LCEwKSxlLG4sbyl9fSksc2UuZWFjaCh7c2xpZGVEb3duOkgoXCJzaG93XCIpLHNsaWRlVXA6SChcImhpZGVcIiksc2xpZGVUb2dnbGU6SChcInRvZ2dsZVwiKSxmYWRlSW46e29wYWNpdHk6XCJzaG93XCJ9LGZhZGVPdXQ6e29wYWNpdHk6XCJoaWRlXCJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6XCJ0b2dnbGVcIn19LGZ1bmN0aW9uKGUsdCl7c2UuZm5bZV09ZnVuY3Rpb24oZSxpLG4pe3JldHVybiB0aGlzLmFuaW1hdGUodCxlLGksbil9fSksc2UudGltZXJzPVtdLHNlLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgZSx0PTAsaT1zZS50aW1lcnM7Zm9yKG90PXNlLm5vdygpO3Q8aS5sZW5ndGg7dCsrKWU9aVt0XSxlKCl8fGlbdF0hPT1lfHxpLnNwbGljZSh0LS0sMSk7aS5sZW5ndGh8fHNlLmZ4LnN0b3AoKSxvdD12b2lkIDB9LHNlLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe3NlLnRpbWVycy5wdXNoKGUpLGUoKT9zZS5meC5zdGFydCgpOnNlLnRpbWVycy5wb3AoKX0sc2UuZnguaW50ZXJ2YWw9MTMsc2UuZnguc3RhcnQ9ZnVuY3Rpb24oKXtzdHx8KHN0PWUuc2V0SW50ZXJ2YWwoc2UuZngudGljayxzZS5meC5pbnRlcnZhbCkpfSxzZS5meC5zdG9wPWZ1bmN0aW9uKCl7ZS5jbGVhckludGVydmFsKHN0KSxzdD1udWxsfSxzZS5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sc2UuZm4uZGVsYXk9ZnVuY3Rpb24odCxpKXtyZXR1cm4gdD1zZS5meD9zZS5meC5zcGVlZHNbdF18fHQ6dCxpPWl8fFwiZnhcIix0aGlzLnF1ZXVlKGksZnVuY3Rpb24oaSxuKXt2YXIgbz1lLnNldFRpbWVvdXQoaSx0KTtuLnN0b3A9ZnVuY3Rpb24oKXtlLmNsZWFyVGltZW91dChvKX19KX0sZnVuY3Rpb24oKXt2YXIgZT1YLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSx0PVguY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxpPXQuYXBwZW5kQ2hpbGQoWC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTtlLnR5cGU9XCJjaGVja2JveFwiLG5lLmNoZWNrT249XCJcIiE9PWUudmFsdWUsbmUub3B0U2VsZWN0ZWQ9aS5zZWxlY3RlZCx0LmRpc2FibGVkPSEwLG5lLm9wdERpc2FibGVkPSFpLmRpc2FibGVkLGU9WC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksZS52YWx1ZT1cInRcIixlLnR5cGU9XCJyYWRpb1wiLG5lLnJhZGlvVmFsdWU9XCJ0XCI9PT1lLnZhbHVlfSgpO3ZhciBsdCxkdD1zZS5leHByLmF0dHJIYW5kbGU7c2UuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuICRlKHRoaXMsc2UuYXR0cixlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7c2UucmVtb3ZlQXR0cih0aGlzLGUpfSl9fSksc2UuZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbixvLHM9ZS5ub2RlVHlwZTtpZigzIT09cyYmOCE9PXMmJjIhPT1zKXJldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmdldEF0dHJpYnV0ZT9zZS5wcm9wKGUsdCxpKTooMT09PXMmJnNlLmlzWE1MRG9jKGUpfHwodD10LnRvTG93ZXJDYXNlKCksbz1zZS5hdHRySG9va3NbdF18fChzZS5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9sdDp2b2lkIDApKSx2b2lkIDAhPT1pP251bGw9PT1pP3ZvaWQgc2UucmVtb3ZlQXR0cihlLHQpOm8mJlwic2V0XCJpbiBvJiZ2b2lkIDAhPT0obj1vLnNldChlLGksdCkpP246KGUuc2V0QXR0cmlidXRlKHQsaStcIlwiKSxpKTpvJiZcImdldFwiaW4gbyYmbnVsbCE9PShuPW8uZ2V0KGUsdCkpP246KG49c2UuZmluZC5hdHRyKGUsdCksbnVsbD09bj92b2lkIDA6bikpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCFuZS5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT10JiZzZS5ub2RlTmFtZShlLFwiaW5wdXRcIikpe3ZhciBpPWUudmFsdWU7cmV0dXJuIGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLHQpLGkmJihlLnZhbHVlPWkpLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgaSxuLG89MCxzPXQmJnQubWF0Y2goa2UpO2lmKHMmJjE9PT1lLm5vZGVUeXBlKWZvcig7aT1zW28rK107KW49c2UucHJvcEZpeFtpXXx8aSxzZS5leHByLm1hdGNoLmJvb2wudGVzdChpKSYmKGVbbl09ITEpLGUucmVtb3ZlQXR0cmlidXRlKGkpfX0pLGx0PXtzZXQ6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiB0PT09ITE/c2UucmVtb3ZlQXR0cihlLGkpOmUuc2V0QXR0cmlidXRlKGksaSksaX19LHNlLmVhY2goc2UuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihlLHQpe3ZhciBpPWR0W3RdfHxzZS5maW5kLmF0dHI7ZHRbdF09ZnVuY3Rpb24oZSx0LG4pe3ZhciBvLHM7cmV0dXJuIG58fChzPWR0W3RdLGR0W3RdPW8sbz1udWxsIT1pKGUsdCxuKT90LnRvTG93ZXJDYXNlKCk6bnVsbCxkdFt0XT1zKSxvfX0pO3ZhciB1dD0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLGN0PS9eKD86YXxhcmVhKSQvaTtzZS5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gJGUodGhpcyxzZS5wcm9wLGUsdCxhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1tzZS5wcm9wRml4W2VdfHxlXX0pfX0pLHNlLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsaSl7dmFyIG4sbyxzPWUubm9kZVR5cGU7aWYoMyE9PXMmJjghPT1zJiYyIT09cylyZXR1cm4gMT09PXMmJnNlLmlzWE1MRG9jKGUpfHwodD1zZS5wcm9wRml4W3RdfHx0LG89c2UucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1pP28mJlwic2V0XCJpbiBvJiZ2b2lkIDAhPT0obj1vLnNldChlLGksdCkpP246ZVt0XT1pOm8mJlwiZ2V0XCJpbiBvJiZudWxsIT09KG49by5nZXQoZSx0KSk/bjplW3RdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9c2UuZmluZC5hdHRyKGUsXCJ0YWJpbmRleFwiKTtyZXR1cm4gdD9wYXJzZUludCh0LDEwKTp1dC50ZXN0KGUubm9kZU5hbWUpfHxjdC50ZXN0KGUubm9kZU5hbWUpJiZlLmhyZWY/MDotMX19fSxwcm9wRml4Ontmb3I6XCJodG1sRm9yXCIsY2xhc3M6XCJjbGFzc05hbWVcIn19KSxuZS5vcHRTZWxlY3RlZHx8KHNlLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksc2UuZWFjaChbXCJ0YWJJbmRleFwiLFwicmVhZE9ubHlcIixcIm1heExlbmd0aFwiLFwiY2VsbFNwYWNpbmdcIixcImNlbGxQYWRkaW5nXCIsXCJyb3dTcGFuXCIsXCJjb2xTcGFuXCIsXCJ1c2VNYXBcIixcImZyYW1lQm9yZGVyXCIsXCJjb250ZW50RWRpdGFibGVcIl0sZnVuY3Rpb24oKXtzZS5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO3ZhciBodD0vW1xcdFxcclxcblxcZl0vZztzZS5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LGksbixvLHMscixhLGw9MDtpZihzZS5pc0Z1bmN0aW9uKGUpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24odCl7c2UodGhpcykuYWRkQ2xhc3MoZS5jYWxsKHRoaXMsdCxSKHRoaXMpKSl9KTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmZSlmb3IodD1lLm1hdGNoKGtlKXx8W107aT10aGlzW2wrK107KWlmKG89UihpKSxuPTE9PT1pLm5vZGVUeXBlJiYoXCIgXCIrbytcIiBcIikucmVwbGFjZShodCxcIiBcIikpe2ZvcihyPTA7cz10W3IrK107KW4uaW5kZXhPZihcIiBcIitzK1wiIFwiKTwwJiYobis9cytcIiBcIik7YT1zZS50cmltKG4pLG8hPT1hJiZpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYSl9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LGksbixvLHMscixhLGw9MDtpZihzZS5pc0Z1bmN0aW9uKGUpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24odCl7c2UodGhpcykucmVtb3ZlQ2xhc3MoZS5jYWxsKHRoaXMsdCxSKHRoaXMpKSl9KTtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5hdHRyKFwiY2xhc3NcIixcIlwiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmZSlmb3IodD1lLm1hdGNoKGtlKXx8W107aT10aGlzW2wrK107KWlmKG89UihpKSxuPTE9PT1pLm5vZGVUeXBlJiYoXCIgXCIrbytcIiBcIikucmVwbGFjZShodCxcIiBcIikpe2ZvcihyPTA7cz10W3IrK107KWZvcig7bi5pbmRleE9mKFwiIFwiK3MrXCIgXCIpPi0xOyluPW4ucmVwbGFjZShcIiBcIitzK1wiIFwiLFwiIFwiKTthPXNlLnRyaW0obiksbyE9PWEmJmkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixhKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oZSx0KXt2YXIgaT1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOl90eXBlb2YoZSk7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiB0JiZcInN0cmluZ1wiPT09aT90P3RoaXMuYWRkQ2xhc3MoZSk6dGhpcy5yZW1vdmVDbGFzcyhlKTpzZS5pc0Z1bmN0aW9uKGUpP3RoaXMuZWFjaChmdW5jdGlvbihpKXtzZSh0aGlzKS50b2dnbGVDbGFzcyhlLmNhbGwodGhpcyxpLFIodGhpcyksdCksdCl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdCxuLG8scztpZihcInN0cmluZ1wiPT09aSlmb3Iobj0wLG89c2UodGhpcykscz1lLm1hdGNoKGtlKXx8W107dD1zW24rK107KW8uaGFzQ2xhc3ModCk/by5yZW1vdmVDbGFzcyh0KTpvLmFkZENsYXNzKHQpO2Vsc2Ugdm9pZCAwIT09ZSYmXCJib29sZWFuXCIhPT1pfHwodD1SKHRoaXMpLHQmJlRlLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHQpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsdHx8ZT09PSExP1wiXCI6VGUuZ2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIpfHxcIlwiKSl9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsaSxuPTA7Zm9yKHQ9XCIgXCIrZStcIiBcIjtpPXRoaXNbbisrXTspaWYoMT09PWkubm9kZVR5cGUmJihcIiBcIitSKGkpK1wiIFwiKS5yZXBsYWNlKGh0LFwiIFwiKS5pbmRleE9mKHQpPi0xKXJldHVybiEwO3JldHVybiExfX0pO3ZhciBmdD0vXFxyL2cscHQ9L1tcXHgyMFxcdFxcclxcblxcZl0rL2c7c2UuZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24oZSl7dmFyIHQsaSxuLG89dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbj1zZS5pc0Z1bmN0aW9uKGUpLHRoaXMuZWFjaChmdW5jdGlvbihpKXt2YXIgbzsxPT09dGhpcy5ub2RlVHlwZSYmKG89bj9lLmNhbGwodGhpcyxpLHNlKHRoaXMpLnZhbCgpKTplLG51bGw9PW8/bz1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiBvP28rPVwiXCI6c2UuaXNBcnJheShvKSYmKG89c2UubWFwKG8sZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjplK1wiXCJ9KSksdD1zZS52YWxIb29rc1t0aGlzLnR5cGVdfHxzZS52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLHQmJlwic2V0XCJpbiB0JiZ2b2lkIDAhPT10LnNldCh0aGlzLG8sXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9bykpfSk7aWYobylyZXR1cm4gdD1zZS52YWxIb29rc1tvLnR5cGVdfHxzZS52YWxIb29rc1tvLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLHQmJlwiZ2V0XCJpbiB0JiZ2b2lkIDAhPT0oaT10LmdldChvLFwidmFsdWVcIikpP2k6KGk9by52YWx1ZSxcInN0cmluZ1wiPT10eXBlb2YgaT9pLnJlcGxhY2UoZnQsXCJcIik6bnVsbD09aT9cIlwiOmkpfX19KSxzZS5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1zZS5maW5kLmF0dHIoZSxcInZhbHVlXCIpO3JldHVybiBudWxsIT10P3Q6c2UudHJpbShzZS50ZXh0KGUpKS5yZXBsYWNlKHB0LFwiIFwiKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxpLG49ZS5vcHRpb25zLG89ZS5zZWxlY3RlZEluZGV4LHM9XCJzZWxlY3Qtb25lXCI9PT1lLnR5cGV8fG88MCxyPXM/bnVsbDpbXSxhPXM/bysxOm4ubGVuZ3RoLGw9bzwwP2E6cz9vOjA7bDxhO2wrKylpZihpPW5bbF0sKGkuc2VsZWN0ZWR8fGw9PT1vKSYmKG5lLm9wdERpc2FibGVkPyFpLmRpc2FibGVkOm51bGw9PT1pLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpKSYmKCFpLnBhcmVudE5vZGUuZGlzYWJsZWR8fCFzZS5ub2RlTmFtZShpLnBhcmVudE5vZGUsXCJvcHRncm91cFwiKSkpe2lmKHQ9c2UoaSkudmFsKCkscylyZXR1cm4gdDtyLnB1c2godCl9cmV0dXJuIHJ9LHNldDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgaSxuLG89ZS5vcHRpb25zLHM9c2UubWFrZUFycmF5KHQpLHI9by5sZW5ndGg7ci0tOyluPW9bcl0sKG4uc2VsZWN0ZWQ9c2UuaW5BcnJheShzZS52YWxIb29rcy5vcHRpb24uZ2V0KG4pLHMpPi0xKSYmKGk9ITApO3JldHVybiBpfHwoZS5zZWxlY3RlZEluZGV4PS0xKSxzfX19fSksc2UuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtzZS52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGUsdCl7aWYoc2UuaXNBcnJheSh0KSlyZXR1cm4gZS5jaGVja2VkPXNlLmluQXJyYXkoc2UoZSkudmFsKCksdCk+LTF9fSxuZS5jaGVja09ufHwoc2UudmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9cIm9uXCI6ZS52YWx1ZX0pfSk7dmFyIHZ0PS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztzZS5leHRlbmQoc2UuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24odCxpLG4sbyl7dmFyIHMscixhLGwsZCx1LGMsaD1bbnx8WF0sZj1pZS5jYWxsKHQsXCJ0eXBlXCIpP3QudHlwZTp0LHA9aWUuY2FsbCh0LFwibmFtZXNwYWNlXCIpP3QubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihyPWE9bj1ufHxYLDMhPT1uLm5vZGVUeXBlJiY4IT09bi5ub2RlVHlwZSYmIXZ0LnRlc3QoZitzZS5ldmVudC50cmlnZ2VyZWQpJiYoZi5pbmRleE9mKFwiLlwiKT4tMSYmKHA9Zi5zcGxpdChcIi5cIiksZj1wLnNoaWZ0KCkscC5zb3J0KCkpLGQ9Zi5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrZix0PXRbc2UuZXhwYW5kb10/dDpuZXcgc2UuRXZlbnQoZixcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6X3R5cGVvZih0KSkmJnQpLHQuaXNUcmlnZ2VyPW8/MjozLHQubmFtZXNwYWNlPXAuam9pbihcIi5cIiksdC5ybmFtZXNwYWNlPXQubmFtZXNwYWNlP25ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitwLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKTpudWxsLHQucmVzdWx0PXZvaWQgMCx0LnRhcmdldHx8KHQudGFyZ2V0PW4pLGk9bnVsbD09aT9bdF06c2UubWFrZUFycmF5KGksW3RdKSxjPXNlLmV2ZW50LnNwZWNpYWxbZl18fHt9LG98fCFjLnRyaWdnZXJ8fGMudHJpZ2dlci5hcHBseShuLGkpIT09ITEpKXtpZighbyYmIWMubm9CdWJibGUmJiFzZS5pc1dpbmRvdyhuKSl7Zm9yKGw9Yy5kZWxlZ2F0ZVR5cGV8fGYsdnQudGVzdChsK2YpfHwocj1yLnBhcmVudE5vZGUpO3I7cj1yLnBhcmVudE5vZGUpaC5wdXNoKHIpLGE9cjthPT09KG4ub3duZXJEb2N1bWVudHx8WCkmJmgucHVzaChhLmRlZmF1bHRWaWV3fHxhLnBhcmVudFdpbmRvd3x8ZSl9Zm9yKHM9MDsocj1oW3MrK10pJiYhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOyl0LnR5cGU9cz4xP2w6Yy5iaW5kVHlwZXx8Zix1PShUZS5nZXQocixcImV2ZW50c1wiKXx8e30pW3QudHlwZV0mJlRlLmdldChyLFwiaGFuZGxlXCIpLHUmJnUuYXBwbHkocixpKSx1PWQmJnJbZF0sdSYmdS5hcHBseSYmeGUocikmJih0LnJlc3VsdD11LmFwcGx5KHIsaSksdC5yZXN1bHQ9PT0hMSYmdC5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gdC50eXBlPWYsb3x8dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmYy5fZGVmYXVsdC5hcHBseShoLnBvcCgpLGkpIT09ITF8fCF4ZShuKXx8ZCYmc2UuaXNGdW5jdGlvbihuW2ZdKSYmIXNlLmlzV2luZG93KG4pJiYoYT1uW2RdLGEmJihuW2RdPW51bGwpLHNlLmV2ZW50LnRyaWdnZXJlZD1mLG5bZl0oKSxzZS5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGEmJihuW2RdPWEpKSx0LnJlc3VsdH19LHNpbXVsYXRlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1zZS5leHRlbmQobmV3IHNlLkV2ZW50LGkse3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO3NlLmV2ZW50LnRyaWdnZXIobixudWxsLHQpfX0pLHNlLmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtzZS5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBpPXRoaXNbMF07aWYoaSlyZXR1cm4gc2UuZXZlbnQudHJpZ2dlcihlLHQsaSwhMCl9fSksc2UuZWFjaChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oZSx0KXtzZS5mblt0XT1mdW5jdGlvbihlLGkpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbih0LG51bGwsZSxpKTp0aGlzLnRyaWdnZXIodCl9fSksc2UuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSxuZS5mb2N1c2luPVwib25mb2N1c2luXCJpbiBlLG5lLmZvY3VzaW58fHNlLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihlLHQpe3ZhciBpPWZ1bmN0aW9uKGUpe3NlLmV2ZW50LnNpbXVsYXRlKHQsZS50YXJnZXQsc2UuZXZlbnQuZml4KGUpKX07c2UuZXZlbnQuc3BlY2lhbFt0XT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgbj10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsbz1UZS5hY2Nlc3Mobix0KTtvfHxuLmFkZEV2ZW50TGlzdGVuZXIoZSxpLCEwKSxUZS5hY2Nlc3Mobix0LChvfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgbj10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsbz1UZS5hY2Nlc3Mobix0KS0xO28/VGUuYWNjZXNzKG4sdCxvKToobi5yZW1vdmVFdmVudExpc3RlbmVyKGUsaSwhMCksVGUucmVtb3ZlKG4sdCkpfX19KTt2YXIgbXQ9ZS5sb2NhdGlvbixndD1zZS5ub3coKSx5dD0vXFw/LztzZS5wYXJzZUpTT049ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04ucGFyc2UoZStcIlwiKX0sc2UucGFyc2VYTUw9ZnVuY3Rpb24odCl7dmFyIGk7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiBudWxsO3RyeXtpPShuZXcgZS5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0LFwidGV4dC94bWxcIil9Y2F0Y2goZSl7aT12b2lkIDB9cmV0dXJuIGkmJiFpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxzZS5lcnJvcihcIkludmFsaWQgWE1MOiBcIit0KSxpfTt2YXIgd3Q9LyMuKiQvLGJ0PS8oWz8mXSlfPVteJl0qLyxrdD0vXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLEN0PS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLCR0PS9eKD86R0VUfEhFQUQpJC8seHQ9L15cXC9cXC8vLFR0PXt9LFN0PXt9LF90PVwiKi9cIi5jb25jYXQoXCIqXCIpLEZ0PVguY3JlYXRlRWxlbWVudChcImFcIik7RnQuaHJlZj1tdC5ocmVmLHNlLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6bXQuaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDpDdC50ZXN0KG10LnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpfdCx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6c2UucGFyc2VKU09OLFwidGV4dCB4bWxcIjpzZS5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/QihCKGUsc2UuYWpheFNldHRpbmdzKSx0KTpCKHNlLmFqYXhTZXR0aW5ncyxlKX0sYWpheFByZWZpbHRlcjpOKFR0KSxhamF4VHJhbnNwb3J0Ok4oU3QpLGFqYXg6ZnVuY3Rpb24odCxpKXtmdW5jdGlvbiBuKHQsaSxuLGEpe3ZhciBkLGMseSx3LGssJD1pOzIhPT1iJiYoYj0yLGwmJmUuY2xlYXJUaW1lb3V0KGwpLG89dm9pZCAwLHI9YXx8XCJcIixDLnJlYWR5U3RhdGU9dD4wPzQ6MCxkPXQ+PTIwMCYmdDwzMDB8fDMwND09PXQsbiYmKHc9VyhoLEMsbikpLHc9WShoLHcsQyxkKSxkPyhoLmlmTW9kaWZpZWQmJihrPUMuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLGsmJihzZS5sYXN0TW9kaWZpZWRbc109ayksaz1DLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKSxrJiYoc2UuZXRhZ1tzXT1rKSksMjA0PT09dHx8XCJIRUFEXCI9PT1oLnR5cGU/JD1cIm5vY29udGVudFwiOjMwND09PXQ/JD1cIm5vdG1vZGlmaWVkXCI6KCQ9dy5zdGF0ZSxjPXcuZGF0YSx5PXcuZXJyb3IsZD0heSkpOih5PSQsIXQmJiR8fCgkPVwiZXJyb3JcIix0PDAmJih0PTApKSksQy5zdGF0dXM9dCxDLnN0YXR1c1RleHQ9KGl8fCQpK1wiXCIsZD92LnJlc29sdmVXaXRoKGYsW2MsJCxDXSk6di5yZWplY3RXaXRoKGYsW0MsJCx5XSksQy5zdGF0dXNDb2RlKGcpLGc9dm9pZCAwLHUmJnAudHJpZ2dlcihkP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFtDLGgsZD9jOnldKSxtLmZpcmVXaXRoKGYsW0MsJF0pLHUmJihwLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbQyxoXSksLS1zZS5hY3RpdmV8fHNlLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKSkpfVwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHQpKSYmKGk9dCx0PXZvaWQgMCksaT1pfHx7fTt2YXIgbyxzLHIsYSxsLGQsdSxjLGg9c2UuYWpheFNldHVwKHt9LGkpLGY9aC5jb250ZXh0fHxoLHA9aC5jb250ZXh0JiYoZi5ub2RlVHlwZXx8Zi5qcXVlcnkpP3NlKGYpOnNlLmV2ZW50LHY9c2UuRGVmZXJyZWQoKSxtPXNlLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLGc9aC5zdGF0dXNDb2RlfHx7fSx5PXt9LHc9e30sYj0wLGs9XCJjYW5jZWxlZFwiLEM9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihlKXt2YXIgdDtpZigyPT09Yil7aWYoIWEpZm9yKGE9e307dD1rdC5leGVjKHIpOylhW3RbMV0udG9Mb3dlckNhc2UoKV09dFsyXTt0PWFbZS50b0xvd2VyQ2FzZSgpXX1yZXR1cm4gbnVsbD09dD9udWxsOnR9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiAyPT09Yj9yOm51bGx9LHNldFJlcXVlc3RIZWFkZXI6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGJ8fChlPXdbaV09d1tpXXx8ZSx5W2VdPXQpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGJ8fChoLm1pbWVUeXBlPWUpLHRoaXN9LHN0YXR1c0NvZGU6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoZSlpZihiPDIpZm9yKHQgaW4gZSlnW3RdPVtnW3RdLGVbdF1dO2Vsc2UgQy5hbHdheXMoZVtDLnN0YXR1c10pO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihlKXt2YXIgdD1lfHxrO3JldHVybiBvJiZvLmFib3J0KHQpLG4oMCx0KSx0aGlzfX07aWYodi5wcm9taXNlKEMpLmNvbXBsZXRlPW0uYWRkLEMuc3VjY2Vzcz1DLmRvbmUsQy5lcnJvcj1DLmZhaWwsaC51cmw9KCh0fHxoLnVybHx8bXQuaHJlZikrXCJcIikucmVwbGFjZSh3dCxcIlwiKS5yZXBsYWNlKHh0LG10LnByb3RvY29sK1wiLy9cIiksaC50eXBlPWkubWV0aG9kfHxpLnR5cGV8fGgubWV0aG9kfHxoLnR5cGUsaC5kYXRhVHlwZXM9c2UudHJpbShoLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChrZSl8fFtcIlwiXSxudWxsPT1oLmNyb3NzRG9tYWluKXtkPVguY3JlYXRlRWxlbWVudChcImFcIik7dHJ5e2QuaHJlZj1oLnVybCxkLmhyZWY9ZC5ocmVmLGguY3Jvc3NEb21haW49RnQucHJvdG9jb2wrXCIvL1wiK0Z0Lmhvc3QhPWQucHJvdG9jb2wrXCIvL1wiK2QuaG9zdH1jYXRjaChlKXtoLmNyb3NzRG9tYWluPSEwfX1pZihoLmRhdGEmJmgucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiBoLmRhdGEmJihoLmRhdGE9c2UucGFyYW0oaC5kYXRhLGgudHJhZGl0aW9uYWwpKSxJKFR0LGgsaSxDKSwyPT09YilyZXR1cm4gQzt1PXNlLmV2ZW50JiZoLmdsb2JhbCx1JiYwPT09c2UuYWN0aXZlKysmJnNlLmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksaC50eXBlPWgudHlwZS50b1VwcGVyQ2FzZSgpLGguaGFzQ29udGVudD0hJHQudGVzdChoLnR5cGUpLHM9aC51cmwsaC5oYXNDb250ZW50fHwoaC5kYXRhJiYocz1oLnVybCs9KHl0LnRlc3Qocyk/XCImXCI6XCI/XCIpK2guZGF0YSxkZWxldGUgaC5kYXRhKSxoLmNhY2hlPT09ITEmJihoLnVybD1idC50ZXN0KHMpP3MucmVwbGFjZShidCxcIiQxXz1cIitndCsrKTpzKyh5dC50ZXN0KHMpP1wiJlwiOlwiP1wiKStcIl89XCIrZ3QrKykpLGguaWZNb2RpZmllZCYmKHNlLmxhc3RNb2RpZmllZFtzXSYmQy5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIixzZS5sYXN0TW9kaWZpZWRbc10pLHNlLmV0YWdbc10mJkMuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixzZS5ldGFnW3NdKSksKGguZGF0YSYmaC5oYXNDb250ZW50JiZoLmNvbnRlbnRUeXBlIT09ITF8fGkuY29udGVudFR5cGUpJiZDLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixoLmNvbnRlbnRUeXBlKSxDLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixoLmRhdGFUeXBlc1swXSYmaC5hY2NlcHRzW2guZGF0YVR5cGVzWzBdXT9oLmFjY2VwdHNbaC5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PWguZGF0YVR5cGVzWzBdP1wiLCBcIitfdCtcIjsgcT0wLjAxXCI6XCJcIik6aC5hY2NlcHRzW1wiKlwiXSk7Zm9yKGMgaW4gaC5oZWFkZXJzKUMuc2V0UmVxdWVzdEhlYWRlcihjLGguaGVhZGVyc1tjXSk7aWYoaC5iZWZvcmVTZW5kJiYoaC5iZWZvcmVTZW5kLmNhbGwoZixDLGgpPT09ITF8fDI9PT1iKSlyZXR1cm4gQy5hYm9ydCgpO2s9XCJhYm9ydFwiO2ZvcihjIGlue3N1Y2Nlc3M6MSxlcnJvcjoxLGNvbXBsZXRlOjF9KUNbY10oaFtjXSk7aWYobz1JKFN0LGgsaSxDKSl7aWYoQy5yZWFkeVN0YXRlPTEsdSYmcC50cmlnZ2VyKFwiYWpheFNlbmRcIixbQyxoXSksMj09PWIpcmV0dXJuIEM7aC5hc3luYyYmaC50aW1lb3V0PjAmJihsPWUuc2V0VGltZW91dChmdW5jdGlvbigpe0MuYWJvcnQoXCJ0aW1lb3V0XCIpfSxoLnRpbWVvdXQpKTt0cnl7Yj0xLG8uc2VuZCh5LG4pfWNhdGNoKGUpe2lmKCEoYjwyKSl0aHJvdyBlO24oLTEsZSl9fWVsc2UgbigtMSxcIk5vIFRyYW5zcG9ydFwiKTtyZXR1cm4gQ30sZ2V0SlNPTjpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIHNlLmdldChlLHQsaSxcImpzb25cIil9LGdldFNjcmlwdDpmdW5jdGlvbihlLHQpe3JldHVybiBzZS5nZXQoZSx2b2lkIDAsdCxcInNjcmlwdFwiKX19KSxzZS5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihlLHQpe3NlW3RdPWZ1bmN0aW9uKGUsaSxuLG8pe3JldHVybiBzZS5pc0Z1bmN0aW9uKGkpJiYobz1vfHxuLG49aSxpPXZvaWQgMCksc2UuYWpheChzZS5leHRlbmQoe3VybDplLHR5cGU6dCxkYXRhVHlwZTpvLGRhdGE6aSxzdWNjZXNzOm59LHNlLmlzUGxhaW5PYmplY3QoZSkmJmUpKX19KSxzZS5fZXZhbFVybD1mdW5jdGlvbihlKXtyZXR1cm4gc2UuYWpheCh7dXJsOmUsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsYXN5bmM6ITEsZ2xvYmFsOiExLHRocm93czohMH0pfSxzZS5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHNlLmlzRnVuY3Rpb24oZSk/dGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3NlKHRoaXMpLndyYXBBbGwoZS5jYWxsKHRoaXMsdCkpfSk6KHRoaXNbMF0mJih0PXNlKGUsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZ0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSx0Lm1hcChmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzO2UuZmlyc3RFbGVtZW50Q2hpbGQ7KWU9ZS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKSksdGhpcyl9LHdyYXBJbm5lcjpmdW5jdGlvbihlKXtyZXR1cm4gc2UuaXNGdW5jdGlvbihlKT90aGlzLmVhY2goZnVuY3Rpb24odCl7c2UodGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXNlKHRoaXMpLGk9dC5jb250ZW50cygpO2kubGVuZ3RoP2kud3JhcEFsbChlKTp0LmFwcGVuZChlKX0pfSx3cmFwOmZ1bmN0aW9uKGUpe3ZhciB0PXNlLmlzRnVuY3Rpb24oZSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKXtzZSh0aGlzKS53cmFwQWxsKHQ/ZS5jYWxsKHRoaXMsaSk6ZSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe3NlLm5vZGVOYW1lKHRoaXMsXCJib2R5XCIpfHxzZSh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSkuZW5kKCl9fSksc2UuZXhwci5maWx0ZXJzLmhpZGRlbj1mdW5jdGlvbihlKXtyZXR1cm4hc2UuZXhwci5maWx0ZXJzLnZpc2libGUoZSl9LHNlLmV4cHIuZmlsdGVycy52aXNpYmxlPWZ1bmN0aW9uKGUpe3JldHVybiBlLm9mZnNldFdpZHRoPjB8fGUub2Zmc2V0SGVpZ2h0PjB8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg+MH07dmFyIHp0PS8lMjAvZyxBdD0vXFxbXFxdJC8sT3Q9L1xccj9cXG4vZyxFdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksUHQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO3NlLnBhcmFtPWZ1bmN0aW9uKGUsdCl7dmFyIGksbj1bXSxvPWZ1bmN0aW9uKGUsdCl7dD1zZS5pc0Z1bmN0aW9uKHQpP3QoKTpudWxsPT10P1wiXCI6dCxuW24ubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoZSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpfTtpZih2b2lkIDA9PT10JiYodD1zZS5hamF4U2V0dGluZ3MmJnNlLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbCksc2UuaXNBcnJheShlKXx8ZS5qcXVlcnkmJiFzZS5pc1BsYWluT2JqZWN0KGUpKXNlLmVhY2goZSxmdW5jdGlvbigpe28odGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoaSBpbiBlKVEoaSxlW2ldLHQsbyk7cmV0dXJuIG4uam9pbihcIiZcIikucmVwbGFjZSh6dCxcIitcIil9LHNlLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHNlLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9c2UucHJvcCh0aGlzLFwiZWxlbWVudHNcIik7cmV0dXJuIGU/c2UubWFrZUFycmF5KGUpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXNlKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZQdC50ZXN0KHRoaXMubm9kZU5hbWUpJiYhRXQudGVzdChlKSYmKHRoaXMuY2hlY2tlZHx8IVBlLnRlc3QoZSkpfSkubWFwKGZ1bmN0aW9uKGUsdCl7dmFyIGk9c2UodGhpcykudmFsKCk7cmV0dXJuIG51bGw9PWk/bnVsbDpzZS5pc0FycmF5KGkpP3NlLm1hcChpLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoT3QsXCJcXHJcXG5cIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOmkucmVwbGFjZShPdCxcIlxcclxcblwiKX19KS5nZXQoKX19KSxzZS5hamF4U2V0dGluZ3MueGhyPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBuZXcgZS5YTUxIdHRwUmVxdWVzdH1jYXRjaChlKXt9fTt2YXIgRHQ9ezA6MjAwLDEyMjM6MjA0fSxIdD1zZS5hamF4U2V0dGluZ3MueGhyKCk7bmUuY29ycz0hIUh0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4gSHQsbmUuYWpheD1IdD0hIUh0LHNlLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24odCl7dmFyIGksbjtpZihuZS5jb3JzfHxIdCYmIXQuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24obyxzKXt2YXIgcixhPXQueGhyKCk7aWYoYS5vcGVuKHQudHlwZSx0LnVybCx0LmFzeW5jLHQudXNlcm5hbWUsdC5wYXNzd29yZCksdC54aHJGaWVsZHMpZm9yKHIgaW4gdC54aHJGaWVsZHMpYVtyXT10LnhockZpZWxkc1tyXTt0Lm1pbWVUeXBlJiZhLm92ZXJyaWRlTWltZVR5cGUmJmEub3ZlcnJpZGVNaW1lVHlwZSh0Lm1pbWVUeXBlKSx0LmNyb3NzRG9tYWlufHxvW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KG9bXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIik7Zm9yKHIgaW4gbylhLnNldFJlcXVlc3RIZWFkZXIocixvW3JdKTtpPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe2kmJihpPW49YS5vbmxvYWQ9YS5vbmVycm9yPWEub25hYm9ydD1hLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWU/YS5hYm9ydCgpOlwiZXJyb3JcIj09PWU/XCJudW1iZXJcIiE9dHlwZW9mIGEuc3RhdHVzP3MoMCxcImVycm9yXCIpOnMoYS5zdGF0dXMsYS5zdGF0dXNUZXh0KTpzKER0W2Euc3RhdHVzXXx8YS5zdGF0dXMsYS5zdGF0dXNUZXh0LFwidGV4dFwiIT09KGEucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBhLnJlc3BvbnNlVGV4dD97YmluYXJ5OmEucmVzcG9uc2V9Ont0ZXh0OmEucmVzcG9uc2VUZXh0fSxhLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxhLm9ubG9hZD1pKCksbj1hLm9uZXJyb3I9aShcImVycm9yXCIpLHZvaWQgMCE9PWEub25hYm9ydD9hLm9uYWJvcnQ9bjphLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1hLnJlYWR5U3RhdGUmJmUuc2V0VGltZW91dChmdW5jdGlvbigpe2kmJm4oKX0pfSxpPWkoXCJhYm9ydFwiKTt0cnl7YS5zZW5kKHQuaGFzQ29udGVudCYmdC5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihpKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe2kmJmkoKX19fSksc2UuYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGUpe3JldHVybiBzZS5nbG9iYWxFdmFsKGUpLGV9fX0pLHNlLmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihlKXt2b2lkIDA9PT1lLmNhY2hlJiYoZS5jYWNoZT0hMSksZS5jcm9zc0RvbWFpbiYmKGUudHlwZT1cIkdFVFwiKX0pLHNlLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihlKXtpZihlLmNyb3NzRG9tYWluKXt2YXIgdCxpO3JldHVybntzZW5kOmZ1bmN0aW9uKG4sbyl7dD1zZShcIjxzY3JpcHQ+XCIpLnByb3Aoe2NoYXJzZXQ6ZS5zY3JpcHRDaGFyc2V0LHNyYzplLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLGk9ZnVuY3Rpb24oZSl7dC5yZW1vdmUoKSxpPW51bGwsZSYmbyhcImVycm9yXCI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksWC5oZWFkLmFwcGVuZENoaWxkKHRbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2kmJmkoKX19fX0pO3ZhciBNdD1bXSxqdD0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO3NlLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgZT1NdC5wb3AoKXx8c2UuZXhwYW5kbytcIl9cIitndCsrO3JldHVybiB0aGlzW2VdPSEwLGV9fSksc2UuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbih0LGksbil7dmFyIG8scyxyLGE9dC5qc29ucCE9PSExJiYoanQudGVzdCh0LnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgdC5kYXRhJiYwPT09KHQuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJmp0LnRlc3QodC5kYXRhKSYmXCJkYXRhXCIpO2lmKGF8fFwianNvbnBcIj09PXQuZGF0YVR5cGVzWzBdKXJldHVybiBvPXQuanNvbnBDYWxsYmFjaz1zZS5pc0Z1bmN0aW9uKHQuanNvbnBDYWxsYmFjayk/dC5qc29ucENhbGxiYWNrKCk6dC5qc29ucENhbGxiYWNrLGE/dFthXT10W2FdLnJlcGxhY2UoanQsXCIkMVwiK28pOnQuanNvbnAhPT0hMSYmKHQudXJsKz0oeXQudGVzdCh0LnVybCk/XCImXCI6XCI/XCIpK3QuanNvbnArXCI9XCIrbyksdC5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gcnx8c2UuZXJyb3IobytcIiB3YXMgbm90IGNhbGxlZFwiKSxyWzBdfSx0LmRhdGFUeXBlc1swXT1cImpzb25cIixzPWVbb10sZVtvXT1mdW5jdGlvbigpe3I9YXJndW1lbnRzfSxuLmFsd2F5cyhmdW5jdGlvbigpe3ZvaWQgMD09PXM/c2UoZSkucmVtb3ZlUHJvcChvKTplW29dPXMsdFtvXSYmKHQuanNvbnBDYWxsYmFjaz1pLmpzb25wQ2FsbGJhY2ssTXQucHVzaChvKSksciYmc2UuaXNGdW5jdGlvbihzKSYmcyhyWzBdKSxyPXM9dm9pZCAwfSksXCJzY3JpcHRcIn0pLHNlLnBhcnNlSFRNTD1mdW5jdGlvbihlLHQsaSl7aWYoIWV8fFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO1wiYm9vbGVhblwiPT10eXBlb2YgdCYmKGk9dCx0PSExKSx0PXR8fFg7dmFyIG49cGUuZXhlYyhlKSxvPSFpJiZbXTtyZXR1cm4gbj9bdC5jcmVhdGVFbGVtZW50KG5bMV0pXToobj1oKFtlXSx0LG8pLG8mJm8ubGVuZ3RoJiZzZShvKS5yZW1vdmUoKSxzZS5tZXJnZShbXSxuLmNoaWxkTm9kZXMpKX07dmFyIHF0PXNlLmZuLmxvYWQ7c2UuZm4ubG9hZD1mdW5jdGlvbihlLHQsaSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUmJnF0KXJldHVybiBxdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIG4sbyxzLHI9dGhpcyxhPWUuaW5kZXhPZihcIiBcIik7cmV0dXJuIGE+LTEmJihuPXNlLnRyaW0oZS5zbGljZShhKSksZT1lLnNsaWNlKDAsYSkpLHNlLmlzRnVuY3Rpb24odCk/KGk9dCx0PXZvaWQgMCk6dCYmXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOl90eXBlb2YodCkpJiYobz1cIlBPU1RcIiksci5sZW5ndGg+MCYmc2UuYWpheCh7dXJsOmUsdHlwZTpvfHxcIkdFVFwiLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6dH0pLmRvbmUoZnVuY3Rpb24oZSl7cz1hcmd1bWVudHMsci5odG1sKG4/c2UoXCI8ZGl2PlwiKS5hcHBlbmQoc2UucGFyc2VIVE1MKGUpKS5maW5kKG4pOmUpfSkuYWx3YXlzKGkmJmZ1bmN0aW9uKGUsdCl7ci5lYWNoKGZ1bmN0aW9uKCl7aS5hcHBseSh0aGlzLHN8fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sc2UuZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGUsdCl7c2UuZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub24odCxlKX19KSxzZS5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHNlLmdyZXAoc2UudGltZXJzLGZ1bmN0aW9uKHQpe3JldHVybiBlPT09dC5lbGVtfSkubGVuZ3RofSxzZS5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsaSl7dmFyIG4sbyxzLHIsYSxsLGQsdT1zZS5jc3MoZSxcInBvc2l0aW9uXCIpLGM9c2UoZSksaD17fTtcInN0YXRpY1wiPT09dSYmKGUuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxhPWMub2Zmc2V0KCkscz1zZS5jc3MoZSxcInRvcFwiKSxsPXNlLmNzcyhlLFwibGVmdFwiKSxkPShcImFic29sdXRlXCI9PT11fHxcImZpeGVkXCI9PT11KSYmKHMrbCkuaW5kZXhPZihcImF1dG9cIik+LTEsZD8obj1jLnBvc2l0aW9uKCkscj1uLnRvcCxvPW4ubGVmdCk6KHI9cGFyc2VGbG9hdChzKXx8MCxvPXBhcnNlRmxvYXQobCl8fDApLHNlLmlzRnVuY3Rpb24odCkmJih0PXQuY2FsbChlLGksc2UuZXh0ZW5kKHt9LGEpKSksbnVsbCE9dC50b3AmJihoLnRvcD10LnRvcC1hLnRvcCtyKSxudWxsIT10LmxlZnQmJihoLmxlZnQ9dC5sZWZ0LWEubGVmdCtvKSxcInVzaW5nXCJpbiB0P3QudXNpbmcuY2FsbChlLGgpOmMuY3NzKGgpfX0sc2UuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oZSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09ZT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbih0KXtzZS5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsZSx0KX0pO3ZhciB0LGksbj10aGlzWzBdLG89e3RvcDowLGxlZnQ6MH0scz1uJiZuLm93bmVyRG9jdW1lbnQ7aWYocylyZXR1cm4gdD1zLmRvY3VtZW50RWxlbWVudCxzZS5jb250YWlucyh0LG4pPyhvPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaT1VKHMpLHt0b3A6by50b3AraS5wYWdlWU9mZnNldC10LmNsaWVudFRvcCxsZWZ0Om8ubGVmdCtpLnBhZ2VYT2Zmc2V0LXQuY2xpZW50TGVmdH0pOm99LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxpPXRoaXNbMF0sbj17dG9wOjAsbGVmdDowfTtyZXR1cm5cImZpeGVkXCI9PT1zZS5jc3MoaSxcInBvc2l0aW9uXCIpP3Q9aS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooZT10aGlzLm9mZnNldFBhcmVudCgpLHQ9dGhpcy5vZmZzZXQoKSxzZS5ub2RlTmFtZShlWzBdLFwiaHRtbFwiKXx8KG49ZS5vZmZzZXQoKSksbi50b3ArPXNlLmNzcyhlWzBdLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksbi5sZWZ0Kz1zZS5jc3MoZVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSkse3RvcDp0LnRvcC1uLnRvcC1zZS5jc3MoaSxcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OnQubGVmdC1uLmxlZnQtc2UuY3NzKGksXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLm9mZnNldFBhcmVudDtlJiZcInN0YXRpY1wiPT09c2UuY3NzKGUsXCJwb3NpdGlvblwiKTspZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8WmV9KX19KSxzZS5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihlLHQpe3ZhciBpPVwicGFnZVlPZmZzZXRcIj09PXQ7c2UuZm5bZV09ZnVuY3Rpb24obil7cmV0dXJuICRlKHRoaXMsZnVuY3Rpb24oZSxuLG8pe3ZhciBzPVUoZSk7cmV0dXJuIHZvaWQgMD09PW8/cz9zW3RdOmVbbl06dm9pZChzP3Muc2Nyb2xsVG8oaT9zLnBhZ2VYT2Zmc2V0Om8saT9vOnMucGFnZVlPZmZzZXQpOmVbbl09byl9LGUsbixhcmd1bWVudHMubGVuZ3RoKX19KSxzZS5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihlLHQpe3NlLmNzc0hvb2tzW3RdPV8obmUucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihlLGkpe2lmKGkpcmV0dXJuIGk9UyhlLHQpLFhlLnRlc3QoaSk/c2UoZSkucG9zaXRpb24oKVt0XStcInB4XCI6aX0pfSksc2UuZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihlLHQpe3NlLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2UsY29udGVudDp0LFwiXCI6XCJvdXRlclwiK2V9LGZ1bmN0aW9uKGksbil7c2UuZm5bbl09ZnVuY3Rpb24obixvKXt2YXIgcz1hcmd1bWVudHMubGVuZ3RoJiYoaXx8XCJib29sZWFuXCIhPXR5cGVvZiBuKSxyPWl8fChuPT09ITB8fG89PT0hMD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiAkZSh0aGlzLGZ1bmN0aW9uKHQsaSxuKXt2YXIgbztyZXR1cm4gc2UuaXNXaW5kb3codCk/dC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIitlXTo5PT09dC5ub2RlVHlwZT8obz10LmRvY3VtZW50RWxlbWVudCxNYXRoLm1heCh0LmJvZHlbXCJzY3JvbGxcIitlXSxvW1wic2Nyb2xsXCIrZV0sdC5ib2R5W1wib2Zmc2V0XCIrZV0sb1tcIm9mZnNldFwiK2VdLG9bXCJjbGllbnRcIitlXSkpOnZvaWQgMD09PW4/c2UuY3NzKHQsaSxyKTpzZS5zdHlsZSh0LGksbixyKX0sdCxzP246dm9pZCAwLHMsbnVsbCl9fSl9KSxzZS5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oZSx0LGkpe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LGkpfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsaSxuKXtyZXR1cm4gdGhpcy5vbih0LGUsaSxuKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsaSl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsXCIqKlwiKTp0aGlzLm9mZih0LGV8fFwiKipcIixpKX0sc2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH19KSxzZS5mbi5hbmRTZWxmPXNlLmZuLmFkZEJhY2ssXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBzZX0pO3ZhciBMdD1lLmpRdWVyeSxSdD1lLiQ7cmV0dXJuIHNlLm5vQ29uZmxpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIGUuJD09PXNlJiYoZS4kPVJ0KSx0JiZlLmpRdWVyeT09PXNlJiYoZS5qUXVlcnk9THQpLHNlfSx0fHwoZS5qUXVlcnk9ZS4kPXNlKSxzZX0pLGZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJ3aGF0SW5wdXRcIixbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLndoYXRJbnB1dD10KCk6ZS53aGF0SW5wdXQ9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQobil7aWYoaVtuXSlyZXR1cm4gaVtuXS5leHBvcnRzO3ZhciBvPWlbbl09e2V4cG9ydHM6e30saWQ6bixsb2FkZWQ6ITF9O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgaT17fTtyZXR1cm4gdC5tPWUsdC5jPWksdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQ9XCJpbml0aWFsXCIsaT1udWxsLG49W1wiaW5wdXRcIixcInNlbGVjdFwiLFwidGV4dGFyZWFcIl0sbz1bMTYsMTcsMTgsOTEsOTNdLHM9e2tleXVwOlwia2V5Ym9hcmRcIixtb3VzZWRvd246XCJtb3VzZVwiLG1vdXNlbW92ZTpcIm1vdXNlXCIsTVNQb2ludGVyRG93bjpcInBvaW50ZXJcIixNU1BvaW50ZXJNb3ZlOlwicG9pbnRlclwiLHBvaW50ZXJkb3duOlwicG9pbnRlclwiLHBvaW50ZXJtb3ZlOlwicG9pbnRlclwiLHRvdWNoc3RhcnQ6XCJ0b3VjaFwifSxyPVtdLGE9ITEsbD17MjpcInRvdWNoXCIsMzpcInRvdWNoXCIsNDpcIm1vdXNlXCJ9LGQ9bnVsbCx1PWZ1bmN0aW9uKCl7c1tnKCldPVwibW91c2VcIixjKCksZigpfSxjPWZ1bmN0aW9uKCl7d2luZG93LlBvaW50ZXJFdmVudD8oZS5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIixoKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLHApKTp3aW5kb3cuTVNQb2ludGVyRXZlbnQ/KGUuYWRkRXZlbnRMaXN0ZW5lcihcIk1TUG9pbnRlckRvd25cIixoKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJNU1BvaW50ZXJNb3ZlXCIscCkpOihlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixoKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixwKSxcIm9udG91Y2hzdGFydFwiaW4gd2luZG93JiZlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdikpLGUuYWRkRXZlbnRMaXN0ZW5lcihnKCkscCksZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGgpLGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsaCl9LGg9ZnVuY3Rpb24oZSl7aWYoIWEpe3ZhciByPWUud2hpY2gsbD1zW2UudHlwZV07aWYoXCJwb2ludGVyXCI9PT1sJiYobD1tKGUpKSx0IT09bHx8aSE9PWwpe3ZhciBkPSEoIWRvY3VtZW50LmFjdGl2ZUVsZW1lbnR8fG4uaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIT09LTEpOyhcInRvdWNoXCI9PT1sfHxcIm1vdXNlXCI9PT1sJiZvLmluZGV4T2Yocik9PT0tMXx8XCJrZXlib2FyZFwiPT09bCYmZCkmJih0PWk9bCxmKCkpfX19LGY9ZnVuY3Rpb24oKXtlLnNldEF0dHJpYnV0ZShcImRhdGEtd2hhdGlucHV0XCIsdCksZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdoYXRpbnRlbnRcIix0KSxyLmluZGV4T2YodCk9PT0tMSYmKHIucHVzaCh0KSxlLmNsYXNzTmFtZSs9XCIgd2hhdGlucHV0LXR5cGVzLVwiK3QpfSxwPWZ1bmN0aW9uKHQpe2lmKCFhKXt2YXIgbj1zW3QudHlwZV07XCJwb2ludGVyXCI9PT1uJiYobj1tKHQpKSxpIT09biYmKGk9bixlLnNldEF0dHJpYnV0ZShcImRhdGEtd2hhdGludGVudFwiLGkpKX19LHY9ZnVuY3Rpb24oZSl7d2luZG93LmNsZWFyVGltZW91dChkKSxoKGUpLGE9ITAsZD13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2E9ITF9LDIwMCl9LG09ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUucG9pbnRlclR5cGU/bFtlLnBvaW50ZXJUeXBlXTpcInBlblwiPT09ZS5wb2ludGVyVHlwZT9cInRvdWNoXCI6ZS5wb2ludGVyVHlwZX0sZz1mdW5jdGlvbigpe3JldHVyblwib253aGVlbFwiaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKT9cIndoZWVsXCI6dm9pZCAwIT09ZG9jdW1lbnQub25tb3VzZXdoZWVsP1wibW91c2V3aGVlbFwiOlwiRE9NTW91c2VTY3JvbGxcIn07cmV0dXJuXCJhZGRFdmVudExpc3RlbmVyXCJpbiB3aW5kb3cmJkFycmF5LnByb3RvdHlwZS5pbmRleE9mJiZ1KCkse2FzazpmdW5jdGlvbihlKXtyZXR1cm5cImxvb3NlXCI9PT1lP2k6dH0sdHlwZXM6ZnVuY3Rpb24oKXtyZXR1cm4gcn19fSgpfV0pfSk7dmFyIF90eXBlb2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07IWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7aWYodm9pZCAwPT09RnVuY3Rpb24ucHJvdG90eXBlLm5hbWUpe3ZhciB0PS9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvLGk9dC5leGVjKGUudG9TdHJpbmcoKSk7cmV0dXJuIGkmJmkubGVuZ3RoPjE/aVsxXS50cmltKCk6XCJcIn1yZXR1cm4gdm9pZCAwPT09ZS5wcm90b3R5cGU/ZS5jb25zdHJ1Y3Rvci5uYW1lOmUucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWV9ZnVuY3Rpb24gaShlKXtyZXR1cm5cInRydWVcIj09PWV8fFwiZmFsc2VcIiE9PWUmJihpc05hTigxKmUpP2U6cGFyc2VGbG9hdChlKSl9ZnVuY3Rpb24gbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKX12YXIgbz1cIjYuMy4wXCIscz17dmVyc2lvbjpvLF9wbHVnaW5zOnt9LF91dWlkczpbXSxydGw6ZnVuY3Rpb24oKXtyZXR1cm5cInJ0bFwiPT09ZShcImh0bWxcIikuYXR0cihcImRpclwiKX0scGx1Z2luOmZ1bmN0aW9uKGUsaSl7dmFyIG89aXx8dChlKSxzPW4obyk7dGhpcy5fcGx1Z2luc1tzXT10aGlzW29dPWV9LHJlZ2lzdGVyUGx1Z2luOmZ1bmN0aW9uKGUsaSl7dmFyIG89aT9uKGkpOnQoZS5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtlLnV1aWQ9dGhpcy5HZXRZb0RpZ2l0cyg2LG8pLGUuJGVsZW1lbnQuYXR0cihcImRhdGEtXCIrbyl8fGUuJGVsZW1lbnQuYXR0cihcImRhdGEtXCIrbyxlLnV1aWQpLGUuJGVsZW1lbnQuZGF0YShcInpmUGx1Z2luXCIpfHxlLiRlbGVtZW50LmRhdGEoXCJ6ZlBsdWdpblwiLGUpLGUuJGVsZW1lbnQudHJpZ2dlcihcImluaXQuemYuXCIrbyksdGhpcy5fdXVpZHMucHVzaChlLnV1aWQpfSx1bnJlZ2lzdGVyUGx1Z2luOmZ1bmN0aW9uKGUpe3ZhciBpPW4odChlLiRlbGVtZW50LmRhdGEoXCJ6ZlBsdWdpblwiKS5jb25zdHJ1Y3RvcikpO3RoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKGUudXVpZCksMSksZS4kZWxlbWVudC5yZW1vdmVBdHRyKFwiZGF0YS1cIitpKS5yZW1vdmVEYXRhKFwiemZQbHVnaW5cIikudHJpZ2dlcihcImRlc3Ryb3llZC56Zi5cIitpKTtmb3IodmFyIG8gaW4gZSllW29dPW51bGx9LHJlSW5pdDpmdW5jdGlvbih0KXt2YXIgaT10IGluc3RhbmNlb2YgZTt0cnl7aWYoaSl0LmVhY2goZnVuY3Rpb24oKXtlKHRoaXMpLmRhdGEoXCJ6ZlBsdWdpblwiKS5faW5pdCgpfSk7ZWxzZXt2YXIgbz1cInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOl90eXBlb2YodCkscz10aGlzLHI9e29iamVjdDpmdW5jdGlvbih0KXt0LmZvckVhY2goZnVuY3Rpb24odCl7dD1uKHQpLGUoXCJbZGF0YS1cIit0K1wiXVwiKS5mb3VuZGF0aW9uKFwiX2luaXRcIil9KX0sc3RyaW5nOmZ1bmN0aW9uKCl7dD1uKHQpLGUoXCJbZGF0YS1cIit0K1wiXVwiKS5mb3VuZGF0aW9uKFwiX2luaXRcIil9LHVuZGVmaW5lZDpmdW5jdGlvbigpe3RoaXMub2JqZWN0KE9iamVjdC5rZXlzKHMuX3BsdWdpbnMpKX19O3Jbb10odCl9fWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoZSl9ZmluYWxseXtyZXR1cm4gdH19LEdldFlvRGlnaXRzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9ZXx8NixNYXRoLnJvdW5kKE1hdGgucG93KDM2LGUrMSktTWF0aC5yYW5kb20oKSpNYXRoLnBvdygzNixlKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpKyh0P1wiLVwiK3Q6XCJcIil9LHJlZmxvdzpmdW5jdGlvbih0LG4pe1widW5kZWZpbmVkXCI9PXR5cGVvZiBuP249T2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk6XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtuXSk7dmFyIG89dGhpcztlLmVhY2gobixmdW5jdGlvbihuLHMpe3ZhciByPW8uX3BsdWdpbnNbc10sYT1lKHQpLmZpbmQoXCJbZGF0YS1cIitzK1wiXVwiKS5hZGRCYWNrKFwiW2RhdGEtXCIrcytcIl1cIik7YS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKSxuPXt9O2lmKHQuZGF0YShcInpmUGx1Z2luXCIpKXJldHVybiB2b2lkIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrcytcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7aWYodC5hdHRyKFwiZGF0YS1vcHRpb25zXCIpKXt0LmF0dHIoXCJkYXRhLW9wdGlvbnNcIikuc3BsaXQoXCI7XCIpLmZvckVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbz1lLnNwbGl0KFwiOlwiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJpbSgpfSk7b1swXSYmKG5bb1swXV09aShvWzFdKSl9KX10cnl7dC5kYXRhKFwiemZQbHVnaW5cIixuZXcgcihlKHRoaXMpLG4pKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKGUpfWZpbmFsbHl7cmV0dXJufX0pfSl9LGdldEZuTmFtZTp0LHRyYW5zaXRpb25lbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsaT17dHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixXZWJraXRUcmFuc2l0aW9uOlwid2Via2l0VHJhbnNpdGlvbkVuZFwiLE1velRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvdHJhbnNpdGlvbmVuZFwifSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHZhciBvIGluIGkpXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG4uc3R5bGVbb10mJih0PWlbb10pO3JldHVybiB0P3Q6KHQ9c2V0VGltZW91dChmdW5jdGlvbigpe2UudHJpZ2dlckhhbmRsZXIoXCJ0cmFuc2l0aW9uZW5kXCIsW2VdKX0sMSksXCJ0cmFuc2l0aW9uZW5kXCIpfX07cy51dGlsPXt0aHJvdHRsZTpmdW5jdGlvbihlLHQpe3ZhciBpPW51bGw7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcyxvPWFyZ3VtZW50cztudWxsPT09aSYmKGk9c2V0VGltZW91dChmdW5jdGlvbigpe2UuYXBwbHkobixvKSxpPW51bGx9LHQpKX19fTt2YXIgcj1mdW5jdGlvbihpKXt2YXIgbj1cInVuZGVmaW5lZFwiPT10eXBlb2YgaT9cInVuZGVmaW5lZFwiOl90eXBlb2YoaSksbz1lKFwibWV0YS5mb3VuZGF0aW9uLW1xXCIpLHI9ZShcIi5uby1qc1wiKTtpZihvLmxlbmd0aHx8ZSgnPG1ldGEgY2xhc3M9XCJmb3VuZGF0aW9uLW1xXCI+JykuYXBwZW5kVG8oZG9jdW1lbnQuaGVhZCksci5sZW5ndGgmJnIucmVtb3ZlQ2xhc3MoXCJuby1qc1wiKSxcInVuZGVmaW5lZFwiPT09bilzLk1lZGlhUXVlcnkuX2luaXQoKSxzLnJlZmxvdyh0aGlzKTtlbHNle2lmKFwic3RyaW5nXCIhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJXZSdyZSBzb3JyeSwgXCIrbitcIiBpcyBub3QgYSB2YWxpZCBwYXJhbWV0ZXIuIFlvdSBtdXN0IHVzZSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1ldGhvZCB5b3Ugd2lzaCB0byBpbnZva2UuXCIpO3ZhciBhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxsPXRoaXMuZGF0YShcInpmUGx1Z2luXCIpO2lmKHZvaWQgMD09PWx8fHZvaWQgMD09PWxbaV0pdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiV2UncmUgc29ycnksICdcIitpK1wiJyBpcyBub3QgYW4gYXZhaWxhYmxlIG1ldGhvZCBmb3IgXCIrKGw/dChsKTpcInRoaXMgZWxlbWVudFwiKStcIi5cIik7MT09PXRoaXMubGVuZ3RoP2xbaV0uYXBwbHkobCxhKTp0aGlzLmVhY2goZnVuY3Rpb24odCxuKXtsW2ldLmFwcGx5KGUobikuZGF0YShcInpmUGx1Z2luXCIpLGEpfSl9cmV0dXJuIHRoaXN9O3dpbmRvdy5Gb3VuZGF0aW9uPXMsZS5mbi5mb3VuZGF0aW9uPXIsZnVuY3Rpb24oKXtEYXRlLm5vdyYmd2luZG93LkRhdGUubm93fHwod2luZG93LkRhdGUubm93PURhdGUubm93PWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9KTtmb3IodmFyIGU9W1wid2Via2l0XCIsXCJtb3pcIl0sdD0wO3Q8ZS5sZW5ndGgmJiF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOysrdCl7dmFyIGk9ZVt0XTt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lPXdpbmRvd1tpK1wiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT13aW5kb3dbaStcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdfHx3aW5kb3dbaStcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXX1pZigvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpfHwhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZXx8IXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSl7dmFyIG49MDt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGUpe3ZhciB0PURhdGUubm93KCksaT1NYXRoLm1heChuKzE2LHQpO3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShuPWkpfSxpLXQpfSx3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU9Y2xlYXJUaW1lb3V0fXdpbmRvdy5wZXJmb3JtYW5jZSYmd2luZG93LnBlcmZvcm1hbmNlLm5vd3x8KHdpbmRvdy5wZXJmb3JtYW5jZT17c3RhcnQ6RGF0ZS5ub3coKSxub3c6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS10aGlzLnN0YXJ0fX0pfSgpLEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kfHwoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGVcIik7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGk9dGhpcyxuPWZ1bmN0aW9uKCl7fSxvPWZ1bmN0aW9uKCl7cmV0dXJuIGkuYXBwbHkodGhpcyBpbnN0YW5jZW9mIG4/dGhpczplLHQuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKX07cmV0dXJuIHRoaXMucHJvdG90eXBlJiYobi5wcm90b3R5cGU9dGhpcy5wcm90b3R5cGUpLFxuby5wcm90b3R5cGU9bmV3IG4sb30pfShqUXVlcnkpLCFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCxuLG8pe3ZhciBzLHIsYSxsLGQ9aShlKTtpZih0KXt2YXIgdT1pKHQpO3I9ZC5vZmZzZXQudG9wK2QuaGVpZ2h0PD11LmhlaWdodCt1Lm9mZnNldC50b3Ascz1kLm9mZnNldC50b3A+PXUub2Zmc2V0LnRvcCxhPWQub2Zmc2V0LmxlZnQ+PXUub2Zmc2V0LmxlZnQsbD1kLm9mZnNldC5sZWZ0K2Qud2lkdGg8PXUud2lkdGgrdS5vZmZzZXQubGVmdH1lbHNlIHI9ZC5vZmZzZXQudG9wK2QuaGVpZ2h0PD1kLndpbmRvd0RpbXMuaGVpZ2h0K2Qud2luZG93RGltcy5vZmZzZXQudG9wLHM9ZC5vZmZzZXQudG9wPj1kLndpbmRvd0RpbXMub2Zmc2V0LnRvcCxhPWQub2Zmc2V0LmxlZnQ+PWQud2luZG93RGltcy5vZmZzZXQubGVmdCxsPWQub2Zmc2V0LmxlZnQrZC53aWR0aDw9ZC53aW5kb3dEaW1zLndpZHRoO3ZhciBjPVtyLHMsYSxsXTtyZXR1cm4gbj9hPT09bD09ITA6bz9zPT09cj09ITA6Yy5pbmRleE9mKCExKT09PS0xfWZ1bmN0aW9uIGkoZSx0KXtpZihlPWUubGVuZ3RoP2VbMF06ZSxlPT09d2luZG93fHxlPT09ZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7dmFyIGk9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPWUucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscz13aW5kb3cucGFnZVlPZmZzZXQscj13aW5kb3cucGFnZVhPZmZzZXQ7cmV0dXJue3dpZHRoOmkud2lkdGgsaGVpZ2h0OmkuaGVpZ2h0LG9mZnNldDp7dG9wOmkudG9wK3MsbGVmdDppLmxlZnQrcn0scGFyZW50RGltczp7d2lkdGg6bi53aWR0aCxoZWlnaHQ6bi5oZWlnaHQsb2Zmc2V0Ont0b3A6bi50b3ArcyxsZWZ0Om4ubGVmdCtyfX0sd2luZG93RGltczp7d2lkdGg6by53aWR0aCxoZWlnaHQ6by5oZWlnaHQsb2Zmc2V0Ont0b3A6cyxsZWZ0OnJ9fX19ZnVuY3Rpb24gbihlLHQsbixvLHMscil7dmFyIGE9aShlKSxsPXQ/aSh0KTpudWxsO3N3aXRjaChuKXtjYXNlXCJ0b3BcIjpyZXR1cm57bGVmdDpGb3VuZGF0aW9uLnJ0bCgpP2wub2Zmc2V0LmxlZnQtYS53aWR0aCtsLndpZHRoOmwub2Zmc2V0LmxlZnQsdG9wOmwub2Zmc2V0LnRvcC0oYS5oZWlnaHQrbyl9O2Nhc2VcImxlZnRcIjpyZXR1cm57bGVmdDpsLm9mZnNldC5sZWZ0LShhLndpZHRoK3MpLHRvcDpsLm9mZnNldC50b3B9O2Nhc2VcInJpZ2h0XCI6cmV0dXJue2xlZnQ6bC5vZmZzZXQubGVmdCtsLndpZHRoK3MsdG9wOmwub2Zmc2V0LnRvcH07Y2FzZVwiY2VudGVyIHRvcFwiOnJldHVybntsZWZ0Omwub2Zmc2V0LmxlZnQrbC53aWR0aC8yLWEud2lkdGgvMix0b3A6bC5vZmZzZXQudG9wLShhLmhlaWdodCtvKX07Y2FzZVwiY2VudGVyIGJvdHRvbVwiOnJldHVybntsZWZ0OnI/czpsLm9mZnNldC5sZWZ0K2wud2lkdGgvMi1hLndpZHRoLzIsdG9wOmwub2Zmc2V0LnRvcCtsLmhlaWdodCtvfTtjYXNlXCJjZW50ZXIgbGVmdFwiOnJldHVybntsZWZ0Omwub2Zmc2V0LmxlZnQtKGEud2lkdGgrcyksdG9wOmwub2Zmc2V0LnRvcCtsLmhlaWdodC8yLWEuaGVpZ2h0LzJ9O2Nhc2VcImNlbnRlciByaWdodFwiOnJldHVybntsZWZ0Omwub2Zmc2V0LmxlZnQrbC53aWR0aCtzKzEsdG9wOmwub2Zmc2V0LnRvcCtsLmhlaWdodC8yLWEuaGVpZ2h0LzJ9O2Nhc2VcImNlbnRlclwiOnJldHVybntsZWZ0OmEud2luZG93RGltcy5vZmZzZXQubGVmdCthLndpbmRvd0RpbXMud2lkdGgvMi1hLndpZHRoLzIsdG9wOmEud2luZG93RGltcy5vZmZzZXQudG9wK2Eud2luZG93RGltcy5oZWlnaHQvMi1hLmhlaWdodC8yfTtjYXNlXCJyZXZlYWxcIjpyZXR1cm57bGVmdDooYS53aW5kb3dEaW1zLndpZHRoLWEud2lkdGgpLzIsdG9wOmEud2luZG93RGltcy5vZmZzZXQudG9wK299O2Nhc2VcInJldmVhbCBmdWxsXCI6cmV0dXJue2xlZnQ6YS53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LHRvcDphLndpbmRvd0RpbXMub2Zmc2V0LnRvcH07Y2FzZVwibGVmdCBib3R0b21cIjpyZXR1cm57bGVmdDpsLm9mZnNldC5sZWZ0LHRvcDpsLm9mZnNldC50b3ArbC5oZWlnaHQrb307Y2FzZVwicmlnaHQgYm90dG9tXCI6cmV0dXJue2xlZnQ6bC5vZmZzZXQubGVmdCtsLndpZHRoK3MtYS53aWR0aCx0b3A6bC5vZmZzZXQudG9wK2wuaGVpZ2h0K299O2RlZmF1bHQ6cmV0dXJue2xlZnQ6Rm91bmRhdGlvbi5ydGwoKT9sLm9mZnNldC5sZWZ0LWEud2lkdGgrbC53aWR0aDpsLm9mZnNldC5sZWZ0K3MsdG9wOmwub2Zmc2V0LnRvcCtsLmhlaWdodCtvfX19Rm91bmRhdGlvbi5Cb3g9e0ltTm90VG91Y2hpbmdZb3U6dCxHZXREaW1lbnNpb25zOmksR2V0T2Zmc2V0czpufX0oalF1ZXJ5KSwhZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXt2YXIgdD17fTtmb3IodmFyIGkgaW4gZSl0W2VbaV1dPWVbaV07cmV0dXJuIHR9dmFyIGk9ezk6XCJUQUJcIiwxMzpcIkVOVEVSXCIsMjc6XCJFU0NBUEVcIiwzMjpcIlNQQUNFXCIsMzc6XCJBUlJPV19MRUZUXCIsMzg6XCJBUlJPV19VUFwiLDM5OlwiQVJST1dfUklHSFRcIiw0MDpcIkFSUk9XX0RPV05cIn0sbj17fSxvPXtrZXlzOnQoaSkscGFyc2VLZXk6ZnVuY3Rpb24oZSl7dmFyIHQ9aVtlLndoaWNofHxlLmtleUNvZGVdfHxTdHJpbmcuZnJvbUNoYXJDb2RlKGUud2hpY2gpLnRvVXBwZXJDYXNlKCk7cmV0dXJuIHQ9dC5yZXBsYWNlKC9cXFcrLyxcIlwiKSxlLnNoaWZ0S2V5JiYodD1cIlNISUZUX1wiK3QpLGUuY3RybEtleSYmKHQ9XCJDVFJMX1wiK3QpLGUuYWx0S2V5JiYodD1cIkFMVF9cIit0KSx0PXQucmVwbGFjZSgvXyQvLFwiXCIpfSxoYW5kbGVLZXk6ZnVuY3Rpb24odCxpLG8pe3ZhciBzLHIsYSxsPW5baV0sZD10aGlzLnBhcnNlS2V5KHQpO2lmKCFsKXJldHVybiBjb25zb2xlLndhcm4oXCJDb21wb25lbnQgbm90IGRlZmluZWQhXCIpO2lmKHM9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGwubHRyP2w6Rm91bmRhdGlvbi5ydGwoKT9lLmV4dGVuZCh7fSxsLmx0cixsLnJ0bCk6ZS5leHRlbmQoe30sbC5ydGwsbC5sdHIpLHI9c1tkXSxhPW9bcl0sYSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYSl7dmFyIHU9YS5hcHBseSgpOyhvLmhhbmRsZWR8fFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uaGFuZGxlZCkmJm8uaGFuZGxlZCh1KX1lbHNlKG8udW5oYW5kbGVkfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLnVuaGFuZGxlZCkmJm8udW5oYW5kbGVkKCl9LGZpbmRGb2N1c2FibGU6ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZ0LmZpbmQoXCJhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdXCIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiEoIWUodGhpcykuaXMoXCI6dmlzaWJsZVwiKXx8ZSh0aGlzKS5hdHRyKFwidGFiaW5kZXhcIik8MCl9KX0scmVnaXN0ZXI6ZnVuY3Rpb24oZSx0KXtuW2VdPXR9LHRyYXBGb2N1czpmdW5jdGlvbihlKXt2YXIgdD1Gb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUoZSksaT10LmVxKDApLG49dC5lcSgtMSk7ZS5vbihcImtleWRvd24uemYudHJhcGZvY3VzXCIsZnVuY3Rpb24oZSl7ZS50YXJnZXQ9PT1uWzBdJiZcIlRBQlwiPT09Rm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKT8oZS5wcmV2ZW50RGVmYXVsdCgpLGkuZm9jdXMoKSk6ZS50YXJnZXQ9PT1pWzBdJiZcIlNISUZUX1RBQlwiPT09Rm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKSYmKGUucHJldmVudERlZmF1bHQoKSxuLmZvY3VzKCkpfSl9LHJlbGVhc2VGb2N1czpmdW5jdGlvbihlKXtlLm9mZihcImtleWRvd24uemYudHJhcGZvY3VzXCIpfX07Rm91bmRhdGlvbi5LZXlib2FyZD1vfShqUXVlcnkpO3ZhciBfdHlwZW9mPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9OyFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3ZhciB0PXt9O3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlP3Q6KGU9ZS50cmltKCkuc2xpY2UoMSwtMSkpP3Q9ZS5zcGxpdChcIiZcIikucmVkdWNlKGZ1bmN0aW9uKGUsdCl7dmFyIGk9dC5yZXBsYWNlKC9cXCsvZyxcIiBcIikuc3BsaXQoXCI9XCIpLG49aVswXSxvPWlbMV07cmV0dXJuIG49ZGVjb2RlVVJJQ29tcG9uZW50KG4pLG89dm9pZCAwPT09bz9udWxsOmRlY29kZVVSSUNvbXBvbmVudChvKSxlLmhhc093blByb3BlcnR5KG4pP0FycmF5LmlzQXJyYXkoZVtuXSk/ZVtuXS5wdXNoKG8pOmVbbl09W2Vbbl0sb106ZVtuXT1vLGV9LHt9KTp0fXZhciBpPXtxdWVyaWVzOltdLGN1cnJlbnQ6XCJcIixfaW5pdDpmdW5jdGlvbigpe3ZhciBpLG49dGhpcyxvPWUoXCIuZm91bmRhdGlvbi1tcVwiKS5jc3MoXCJmb250LWZhbWlseVwiKTtpPXQobyk7Zm9yKHZhciBzIGluIGkpaS5oYXNPd25Qcm9wZXJ0eShzKSYmbi5xdWVyaWVzLnB1c2goe25hbWU6cyx2YWx1ZTpcIm9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiBcIitpW3NdK1wiKVwifSk7dGhpcy5jdXJyZW50PXRoaXMuX2dldEN1cnJlbnRTaXplKCksdGhpcy5fd2F0Y2hlcigpfSxhdExlYXN0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZ2V0KGUpO3JldHVybiEhdCYmd2luZG93Lm1hdGNoTWVkaWEodCkubWF0Y2hlc30saXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9ZS50cmltKCkuc3BsaXQoXCIgXCIpLGUubGVuZ3RoPjEmJlwib25seVwiPT09ZVsxXT9lWzBdPT09dGhpcy5fZ2V0Q3VycmVudFNpemUoKTp0aGlzLmF0TGVhc3QoZVswXSl9LGdldDpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gdGhpcy5xdWVyaWVzKWlmKHRoaXMucXVlcmllcy5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGk9dGhpcy5xdWVyaWVzW3RdO2lmKGU9PT1pLm5hbWUpcmV0dXJuIGkudmFsdWV9cmV0dXJuIG51bGx9LF9nZXRDdXJyZW50U2l6ZTpmdW5jdGlvbigpe2Zvcih2YXIgZSx0PTA7dDx0aGlzLnF1ZXJpZXMubGVuZ3RoO3QrKyl7dmFyIGk9dGhpcy5xdWVyaWVzW3RdO3dpbmRvdy5tYXRjaE1lZGlhKGkudmFsdWUpLm1hdGNoZXMmJihlPWkpfXJldHVyblwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGUpKT9lLm5hbWU6ZX0sX3dhdGNoZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2Uod2luZG93KS5vbihcInJlc2l6ZS56Zi5tZWRpYXF1ZXJ5XCIsZnVuY3Rpb24oKXt2YXIgaT10Ll9nZXRDdXJyZW50U2l6ZSgpLG49dC5jdXJyZW50O2khPT1uJiYodC5jdXJyZW50PWksZSh3aW5kb3cpLnRyaWdnZXIoXCJjaGFuZ2VkLnpmLm1lZGlhcXVlcnlcIixbaSxuXSkpfSl9fTtGb3VuZGF0aW9uLk1lZGlhUXVlcnk9aSx3aW5kb3cubWF0Y2hNZWRpYXx8KHdpbmRvdy5tYXRjaE1lZGlhPWZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LnN0eWxlTWVkaWF8fHdpbmRvdy5tZWRpYTtpZighZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLGk9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF0sbj1udWxsO3QudHlwZT1cInRleHQvY3NzXCIsdC5pZD1cIm1hdGNobWVkaWFqcy10ZXN0XCIsaSYmaS5wYXJlbnROb2RlJiZpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsaSksbj1cImdldENvbXB1dGVkU3R5bGVcImluIHdpbmRvdyYmd2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKXx8dC5jdXJyZW50U3R5bGUsZT17bWF0Y2hNZWRpdW06ZnVuY3Rpb24oZSl7dmFyIGk9XCJAbWVkaWEgXCIrZStcInsgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9XCI7cmV0dXJuIHQuc3R5bGVTaGVldD90LnN0eWxlU2hlZXQuY3NzVGV4dD1pOnQudGV4dENvbnRlbnQ9aSxcIjFweFwiPT09bi53aWR0aH19fXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm57bWF0Y2hlczplLm1hdGNoTWVkaXVtKHR8fFwiYWxsXCIpLG1lZGlhOnR8fFwiYWxsXCJ9fX0oKSksRm91bmRhdGlvbi5NZWRpYVF1ZXJ5PWl9KGpRdWVyeSksIWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSx0LGkpe2Z1bmN0aW9uIG4oYSl7cnx8KHI9YSkscz1hLXIsaS5hcHBseSh0KSxzPGU/bz13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG4sdCk6KHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShvKSx0LnRyaWdnZXIoXCJmaW5pc2hlZC56Zi5hbmltYXRlXCIsW3RdKS50cmlnZ2VySGFuZGxlcihcImZpbmlzaGVkLnpmLmFuaW1hdGVcIixbdF0pKX12YXIgbyxzLHI9bnVsbDtyZXR1cm4gMD09PWU/KGkuYXBwbHkodCksdm9pZCB0LnRyaWdnZXIoXCJmaW5pc2hlZC56Zi5hbmltYXRlXCIsW3RdKS50cmlnZ2VySGFuZGxlcihcImZpbmlzaGVkLnpmLmFuaW1hdGVcIixbdF0pKTp2b2lkKG89d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShuKSl9ZnVuY3Rpb24gaSh0LGkscyxyKXtmdW5jdGlvbiBhKCl7dHx8aS5oaWRlKCksbCgpLHImJnIuYXBwbHkoaSl9ZnVuY3Rpb24gbCgpe2lbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uPTAsaS5yZW1vdmVDbGFzcyhkK1wiIFwiK3UrXCIgXCIrcyl9aWYoaT1lKGkpLmVxKDApLGkubGVuZ3RoKXt2YXIgZD10P25bMF06blsxXSx1PXQ/b1swXTpvWzFdO2woKSxpLmFkZENsYXNzKHMpLmNzcyhcInRyYW5zaXRpb25cIixcIm5vbmVcIikscmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7aS5hZGRDbGFzcyhkKSx0JiZpLnNob3coKX0pLHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe2lbMF0ub2Zmc2V0V2lkdGgsaS5jc3MoXCJ0cmFuc2l0aW9uXCIsXCJcIikuYWRkQ2xhc3ModSl9KSxpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoaSksYSl9fXZhciBuPVtcIm11aS1lbnRlclwiLFwibXVpLWxlYXZlXCJdLG89W1wibXVpLWVudGVyLWFjdGl2ZVwiLFwibXVpLWxlYXZlLWFjdGl2ZVwiXSxzPXthbmltYXRlSW46ZnVuY3Rpb24oZSx0LG4pe2koITAsZSx0LG4pfSxhbmltYXRlT3V0OmZ1bmN0aW9uKGUsdCxuKXtpKCExLGUsdCxuKX19O0ZvdW5kYXRpb24uTW92ZT10LEZvdW5kYXRpb24uTW90aW9uPXN9KGpRdWVyeSksIWZ1bmN0aW9uKGUpe3ZhciB0PXtGZWF0aGVyOmZ1bmN0aW9uKHQpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcInpmXCI7dC5hdHRyKFwicm9sZVwiLFwibWVudWJhclwiKTt2YXIgbj10LmZpbmQoXCJsaVwiKS5hdHRyKHtyb2xlOlwibWVudWl0ZW1cIn0pLG89XCJpcy1cIitpK1wiLXN1Ym1lbnVcIixzPW8rXCItaXRlbVwiLHI9XCJpcy1cIitpK1wiLXN1Ym1lbnUtcGFyZW50XCI7bi5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKSxuPXQuY2hpbGRyZW4oXCJ1bFwiKTtuLmxlbmd0aCYmKHQuYWRkQ2xhc3MocikuYXR0cih7XCJhcmlhLWhhc3BvcHVwXCI6ITAsXCJhcmlhLWxhYmVsXCI6dC5jaGlsZHJlbihcImE6Zmlyc3RcIikudGV4dCgpfSksXCJkcmlsbGRvd25cIj09PWkmJnQuYXR0cih7XCJhcmlhLWV4cGFuZGVkXCI6ITF9KSxuLmFkZENsYXNzKFwic3VibWVudSBcIitvKS5hdHRyKHtcImRhdGEtc3VibWVudVwiOlwiXCIscm9sZTpcIm1lbnVcIn0pLFwiZHJpbGxkb3duXCI9PT1pJiZuLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjohMH0pKSx0LnBhcmVudChcIltkYXRhLXN1Ym1lbnVdXCIpLmxlbmd0aCYmdC5hZGRDbGFzcyhcImlzLXN1Ym1lbnUtaXRlbSBcIitzKX0pfSxCdXJuOmZ1bmN0aW9uKGUsdCl7dmFyIGk9XCJpcy1cIit0K1wiLXN1Ym1lbnVcIixuPWkrXCItaXRlbVwiLG89XCJpcy1cIit0K1wiLXN1Ym1lbnUtcGFyZW50XCI7ZS5maW5kKFwiPmxpLCAubWVudSwgLm1lbnUgPiBsaVwiKS5yZW1vdmVDbGFzcyhpK1wiIFwiK24rXCIgXCIrbytcIiBpcy1zdWJtZW51LWl0ZW0gc3VibWVudSBpcy1hY3RpdmVcIikucmVtb3ZlQXR0cihcImRhdGEtc3VibWVudVwiKS5jc3MoXCJkaXNwbGF5XCIsXCJcIil9fTtGb3VuZGF0aW9uLk5lc3Q9dH0oalF1ZXJ5KSwhZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQsaSl7dmFyIG4sbyxzPXRoaXMscj10LmR1cmF0aW9uLGE9T2JqZWN0LmtleXMoZS5kYXRhKCkpWzBdfHxcInRpbWVyXCIsbD0tMTt0aGlzLmlzUGF1c2VkPSExLHRoaXMucmVzdGFydD1mdW5jdGlvbigpe2w9LTEsY2xlYXJUaW1lb3V0KG8pLHRoaXMuc3RhcnQoKX0sdGhpcy5zdGFydD1mdW5jdGlvbigpe3RoaXMuaXNQYXVzZWQ9ITEsY2xlYXJUaW1lb3V0KG8pLGw9bDw9MD9yOmwsZS5kYXRhKFwicGF1c2VkXCIsITEpLG49RGF0ZS5ub3coKSxvPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmluZmluaXRlJiZzLnJlc3RhcnQoKSxpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiZpKCl9LGwpLGUudHJpZ2dlcihcInRpbWVyc3RhcnQuemYuXCIrYSl9LHRoaXMucGF1c2U9ZnVuY3Rpb24oKXt0aGlzLmlzUGF1c2VkPSEwLGNsZWFyVGltZW91dChvKSxlLmRhdGEoXCJwYXVzZWRcIiwhMCk7dmFyIHQ9RGF0ZS5ub3coKTtsLT10LW4sZS50cmlnZ2VyKFwidGltZXJwYXVzZWQuemYuXCIrYSl9fWZ1bmN0aW9uIGkodCxpKXtmdW5jdGlvbiBuKCl7by0tLDA9PT1vJiZpKCl9dmFyIG89dC5sZW5ndGg7MD09PW8mJmkoKSx0LmVhY2goZnVuY3Rpb24oKXtpZih0aGlzLmNvbXBsZXRlfHw0PT09dGhpcy5yZWFkeVN0YXRlfHxcImNvbXBsZXRlXCI9PT10aGlzLnJlYWR5U3RhdGUpbigpO2Vsc2V7dmFyIHQ9ZSh0aGlzKS5hdHRyKFwic3JjXCIpO2UodGhpcykuYXR0cihcInNyY1wiLHQrXCI/XCIrKG5ldyBEYXRlKS5nZXRUaW1lKCkpLGUodGhpcykub25lKFwibG9hZFwiLGZ1bmN0aW9uKCl7bigpfSl9fSl9Rm91bmRhdGlvbi5UaW1lcj10LEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQ9aX0oalF1ZXJ5KSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsaSksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0KSxkPSExfWZ1bmN0aW9uIGkoaSl7aWYoZS5zcG90U3dpcGUucHJldmVudERlZmF1bHQmJmkucHJldmVudERlZmF1bHQoKSxkKXt2YXIgbixvPWkudG91Y2hlc1swXS5wYWdlWCxyPShpLnRvdWNoZXNbMF0ucGFnZVkscy1vKTtsPShuZXcgRGF0ZSkuZ2V0VGltZSgpLWEsTWF0aC5hYnMocik+PWUuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQmJmw8PWUuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQmJihuPXI+MD9cImxlZnRcIjpcInJpZ2h0XCIpLG4mJihpLnByZXZlbnREZWZhdWx0KCksdC5jYWxsKHRoaXMpLGUodGhpcykudHJpZ2dlcihcInN3aXBlXCIsbikudHJpZ2dlcihcInN3aXBlXCIrbikpfX1mdW5jdGlvbiBuKGUpezE9PWUudG91Y2hlcy5sZW5ndGgmJihzPWUudG91Y2hlc1swXS5wYWdlWCxyPWUudG91Y2hlc1swXS5wYWdlWSxkPSEwLGE9KG5ldyBEYXRlKS5nZXRUaW1lKCksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsaSwhMSksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0LCExKSl9ZnVuY3Rpb24gbygpe3RoaXMuYWRkRXZlbnRMaXN0ZW5lciYmdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLG4sITEpfWUuc3BvdFN3aXBlPXt2ZXJzaW9uOlwiMS4wLjBcIixlbmFibGVkOlwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscHJldmVudERlZmF1bHQ6ITEsbW92ZVRocmVzaG9sZDo3NSx0aW1lVGhyZXNob2xkOjIwMH07dmFyIHMscixhLGwsZD0hMTtlLmV2ZW50LnNwZWNpYWwuc3dpcGU9e3NldHVwOm99LGUuZWFjaChbXCJsZWZ0XCIsXCJ1cFwiLFwiZG93blwiLFwicmlnaHRcIl0sZnVuY3Rpb24oKXtlLmV2ZW50LnNwZWNpYWxbXCJzd2lwZVwiK3RoaXNdPXtzZXR1cDpmdW5jdGlvbigpe2UodGhpcykub24oXCJzd2lwZVwiLGUubm9vcCl9fX0pfShqUXVlcnkpLCFmdW5jdGlvbihlKXtlLmZuLmFkZFRvdWNoPWZ1bmN0aW9uKCl7dGhpcy5lYWNoKGZ1bmN0aW9uKGksbil7ZShuKS5iaW5kKFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWxcIixmdW5jdGlvbigpe3QoZXZlbnQpfSl9KTt2YXIgdD1mdW5jdGlvbihlKXt2YXIgdCxpPWUuY2hhbmdlZFRvdWNoZXMsbj1pWzBdLG89e3RvdWNoc3RhcnQ6XCJtb3VzZWRvd25cIix0b3VjaG1vdmU6XCJtb3VzZW1vdmVcIix0b3VjaGVuZDpcIm1vdXNldXBcIn0scz1vW2UudHlwZV07XCJNb3VzZUV2ZW50XCJpbiB3aW5kb3cmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5Nb3VzZUV2ZW50P3Q9bmV3IHdpbmRvdy5Nb3VzZUV2ZW50KHMse2J1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxzY3JlZW5YOm4uc2NyZWVuWCxzY3JlZW5ZOm4uc2NyZWVuWSxjbGllbnRYOm4uY2xpZW50WCxjbGllbnRZOm4uY2xpZW50WX0pOih0PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudFwiKSx0LmluaXRNb3VzZUV2ZW50KHMsITAsITAsd2luZG93LDEsbi5zY3JlZW5YLG4uc2NyZWVuWSxuLmNsaWVudFgsbi5jbGllbnRZLCExLCExLCExLCExLDAsbnVsbCkpLG4udGFyZ2V0LmRpc3BhdGNoRXZlbnQodCl9fX0oalF1ZXJ5KTt2YXIgX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTshZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3IoKSxuKCksbygpLHMoKSxpKCl9ZnVuY3Rpb24gaSh0KXt2YXIgaT1lKFwiW2RhdGEteWV0aS1ib3hdXCIpLG49W1wiZHJvcGRvd25cIixcInRvb2x0aXBcIixcInJldmVhbFwiXTtpZih0JiYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/bi5wdXNoKHQpOlwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHQpKSYmXCJzdHJpbmdcIj09dHlwZW9mIHRbMF0/bi5jb25jYXQodCk6Y29uc29sZS5lcnJvcihcIlBsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3NcIikpLGkubGVuZ3RoKXt2YXIgbz1uLm1hcChmdW5jdGlvbihlKXtyZXR1cm5cImNsb3NlbWUuemYuXCIrZX0pLmpvaW4oXCIgXCIpO2Uod2luZG93KS5vZmYobykub24obyxmdW5jdGlvbih0LGkpe3ZhciBuPXQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKVswXSxvPWUoXCJbZGF0YS1cIituK1wiXVwiKS5ub3QoJ1tkYXRhLXlldGktYm94PVwiJytpKydcIl0nKTtvLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpO3QudHJpZ2dlckhhbmRsZXIoXCJjbG9zZS56Zi50cmlnZ2VyXCIsW3RdKX0pfSl9fWZ1bmN0aW9uIG4odCl7dmFyIGk9dm9pZCAwLG49ZShcIltkYXRhLXJlc2l6ZV1cIik7bi5sZW5ndGgmJmUod2luZG93KS5vZmYoXCJyZXNpemUuemYudHJpZ2dlclwiKS5vbihcInJlc2l6ZS56Zi50cmlnZ2VyXCIsZnVuY3Rpb24obyl7aSYmY2xlYXJUaW1lb3V0KGkpLGk9c2V0VGltZW91dChmdW5jdGlvbigpe2F8fG4uZWFjaChmdW5jdGlvbigpe2UodGhpcykudHJpZ2dlckhhbmRsZXIoXCJyZXNpemVtZS56Zi50cmlnZ2VyXCIpfSksbi5hdHRyKFwiZGF0YS1ldmVudHNcIixcInJlc2l6ZVwiKX0sdHx8MTApfSl9ZnVuY3Rpb24gbyh0KXt2YXIgaT12b2lkIDAsbj1lKFwiW2RhdGEtc2Nyb2xsXVwiKTtuLmxlbmd0aCYmZSh3aW5kb3cpLm9mZihcInNjcm9sbC56Zi50cmlnZ2VyXCIpLm9uKFwic2Nyb2xsLnpmLnRyaWdnZXJcIixmdW5jdGlvbihvKXtpJiZjbGVhclRpbWVvdXQoaSksaT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YXx8bi5lYWNoKGZ1bmN0aW9uKCl7ZSh0aGlzKS50cmlnZ2VySGFuZGxlcihcInNjcm9sbG1lLnpmLnRyaWdnZXJcIil9KSxuLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwic2Nyb2xsXCIpfSx0fHwxMCl9KX1mdW5jdGlvbiBzKHQpe3ZhciBpPWUoXCJbZGF0YS1tdXRhdGVdXCIpO2kubGVuZ3RoJiZhJiZpLmVhY2goZnVuY3Rpb24oKXtlKHRoaXMpLnRyaWdnZXJIYW5kbGVyKFwibXV0YXRlbWUuemYudHJpZ2dlclwiKX0pfWZ1bmN0aW9uIHIoKXtpZighYSlyZXR1cm4hMTt2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXVwiKSxpPWZ1bmN0aW9uKHQpe3ZhciBpPWUodFswXS50YXJnZXQpO3N3aXRjaCh0WzBdLnR5cGUpe2Nhc2VcImF0dHJpYnV0ZXNcIjpcInNjcm9sbFwiPT09aS5hdHRyKFwiZGF0YS1ldmVudHNcIikmJlwiZGF0YS1ldmVudHNcIj09PXRbMF0uYXR0cmlidXRlTmFtZSYmaS50cmlnZ2VySGFuZGxlcihcInNjcm9sbG1lLnpmLnRyaWdnZXJcIixbaSx3aW5kb3cucGFnZVlPZmZzZXRdKSxcInJlc2l6ZVwiPT09aS5hdHRyKFwiZGF0YS1ldmVudHNcIikmJlwiZGF0YS1ldmVudHNcIj09PXRbMF0uYXR0cmlidXRlTmFtZSYmaS50cmlnZ2VySGFuZGxlcihcInJlc2l6ZW1lLnpmLnRyaWdnZXJcIixbaV0pLFwic3R5bGVcIj09PXRbMF0uYXR0cmlidXRlTmFtZSYmKGkuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikuYXR0cihcImRhdGEtZXZlbnRzXCIsXCJtdXRhdGVcIiksaS5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIixbaS5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKV0pKTticmVhaztjYXNlXCJjaGlsZExpc3RcIjppLmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwibXV0YXRlXCIpLGkuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIsW2kuY2xvc2VzdChcIltkYXRhLW11dGF0ZV1cIildKTticmVhaztkZWZhdWx0OnJldHVybiExfX07aWYodC5sZW5ndGgpZm9yKHZhciBuPTA7bjw9dC5sZW5ndGgtMTtuKyspe3ZhciBvPW5ldyBhKGkpO28ub2JzZXJ2ZSh0W25dLHthdHRyaWJ1dGVzOiEwLGNoaWxkTGlzdDohMCxjaGFyYWN0ZXJEYXRhOiExLHN1YnRyZWU6ITAsYXR0cmlidXRlRmlsdGVyOltcImRhdGEtZXZlbnRzXCIsXCJzdHlsZVwiXX0pfX12YXIgYT1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXCJXZWJLaXRcIixcIk1velwiLFwiT1wiLFwiTXNcIixcIlwiXSx0PTA7dDxlLmxlbmd0aDt0KyspaWYoZVt0XStcIk11dGF0aW9uT2JzZXJ2ZXJcImluIHdpbmRvdylyZXR1cm4gd2luZG93W2VbdF0rXCJNdXRhdGlvbk9ic2VydmVyXCJdO3JldHVybiExfSgpLGw9ZnVuY3Rpb24odCxpKXt0LmRhdGEoaSkuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24obil7ZShcIiNcIituKVtcImNsb3NlXCI9PT1pP1widHJpZ2dlclwiOlwidHJpZ2dlckhhbmRsZXJcIl0oaStcIi56Zi50cmlnZ2VyXCIsW3RdKX0pfTtlKGRvY3VtZW50KS5vbihcImNsaWNrLnpmLnRyaWdnZXJcIixcIltkYXRhLW9wZW5dXCIsZnVuY3Rpb24oKXtsKGUodGhpcyksXCJvcGVuXCIpfSksZShkb2N1bWVudCkub24oXCJjbGljay56Zi50cmlnZ2VyXCIsXCJbZGF0YS1jbG9zZV1cIixmdW5jdGlvbigpe3ZhciB0PWUodGhpcykuZGF0YShcImNsb3NlXCIpO3Q/bChlKHRoaXMpLFwiY2xvc2VcIik6ZSh0aGlzKS50cmlnZ2VyKFwiY2xvc2UuemYudHJpZ2dlclwiKX0pLGUoZG9jdW1lbnQpLm9uKFwiY2xpY2suemYudHJpZ2dlclwiLFwiW2RhdGEtdG9nZ2xlXVwiLGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKS5kYXRhKFwidG9nZ2xlXCIpO3Q/bChlKHRoaXMpLFwidG9nZ2xlXCIpOmUodGhpcykudHJpZ2dlcihcInRvZ2dsZS56Zi50cmlnZ2VyXCIpfSksZShkb2N1bWVudCkub24oXCJjbG9zZS56Zi50cmlnZ2VyXCIsXCJbZGF0YS1jbG9zYWJsZV1cIixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpO3ZhciBpPWUodGhpcykuZGF0YShcImNsb3NhYmxlXCIpO1wiXCIhPT1pP0ZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoZSh0aGlzKSxpLGZ1bmN0aW9uKCl7ZSh0aGlzKS50cmlnZ2VyKFwiY2xvc2VkLnpmXCIpfSk6ZSh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcihcImNsb3NlZC56ZlwiKX0pLGUoZG9jdW1lbnQpLm9uKFwiZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXJcIixcIltkYXRhLXRvZ2dsZS1mb2N1c11cIixmdW5jdGlvbigpe3ZhciB0PWUodGhpcykuZGF0YShcInRvZ2dsZS1mb2N1c1wiKTtlKFwiI1wiK3QpLnRyaWdnZXJIYW5kbGVyKFwidG9nZ2xlLnpmLnRyaWdnZXJcIixbZSh0aGlzKV0pfSksZSh3aW5kb3cpLm9uKFwibG9hZFwiLGZ1bmN0aW9uKCl7dCgpfSksRm91bmRhdGlvbi5JSGVhcllvdT10fShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGkpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIkFiaWRlXCIpfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRpbnB1dHM9dGhpcy4kZWxlbWVudC5maW5kKFwiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3RcIiksdGhpcy5fZXZlbnRzKCl9fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRlbGVtZW50Lm9mZihcIi5hYmlkZVwiKS5vbihcInJlc2V0LnpmLmFiaWRlXCIsZnVuY3Rpb24oKXt0LnJlc2V0Rm9ybSgpfSkub24oXCJzdWJtaXQuemYuYWJpZGVcIixmdW5jdGlvbigpe3JldHVybiB0LnZhbGlkYXRlRm9ybSgpfSksXCJmaWVsZENoYW5nZVwiPT09dGhpcy5vcHRpb25zLnZhbGlkYXRlT24mJnRoaXMuJGlucHV0cy5vZmYoXCJjaGFuZ2UuemYuYWJpZGVcIikub24oXCJjaGFuZ2UuemYuYWJpZGVcIixmdW5jdGlvbihpKXt0LnZhbGlkYXRlSW5wdXQoZShpLnRhcmdldCkpfSksdGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSYmdGhpcy4kaW5wdXRzLm9mZihcImlucHV0LnpmLmFiaWRlXCIpLm9uKFwiaW5wdXQuemYuYWJpZGVcIixmdW5jdGlvbihpKXt0LnZhbGlkYXRlSW5wdXQoZShpLnRhcmdldCkpfSksdGhpcy5vcHRpb25zLnZhbGlkYXRlT25CbHVyJiZ0aGlzLiRpbnB1dHMub2ZmKFwiYmx1ci56Zi5hYmlkZVwiKS5vbihcImJsdXIuemYuYWJpZGVcIixmdW5jdGlvbihpKXt0LnZhbGlkYXRlSW5wdXQoZShpLnRhcmdldCkpfSl9fSx7a2V5OlwiX3JlZmxvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5faW5pdCgpfX0se2tleTpcInJlcXVpcmVkQ2hlY2tcIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZS5hdHRyKFwicmVxdWlyZWRcIikpcmV0dXJuITA7dmFyIHQ9ITA7c3dpdGNoKGVbMF0udHlwZSl7Y2FzZVwiY2hlY2tib3hcIjp0PWVbMF0uY2hlY2tlZDticmVhaztjYXNlXCJzZWxlY3RcIjpjYXNlXCJzZWxlY3Qtb25lXCI6Y2FzZVwic2VsZWN0LW11bHRpcGxlXCI6dmFyIGk9ZS5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpO2kubGVuZ3RoJiZpLnZhbCgpfHwodD0hMSk7YnJlYWs7ZGVmYXVsdDplLnZhbCgpJiZlLnZhbCgpLmxlbmd0aHx8KHQ9ITEpfXJldHVybiB0fX0se2tleTpcImZpbmRGb3JtRXJyb3JcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7cmV0dXJuIHQubGVuZ3RofHwodD1lLnBhcmVudCgpLmZpbmQodGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKSksdH19LHtrZXk6XCJmaW5kTGFiZWxcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lWzBdLmlkLGk9dGhpcy4kZWxlbWVudC5maW5kKCdsYWJlbFtmb3I9XCInK3QrJ1wiXScpO3JldHVybiBpLmxlbmd0aD9pOmUuY2xvc2VzdChcImxhYmVsXCIpfX0se2tleTpcImZpbmRSYWRpb0xhYmVsc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMsbj10Lm1hcChmdW5jdGlvbih0LG4pe3ZhciBvPW4uaWQscz1pLiRlbGVtZW50LmZpbmQoJ2xhYmVsW2Zvcj1cIicrbysnXCJdJyk7cmV0dXJuIHMubGVuZ3RofHwocz1lKG4pLmNsb3Nlc3QoXCJsYWJlbFwiKSksc1swXX0pO3JldHVybiBlKG4pfX0se2tleTpcImFkZEVycm9yQ2xhc3Nlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuZmluZExhYmVsKGUpLGk9dGhpcy5maW5kRm9ybUVycm9yKGUpO3QubGVuZ3RoJiZ0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpLGkubGVuZ3RoJiZpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyksZS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKFwiZGF0YS1pbnZhbGlkXCIsXCJcIil9fSx7a2V5OlwicmVtb3ZlUmFkaW9FcnJvckNsYXNzZXNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLiRlbGVtZW50LmZpbmQoJzpyYWRpb1tuYW1lPVwiJytlKydcIl0nKSxpPXRoaXMuZmluZFJhZGlvTGFiZWxzKHQpLG49dGhpcy5maW5kRm9ybUVycm9yKHQpO2kubGVuZ3RoJiZpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpLG4ubGVuZ3RoJiZuLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyksdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5yZW1vdmVBdHRyKFwiZGF0YS1pbnZhbGlkXCIpfX0se2tleTpcInJlbW92ZUVycm9yQ2xhc3Nlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKFwicmFkaW9cIj09ZVswXS50eXBlKXJldHVybiB0aGlzLnJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGUuYXR0cihcIm5hbWVcIikpO3ZhciB0PXRoaXMuZmluZExhYmVsKGUpLGk9dGhpcy5maW5kRm9ybUVycm9yKGUpO3QubGVuZ3RoJiZ0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpLGkubGVuZ3RoJiZpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyksZS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5yZW1vdmVBdHRyKFwiZGF0YS1pbnZhbGlkXCIpfX0se2tleTpcInZhbGlkYXRlSW5wdXRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10aGlzLG49dGhpcy5yZXF1aXJlZENoZWNrKHQpLG89ITEscz0hMCxyPXQuYXR0cihcImRhdGEtdmFsaWRhdG9yXCIpLGE9ITA7aWYodC5pcyhcIltkYXRhLWFiaWRlLWlnbm9yZV1cIil8fHQuaXMoJ1t0eXBlPVwiaGlkZGVuXCJdJykpcmV0dXJuITA7c3dpdGNoKHRbMF0udHlwZSl7Y2FzZVwicmFkaW9cIjpvPXRoaXMudmFsaWRhdGVSYWRpbyh0LmF0dHIoXCJuYW1lXCIpKTticmVhaztjYXNlXCJjaGVja2JveFwiOm89bjticmVhaztjYXNlXCJzZWxlY3RcIjpjYXNlXCJzZWxlY3Qtb25lXCI6Y2FzZVwic2VsZWN0LW11bHRpcGxlXCI6bz1uO2JyZWFrO2RlZmF1bHQ6bz10aGlzLnZhbGlkYXRlVGV4dCh0KX1yJiYocz10aGlzLm1hdGNoVmFsaWRhdGlvbih0LHIsdC5hdHRyKFwicmVxdWlyZWRcIikpKSx0LmF0dHIoXCJkYXRhLWVxdWFsdG9cIikmJihhPXRoaXMub3B0aW9ucy52YWxpZGF0b3JzLmVxdWFsVG8odCkpO3ZhciBsPVtuLG8scyxhXS5pbmRleE9mKCExKT09PS0xLGQ9KGw/XCJ2YWxpZFwiOlwiaW52YWxpZFwiKStcIi56Zi5hYmlkZVwiO2lmKGwpe3ZhciB1PXRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWx0bz1cIicrdC5hdHRyKFwiaWRcIikrJ1wiXScpO3UubGVuZ3RoJiYhZnVuY3Rpb24oKXt2YXIgdD1pO3UuZWFjaChmdW5jdGlvbigpe2UodGhpcykudmFsKCkmJnQudmFsaWRhdGVJbnB1dChlKHRoaXMpKX0pfSgpfXJldHVybiB0aGlzW2w/XCJyZW1vdmVFcnJvckNsYXNzZXNcIjpcImFkZEVycm9yQ2xhc3Nlc1wiXSh0KSx0LnRyaWdnZXIoZCxbdF0pLGx9fSx7a2V5OlwidmFsaWRhdGVGb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1bXSxpPXRoaXM7dGhpcy4kaW5wdXRzLmVhY2goZnVuY3Rpb24oKXt0LnB1c2goaS52YWxpZGF0ZUlucHV0KGUodGhpcykpKX0pO3ZhciBuPXQuaW5kZXhPZighMSk9PT0tMTtyZXR1cm4gdGhpcy4kZWxlbWVudC5maW5kKFwiW2RhdGEtYWJpZGUtZXJyb3JdXCIpLmNzcyhcImRpc3BsYXlcIixuP1wibm9uZVwiOlwiYmxvY2tcIiksdGhpcy4kZWxlbWVudC50cmlnZ2VyKChuP1wiZm9ybXZhbGlkXCI6XCJmb3JtaW52YWxpZFwiKStcIi56Zi5hYmlkZVwiLFt0aGlzLiRlbGVtZW50XSksbn19LHtrZXk6XCJ2YWxpZGF0ZVRleHRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8ZS5hdHRyKFwicGF0dGVyblwiKXx8ZS5hdHRyKFwidHlwZVwiKTt2YXIgaT1lLnZhbCgpLG49ITE7cmV0dXJuIGkubGVuZ3RoP249dGhpcy5vcHRpb25zLnBhdHRlcm5zLmhhc093blByb3BlcnR5KHQpP3RoaXMub3B0aW9ucy5wYXR0ZXJuc1t0XS50ZXN0KGkpOnQ9PT1lLmF0dHIoXCJ0eXBlXCIpfHxuZXcgUmVnRXhwKHQpLnRlc3QoaSk6ZS5wcm9wKFwicmVxdWlyZWRcIil8fChuPSEwKSxufX0se2tleTpcInZhbGlkYXRlUmFkaW9cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10aGlzLiRlbGVtZW50LmZpbmQoJzpyYWRpb1tuYW1lPVwiJyt0KydcIl0nKSxuPSExLG89ITE7cmV0dXJuIGkuZWFjaChmdW5jdGlvbih0LGkpe2UoaSkuYXR0cihcInJlcXVpcmVkXCIpJiYobz0hMCl9KSxvfHwobj0hMCksbnx8aS5lYWNoKGZ1bmN0aW9uKHQsaSl7ZShpKS5wcm9wKFwiY2hlY2tlZFwiKSYmKG49ITApfSksbn19LHtrZXk6XCJtYXRjaFZhbGlkYXRpb25cIix2YWx1ZTpmdW5jdGlvbihlLHQsaSl7dmFyIG49dGhpcztpPSEhaTt2YXIgbz10LnNwbGl0KFwiIFwiKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG4ub3B0aW9ucy52YWxpZGF0b3JzW3RdKGUsaSxlLnBhcmVudCgpKX0pO3JldHVybiBvLmluZGV4T2YoITEpPT09LTF9fSx7a2V5OlwicmVzZXRGb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRlbGVtZW50LGk9dGhpcy5vcHRpb25zO2UoXCIuXCIraS5sYWJlbEVycm9yQ2xhc3MsdCkubm90KFwic21hbGxcIikucmVtb3ZlQ2xhc3MoaS5sYWJlbEVycm9yQ2xhc3MpLGUoXCIuXCIraS5pbnB1dEVycm9yQ2xhc3MsdCkubm90KFwic21hbGxcIikucmVtb3ZlQ2xhc3MoaS5pbnB1dEVycm9yQ2xhc3MpLGUoaS5mb3JtRXJyb3JTZWxlY3RvcitcIi5cIitpLmZvcm1FcnJvckNsYXNzKS5yZW1vdmVDbGFzcyhpLmZvcm1FcnJvckNsYXNzKSx0LmZpbmQoXCJbZGF0YS1hYmlkZS1lcnJvcl1cIikuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKSxlKFwiOmlucHV0XCIsdCkubm90KFwiOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXVwiKS52YWwoXCJcIikucmVtb3ZlQXR0cihcImRhdGEtaW52YWxpZFwiKSxlKFwiOmlucHV0OnJhZGlvXCIsdCkubm90KFwiW2RhdGEtYWJpZGUtaWdub3JlXVwiKS5wcm9wKFwiY2hlY2tlZFwiLCExKS5yZW1vdmVBdHRyKFwiZGF0YS1pbnZhbGlkXCIpLGUoXCI6aW5wdXQ6Y2hlY2tib3hcIix0KS5ub3QoXCJbZGF0YS1hYmlkZS1pZ25vcmVdXCIpLnByb3AoXCJjaGVja2VkXCIsITEpLnJlbW92ZUF0dHIoXCJkYXRhLWludmFsaWRcIiksdC50cmlnZ2VyKFwiZm9ybXJlc2V0LnpmLmFiaWRlXCIsW3RdKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJGVsZW1lbnQub2ZmKFwiLmFiaWRlXCIpLmZpbmQoXCJbZGF0YS1hYmlkZS1lcnJvcl1cIikuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKSx0aGlzLiRpbnB1dHMub2ZmKFwiLmFiaWRlXCIpLmVhY2goZnVuY3Rpb24oKXt0LnJlbW92ZUVycm9yQ2xhc3NlcyhlKHRoaXMpKX0pLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXt2YWxpZGF0ZU9uOlwiZmllbGRDaGFuZ2VcIixsYWJlbEVycm9yQ2xhc3M6XCJpcy1pbnZhbGlkLWxhYmVsXCIsaW5wdXRFcnJvckNsYXNzOlwiaXMtaW52YWxpZC1pbnB1dFwiLGZvcm1FcnJvclNlbGVjdG9yOlwiLmZvcm0tZXJyb3JcIixmb3JtRXJyb3JDbGFzczpcImlzLXZpc2libGVcIixsaXZlVmFsaWRhdGU6ITEsdmFsaWRhdGVPbkJsdXI6ITEscGF0dGVybnM6e2FscGhhOi9eW2EtekEtWl0rJC8sYWxwaGFfbnVtZXJpYzovXlthLXpBLVowLTldKyQvLGludGVnZXI6L15bLStdP1xcZCskLyxudW1iZXI6L15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLGNhcmQ6L14oPzo0WzAtOV17MTJ9KD86WzAtOV17M30pP3w1WzEtNV1bMC05XXsxNH18Nig/OjAxMXw1WzAtOV1bMC05XSlbMC05XXsxMn18M1s0N11bMC05XXsxM318Myg/OjBbMC01XXxbNjhdWzAtOV0pWzAtOV17MTF9fCg/OjIxMzF8MTgwMHwzNVxcZHszfSlcXGR7MTF9KSQvLGN2djovXihbMC05XSl7Myw0fSQvLGVtYWlsOi9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKyQvLHVybDovXihodHRwcz98ZnRwfGZpbGV8c3NoKTpcXC9cXC8oKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvLGRvbWFpbjovXihbYS16QS1aMC05XShbYS16QS1aMC05XFwtXXswLDYxfVthLXpBLVowLTldKT9cXC4pK1thLXpBLVpdezIsOH0kLyxkYXRldGltZTovXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sZGF0ZTovKD86MTl8MjApWzAtOV17Mn0tKD86KD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfDFbMC05XXwyWzAtOV0pfCg/Oig/ITAyKSg/OjBbMS05XXwxWzAtMl0pLSg/OjMwKSl8KD86KD86MFsxMzU3OF18MVswMl0pLTMxKSkkLyx0aW1lOi9eKDBbMC05XXwxWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn0kLyxkYXRlSVNPOi9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxtb250aF9kYXlfeWVhcjovXigwWzEtOV18MVswMTJdKVstIFxcLy5dKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl1cXGR7NH0kLyxkYXlfbW9udGhfeWVhcjovXigwWzEtOV18WzEyXVswLTldfDNbMDFdKVstIFxcLy5dKDBbMS05XXwxWzAxMl0pWy0gXFwvLl1cXGR7NH0kLyxjb2xvcjovXiM/KFthLWZBLUYwLTldezZ9fFthLWZBLUYwLTldezN9KSQvfSx2YWxpZGF0b3JzOntlcXVhbFRvOmZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gZShcIiNcIit0LmF0dHIoXCJkYXRhLWVxdWFsdG9cIikpLnZhbCgpPT09dC52YWwoKX19fSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiQWJpZGVcIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIkFjY29yZGlvblwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKFwiQWNjb3JkaW9uXCIse0VOVEVSOlwidG9nZ2xlXCIsU1BBQ0U6XCJ0b2dnbGVcIixBUlJPV19ET1dOOlwibmV4dFwiLEFSUk9XX1VQOlwicHJldmlvdXNcIn0pfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LmF0dHIoXCJyb2xlXCIsXCJ0YWJsaXN0XCIpLHRoaXMuJHRhYnM9dGhpcy4kZWxlbWVudC5jaGlsZHJlbihcIltkYXRhLWFjY29yZGlvbi1pdGVtXVwiKSx0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24odCxpKXt2YXIgbj1lKGkpLG89bi5jaGlsZHJlbihcIltkYXRhLXRhYi1jb250ZW50XVwiKSxzPW9bMF0uaWR8fEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNixcImFjY29yZGlvblwiKSxyPWkuaWR8fHMrXCItbGFiZWxcIjtuLmZpbmQoXCJhOmZpcnN0XCIpLmF0dHIoe1wiYXJpYS1jb250cm9sc1wiOnMscm9sZTpcInRhYlwiLGlkOnIsXCJhcmlhLWV4cGFuZGVkXCI6ITEsXCJhcmlhLXNlbGVjdGVkXCI6ITF9KSxvLmF0dHIoe3JvbGU6XCJ0YWJwYW5lbFwiLFwiYXJpYS1sYWJlbGxlZGJ5XCI6cixcImFyaWEtaGlkZGVuXCI6ITAsaWQ6c30pfSk7dmFyIHQ9dGhpcy4kZWxlbWVudC5maW5kKFwiLmlzLWFjdGl2ZVwiKS5jaGlsZHJlbihcIltkYXRhLXRhYi1jb250ZW50XVwiKTt0Lmxlbmd0aCYmdGhpcy5kb3duKHQsITApLHRoaXMuX2V2ZW50cygpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9ZSh0aGlzKSxuPWkuY2hpbGRyZW4oXCJbZGF0YS10YWItY29udGVudF1cIik7bi5sZW5ndGgmJmkuY2hpbGRyZW4oXCJhXCIpLm9mZihcImNsaWNrLnpmLmFjY29yZGlvbiBrZXlkb3duLnpmLmFjY29yZGlvblwiKS5vbihcImNsaWNrLnpmLmFjY29yZGlvblwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LnRvZ2dsZShuKX0pLm9uKFwia2V5ZG93bi56Zi5hY2NvcmRpb25cIixmdW5jdGlvbihlKXtGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLFwiQWNjb3JkaW9uXCIse3RvZ2dsZTpmdW5jdGlvbigpe3QudG9nZ2xlKG4pfSxuZXh0OmZ1bmN0aW9uKCl7dmFyIGU9aS5uZXh0KCkuZmluZChcImFcIikuZm9jdXMoKTt0Lm9wdGlvbnMubXVsdGlFeHBhbmR8fGUudHJpZ2dlcihcImNsaWNrLnpmLmFjY29yZGlvblwiKX0scHJldmlvdXM6ZnVuY3Rpb24oKXt2YXIgZT1pLnByZXYoKS5maW5kKFwiYVwiKS5mb2N1cygpO3Qub3B0aW9ucy5tdWx0aUV4cGFuZHx8ZS50cmlnZ2VyKFwiY2xpY2suemYuYWNjb3JkaW9uXCIpfSxoYW5kbGVkOmZ1bmN0aW9uKCl7ZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCl9fSl9KX0pfX0se2tleTpcInRvZ2dsZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UucGFyZW50KCkuaGFzQ2xhc3MoXCJpcy1hY3RpdmVcIik/dGhpcy51cChlKTp0aGlzLmRvd24oZSl9fSx7a2V5OlwiZG93blwiLHZhbHVlOmZ1bmN0aW9uKHQsaSl7dmFyIG49dGhpcztpZih0LmF0dHIoXCJhcmlhLWhpZGRlblwiLCExKS5wYXJlbnQoXCJbZGF0YS10YWItY29udGVudF1cIikuYWRkQmFjaygpLnBhcmVudCgpLmFkZENsYXNzKFwiaXMtYWN0aXZlXCIpLCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQmJiFpKXt2YXIgbz10aGlzLiRlbGVtZW50LmNoaWxkcmVuKFwiLmlzLWFjdGl2ZVwiKS5jaGlsZHJlbihcIltkYXRhLXRhYi1jb250ZW50XVwiKTtvLmxlbmd0aCYmdGhpcy51cChvLm5vdCh0KSl9dC5zbGlkZURvd24odGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsZnVuY3Rpb24oKXtuLiRlbGVtZW50LnRyaWdnZXIoXCJkb3duLnpmLmFjY29yZGlvblwiLFt0XSl9KSxlKFwiI1wiK3QuYXR0cihcImFyaWEtbGFiZWxsZWRieVwiKSkuYXR0cih7XCJhcmlhLWV4cGFuZGVkXCI6ITAsXCJhcmlhLXNlbGVjdGVkXCI6ITB9KX19LHtrZXk6XCJ1cFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPXQucGFyZW50KCkuc2libGluZ3MoKSxuPXRoaXM7KHRoaXMub3B0aW9ucy5hbGxvd0FsbENsb3NlZHx8aS5oYXNDbGFzcyhcImlzLWFjdGl2ZVwiKSkmJnQucGFyZW50KCkuaGFzQ2xhc3MoXCJpcy1hY3RpdmVcIikmJih0LnNsaWRlVXAobi5vcHRpb25zLnNsaWRlU3BlZWQsZnVuY3Rpb24oKXtuLiRlbGVtZW50LnRyaWdnZXIoXCJ1cC56Zi5hY2NvcmRpb25cIixbdF0pfSksdC5hdHRyKFwiYXJpYS1oaWRkZW5cIiwhMCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmVcIiksZShcIiNcIit0LmF0dHIoXCJhcmlhLWxhYmVsbGVkYnlcIikpLmF0dHIoe1wiYXJpYS1leHBhbmRlZFwiOiExLFwiYXJpYS1zZWxlY3RlZFwiOiExfSkpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQuZmluZChcIltkYXRhLXRhYi1jb250ZW50XVwiKS5zdG9wKCEwKS5zbGlkZVVwKDApLmNzcyhcImRpc3BsYXlcIixcIlwiKSx0aGlzLiRlbGVtZW50LmZpbmQoXCJhXCIpLm9mZihcIi56Zi5hY2NvcmRpb25cIiksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e3NsaWRlU3BlZWQ6MjUwLG11bHRpRXhwYW5kOiExLGFsbG93QWxsQ2xvc2VkOiExfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiQWNjb3JkaW9uXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1pLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0LmRlZmF1bHRzLHRoaXMuJGVsZW1lbnQuZGF0YSgpLG4pLEZvdW5kYXRpb24uTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsXCJhY2NvcmRpb25cIiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIkFjY29yZGlvbk1lbnVcIiksRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcihcIkFjY29yZGlvbk1lbnVcIix7RU5URVI6XCJ0b2dnbGVcIixTUEFDRTpcInRvZ2dsZVwiLEFSUk9XX1JJR0hUOlwib3BlblwiLEFSUk9XX1VQOlwidXBcIixBUlJPV19ET1dOOlwiZG93blwiLEFSUk9XX0xFRlQ6XCJjbG9zZVwiLEVTQ0FQRTpcImNsb3NlQWxsXCJ9KX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5maW5kKFwiW2RhdGEtc3VibWVudV1cIikubm90KFwiLmlzLWFjdGl2ZVwiKS5zbGlkZVVwKDApLHRoaXMuJGVsZW1lbnQuYXR0cih7cm9sZTpcIm1lbnVcIixcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCI6dGhpcy5vcHRpb25zLm11bHRpT3Blbn0pLHRoaXMuJG1lbnVMaW5rcz10aGlzLiRlbGVtZW50LmZpbmQoXCIuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50XCIpLHRoaXMuJG1lbnVMaW5rcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5pZHx8Rm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LFwiYWNjLW1lbnUtbGlua1wiKSxpPWUodGhpcyksbj1pLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIiksbz1uWzBdLmlkfHxGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsXCJhY2MtbWVudVwiKSxzPW4uaGFzQ2xhc3MoXCJpcy1hY3RpdmVcIik7aS5hdHRyKHtcImFyaWEtY29udHJvbHNcIjpvLFwiYXJpYS1leHBhbmRlZFwiOnMscm9sZTpcIm1lbnVpdGVtXCIsaWQ6dH0pLG4uYXR0cih7XCJhcmlhLWxhYmVsbGVkYnlcIjp0LFwiYXJpYS1oaWRkZW5cIjohcyxyb2xlOlwibWVudVwiLGlkOm99KX0pO3ZhciB0PXRoaXMuJGVsZW1lbnQuZmluZChcIi5pcy1hY3RpdmVcIik7aWYodC5sZW5ndGgpe3ZhciBpPXRoaXM7dC5lYWNoKGZ1bmN0aW9uKCl7aS5kb3duKGUodGhpcykpfSl9dGhpcy5fZXZlbnRzKCl9fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRlbGVtZW50LmZpbmQoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9ZSh0aGlzKS5jaGlsZHJlbihcIltkYXRhLXN1Ym1lbnVdXCIpO2kubGVuZ3RoJiZlKHRoaXMpLmNoaWxkcmVuKFwiYVwiKS5vZmYoXCJjbGljay56Zi5hY2NvcmRpb25NZW51XCIpLm9uKFwiY2xpY2suemYuYWNjb3JkaW9uTWVudVwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LnRvZ2dsZShpKX0pfSkub24oXCJrZXlkb3duLnpmLmFjY29yZGlvbm1lbnVcIixmdW5jdGlvbihpKXt2YXIgbixvLHM9ZSh0aGlzKSxyPXMucGFyZW50KFwidWxcIikuY2hpbGRyZW4oXCJsaVwiKSxhPXMuY2hpbGRyZW4oXCJbZGF0YS1zdWJtZW51XVwiKTtyLmVhY2goZnVuY3Rpb24odCl7aWYoZSh0aGlzKS5pcyhzKSlyZXR1cm4gbj1yLmVxKE1hdGgubWF4KDAsdC0xKSkuZmluZChcImFcIikuZmlyc3QoKSxvPXIuZXEoTWF0aC5taW4odCsxLHIubGVuZ3RoLTEpKS5maW5kKFwiYVwiKS5maXJzdCgpLGUodGhpcykuY2hpbGRyZW4oXCJbZGF0YS1zdWJtZW51XTp2aXNpYmxlXCIpLmxlbmd0aCYmKG89cy5maW5kKFwibGk6Zmlyc3QtY2hpbGRcIikuZmluZChcImFcIikuZmlyc3QoKSksZSh0aGlzKS5pcyhcIjpmaXJzdC1jaGlsZFwiKT9uPXMucGFyZW50cyhcImxpXCIpLmZpcnN0KCkuZmluZChcImFcIikuZmlyc3QoKTpuLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV06dmlzaWJsZVwiKS5sZW5ndGgmJihuPW4ucGFyZW50cyhcImxpXCIpLmZpbmQoXCJsaTpsYXN0LWNoaWxkXCIpLmZpbmQoXCJhXCIpLmZpcnN0KCkpLHZvaWQoZSh0aGlzKS5pcyhcIjpsYXN0LWNoaWxkXCIpJiYobz1zLnBhcmVudHMoXCJsaVwiKS5maXJzdCgpLm5leHQoXCJsaVwiKS5maW5kKFwiYVwiKS5maXJzdCgpKSl9KSxGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShpLFwiQWNjb3JkaW9uTWVudVwiLHtvcGVuOmZ1bmN0aW9uKCl7YS5pcyhcIjpoaWRkZW5cIikmJih0LmRvd24oYSksYS5maW5kKFwibGlcIikuZmlyc3QoKS5maW5kKFwiYVwiKS5maXJzdCgpLmZvY3VzKCkpfSxjbG9zZTpmdW5jdGlvbigpe2EubGVuZ3RoJiYhYS5pcyhcIjpoaWRkZW5cIik/dC51cChhKTpzLnBhcmVudChcIltkYXRhLXN1Ym1lbnVdXCIpLmxlbmd0aCYmKHQudXAocy5wYXJlbnQoXCJbZGF0YS1zdWJtZW51XVwiKSkscy5wYXJlbnRzKFwibGlcIikuZmlyc3QoKS5maW5kKFwiYVwiKS5maXJzdCgpLmZvY3VzKCkpfSx1cDpmdW5jdGlvbigpe3JldHVybiBuLmZvY3VzKCksITB9LGRvd246ZnVuY3Rpb24oKXtyZXR1cm4gby5mb2N1cygpLCEwfSx0b2dnbGU6ZnVuY3Rpb24oKXtzLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIikubGVuZ3RoJiZ0LnRvZ2dsZShzLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIikpfSxjbG9zZUFsbDpmdW5jdGlvbigpe3QuaGlkZUFsbCgpfSxoYW5kbGVkOmZ1bmN0aW9uKGUpe2UmJmkucHJldmVudERlZmF1bHQoKSxpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpfX0pfSl9fSx7a2V5OlwiaGlkZUFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy51cCh0aGlzLiRlbGVtZW50LmZpbmQoXCJbZGF0YS1zdWJtZW51XVwiKSl9fSx7a2V5Olwic2hvd0FsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5kb3duKHRoaXMuJGVsZW1lbnQuZmluZChcIltkYXRhLXN1Ym1lbnVdXCIpKX19LHtrZXk6XCJ0b2dnbGVcIix2YWx1ZTpmdW5jdGlvbihlKXtlLmlzKFwiOmFuaW1hdGVkXCIpfHwoZS5pcyhcIjpoaWRkZW5cIik/dGhpcy5kb3duKGUpOnRoaXMudXAoZSkpfX0se2tleTpcImRvd25cIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMub3B0aW9ucy5tdWx0aU9wZW58fHRoaXMudXAodGhpcy4kZWxlbWVudC5maW5kKFwiLmlzLWFjdGl2ZVwiKS5ub3QoZS5wYXJlbnRzVW50aWwodGhpcy4kZWxlbWVudCkuYWRkKGUpKSksZS5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6ITF9KS5wYXJlbnQoXCIuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50XCIpLmF0dHIoe1wiYXJpYS1leHBhbmRlZFwiOiEwfSksZS5zbGlkZURvd24odC5vcHRpb25zLnNsaWRlU3BlZWQsZnVuY3Rpb24oKXt0LiRlbGVtZW50LnRyaWdnZXIoXCJkb3duLnpmLmFjY29yZGlvbk1lbnVcIixbZV0pfSl9fSx7a2V5OlwidXBcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2Uuc2xpZGVVcCh0Lm9wdGlvbnMuc2xpZGVTcGVlZCxmdW5jdGlvbigpe3QuJGVsZW1lbnQudHJpZ2dlcihcInVwLnpmLmFjY29yZGlvbk1lbnVcIixbZV0pfSk7dmFyIGk9ZS5maW5kKFwiW2RhdGEtc3VibWVudV1cIikuc2xpZGVVcCgwKS5hZGRCYWNrKCkuYXR0cihcImFyaWEtaGlkZGVuXCIsITApO2kucGFyZW50KFwiLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudFwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCExKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LmZpbmQoXCJbZGF0YS1zdWJtZW51XVwiKS5zbGlkZURvd24oMCkuY3NzKFwiZGlzcGxheVwiLFwiXCIpLHRoaXMuJGVsZW1lbnQuZmluZChcImFcIikub2ZmKFwiY2xpY2suemYuYWNjb3JkaW9uTWVudVwiKSxGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LFwiYWNjb3JkaW9uXCIpLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXtzbGlkZVNwZWVkOjI1MCxtdWx0aU9wZW46ITB9LEZvdW5kYXRpb24ucGx1Z2luKHQsXCJBY2NvcmRpb25NZW51XCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1pLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0LmRlZmF1bHRzLHRoaXMuJGVsZW1lbnQuZGF0YSgpLG4pLEZvdW5kYXRpb24uTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsXCJkcmlsbGRvd25cIiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIkRyaWxsZG93blwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKFwiRHJpbGxkb3duXCIse0VOVEVSOlwib3BlblwiLFNQQUNFOlwib3BlblwiLEFSUk9XX1JJR0hUOlwibmV4dFwiLEFSUk9XX1VQOlwidXBcIixBUlJPV19ET1dOOlwiZG93blwiLEFSUk9XX0xFRlQ6XCJwcmV2aW91c1wiLEVTQ0FQRTpcImNsb3NlXCIsVEFCOlwiZG93blwiLFNISUZUX1RBQjpcInVwXCJ9KX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kc3VibWVudUFuY2hvcnM9dGhpcy4kZWxlbWVudC5maW5kKFwibGkuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50XCIpLmNoaWxkcmVuKFwiYVwiKSx0aGlzLiRzdWJtZW51cz10aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoXCJsaVwiKS5jaGlsZHJlbihcIltkYXRhLXN1Ym1lbnVdXCIpLHRoaXMuJG1lbnVJdGVtcz10aGlzLiRlbGVtZW50LmZpbmQoXCJsaVwiKS5ub3QoXCIuanMtZHJpbGxkb3duLWJhY2tcIikuYXR0cihcInJvbGVcIixcIm1lbnVpdGVtXCIpLmZpbmQoXCJhXCIpLHRoaXMuJGVsZW1lbnQuYXR0cihcImRhdGEtbXV0YXRlXCIsdGhpcy4kZWxlbWVudC5hdHRyKFwiZGF0YS1kcmlsbGRvd25cIil8fEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNixcImRyaWxsZG93blwiKSksdGhpcy5fcHJlcGFyZU1lbnUoKSx0aGlzLl9yZWdpc3RlckV2ZW50cygpLHRoaXMuX2tleWJvYXJkRXZlbnRzKCl9fSx7a2V5OlwiX3ByZXBhcmVNZW51XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJHN1Ym1lbnVBbmNob3JzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpLG49aS5wYXJlbnQoKTt0Lm9wdGlvbnMucGFyZW50TGluayYmaS5jbG9uZSgpLnByZXBlbmRUbyhuLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIikpLndyYXAoJzxsaSBjbGFzcz1cImlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0gaXMtc3VibWVudS1pdGVtIGlzLWRyaWxsZG93bi1zdWJtZW51LWl0ZW1cIiByb2xlPVwibWVudS1pdGVtXCI+PC9saT4nKSxpLmRhdGEoXCJzYXZlZEhyZWZcIixpLmF0dHIoXCJocmVmXCIpKS5yZW1vdmVBdHRyKFwiaHJlZlwiKS5hdHRyKFwidGFiaW5kZXhcIiwwKSxpLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOiEwLHRhYmluZGV4OjAscm9sZTpcIm1lbnVcIn0pLHQuX2V2ZW50cyhpKX0pLHRoaXMuJHN1Ym1lbnVzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpLG49aS5maW5kKFwiLmpzLWRyaWxsZG93bi1iYWNrXCIpO2lmKCFuLmxlbmd0aClzd2l0Y2godC5vcHRpb25zLmJhY2tCdXR0b25Qb3NpdGlvbil7Y2FzZVwiYm90dG9tXCI6aS5hcHBlbmQodC5vcHRpb25zLmJhY2tCdXR0b24pO2JyZWFrO2Nhc2VcInRvcFwiOmkucHJlcGVuZCh0Lm9wdGlvbnMuYmFja0J1dHRvbik7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmVycm9yKFwiVW5zdXBwb3J0ZWQgYmFja0J1dHRvblBvc2l0aW9uIHZhbHVlICdcIit0Lm9wdGlvbnMuYmFja0J1dHRvblBvc2l0aW9uK1wiJ1wiKX10Ll9iYWNrKGkpfSksdGhpcy5vcHRpb25zLmF1dG9IZWlnaHR8fHRoaXMuJHN1Ym1lbnVzLmFkZENsYXNzKFwiZHJpbGxkb3duLXN1Ym1lbnUtY292ZXItcHJldmlvdXNcIiksdGhpcy4kZWxlbWVudC5wYXJlbnQoKS5oYXNDbGFzcyhcImlzLWRyaWxsZG93blwiKXx8KHRoaXMuJHdyYXBwZXI9ZSh0aGlzLm9wdGlvbnMud3JhcHBlcikuYWRkQ2xhc3MoXCJpcy1kcmlsbGRvd25cIiksdGhpcy5vcHRpb25zLmFuaW1hdGVIZWlnaHQmJnRoaXMuJHdyYXBwZXIuYWRkQ2xhc3MoXCJhbmltYXRlLWhlaWdodFwiKSx0aGlzLiR3cmFwcGVyPXRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKS5wYXJlbnQoKS5jc3ModGhpcy5fZ2V0TWF4RGltcygpKSl9fSx7a2V5OlwiX3Jlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kd3JhcHBlci5jc3Moe1wibWF4LXdpZHRoXCI6XCJub25lXCIsXCJtaW4taGVpZ2h0XCI6XCJub25lXCJ9KSx0aGlzLiR3cmFwcGVyLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpfVxufSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXM7dC5vZmYoXCJjbGljay56Zi5kcmlsbGRvd25cIikub24oXCJjbGljay56Zi5kcmlsbGRvd25cIixmdW5jdGlvbihuKXtpZihlKG4udGFyZ2V0KS5wYXJlbnRzVW50aWwoXCJ1bFwiLFwibGlcIikuaGFzQ2xhc3MoXCJpcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnRcIikmJihuLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLG4ucHJldmVudERlZmF1bHQoKSksaS5fc2hvdyh0LnBhcmVudChcImxpXCIpKSxpLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXt2YXIgbz1lKFwiYm9keVwiKTtvLm9mZihcIi56Zi5kcmlsbGRvd25cIikub24oXCJjbGljay56Zi5kcmlsbGRvd25cIixmdW5jdGlvbih0KXt0LnRhcmdldD09PWkuJGVsZW1lbnRbMF18fGUuY29udGFpbnMoaS4kZWxlbWVudFswXSx0LnRhcmdldCl8fCh0LnByZXZlbnREZWZhdWx0KCksaS5faGlkZUFsbCgpLG8ub2ZmKFwiLnpmLmRyaWxsZG93blwiKSl9KX19KSx0aGlzLiRlbGVtZW50Lm9uKFwibXV0YXRlbWUuemYudHJpZ2dlclwiLHRoaXMuX3Jlc2l6ZS5iaW5kKHRoaXMpKX19LHtrZXk6XCJfcmVnaXN0ZXJFdmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3B0aW9ucy5zY3JvbGxUb3AmJih0aGlzLl9iaW5kSGFuZGxlcj10aGlzLl9zY3JvbGxUb3AuYmluZCh0aGlzKSx0aGlzLiRlbGVtZW50Lm9uKFwib3Blbi56Zi5kcmlsbGRvd24gaGlkZS56Zi5kcmlsbGRvd24gY2xvc2VkLnpmLmRyaWxsZG93blwiLHRoaXMuX2JpbmRIYW5kbGVyKSl9fSx7a2V5OlwiX3Njcm9sbFRvcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxpPVwiXCIhPXQub3B0aW9ucy5zY3JvbGxUb3BFbGVtZW50P2UodC5vcHRpb25zLnNjcm9sbFRvcEVsZW1lbnQpOnQuJGVsZW1lbnQsbj1wYXJzZUludChpLm9mZnNldCgpLnRvcCt0Lm9wdGlvbnMuc2Nyb2xsVG9wT2Zmc2V0KTtlKFwiaHRtbCwgYm9keVwiKS5zdG9wKCEwKS5hbmltYXRlKHtzY3JvbGxUb3A6bn0sdC5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLHQub3B0aW9ucy5hbmltYXRpb25FYXNpbmcsZnVuY3Rpb24oKXt0aGlzPT09ZShcImh0bWxcIilbMF0mJnQuJGVsZW1lbnQudHJpZ2dlcihcInNjcm9sbG1lLnpmLmRyaWxsZG93blwiKX0pfX0se2tleTpcIl9rZXlib2FyZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRtZW51SXRlbXMuYWRkKHRoaXMuJGVsZW1lbnQuZmluZChcIi5qcy1kcmlsbGRvd24tYmFjayA+IGEsIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtID4gYVwiKSkub24oXCJrZXlkb3duLnpmLmRyaWxsZG93blwiLGZ1bmN0aW9uKGkpe3ZhciBuLG8scz1lKHRoaXMpLHI9cy5wYXJlbnQoXCJsaVwiKS5wYXJlbnQoXCJ1bFwiKS5jaGlsZHJlbihcImxpXCIpLmNoaWxkcmVuKFwiYVwiKTtyLmVhY2goZnVuY3Rpb24odCl7aWYoZSh0aGlzKS5pcyhzKSlyZXR1cm4gbj1yLmVxKE1hdGgubWF4KDAsdC0xKSksdm9pZChvPXIuZXEoTWF0aC5taW4odCsxLHIubGVuZ3RoLTEpKSl9KSxGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShpLFwiRHJpbGxkb3duXCIse25leHQ6ZnVuY3Rpb24oKXtpZihzLmlzKHQuJHN1Ym1lbnVBbmNob3JzKSlyZXR1cm4gdC5fc2hvdyhzLnBhcmVudChcImxpXCIpKSxzLnBhcmVudChcImxpXCIpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQocyksZnVuY3Rpb24oKXtzLnBhcmVudChcImxpXCIpLmZpbmQoXCJ1bCBsaSBhXCIpLmZpbHRlcih0LiRtZW51SXRlbXMpLmZpcnN0KCkuZm9jdXMoKX0pLCEwfSxwcmV2aW91czpmdW5jdGlvbigpe3JldHVybiB0Ll9oaWRlKHMucGFyZW50KFwibGlcIikucGFyZW50KFwidWxcIikpLHMucGFyZW50KFwibGlcIikucGFyZW50KFwidWxcIikub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChzKSxmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtzLnBhcmVudChcImxpXCIpLnBhcmVudChcInVsXCIpLnBhcmVudChcImxpXCIpLmNoaWxkcmVuKFwiYVwiKS5maXJzdCgpLmZvY3VzKCl9LDEpfSksITB9LHVwOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZm9jdXMoKSwhMH0sZG93bjpmdW5jdGlvbigpe3JldHVybiBvLmZvY3VzKCksITB9LGNsb3NlOmZ1bmN0aW9uKCl7dC5fYmFjaygpfSxvcGVuOmZ1bmN0aW9uKCl7cmV0dXJuIHMuaXModC4kbWVudUl0ZW1zKT9zLmlzKHQuJHN1Ym1lbnVBbmNob3JzKT8odC5fc2hvdyhzLnBhcmVudChcImxpXCIpKSxzLnBhcmVudChcImxpXCIpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQocyksZnVuY3Rpb24oKXtzLnBhcmVudChcImxpXCIpLmZpbmQoXCJ1bCBsaSBhXCIpLmZpbHRlcih0LiRtZW51SXRlbXMpLmZpcnN0KCkuZm9jdXMoKX0pLCEwKTp2b2lkIDA6KHQuX2hpZGUocy5wYXJlbnQoXCJsaVwiKS5wYXJlbnQoXCJ1bFwiKSkscy5wYXJlbnQoXCJsaVwiKS5wYXJlbnQoXCJ1bFwiKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKHMpLGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe3MucGFyZW50KFwibGlcIikucGFyZW50KFwidWxcIikucGFyZW50KFwibGlcIikuY2hpbGRyZW4oXCJhXCIpLmZpcnN0KCkuZm9jdXMoKX0sMSl9KSwhMCl9LGhhbmRsZWQ6ZnVuY3Rpb24oZSl7ZSYmaS5wcmV2ZW50RGVmYXVsdCgpLGkuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCl9fSl9KX19LHtrZXk6XCJfaGlkZUFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kZWxlbWVudC5maW5kKFwiLmlzLWRyaWxsZG93bi1zdWJtZW51LmlzLWFjdGl2ZVwiKS5hZGRDbGFzcyhcImlzLWNsb3NpbmdcIik7dGhpcy5vcHRpb25zLmF1dG9IZWlnaHQmJnRoaXMuJHdyYXBwZXIuY3NzKHtoZWlnaHQ6ZS5wYXJlbnQoKS5jbG9zZXN0KFwidWxcIikuZGF0YShcImNhbGNIZWlnaHRcIil9KSxlLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoZSksZnVuY3Rpb24odCl7ZS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZSBpcy1jbG9zaW5nXCIpfSksdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwiY2xvc2VkLnpmLmRyaWxsZG93blwiKX19LHtrZXk6XCJfYmFja1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS5vZmYoXCJjbGljay56Zi5kcmlsbGRvd25cIiksZS5jaGlsZHJlbihcIi5qcy1kcmlsbGRvd24tYmFja1wiKS5vbihcImNsaWNrLnpmLmRyaWxsZG93blwiLGZ1bmN0aW9uKGkpe2kuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdC5faGlkZShlKTt2YXIgbj1lLnBhcmVudChcImxpXCIpLnBhcmVudChcInVsXCIpLnBhcmVudChcImxpXCIpO24ubGVuZ3RoJiZ0Ll9zaG93KG4pfSl9fSx7a2V5OlwiX21lbnVMaW5rRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJG1lbnVJdGVtcy5ub3QoXCIuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50XCIpLm9mZihcImNsaWNrLnpmLmRyaWxsZG93blwiKS5vbihcImNsaWNrLnpmLmRyaWxsZG93blwiLGZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9oaWRlQWxsKCl9LDApfSl9fSx7a2V5OlwiX3Nob3dcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLm9wdGlvbnMuYXV0b0hlaWdodCYmdGhpcy4kd3JhcHBlci5jc3Moe2hlaWdodDplLmNoaWxkcmVuKFwiW2RhdGEtc3VibWVudV1cIikuZGF0YShcImNhbGNIZWlnaHRcIil9KSxlLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITApLGUuY2hpbGRyZW4oXCJbZGF0YS1zdWJtZW51XVwiKS5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIiwhMSksdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwib3Blbi56Zi5kcmlsbGRvd25cIixbZV0pfX0se2tleTpcIl9oaWRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5vcHRpb25zLmF1dG9IZWlnaHQmJnRoaXMuJHdyYXBwZXIuY3NzKHtoZWlnaHQ6ZS5wYXJlbnQoKS5jbG9zZXN0KFwidWxcIikuZGF0YShcImNhbGNIZWlnaHRcIil9KTtlLnBhcmVudChcImxpXCIpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITEpLGUuYXR0cihcImFyaWEtaGlkZGVuXCIsITApLmFkZENsYXNzKFwiaXMtY2xvc2luZ1wiKSxlLmFkZENsYXNzKFwiaXMtY2xvc2luZ1wiKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKGUpLGZ1bmN0aW9uKCl7ZS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZSBpcy1jbG9zaW5nXCIpLGUuYmx1cigpfSksZS50cmlnZ2VyKFwiaGlkZS56Zi5kcmlsbGRvd25cIixbZV0pfX0se2tleTpcIl9nZXRNYXhEaW1zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD0wLGk9e30sbj10aGlzO3JldHVybiB0aGlzLiRzdWJtZW51cy5hZGQodGhpcy4kZWxlbWVudCkuZWFjaChmdW5jdGlvbigpe3ZhciBvPShlKHRoaXMpLmNoaWxkcmVuKFwibGlcIikubGVuZ3RoLEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcykuaGVpZ2h0KTt0PW8+dD9vOnQsbi5vcHRpb25zLmF1dG9IZWlnaHQmJihlKHRoaXMpLmRhdGEoXCJjYWxjSGVpZ2h0XCIsbyksZSh0aGlzKS5oYXNDbGFzcyhcImlzLWRyaWxsZG93bi1zdWJtZW51XCIpfHwoaS5oZWlnaHQ9bykpfSksdGhpcy5vcHRpb25zLmF1dG9IZWlnaHR8fChpW1wibWluLWhlaWdodFwiXT10K1wicHhcIiksaVtcIm1heC13aWR0aFwiXT10aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoK1wicHhcIixpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3B0aW9ucy5zY3JvbGxUb3AmJnRoaXMuJGVsZW1lbnQub2ZmKFwiLnpmLmRyaWxsZG93blwiLHRoaXMuX2JpbmRIYW5kbGVyKSx0aGlzLl9oaWRlQWxsKCksdGhpcy4kZWxlbWVudC5vZmYoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpLEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsXCJkcmlsbGRvd25cIiksdGhpcy4kZWxlbWVudC51bndyYXAoKS5maW5kKFwiLmpzLWRyaWxsZG93bi1iYWNrLCAuaXMtc3VibWVudS1wYXJlbnQtaXRlbVwiKS5yZW1vdmUoKS5lbmQoKS5maW5kKFwiLmlzLWFjdGl2ZSwgLmlzLWNsb3NpbmcsIC5pcy1kcmlsbGRvd24tc3VibWVudVwiKS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZSBpcy1jbG9zaW5nIGlzLWRyaWxsZG93bi1zdWJtZW51XCIpLmVuZCgpLmZpbmQoXCJbZGF0YS1zdWJtZW51XVwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gdGFiaW5kZXggcm9sZVwiKSx0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCl7ZSh0aGlzKS5vZmYoXCIuemYuZHJpbGxkb3duXCIpfSksdGhpcy4kc3VibWVudXMucmVtb3ZlQ2xhc3MoXCJkcmlsbGRvd24tc3VibWVudS1jb3Zlci1wcmV2aW91c1wiKSx0aGlzLiRlbGVtZW50LmZpbmQoXCJhXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpO3QucmVtb3ZlQXR0cihcInRhYmluZGV4XCIpLHQuZGF0YShcInNhdmVkSHJlZlwiKSYmdC5hdHRyKFwiaHJlZlwiLHQuZGF0YShcInNhdmVkSHJlZlwiKSkucmVtb3ZlRGF0YShcInNhdmVkSHJlZlwiKX0pLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXtiYWNrQnV0dG9uOic8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLGJhY2tCdXR0b25Qb3NpdGlvbjpcInRvcFwiLHdyYXBwZXI6XCI8ZGl2PjwvZGl2PlwiLHBhcmVudExpbms6ITEsY2xvc2VPbkNsaWNrOiExLGF1dG9IZWlnaHQ6ITEsYW5pbWF0ZUhlaWdodDohMSxzY3JvbGxUb3A6ITEsc2Nyb2xsVG9wRWxlbWVudDpcIlwiLHNjcm9sbFRvcE9mZnNldDowLGFuaW1hdGlvbkR1cmF0aW9uOjUwMCxhbmltYXRpb25FYXNpbmc6XCJzd2luZ1wifSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiRHJpbGxkb3duXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1pLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0LmRlZmF1bHRzLHRoaXMuJGVsZW1lbnQuZGF0YSgpLG4pLHRoaXMuX2luaXQoKSxGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsXCJEcm9wZG93blwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKFwiRHJvcGRvd25cIix7RU5URVI6XCJvcGVuXCIsU1BBQ0U6XCJvcGVuXCIsRVNDQVBFOlwiY2xvc2VcIn0pfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRlbGVtZW50LmF0dHIoXCJpZFwiKTt0aGlzLiRhbmNob3I9ZShlKCdbZGF0YS10b2dnbGU9XCInK3QrJ1wiXScpLmxlbmd0aD8nW2RhdGEtdG9nZ2xlPVwiJyt0KydcIl0nOidbZGF0YS1vcGVuPVwiJyt0KydcIl0nKSx0aGlzLiRhbmNob3IuYXR0cih7XCJhcmlhLWNvbnRyb2xzXCI6dCxcImRhdGEtaXMtZm9jdXNcIjohMSxcImRhdGEteWV0aS1ib3hcIjp0LFwiYXJpYS1oYXNwb3B1cFwiOiEwLFwiYXJpYS1leHBhbmRlZFwiOiExfSksdGhpcy5vcHRpb25zLnBhcmVudENsYXNzP3RoaXMuJHBhcmVudD10aGlzLiRlbGVtZW50LnBhcmVudHMoXCIuXCIrdGhpcy5vcHRpb25zLnBhcmVudENsYXNzKTp0aGlzLiRwYXJlbnQ9bnVsbCx0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcz10aGlzLmdldFBvc2l0aW9uQ2xhc3MoKSx0aGlzLmNvdW50ZXI9NCx0aGlzLnVzZWRQb3NpdGlvbnM9W10sdGhpcy4kZWxlbWVudC5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsXCJkYXRhLXlldGktYm94XCI6dCxcImRhdGEtcmVzaXplXCI6dCxcImFyaWEtbGFiZWxsZWRieVwiOnRoaXMuJGFuY2hvclswXS5pZHx8Rm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LFwiZGQtYW5jaG9yXCIpfSksdGhpcy5fZXZlbnRzKCl9fSx7a2V5OlwiZ2V0UG9zaXRpb25DbGFzc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO2U9ZT9lWzBdOlwiXCI7dmFyIHQ9L2Zsb2F0LShcXFMrKS8uZXhlYyh0aGlzLiRhbmNob3JbMF0uY2xhc3NOYW1lKTt0PXQ/dFsxXTpcIlwiO3ZhciBpPXQ/dCtcIiBcIitlOmU7cmV0dXJuIGl9fSx7a2V5OlwiX3JlcG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChlP2U6XCJib3R0b21cIiksIWUmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwidG9wXCIpPDA/dGhpcy4kZWxlbWVudC5hZGRDbGFzcyhcInRvcFwiKTpcInRvcFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJib3R0b21cIik8MD90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGUpOlwibGVmdFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJyaWdodFwiKTwwP3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoZSkuYWRkQ2xhc3MoXCJyaWdodFwiKTpcInJpZ2h0XCI9PT1lJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcImxlZnRcIik8MD90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGUpLmFkZENsYXNzKFwibGVmdFwiKTohZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJ0b3BcIik+LTEmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwibGVmdFwiKTwwP3RoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoXCJsZWZ0XCIpOlwidG9wXCI9PT1lJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcImJvdHRvbVwiKT4tMSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJsZWZ0XCIpPDA/dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhlKS5hZGRDbGFzcyhcImxlZnRcIik6XCJsZWZ0XCI9PT1lJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcInJpZ2h0XCIpPi0xJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcImJvdHRvbVwiKTwwP3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoZSk6XCJyaWdodFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJsZWZ0XCIpPi0xJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcImJvdHRvbVwiKTwwP3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoZSk6dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhlKSx0aGlzLmNsYXNzQ2hhbmdlZD0hMCx0aGlzLmNvdW50ZXItLX19LHtrZXk6XCJfc2V0UG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbigpe2lmKFwiZmFsc2VcIj09PXRoaXMuJGFuY2hvci5hdHRyKFwiYXJpYS1leHBhbmRlZFwiKSlyZXR1cm4hMTt2YXIgZT10aGlzLmdldFBvc2l0aW9uQ2xhc3MoKSx0PUZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksaT0oRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRhbmNob3IpLFwibGVmdFwiPT09ZT9cImxlZnRcIjpcInJpZ2h0XCI9PT1lP1wibGVmdFwiOlwidG9wXCIpLG49XCJ0b3BcIj09PWk/XCJoZWlnaHRcIjpcIndpZHRoXCI7XCJoZWlnaHRcIj09PW4/dGhpcy5vcHRpb25zLnZPZmZzZXQ6dGhpcy5vcHRpb25zLmhPZmZzZXQ7aWYodC53aWR0aD49dC53aW5kb3dEaW1zLndpZHRofHwhdGhpcy5jb3VudGVyJiYhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50LHRoaXMuJHBhcmVudCkpe3ZhciBvPXQud2luZG93RGltcy53aWR0aCxzPTA7aWYodGhpcy4kcGFyZW50KXt2YXIgcj1Gb3VuZGF0aW9uLkJveC5HZXREaW1lbnNpb25zKHRoaXMuJHBhcmVudCkscz1yLm9mZnNldC5sZWZ0O3Iud2lkdGg8byYmKG89ci53aWR0aCl9cmV0dXJuIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uQm94LkdldE9mZnNldHModGhpcy4kZWxlbWVudCx0aGlzLiRhbmNob3IsXCJjZW50ZXIgYm90dG9tXCIsdGhpcy5vcHRpb25zLnZPZmZzZXQsdGhpcy5vcHRpb25zLmhPZmZzZXQrcywhMCkpLmNzcyh7d2lkdGg6by0yKnRoaXMub3B0aW9ucy5oT2Zmc2V0LGhlaWdodDpcImF1dG9cIn0pLHRoaXMuY2xhc3NDaGFuZ2VkPSEwLCExfWZvcih0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsdGhpcy4kYW5jaG9yLGUsdGhpcy5vcHRpb25zLnZPZmZzZXQsdGhpcy5vcHRpb25zLmhPZmZzZXQpKTshRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50LHRoaXMuJHBhcmVudCwhMCkmJnRoaXMuY291bnRlcjspdGhpcy5fcmVwb3NpdGlvbihlKSx0aGlzLl9zZXRQb3NpdGlvbigpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kZWxlbWVudC5vbih7XCJvcGVuLnpmLnRyaWdnZXJcIjp0aGlzLm9wZW4uYmluZCh0aGlzKSxcImNsb3NlLnpmLnRyaWdnZXJcIjp0aGlzLmNsb3NlLmJpbmQodGhpcyksXCJ0b2dnbGUuemYudHJpZ2dlclwiOnRoaXMudG9nZ2xlLmJpbmQodGhpcyksXCJyZXNpemVtZS56Zi50cmlnZ2VyXCI6dGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKX0pLHRoaXMub3B0aW9ucy5ob3ZlciYmKHRoaXMuJGFuY2hvci5vZmYoXCJtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd25cIikub24oXCJtb3VzZWVudGVyLnpmLmRyb3Bkb3duXCIsZnVuY3Rpb24oKXt2YXIgaT1lKFwiYm9keVwiKS5kYXRhKCk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGkud2hhdGlucHV0JiZcIm1vdXNlXCIhPT1pLndoYXRpbnB1dHx8KGNsZWFyVGltZW91dCh0LnRpbWVvdXQpLHQudGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5vcGVuKCksdC4kYW5jaG9yLmRhdGEoXCJob3ZlclwiLCEwKX0sdC5vcHRpb25zLmhvdmVyRGVsYXkpKX0pLm9uKFwibW91c2VsZWF2ZS56Zi5kcm9wZG93blwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHQudGltZW91dCksdC50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmNsb3NlKCksdC4kYW5jaG9yLmRhdGEoXCJob3ZlclwiLCExKX0sdC5vcHRpb25zLmhvdmVyRGVsYXkpfSksdGhpcy5vcHRpb25zLmhvdmVyUGFuZSYmdGhpcy4kZWxlbWVudC5vZmYoXCJtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd25cIikub24oXCJtb3VzZWVudGVyLnpmLmRyb3Bkb3duXCIsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodC50aW1lb3V0KX0pLm9uKFwibW91c2VsZWF2ZS56Zi5kcm9wZG93blwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHQudGltZW91dCksdC50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmNsb3NlKCksdC4kYW5jaG9yLmRhdGEoXCJob3ZlclwiLCExKX0sdC5vcHRpb25zLmhvdmVyRGVsYXkpfSkpLHRoaXMuJGFuY2hvci5hZGQodGhpcy4kZWxlbWVudCkub24oXCJrZXlkb3duLnpmLmRyb3Bkb3duXCIsZnVuY3Rpb24oaSl7dmFyIG49ZSh0aGlzKTtGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodC4kZWxlbWVudCk7Rm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoaSxcIkRyb3Bkb3duXCIse29wZW46ZnVuY3Rpb24oKXtuLmlzKHQuJGFuY2hvcikmJih0Lm9wZW4oKSx0LiRlbGVtZW50LmF0dHIoXCJ0YWJpbmRleFwiLC0xKS5mb2N1cygpLGkucHJldmVudERlZmF1bHQoKSl9LGNsb3NlOmZ1bmN0aW9uKCl7dC5jbG9zZSgpLHQuJGFuY2hvci5mb2N1cygpfX0pfSl9fSx7a2V5OlwiX2FkZEJvZHlIYW5kbGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1lKGRvY3VtZW50LmJvZHkpLm5vdCh0aGlzLiRlbGVtZW50KSxpPXRoaXM7dC5vZmYoXCJjbGljay56Zi5kcm9wZG93blwiKS5vbihcImNsaWNrLnpmLmRyb3Bkb3duXCIsZnVuY3Rpb24oZSl7aS4kYW5jaG9yLmlzKGUudGFyZ2V0KXx8aS4kYW5jaG9yLmZpbmQoZS50YXJnZXQpLmxlbmd0aHx8aS4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGh8fChpLmNsb3NlKCksdC5vZmYoXCJjbGljay56Zi5kcm9wZG93blwiKSl9KX19LHtrZXk6XCJvcGVuXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJjbG9zZW1lLnpmLmRyb3Bkb3duXCIsdGhpcy4kZWxlbWVudC5hdHRyKFwiaWRcIikpLHRoaXMuJGFuY2hvci5hZGRDbGFzcyhcImhvdmVyXCIpLmF0dHIoe1wiYXJpYS1leHBhbmRlZFwiOiEwfSksdGhpcy5fc2V0UG9zaXRpb24oKSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKFwiaXMtb3BlblwiKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6ITF9KSx0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKXt2YXIgZT1Gb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7ZS5sZW5ndGgmJmUuZXEoMCkuZm9jdXMoKX10aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrJiZ0aGlzLl9hZGRCb2R5SGFuZGxlcigpLHRoaXMub3B0aW9ucy50cmFwRm9jdXMmJkZvdW5kYXRpb24uS2V5Ym9hcmQudHJhcEZvY3VzKHRoaXMuJGVsZW1lbnQpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcInNob3cuemYuZHJvcGRvd25cIixbdGhpcy4kZWxlbWVudF0pfX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImlzLW9wZW5cIikpcmV0dXJuITE7aWYodGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhcImlzLW9wZW5cIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOiEwfSksdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKFwiaG92ZXJcIikuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSksdGhpcy5jbGFzc0NoYW5nZWQpe3ZhciBlPXRoaXMuZ2V0UG9zaXRpb25DbGFzcygpO2UmJnRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoZSksdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcykuY3NzKHtoZWlnaHQ6XCJcIix3aWR0aDpcIlwifSksdGhpcy5jbGFzc0NoYW5nZWQ9ITEsdGhpcy5jb3VudGVyPTQsdGhpcy51c2VkUG9zaXRpb25zLmxlbmd0aD0wfXRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImhpZGUuemYuZHJvcGRvd25cIixbdGhpcy4kZWxlbWVudF0pLHRoaXMub3B0aW9ucy50cmFwRm9jdXMmJkZvdW5kYXRpb24uS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpfX0se2tleTpcInRvZ2dsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImlzLW9wZW5cIikpe2lmKHRoaXMuJGFuY2hvci5kYXRhKFwiaG92ZXJcIikpcmV0dXJuO3RoaXMuY2xvc2UoKX1lbHNlIHRoaXMub3BlbigpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQub2ZmKFwiLnpmLnRyaWdnZXJcIikuaGlkZSgpLHRoaXMuJGFuY2hvci5vZmYoXCIuemYuZHJvcGRvd25cIiksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e3BhcmVudENsYXNzOm51bGwsaG92ZXJEZWxheToyNTAsaG92ZXI6ITEsaG92ZXJQYW5lOiExLHZPZmZzZXQ6MSxoT2Zmc2V0OjEscG9zaXRpb25DbGFzczpcIlwiLHRyYXBGb2N1czohMSxhdXRvRm9jdXM6ITEsY2xvc2VPbkNsaWNrOiExfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiRHJvcGRvd25cIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCxcImRyb3Bkb3duXCIpLHRoaXMuX2luaXQoKSxGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsXCJEcm9wZG93bk1lbnVcIiksRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcihcIkRyb3Bkb3duTWVudVwiLHtFTlRFUjpcIm9wZW5cIixTUEFDRTpcIm9wZW5cIixBUlJPV19SSUdIVDpcIm5leHRcIixBUlJPV19VUDpcInVwXCIsQVJST1dfRE9XTjpcImRvd25cIixBUlJPV19MRUZUOlwicHJldmlvdXNcIixFU0NBUEU6XCJjbG9zZVwifSl9cmV0dXJuIF9jcmVhdGVDbGFzcyh0LFt7a2V5OlwiX2luaXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJGVsZW1lbnQuZmluZChcImxpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50XCIpO3RoaXMuJGVsZW1lbnQuY2hpbGRyZW4oXCIuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnRcIikuY2hpbGRyZW4oXCIuaXMtZHJvcGRvd24tc3VibWVudVwiKS5hZGRDbGFzcyhcImZpcnN0LXN1YlwiKSx0aGlzLiRtZW51SXRlbXM9dGhpcy4kZWxlbWVudC5maW5kKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyksdGhpcy4kdGFicz10aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyksdGhpcy4kdGFicy5maW5kKFwidWwuaXMtZHJvcGRvd24tc3VibWVudVwiKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudmVydGljYWxDbGFzcyksdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcyl8fFwicmlnaHRcIj09PXRoaXMub3B0aW9ucy5hbGlnbm1lbnR8fEZvdW5kYXRpb24ucnRsKCl8fHRoaXMuJGVsZW1lbnQucGFyZW50cyhcIi50b3AtYmFyLXJpZ2h0XCIpLmlzKFwiKlwiKT8odGhpcy5vcHRpb25zLmFsaWdubWVudD1cInJpZ2h0XCIsZS5hZGRDbGFzcyhcIm9wZW5zLWxlZnRcIikpOmUuYWRkQ2xhc3MoXCJvcGVucy1yaWdodFwiKSx0aGlzLmNoYW5nZWQ9ITEsdGhpcy5fZXZlbnRzKCl9fSx7a2V5OlwiX2lzVmVydGljYWxcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiYmxvY2tcIj09PXRoaXMuJHRhYnMuY3NzKFwiZGlzcGxheVwiKX19LHtrZXk6XCJfZXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGk9XCJvbnRvdWNoc3RhcnRcImluIHdpbmRvd3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdy5vbnRvdWNoc3RhcnQsbj1cImlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50XCIsbz1mdW5jdGlvbihvKXt2YXIgcz1lKG8udGFyZ2V0KS5wYXJlbnRzVW50aWwoXCJ1bFwiLFwiLlwiK24pLHI9cy5oYXNDbGFzcyhuKSxhPVwidHJ1ZVwiPT09cy5hdHRyKFwiZGF0YS1pcy1jbGlja1wiKSxsPXMuY2hpbGRyZW4oXCIuaXMtZHJvcGRvd24tc3VibWVudVwiKTtpZihyKWlmKGEpe2lmKCF0Lm9wdGlvbnMuY2xvc2VPbkNsaWNrfHwhdC5vcHRpb25zLmNsaWNrT3BlbiYmIWl8fHQub3B0aW9ucy5mb3JjZUZvbGxvdyYmaSlyZXR1cm47by5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxvLnByZXZlbnREZWZhdWx0KCksdC5faGlkZShzKX1lbHNlIG8ucHJldmVudERlZmF1bHQoKSxvLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHQuX3Nob3cobCkscy5hZGQocy5wYXJlbnRzVW50aWwodC4kZWxlbWVudCxcIi5cIituKSkuYXR0cihcImRhdGEtaXMtY2xpY2tcIiwhMCl9Oyh0aGlzLm9wdGlvbnMuY2xpY2tPcGVufHxpKSYmdGhpcy4kbWVudUl0ZW1zLm9uKFwiY2xpY2suemYuZHJvcGRvd25tZW51IHRvdWNoc3RhcnQuemYuZHJvcGRvd25tZW51XCIsbyksdC5vcHRpb25zLmNsb3NlT25DbGlja0luc2lkZSYmdGhpcy4kbWVudUl0ZW1zLm9uKFwiY2xpY2suemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudVwiLGZ1bmN0aW9uKGkpe3ZhciBvPWUodGhpcykscz1vLmhhc0NsYXNzKG4pO3N8fHQuX2hpZGUoKX0pLHRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXJ8fHRoaXMuJG1lbnVJdGVtcy5vbihcIm1vdXNlZW50ZXIuemYuZHJvcGRvd25tZW51XCIsZnVuY3Rpb24oaSl7dmFyIG89ZSh0aGlzKSxzPW8uaGFzQ2xhc3Mobik7cyYmKGNsZWFyVGltZW91dChvLmRhdGEoXCJfZGVsYXlcIikpLG8uZGF0YShcIl9kZWxheVwiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll9zaG93KG8uY2hpbGRyZW4oXCIuaXMtZHJvcGRvd24tc3VibWVudVwiKSl9LHQub3B0aW9ucy5ob3ZlckRlbGF5KSkpfSkub24oXCJtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudVwiLGZ1bmN0aW9uKGkpe3ZhciBvPWUodGhpcykscz1vLmhhc0NsYXNzKG4pO2lmKHMmJnQub3B0aW9ucy5hdXRvY2xvc2Upe2lmKFwidHJ1ZVwiPT09by5hdHRyKFwiZGF0YS1pcy1jbGlja1wiKSYmdC5vcHRpb25zLmNsaWNrT3BlbilyZXR1cm4hMTtjbGVhclRpbWVvdXQoby5kYXRhKFwiX2RlbGF5XCIpKSxvLmRhdGEoXCJfZGVsYXlcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5faGlkZShvKX0sdC5vcHRpb25zLmNsb3NpbmdUaW1lKSl9fSksdGhpcy4kbWVudUl0ZW1zLm9uKFwia2V5ZG93bi56Zi5kcm9wZG93bm1lbnVcIixmdW5jdGlvbihpKXt2YXIgbixvLHM9ZShpLnRhcmdldCkucGFyZW50c1VudGlsKFwidWxcIiwnW3JvbGU9XCJtZW51aXRlbVwiXScpLHI9dC4kdGFicy5pbmRleChzKT4tMSxhPXI/dC4kdGFiczpzLnNpYmxpbmdzKFwibGlcIikuYWRkKHMpO2EuZWFjaChmdW5jdGlvbih0KXtpZihlKHRoaXMpLmlzKHMpKXJldHVybiBuPWEuZXEodC0xKSx2b2lkKG89YS5lcSh0KzEpKX0pO3ZhciBsPWZ1bmN0aW9uKCl7cy5pcyhcIjpsYXN0LWNoaWxkXCIpfHwoby5jaGlsZHJlbihcImE6Zmlyc3RcIikuZm9jdXMoKSxpLnByZXZlbnREZWZhdWx0KCkpfSxkPWZ1bmN0aW9uKCl7bi5jaGlsZHJlbihcImE6Zmlyc3RcIikuZm9jdXMoKSxpLnByZXZlbnREZWZhdWx0KCl9LHU9ZnVuY3Rpb24oKXt2YXIgZT1zLmNoaWxkcmVuKFwidWwuaXMtZHJvcGRvd24tc3VibWVudVwiKTtlLmxlbmd0aCYmKHQuX3Nob3coZSkscy5maW5kKFwibGkgPiBhOmZpcnN0XCIpLmZvY3VzKCksaS5wcmV2ZW50RGVmYXVsdCgpKX0sYz1mdW5jdGlvbigpe3ZhciBlPXMucGFyZW50KFwidWxcIikucGFyZW50KFwibGlcIik7ZS5jaGlsZHJlbihcImE6Zmlyc3RcIikuZm9jdXMoKSx0Ll9oaWRlKGUpLGkucHJldmVudERlZmF1bHQoKX0saD17b3Blbjp1LGNsb3NlOmZ1bmN0aW9uKCl7dC5faGlkZSh0LiRlbGVtZW50KSx0LiRtZW51SXRlbXMuZmluZChcImE6Zmlyc3RcIikuZm9jdXMoKSxpLnByZXZlbnREZWZhdWx0KCl9LGhhbmRsZWQ6ZnVuY3Rpb24oKXtpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpfX07cj90Ll9pc1ZlcnRpY2FsKCk/Rm91bmRhdGlvbi5ydGwoKT9lLmV4dGVuZChoLHtkb3duOmwsdXA6ZCxuZXh0OmMscHJldmlvdXM6dX0pOmUuZXh0ZW5kKGgse2Rvd246bCx1cDpkLG5leHQ6dSxwcmV2aW91czpjfSk6Rm91bmRhdGlvbi5ydGwoKT9lLmV4dGVuZChoLHtuZXh0OmQscHJldmlvdXM6bCxkb3duOnUsdXA6Y30pOmUuZXh0ZW5kKGgse25leHQ6bCxwcmV2aW91czpkLGRvd246dSx1cDpjfSk6Rm91bmRhdGlvbi5ydGwoKT9lLmV4dGVuZChoLHtuZXh0OmMscHJldmlvdXM6dSxkb3duOmwsdXA6ZH0pOmUuZXh0ZW5kKGgse25leHQ6dSxwcmV2aW91czpjLGRvd246bCx1cDpkfSksRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoaSxcIkRyb3Bkb3duTWVudVwiLGgpfSl9fSx7a2V5OlwiX2FkZEJvZHlIYW5kbGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1lKGRvY3VtZW50LmJvZHkpLGk9dGhpczt0Lm9mZihcIm1vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudVwiKS5vbihcIm1vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudVwiLGZ1bmN0aW9uKGUpe3ZhciBuPWkuJGVsZW1lbnQuZmluZChlLnRhcmdldCk7bi5sZW5ndGh8fChpLl9oaWRlKCksdC5vZmYoXCJtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnVcIikpfSl9fSx7a2V5OlwiX3Nob3dcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10aGlzLiR0YWJzLmluZGV4KHRoaXMuJHRhYnMuZmlsdGVyKGZ1bmN0aW9uKGksbil7cmV0dXJuIGUobikuZmluZCh0KS5sZW5ndGg+MH0pKSxuPXQucGFyZW50KFwibGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnRcIikuc2libGluZ3MoXCJsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudFwiKTt0aGlzLl9oaWRlKG4saSksdC5jc3MoXCJ2aXNpYmlsaXR5XCIsXCJoaWRkZW5cIikuYWRkQ2xhc3MoXCJqcy1kcm9wZG93bi1hY3RpdmVcIikucGFyZW50KFwibGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnRcIikuYWRkQ2xhc3MoXCJpcy1hY3RpdmVcIik7dmFyIG89Rm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0LG51bGwsITApO2lmKCFvKXt2YXIgcz1cImxlZnRcIj09PXRoaXMub3B0aW9ucy5hbGlnbm1lbnQ/XCItcmlnaHRcIjpcIi1sZWZ0XCIscj10LnBhcmVudChcIi5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudFwiKTtyLnJlbW92ZUNsYXNzKFwib3BlbnNcIitzKS5hZGRDbGFzcyhcIm9wZW5zLVwiK3RoaXMub3B0aW9ucy5hbGlnbm1lbnQpLG89Rm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0LG51bGwsITApLG98fHIucmVtb3ZlQ2xhc3MoXCJvcGVucy1cIit0aGlzLm9wdGlvbnMuYWxpZ25tZW50KS5hZGRDbGFzcyhcIm9wZW5zLWlubmVyXCIpLHRoaXMuY2hhbmdlZD0hMH10LmNzcyhcInZpc2liaWxpdHlcIixcIlwiKSx0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrJiZ0aGlzLl9hZGRCb2R5SGFuZGxlcigpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcInNob3cuemYuZHJvcGRvd25tZW51XCIsW3RdKX19LHtrZXk6XCJfaGlkZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk7aT1lJiZlLmxlbmd0aD9lOnZvaWQgMCE9PXQ/dGhpcy4kdGFicy5ub3QoZnVuY3Rpb24oZSxpKXtyZXR1cm4gZT09PXR9KTp0aGlzLiRlbGVtZW50O3ZhciBuPWkuaGFzQ2xhc3MoXCJpcy1hY3RpdmVcIil8fGkuZmluZChcIi5pcy1hY3RpdmVcIikubGVuZ3RoPjA7aWYobil7aWYoaS5maW5kKFwibGkuaXMtYWN0aXZlXCIpLmFkZChpKS5hdHRyKHtcImRhdGEtaXMtY2xpY2tcIjohMX0pLnJlbW92ZUNsYXNzKFwiaXMtYWN0aXZlXCIpLGkuZmluZChcInVsLmpzLWRyb3Bkb3duLWFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImpzLWRyb3Bkb3duLWFjdGl2ZVwiKSx0aGlzLmNoYW5nZWR8fGkuZmluZChcIm9wZW5zLWlubmVyXCIpLmxlbmd0aCl7dmFyIG89XCJsZWZ0XCI9PT10aGlzLm9wdGlvbnMuYWxpZ25tZW50P1wicmlnaHRcIjpcImxlZnRcIjtpLmZpbmQoXCJsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudFwiKS5hZGQoaSkucmVtb3ZlQ2xhc3MoXCJvcGVucy1pbm5lciBvcGVucy1cIit0aGlzLm9wdGlvbnMuYWxpZ25tZW50KS5hZGRDbGFzcyhcIm9wZW5zLVwiK28pLHRoaXMuY2hhbmdlZD0hMX10aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJoaWRlLnpmLmRyb3Bkb3dubWVudVwiLFtpXSl9fX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJG1lbnVJdGVtcy5vZmYoXCIuemYuZHJvcGRvd25tZW51XCIpLnJlbW92ZUF0dHIoXCJkYXRhLWlzLWNsaWNrXCIpLnJlbW92ZUNsYXNzKFwiaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXJcIiksZShkb2N1bWVudC5ib2R5KS5vZmYoXCIuemYuZHJvcGRvd25tZW51XCIpLEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsXCJkcm9wZG93blwiKSxGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLHR9KCk7dC5kZWZhdWx0cz17ZGlzYWJsZUhvdmVyOiExLGF1dG9jbG9zZTohMCxob3ZlckRlbGF5OjUwLGNsaWNrT3BlbjohMSxjbG9zaW5nVGltZTo1MDAsYWxpZ25tZW50OlwibGVmdFwiLGNsb3NlT25DbGljazohMCxjbG9zZU9uQ2xpY2tJbnNpZGU6ITAsdmVydGljYWxDbGFzczpcInZlcnRpY2FsXCIscmlnaHRDbGFzczpcImFsaWduLXJpZ2h0XCIsZm9yY2VGb2xsb3c6ITB9LEZvdW5kYXRpb24ucGx1Z2luKHQsXCJEcm9wZG93bk1lbnVcIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIkVxdWFsaXplclwiKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZWxlbWVudC5hdHRyKFwiZGF0YS1lcXVhbGl6ZXJcIil8fFwiXCIsaT10aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplci13YXRjaD1cIicrdCsnXCJdJyk7dGhpcy4kd2F0Y2hlZD1pLmxlbmd0aD9pOnRoaXMuJGVsZW1lbnQuZmluZChcIltkYXRhLWVxdWFsaXplci13YXRjaF1cIiksdGhpcy4kZWxlbWVudC5hdHRyKFwiZGF0YS1yZXNpemVcIix0fHxGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsXCJlcVwiKSksdGhpcy4kZWxlbWVudC5hdHRyKFwiZGF0YS1tdXRhdGVcIix0fHxGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsXCJlcVwiKSksdGhpcy5oYXNOZXN0ZWQ9dGhpcy4kZWxlbWVudC5maW5kKFwiW2RhdGEtZXF1YWxpemVyXVwiKS5sZW5ndGg+MCx0aGlzLmlzTmVzdGVkPXRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksXCJbZGF0YS1lcXVhbGl6ZXJdXCIpLmxlbmd0aD4wLHRoaXMuaXNPbj0hMSx0aGlzLl9iaW5kSGFuZGxlcj17b25SZXNpemVNZUJvdW5kOnRoaXMuX29uUmVzaXplTWUuYmluZCh0aGlzKSxvblBvc3RFcXVhbGl6ZWRCb3VuZDp0aGlzLl9vblBvc3RFcXVhbGl6ZWQuYmluZCh0aGlzKX07dmFyIG4sbz10aGlzLiRlbGVtZW50LmZpbmQoXCJpbWdcIik7dGhpcy5vcHRpb25zLmVxdWFsaXplT24/KG49dGhpcy5fY2hlY2tNUSgpLGUod2luZG93KS5vbihcImNoYW5nZWQuemYubWVkaWFxdWVyeVwiLHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSkpOnRoaXMuX2V2ZW50cygpLCh2b2lkIDAhPT1uJiZuPT09ITF8fHZvaWQgMD09PW4pJiYoby5sZW5ndGg/Rm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZChvLHRoaXMuX3JlZmxvdy5iaW5kKHRoaXMpKTp0aGlzLl9yZWZsb3coKSl9fSx7a2V5OlwiX3BhdXNlRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlzT249ITEsdGhpcy4kZWxlbWVudC5vZmYoe1wiLnpmLmVxdWFsaXplclwiOnRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFwicmVzaXplbWUuemYudHJpZ2dlclwiOnRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCxcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIjp0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmR9KX19LHtrZXk6XCJfb25SZXNpemVNZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX3JlZmxvdygpfX0se2tleTpcIl9vblBvc3RFcXVhbGl6ZWRcIix2YWx1ZTpmdW5jdGlvbihlKXtlLnRhcmdldCE9PXRoaXMuJGVsZW1lbnRbMF0mJnRoaXMuX3JlZmxvdygpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3BhdXNlRXZlbnRzKCksdGhpcy5oYXNOZXN0ZWQ/dGhpcy4kZWxlbWVudC5vbihcInBvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyXCIsdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQpOih0aGlzLiRlbGVtZW50Lm9uKFwicmVzaXplbWUuemYudHJpZ2dlclwiLHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCksdGhpcy4kZWxlbWVudC5vbihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIix0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpKSx0aGlzLmlzT249ITB9fSx7a2V5OlwiX2NoZWNrTVFcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuaXModGhpcy5vcHRpb25zLmVxdWFsaXplT24pO3JldHVybiBlP3RoaXMuaXNPbiYmKHRoaXMuX3BhdXNlRXZlbnRzKCksdGhpcy4kd2F0Y2hlZC5jc3MoXCJoZWlnaHRcIixcImF1dG9cIikpOnRoaXMuaXNPbnx8dGhpcy5fZXZlbnRzKCksZX19LHtrZXk6XCJfa2lsbHN3aXRjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcIl9yZWZsb3dcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrJiZ0aGlzLl9pc1N0YWNrZWQoKT8odGhpcy4kd2F0Y2hlZC5jc3MoXCJoZWlnaHRcIixcImF1dG9cIiksITEpOnZvaWQodGhpcy5vcHRpb25zLmVxdWFsaXplQnlSb3c/dGhpcy5nZXRIZWlnaHRzQnlSb3codGhpcy5hcHBseUhlaWdodEJ5Um93LmJpbmQodGhpcykpOnRoaXMuZ2V0SGVpZ2h0cyh0aGlzLmFwcGx5SGVpZ2h0LmJpbmQodGhpcykpKX19LHtrZXk6XCJfaXNTdGFja2VkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy4kd2F0Y2hlZFswXXx8IXRoaXMuJHdhdGNoZWRbMV18fHRoaXMuJHdhdGNoZWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIT09dGhpcy4kd2F0Y2hlZFsxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3B9fSx7a2V5OlwiZ2V0SGVpZ2h0c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxpPTAsbj10aGlzLiR3YXRjaGVkLmxlbmd0aDtpPG47aSsrKXRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0PVwiYXV0b1wiLHQucHVzaCh0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodCk7ZSh0KX19LHtrZXk6XCJnZXRIZWlnaHRzQnlSb3dcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10aGlzLiR3YXRjaGVkLmxlbmd0aD90aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wOjAsbj1bXSxvPTA7bltvXT1bXTtmb3IodmFyIHM9MCxyPXRoaXMuJHdhdGNoZWQubGVuZ3RoO3M8cjtzKyspe3RoaXMuJHdhdGNoZWRbc10uc3R5bGUuaGVpZ2h0PVwiYXV0b1wiO3ZhciBhPWUodGhpcy4kd2F0Y2hlZFtzXSkub2Zmc2V0KCkudG9wO2EhPWkmJihvKyssbltvXT1bXSxpPWEpLG5bb10ucHVzaChbdGhpcy4kd2F0Y2hlZFtzXSx0aGlzLiR3YXRjaGVkW3NdLm9mZnNldEhlaWdodF0pfWZvcih2YXIgbD0wLGQ9bi5sZW5ndGg7bDxkO2wrKyl7dmFyIHU9ZShuW2xdKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1sxXX0pLmdldCgpLGM9TWF0aC5tYXguYXBwbHkobnVsbCx1KTtuW2xdLnB1c2goYyl9dChuKX19LHtrZXk6XCJhcHBseUhlaWdodFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PU1hdGgubWF4LmFwcGx5KG51bGwsZSk7dGhpcy4kZWxlbWVudC50cmlnZ2VyKFwicHJlZXF1YWxpemVkLnpmLmVxdWFsaXplclwiKSx0aGlzLiR3YXRjaGVkLmNzcyhcImhlaWdodFwiLHQpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcInBvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyXCIpfX0se2tleTpcImFwcGx5SGVpZ2h0QnlSb3dcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyXCIpO2Zvcih2YXIgaT0wLG49dC5sZW5ndGg7aTxuO2krKyl7dmFyIG89dFtpXS5sZW5ndGgscz10W2ldW28tMV07aWYobzw9MillKHRbaV1bMF1bMF0pLmNzcyh7aGVpZ2h0OlwiYXV0b1wifSk7ZWxzZXt0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyXCIpO2Zvcih2YXIgcj0wLGE9by0xO3I8YTtyKyspZSh0W2ldW3JdWzBdKS5jc3Moe2hlaWdodDpzfSk7dGhpcy4kZWxlbWVudC50cmlnZ2VyKFwicG9zdGVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXJcIil9fXRoaXMuJGVsZW1lbnQudHJpZ2dlcihcInBvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyXCIpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3BhdXNlRXZlbnRzKCksdGhpcy4kd2F0Y2hlZC5jc3MoXCJoZWlnaHRcIixcImF1dG9cIiksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e2VxdWFsaXplT25TdGFjazohMSxlcXVhbGl6ZUJ5Um93OiExLGVxdWFsaXplT246XCJcIn0sRm91bmRhdGlvbi5wbHVnaW4odCxcIkVxdWFsaXplclwiKX0oalF1ZXJ5KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCk7IWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpLHRoaXMuJGVsZW1lbnQ9aSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdC5kZWZhdWx0cyxuKSx0aGlzLnJ1bGVzPVtdLHRoaXMuY3VycmVudFBhdGg9XCJcIix0aGlzLl9pbml0KCksdGhpcy5fZXZlbnRzKCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiSW50ZXJjaGFuZ2VcIil9cmV0dXJuIF9jcmVhdGVDbGFzcyh0LFt7a2V5OlwiX2luaXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2FkZEJyZWFrcG9pbnRzKCksdGhpcy5fZ2VuZXJhdGVSdWxlcygpLHRoaXMuX3JlZmxvdygpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ZSh3aW5kb3cpLm9uKFwicmVzaXplLnpmLmludGVyY2hhbmdlXCIsRm91bmRhdGlvbi51dGlsLnRocm90dGxlKGZ1bmN0aW9uKCl7dC5fcmVmbG93KCl9LDUwKSl9fSx7a2V5OlwiX3JlZmxvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU7Zm9yKHZhciB0IGluIHRoaXMucnVsZXMpaWYodGhpcy5ydWxlcy5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGk9dGhpcy5ydWxlc1t0XTt3aW5kb3cubWF0Y2hNZWRpYShpLnF1ZXJ5KS5tYXRjaGVzJiYoZT1pKX1lJiZ0aGlzLnJlcGxhY2UoZS5wYXRoKX19LHtrZXk6XCJfYWRkQnJlYWtwb2ludHNcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZSBpbiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcylpZihGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIGk9Rm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXNbZV07dC5TUEVDSUFMX1FVRVJJRVNbaS5uYW1lXT1pLnZhbHVlfX19LHtrZXk6XCJfZ2VuZXJhdGVSdWxlc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBpLG49W107aT10aGlzLm9wdGlvbnMucnVsZXM/dGhpcy5vcHRpb25zLnJ1bGVzOnRoaXMuJGVsZW1lbnQuZGF0YShcImludGVyY2hhbmdlXCIpLm1hdGNoKC9cXFsuKj9cXF0vZyk7Zm9yKHZhciBvIGluIGkpaWYoaS5oYXNPd25Qcm9wZXJ0eShvKSl7dmFyIHM9aVtvXS5zbGljZSgxLC0xKS5zcGxpdChcIiwgXCIpLHI9cy5zbGljZSgwLC0xKS5qb2luKFwiXCIpLGE9c1tzLmxlbmd0aC0xXTt0LlNQRUNJQUxfUVVFUklFU1thXSYmKGE9dC5TUEVDSUFMX1FVRVJJRVNbYV0pLG4ucHVzaCh7cGF0aDpyLHF1ZXJ5OmF9KX10aGlzLnJ1bGVzPW59fSx7a2V5OlwicmVwbGFjZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuY3VycmVudFBhdGghPT10KXt2YXIgaT10aGlzLG49XCJyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZVwiO1wiSU1HXCI9PT10aGlzLiRlbGVtZW50WzBdLm5vZGVOYW1lP3RoaXMuJGVsZW1lbnQuYXR0cihcInNyY1wiLHQpLm9uKFwibG9hZFwiLGZ1bmN0aW9uKCl7aS5jdXJyZW50UGF0aD10fSkudHJpZ2dlcihuKTp0Lm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSk/dGhpcy4kZWxlbWVudC5jc3Moe1wiYmFja2dyb3VuZC1pbWFnZVwiOlwidXJsKFwiK3QrXCIpXCJ9KS50cmlnZ2VyKG4pOmUuZ2V0KHQsZnVuY3Rpb24obyl7aS4kZWxlbWVudC5odG1sKG8pLnRyaWdnZXIobiksZShvKS5mb3VuZGF0aW9uKCksaS5jdXJyZW50UGF0aD10fSl9fX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe319XSksdH0oKTt0LmRlZmF1bHRzPXtydWxlczpudWxsfSx0LlNQRUNJQUxfUVVFUklFUz17bGFuZHNjYXBlOlwic2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcIixwb3J0cmFpdDpcInNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcIixyZXRpbmE6XCJvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweClcIn0sRm91bmRhdGlvbi5wbHVnaW4odCxcIkludGVyY2hhbmdlXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1pLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0LmRlZmF1bHRzLHRoaXMuJGVsZW1lbnQuZGF0YSgpLG4pLHRoaXMuX2luaXQoKSx0aGlzLmNhbGNQb2ludHMoKSxGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsXCJNYWdlbGxhblwiKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZWxlbWVudFswXS5pZHx8Rm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LFwibWFnZWxsYW5cIik7dGhpcy4kdGFyZ2V0cz1lKFwiW2RhdGEtbWFnZWxsYW4tdGFyZ2V0XVwiKSx0aGlzLiRsaW5rcz10aGlzLiRlbGVtZW50LmZpbmQoXCJhXCIpLHRoaXMuJGVsZW1lbnQuYXR0cih7XCJkYXRhLXJlc2l6ZVwiOnQsXCJkYXRhLXNjcm9sbFwiOnQsaWQ6dH0pLHRoaXMuJGFjdGl2ZT1lKCksdGhpcy5zY3JvbGxQb3M9cGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LDEwKSx0aGlzLl9ldmVudHMoKX19LHtrZXk6XCJjYWxjUG9pbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGk9ZG9jdW1lbnQuYm9keSxuPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudDt0aGlzLnBvaW50cz1bXSx0aGlzLndpbkhlaWdodD1NYXRoLnJvdW5kKE1hdGgubWF4KHdpbmRvdy5pbm5lckhlaWdodCxuLmNsaWVudEhlaWdodCkpLHRoaXMuZG9jSGVpZ2h0PU1hdGgucm91bmQoTWF0aC5tYXgoaS5zY3JvbGxIZWlnaHQsaS5vZmZzZXRIZWlnaHQsbi5jbGllbnRIZWlnaHQsbi5zY3JvbGxIZWlnaHQsbi5vZmZzZXRIZWlnaHQpKSx0aGlzLiR0YXJnZXRzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpLG49TWF0aC5yb3VuZChpLm9mZnNldCgpLnRvcC10Lm9wdGlvbnMudGhyZXNob2xkKTtpLnRhcmdldFBvaW50PW4sdC5wb2ludHMucHVzaChuKX0pfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ZShcImh0bWwsIGJvZHlcIikse2R1cmF0aW9uOnQub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixlYXNpbmc6dC5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ307ZSh3aW5kb3cpLm9uZShcImxvYWRcIixmdW5jdGlvbigpe3Qub3B0aW9ucy5kZWVwTGlua2luZyYmbG9jYXRpb24uaGFzaCYmdC5zY3JvbGxUb0xvYyhsb2NhdGlvbi5oYXNoKSx0LmNhbGNQb2ludHMoKSx0Ll91cGRhdGVBY3RpdmUoKX0pLHRoaXMuJGVsZW1lbnQub24oe1wicmVzaXplbWUuemYudHJpZ2dlclwiOnRoaXMucmVmbG93LmJpbmQodGhpcyksXCJzY3JvbGxtZS56Zi50cmlnZ2VyXCI6dGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcyl9KS5vbihcImNsaWNrLnpmLm1hZ2VsbGFuXCIsJ2FbaHJlZl49XCIjXCJdJyxmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIGk9dGhpcy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO3Quc2Nyb2xsVG9Mb2MoaSl9KSxlKHdpbmRvdykub24oXCJwb3BzdGF0ZVwiLGZ1bmN0aW9uKGUpe3Qub3B0aW9ucy5kZWVwTGlua2luZyYmdC5zY3JvbGxUb0xvYyh3aW5kb3cubG9jYXRpb24uaGFzaCl9KX19LHtrZXk6XCJzY3JvbGxUb0xvY1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKCFlKHQpLmxlbmd0aClyZXR1cm4hMTt0aGlzLl9pblRyYW5zaXRpb249ITA7dmFyIGk9dGhpcyxuPU1hdGgucm91bmQoZSh0KS5vZmZzZXQoKS50b3AtdGhpcy5vcHRpb25zLnRocmVzaG9sZC8yLXRoaXMub3B0aW9ucy5iYXJPZmZzZXQpO2UoXCJodG1sLCBib2R5XCIpLnN0b3AoITApLmFuaW1hdGUoe3Njcm9sbFRvcDpufSx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZyxmdW5jdGlvbigpe2kuX2luVHJhbnNpdGlvbj0hMSxpLl91cGRhdGVBY3RpdmUoKX0pfX0se2tleTpcInJlZmxvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jYWxjUG9pbnRzKCksdGhpcy5fdXBkYXRlQWN0aXZlKCl9fSx7a2V5OlwiX3VwZGF0ZUFjdGl2ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuX2luVHJhbnNpdGlvbil7dmFyIGUsdD1wYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsMTApO2lmKHQrdGhpcy53aW5IZWlnaHQ9PT10aGlzLmRvY0hlaWdodCllPXRoaXMucG9pbnRzLmxlbmd0aC0xO2Vsc2UgaWYodDx0aGlzLnBvaW50c1swXSllPXZvaWQgMDtlbHNle3ZhciBpPXRoaXMuc2Nyb2xsUG9zPHQsbj10aGlzLG89dGhpcy5wb2ludHMuZmlsdGVyKGZ1bmN0aW9uKGUsbyl7cmV0dXJuIGk/ZS1uLm9wdGlvbnMuYmFyT2Zmc2V0PD10OmUtbi5vcHRpb25zLmJhck9mZnNldC1uLm9wdGlvbnMudGhyZXNob2xkPD10fSk7ZT1vLmxlbmd0aD9vLmxlbmd0aC0xOjB9aWYodGhpcy4kYWN0aXZlLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyksdGhpcy4kYWN0aXZlPXRoaXMuJGxpbmtzLmZpbHRlcignW2hyZWY9XCIjJyt0aGlzLiR0YXJnZXRzLmVxKGUpLmRhdGEoXCJtYWdlbGxhbi10YXJnZXRcIikrJ1wiXScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyksdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXt2YXIgcz1cIlwiO3ZvaWQgMCE9ZSYmKHM9dGhpcy4kYWN0aXZlWzBdLmdldEF0dHJpYnV0ZShcImhyZWZcIikpLHMhPT13aW5kb3cubG9jYXRpb24uaGFzaCYmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZT93aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCxudWxsLHMpOndpbmRvdy5sb2NhdGlvbi5oYXNoPXMpfXRoaXMuc2Nyb2xsUG9zPXQsdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwidXBkYXRlLnpmLm1hZ2VsbGFuXCIsW3RoaXMuJGFjdGl2ZV0pfX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLiRlbGVtZW50Lm9mZihcIi56Zi50cmlnZ2VyIC56Zi5tYWdlbGxhblwiKS5maW5kKFwiLlwiK3RoaXMub3B0aW9ucy5hY3RpdmVDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKSx0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe3ZhciBlPXRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO3dpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoZSxcIlwiKX1Gb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLHR9KCk7dC5kZWZhdWx0cz17YW5pbWF0aW9uRHVyYXRpb246NTAwLGFuaW1hdGlvbkVhc2luZzpcImxpbmVhclwiLHRocmVzaG9sZDo1MCxhY3RpdmVDbGFzczpcImFjdGl2ZVwiLGRlZXBMaW5raW5nOiExLGJhck9mZnNldDowfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiTWFnZWxsYW5cIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy4kbGFzdFRyaWdnZXI9ZSgpLHRoaXMuJHRyaWdnZXJzPWUoKSx0aGlzLl9pbml0KCksdGhpcy5fZXZlbnRzKCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiT2ZmQ2FudmFzXCIpLEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoXCJPZmZDYW52YXNcIix7RVNDQVBFOlwiY2xvc2VcIn0pfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRlbGVtZW50LmF0dHIoXCJpZFwiKTtpZih0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKFwiaXMtdHJhbnNpdGlvbi1cIit0aGlzLm9wdGlvbnMudHJhbnNpdGlvbiksdGhpcy4kdHJpZ2dlcnM9ZShkb2N1bWVudCkuZmluZCgnW2RhdGEtb3Blbj1cIicrdCsnXCJdLCBbZGF0YS1jbG9zZT1cIicrdCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK3QrJ1wiXScpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKS5hdHRyKFwiYXJpYS1jb250cm9sc1wiLHQpLHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheT09PSEwKXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG49XCJmaXhlZFwiPT09ZSh0aGlzLiRlbGVtZW50KS5jc3MoXCJwb3NpdGlvblwiKT9cImlzLW92ZXJsYXktZml4ZWRcIjpcImlzLW92ZXJsYXktYWJzb2x1dGVcIjtpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJqcy1vZmYtY2FudmFzLW92ZXJsYXkgXCIrbiksdGhpcy4kb3ZlcmxheT1lKGkpLFwiaXMtb3ZlcmxheS1maXhlZFwiPT09bj9lKFwiYm9keVwiKS5hcHBlbmQodGhpcy4kb3ZlcmxheSk6dGhpcy4kZWxlbWVudC5zaWJsaW5ncyhcIltkYXRhLW9mZi1jYW52YXMtY29udGVudF1cIikuYXBwZW5kKHRoaXMuJG92ZXJsYXkpfXRoaXMub3B0aW9ucy5pc1JldmVhbGVkPXRoaXMub3B0aW9ucy5pc1JldmVhbGVkfHxuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcyxcImdcIikudGVzdCh0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZSksdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQ9PT0hMCYmKHRoaXMub3B0aW9ucy5yZXZlYWxPbj10aGlzLm9wdGlvbnMucmV2ZWFsT258fHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoXCItXCIpWzJdLHRoaXMuX3NldE1RQ2hlY2tlcigpKSwhdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lPT0hMCYmKHRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZT0xZTMqcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKFwiW2RhdGEtb2ZmLWNhbnZhc11cIilbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuJGVsZW1lbnQub2ZmKFwiLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhc1wiKS5vbih7XCJvcGVuLnpmLnRyaWdnZXJcIjp0aGlzLm9wZW4uYmluZCh0aGlzKSxcImNsb3NlLnpmLnRyaWdnZXJcIjp0aGlzLmNsb3NlLmJpbmQodGhpcyksXCJ0b2dnbGUuemYudHJpZ2dlclwiOnRoaXMudG9nZ2xlLmJpbmQodGhpcyksXCJrZXlkb3duLnpmLm9mZmNhbnZhc1wiOnRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcyl9KSx0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrPT09ITApe3ZhciB0PXRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheT90aGlzLiRvdmVybGF5OmUoXCJbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdXCIpO3Qub24oe1wiY2xpY2suemYub2ZmY2FudmFzXCI6dGhpcy5jbG9zZS5iaW5kKHRoaXMpfSl9fX0se2tleTpcIl9zZXRNUUNoZWNrZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7ZSh3aW5kb3cpLm9uKFwiY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5XCIsZnVuY3Rpb24oKXtGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0Lm9wdGlvbnMucmV2ZWFsT24pP3QucmV2ZWFsKCEwKTp0LnJldmVhbCghMSl9KS5vbmUoXCJsb2FkLnpmLm9mZmNhbnZhc1wiLGZ1bmN0aW9uKCl7Rm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodC5vcHRpb25zLnJldmVhbE9uKSYmdC5yZXZlYWwoITApfSl9fSx7a2V5OlwicmV2ZWFsXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy4kZWxlbWVudC5maW5kKFwiW2RhdGEtY2xvc2VdXCIpO2U/KHRoaXMuY2xvc2UoKSx0aGlzLmlzUmV2ZWFsZWQ9ITAsdGhpcy4kZWxlbWVudC5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpLHRoaXMuJGVsZW1lbnQub2ZmKFwib3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyXCIpLHQubGVuZ3RoJiZ0LmhpZGUoKSk6KHRoaXMuaXNSZXZlYWxlZD0hMSx0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSx0aGlzLiRlbGVtZW50Lm9uKHtcIm9wZW4uemYudHJpZ2dlclwiOnRoaXMub3Blbi5iaW5kKHRoaXMpLFwidG9nZ2xlLnpmLnRyaWdnZXJcIjp0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpfSksdC5sZW5ndGgmJnQuc2hvdygpKX19LHtrZXk6XCJfc3RvcFNjcm9sbGluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiExfX0se2tleTpcIm9wZW5cIix2YWx1ZTpmdW5jdGlvbih0LGkpe2lmKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiaXMtb3BlblwiKSYmIXRoaXMuaXNSZXZlYWxlZCl7dmFyIG49dGhpcztpJiYodGhpcy4kbGFzdFRyaWdnZXI9aSksXCJ0b3BcIj09PXRoaXMub3B0aW9ucy5mb3JjZVRvP3dpbmRvdy5zY3JvbGxUbygwLDApOlwiYm90dG9tXCI9PT10aGlzLm9wdGlvbnMuZm9yY2VUbyYmd2luZG93LnNjcm9sbFRvKDAsZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpLG4uJGVsZW1lbnQuYWRkQ2xhc3MoXCJpcy1vcGVuXCIpLHRoaXMuJHRyaWdnZXJzLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsXCJ0cnVlXCIpLFxudGhpcy4kZWxlbWVudC5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpLnRyaWdnZXIoXCJvcGVuZWQuemYub2ZmY2FudmFzXCIpLHRoaXMub3B0aW9ucy5jb250ZW50U2Nyb2xsPT09ITEmJmUoXCJib2R5XCIpLmFkZENsYXNzKFwiaXMtb2ZmLWNhbnZhcy1vcGVuXCIpLm9uKFwidG91Y2htb3ZlXCIsdGhpcy5fc3RvcFNjcm9sbGluZyksdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5PT09ITAmJnRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoXCJpcy12aXNpYmxlXCIpLHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2s9PT0hMCYmdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5PT09ITAmJnRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoXCJpcy1jbG9zYWJsZVwiKSx0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzPT09ITAmJnRoaXMuJGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCh0aGlzLiRlbGVtZW50KSxmdW5jdGlvbigpe24uJGVsZW1lbnQuZmluZChcImEsIGJ1dHRvblwiKS5lcSgwKS5mb2N1cygpfSksdGhpcy5vcHRpb25zLnRyYXBGb2N1cz09PSEwJiYodGhpcy4kZWxlbWVudC5zaWJsaW5ncyhcIltkYXRhLW9mZi1jYW52YXMtY29udGVudF1cIikuYXR0cihcInRhYmluZGV4XCIsXCItMVwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KSl9fX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImlzLW9wZW5cIikmJiF0aGlzLmlzUmV2ZWFsZWQpe3ZhciBpPXRoaXM7aS4kZWxlbWVudC5yZW1vdmVDbGFzcyhcImlzLW9wZW5cIiksdGhpcy4kZWxlbWVudC5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIikudHJpZ2dlcihcImNsb3NlZC56Zi5vZmZjYW52YXNcIiksdGhpcy5vcHRpb25zLmNvbnRlbnRTY3JvbGw9PT0hMSYmZShcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJpcy1vZmYtY2FudmFzLW9wZW5cIikub2ZmKFwidG91Y2htb3ZlXCIsdGhpcy5fc3RvcFNjcm9sbGluZyksdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5PT09ITAmJnRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoXCJpcy12aXNpYmxlXCIpLHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2s9PT0hMCYmdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5PT09ITAmJnRoaXMuJG92ZXJsYXkucmVtb3ZlQ2xhc3MoXCJpcy1jbG9zYWJsZVwiKSx0aGlzLiR0cmlnZ2Vycy5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIiksdGhpcy5vcHRpb25zLnRyYXBGb2N1cz09PSEwJiYodGhpcy4kZWxlbWVudC5zaWJsaW5ncyhcIltkYXRhLW9mZi1jYW52YXMtY29udGVudF1cIikucmVtb3ZlQXR0cihcInRhYmluZGV4XCIpLEZvdW5kYXRpb24uS2V5Ym9hcmQucmVsZWFzZUZvY3VzKHRoaXMuJGVsZW1lbnQpKX19fSx7a2V5OlwidG9nZ2xlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiaXMtb3BlblwiKT90aGlzLmNsb3NlKGUsdCk6dGhpcy5vcGVuKGUsdCl9fSx7a2V5OlwiX2hhbmRsZUtleWJvYXJkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLFwiT2ZmQ2FudmFzXCIse2Nsb3NlOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY2xvc2UoKSx0LiRsYXN0VHJpZ2dlci5mb2N1cygpLCEwfSxoYW5kbGVkOmZ1bmN0aW9uKCl7ZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCl9fSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jbG9zZSgpLHRoaXMuJGVsZW1lbnQub2ZmKFwiLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhc1wiKSx0aGlzLiRvdmVybGF5Lm9mZihcIi56Zi5vZmZjYW52YXNcIiksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e2Nsb3NlT25DbGljazohMCxjb250ZW50T3ZlcmxheTohMCxjb250ZW50U2Nyb2xsOiEwLHRyYW5zaXRpb25UaW1lOjAsdHJhbnNpdGlvbjpcInB1c2hcIixmb3JjZVRvOm51bGwsaXNSZXZlYWxlZDohMSxyZXZlYWxPbjpudWxsLGF1dG9Gb2N1czohMCxyZXZlYWxDbGFzczpcInJldmVhbC1mb3ItXCIsdHJhcEZvY3VzOiExfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiT2ZmQ2FudmFzXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1pLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0LmRlZmF1bHRzLHRoaXMuJGVsZW1lbnQuZGF0YSgpLG4pLHRoaXMuX2luaXQoKSxGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsXCJPcmJpdFwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKFwiT3JiaXRcIix7bHRyOntBUlJPV19SSUdIVDpcIm5leHRcIixBUlJPV19MRUZUOlwicHJldmlvdXNcIn0scnRsOntBUlJPV19MRUZUOlwibmV4dFwiLEFSUk9XX1JJR0hUOlwicHJldmlvdXNcIn19KX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fcmVzZXQoKSx0aGlzLiR3cmFwcGVyPXRoaXMuJGVsZW1lbnQuZmluZChcIi5cIit0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpLHRoaXMuJHNsaWRlcz10aGlzLiRlbGVtZW50LmZpbmQoXCIuXCIrdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpO3ZhciBlPXRoaXMuJGVsZW1lbnQuZmluZChcImltZ1wiKSx0PXRoaXMuJHNsaWRlcy5maWx0ZXIoXCIuaXMtYWN0aXZlXCIpLGk9dGhpcy4kZWxlbWVudFswXS5pZHx8Rm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LFwib3JiaXRcIik7dGhpcy4kZWxlbWVudC5hdHRyKHtcImRhdGEtcmVzaXplXCI6aSxpZDppfSksdC5sZW5ndGh8fHRoaXMuJHNsaWRlcy5lcSgwKS5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKSx0aGlzLm9wdGlvbnMudXNlTVVJfHx0aGlzLiRzbGlkZXMuYWRkQ2xhc3MoXCJuby1tb3Rpb251aVwiKSxlLmxlbmd0aD9Gb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKGUsdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcykpOnRoaXMuX3ByZXBhcmVGb3JPcmJpdCgpLHRoaXMub3B0aW9ucy5idWxsZXRzJiZ0aGlzLl9sb2FkQnVsbGV0cygpLHRoaXMuX2V2ZW50cygpLHRoaXMub3B0aW9ucy5hdXRvUGxheSYmdGhpcy4kc2xpZGVzLmxlbmd0aD4xJiZ0aGlzLmdlb1N5bmMoKSx0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSYmdGhpcy4kd3JhcHBlci5hdHRyKFwidGFiaW5kZXhcIiwwKX19LHtrZXk6XCJfbG9hZEJ1bGxldHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJGJ1bGxldHM9dGhpcy4kZWxlbWVudC5maW5kKFwiLlwiK3RoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHMpLmZpbmQoXCJidXR0b25cIil9fSx7a2V5OlwiZ2VvU3luY1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnRpbWVyPW5ldyBGb3VuZGF0aW9uLlRpbWVyKHRoaXMuJGVsZW1lbnQse2R1cmF0aW9uOnRoaXMub3B0aW9ucy50aW1lckRlbGF5LGluZmluaXRlOiExfSxmdW5jdGlvbigpe2UuY2hhbmdlU2xpZGUoITApfSksdGhpcy50aW1lci5zdGFydCgpfX0se2tleTpcIl9wcmVwYXJlRm9yT3JiaXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3NldFdyYXBwZXJIZWlnaHQoKX19LHtrZXk6XCJfc2V0V3JhcHBlckhlaWdodFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpLG49MCxvPTAscz10aGlzO3RoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCl7aT10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCxlKHRoaXMpLmF0dHIoXCJkYXRhLXNsaWRlXCIsbykscy4kc2xpZGVzLmZpbHRlcihcIi5pcy1hY3RpdmVcIilbMF0hPT1zLiRzbGlkZXMuZXEobylbMF0mJmUodGhpcykuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsZGlzcGxheTpcIm5vbmVcIn0pLG49aT5uP2k6bixvKyt9KSxvPT09dGhpcy4kc2xpZGVzLmxlbmd0aCYmKHRoaXMuJHdyYXBwZXIuY3NzKHtoZWlnaHQ6bn0pLHQmJnQobikpfX0se2tleTpcIl9zZXRTbGlkZUhlaWdodFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCl7ZSh0aGlzKS5jc3MoXCJtYXgtaGVpZ2h0XCIsdCl9KX19LHtrZXk6XCJfZXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHRoaXMuJGVsZW1lbnQub2ZmKFwiLnJlc2l6ZW1lLnpmLnRyaWdnZXJcIikub24oe1wicmVzaXplbWUuemYudHJpZ2dlclwiOnRoaXMuX3ByZXBhcmVGb3JPcmJpdC5iaW5kKHRoaXMpfSksdGhpcy4kc2xpZGVzLmxlbmd0aD4xKXtpZih0aGlzLm9wdGlvbnMuc3dpcGUmJnRoaXMuJHNsaWRlcy5vZmYoXCJzd2lwZWxlZnQuemYub3JiaXQgc3dpcGVyaWdodC56Zi5vcmJpdFwiKS5vbihcInN3aXBlbGVmdC56Zi5vcmJpdFwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LmNoYW5nZVNsaWRlKCEwKX0pLm9uKFwic3dpcGVyaWdodC56Zi5vcmJpdFwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LmNoYW5nZVNsaWRlKCExKX0pLHRoaXMub3B0aW9ucy5hdXRvUGxheSYmKHRoaXMuJHNsaWRlcy5vbihcImNsaWNrLnpmLm9yYml0XCIsZnVuY3Rpb24oKXt0LiRlbGVtZW50LmRhdGEoXCJjbGlja2VkT25cIiwhdC4kZWxlbWVudC5kYXRhKFwiY2xpY2tlZE9uXCIpKSx0LnRpbWVyW3QuJGVsZW1lbnQuZGF0YShcImNsaWNrZWRPblwiKT9cInBhdXNlXCI6XCJzdGFydFwiXSgpfSksdGhpcy5vcHRpb25zLnBhdXNlT25Ib3ZlciYmdGhpcy4kZWxlbWVudC5vbihcIm1vdXNlZW50ZXIuemYub3JiaXRcIixmdW5jdGlvbigpe3QudGltZXIucGF1c2UoKX0pLm9uKFwibW91c2VsZWF2ZS56Zi5vcmJpdFwiLGZ1bmN0aW9uKCl7dC4kZWxlbWVudC5kYXRhKFwiY2xpY2tlZE9uXCIpfHx0LnRpbWVyLnN0YXJ0KCl9KSksdGhpcy5vcHRpb25zLm5hdkJ1dHRvbnMpe3ZhciBpPXRoaXMuJGVsZW1lbnQuZmluZChcIi5cIit0aGlzLm9wdGlvbnMubmV4dENsYXNzK1wiLCAuXCIrdGhpcy5vcHRpb25zLnByZXZDbGFzcyk7aS5hdHRyKFwidGFiaW5kZXhcIiwwKS5vbihcImNsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0XCIsZnVuY3Rpb24oaSl7aS5wcmV2ZW50RGVmYXVsdCgpLHQuY2hhbmdlU2xpZGUoZSh0aGlzKS5oYXNDbGFzcyh0Lm9wdGlvbnMubmV4dENsYXNzKSl9KX10aGlzLm9wdGlvbnMuYnVsbGV0cyYmdGhpcy4kYnVsbGV0cy5vbihcImNsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0XCIsZnVuY3Rpb24oKXtpZigvaXMtYWN0aXZlL2cudGVzdCh0aGlzLmNsYXNzTmFtZSkpcmV0dXJuITE7dmFyIGk9ZSh0aGlzKS5kYXRhKFwic2xpZGVcIiksbj1pPnQuJHNsaWRlcy5maWx0ZXIoXCIuaXMtYWN0aXZlXCIpLmRhdGEoXCJzbGlkZVwiKSxvPXQuJHNsaWRlcy5lcShpKTt0LmNoYW5nZVNsaWRlKG4sbyxpKX0pLHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlJiZ0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbihcImtleWRvd24uemYub3JiaXRcIixmdW5jdGlvbihpKXtGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShpLFwiT3JiaXRcIix7bmV4dDpmdW5jdGlvbigpe3QuY2hhbmdlU2xpZGUoITApfSxwcmV2aW91czpmdW5jdGlvbigpe3QuY2hhbmdlU2xpZGUoITEpfSxoYW5kbGVkOmZ1bmN0aW9uKCl7ZShpLnRhcmdldCkuaXModC4kYnVsbGV0cykmJnQuJGJ1bGxldHMuZmlsdGVyKFwiLmlzLWFjdGl2ZVwiKS5mb2N1cygpfX0pfSl9fX0se2tleTpcIl9yZXNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMuJHNsaWRlcyYmdGhpcy4kc2xpZGVzLmxlbmd0aD4xJiYodGhpcy4kZWxlbWVudC5vZmYoXCIuemYub3JiaXRcIikuZmluZChcIipcIikub2ZmKFwiLnpmLm9yYml0XCIpLHRoaXMub3B0aW9ucy5hdXRvUGxheSYmdGhpcy50aW1lci5yZXN0YXJ0KCksdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24odCl7ZSh0KS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZSBpcy1hY3RpdmUgaXMtaW5cIikucmVtb3ZlQXR0cihcImFyaWEtbGl2ZVwiKS5oaWRlKCl9KSx0aGlzLiRzbGlkZXMuZmlyc3QoKS5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKS5zaG93KCksdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwic2xpZGVjaGFuZ2UuemYub3JiaXRcIixbdGhpcy4kc2xpZGVzLmZpcnN0KCldKSx0aGlzLm9wdGlvbnMuYnVsbGV0cyYmdGhpcy5fdXBkYXRlQnVsbGV0cygwKSl9fSx7a2V5OlwiY2hhbmdlU2xpZGVcIix2YWx1ZTpmdW5jdGlvbihlLHQsaSl7aWYodGhpcy4kc2xpZGVzKXt2YXIgbj10aGlzLiRzbGlkZXMuZmlsdGVyKFwiLmlzLWFjdGl2ZVwiKS5lcSgwKTtpZigvbXVpL2cudGVzdChuWzBdLmNsYXNzTmFtZSkpcmV0dXJuITE7dmFyIG8scz10aGlzLiRzbGlkZXMuZmlyc3QoKSxyPXRoaXMuJHNsaWRlcy5sYXN0KCksYT1lP1wiUmlnaHRcIjpcIkxlZnRcIixsPWU/XCJMZWZ0XCI6XCJSaWdodFwiLGQ9dGhpcztvPXQ/dDplP3RoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXA/bi5uZXh0KFwiLlwiK3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzKS5sZW5ndGg/bi5uZXh0KFwiLlwiK3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzKTpzOm4ubmV4dChcIi5cIit0aGlzLm9wdGlvbnMuc2xpZGVDbGFzcyk6dGhpcy5vcHRpb25zLmluZmluaXRlV3JhcD9uLnByZXYoXCIuXCIrdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpLmxlbmd0aD9uLnByZXYoXCIuXCIrdGhpcy5vcHRpb25zLnNsaWRlQ2xhc3MpOnI6bi5wcmV2KFwiLlwiK3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzKSxvLmxlbmd0aCYmKHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImJlZm9yZXNsaWRlY2hhbmdlLnpmLm9yYml0XCIsW24sb10pLHRoaXMub3B0aW9ucy5idWxsZXRzJiYoaT1pfHx0aGlzLiRzbGlkZXMuaW5kZXgobyksdGhpcy5fdXBkYXRlQnVsbGV0cyhpKSksdGhpcy5vcHRpb25zLnVzZU1VSSYmIXRoaXMuJGVsZW1lbnQuaXMoXCI6aGlkZGVuXCIpPyhGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4oby5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6MH0pLHRoaXMub3B0aW9uc1tcImFuaW1JbkZyb21cIithXSxmdW5jdGlvbigpe28uY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsZGlzcGxheTpcImJsb2NrXCJ9KS5hdHRyKFwiYXJpYS1saXZlXCIsXCJwb2xpdGVcIil9KSxGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KG4ucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmVcIiksdGhpcy5vcHRpb25zW1wiYW5pbU91dFRvXCIrbF0sZnVuY3Rpb24oKXtuLnJlbW92ZUF0dHIoXCJhcmlhLWxpdmVcIiksZC5vcHRpb25zLmF1dG9QbGF5JiYhZC50aW1lci5pc1BhdXNlZCYmZC50aW1lci5yZXN0YXJ0KCl9KSk6KG4ucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmUgaXMtaW5cIikucmVtb3ZlQXR0cihcImFyaWEtbGl2ZVwiKS5oaWRlKCksby5hZGRDbGFzcyhcImlzLWFjdGl2ZSBpcy1pblwiKS5hdHRyKFwiYXJpYS1saXZlXCIsXCJwb2xpdGVcIikuc2hvdygpLHRoaXMub3B0aW9ucy5hdXRvUGxheSYmIXRoaXMudGltZXIuaXNQYXVzZWQmJnRoaXMudGltZXIucmVzdGFydCgpKSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJzbGlkZWNoYW5nZS56Zi5vcmJpdFwiLFtvXSkpfX19LHtrZXk6XCJfdXBkYXRlQnVsbGV0c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJGVsZW1lbnQuZmluZChcIi5cIit0aGlzLm9wdGlvbnMuYm94T2ZCdWxsZXRzKS5maW5kKFwiLmlzLWFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZVwiKS5ibHVyKCksaT10LmZpbmQoXCJzcGFuOmxhc3RcIikuZGV0YWNoKCk7dGhpcy4kYnVsbGV0cy5lcShlKS5hZGRDbGFzcyhcImlzLWFjdGl2ZVwiKS5hcHBlbmQoaSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5vZmYoXCIuemYub3JiaXRcIikuZmluZChcIipcIikub2ZmKFwiLnpmLm9yYml0XCIpLmVuZCgpLmhpZGUoKSxGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLHR9KCk7dC5kZWZhdWx0cz17YnVsbGV0czohMCxuYXZCdXR0b25zOiEwLGFuaW1JbkZyb21SaWdodDpcInNsaWRlLWluLXJpZ2h0XCIsYW5pbU91dFRvUmlnaHQ6XCJzbGlkZS1vdXQtcmlnaHRcIixhbmltSW5Gcm9tTGVmdDpcInNsaWRlLWluLWxlZnRcIixhbmltT3V0VG9MZWZ0Olwic2xpZGUtb3V0LWxlZnRcIixhdXRvUGxheTohMCx0aW1lckRlbGF5OjVlMyxpbmZpbml0ZVdyYXA6ITAsc3dpcGU6ITAscGF1c2VPbkhvdmVyOiEwLGFjY2Vzc2libGU6ITAsY29udGFpbmVyQ2xhc3M6XCJvcmJpdC1jb250YWluZXJcIixzbGlkZUNsYXNzOlwib3JiaXQtc2xpZGVcIixib3hPZkJ1bGxldHM6XCJvcmJpdC1idWxsZXRzXCIsbmV4dENsYXNzOlwib3JiaXQtbmV4dFwiLHByZXZDbGFzczpcIm9yYml0LXByZXZpb3VzXCIsdXNlTVVJOiEwfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiT3JiaXRcIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWUoaSksdGhpcy5ydWxlcz10aGlzLiRlbGVtZW50LmRhdGEoXCJyZXNwb25zaXZlLW1lbnVcIiksdGhpcy5jdXJyZW50TXE9bnVsbCx0aGlzLmN1cnJlbnRQbHVnaW49bnVsbCx0aGlzLl9pbml0KCksdGhpcy5fZXZlbnRzKCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiUmVzcG9uc2l2ZU1lbnVcIil9cmV0dXJuIF9jcmVhdGVDbGFzcyh0LFt7a2V5OlwiX2luaXRcIix2YWx1ZTpmdW5jdGlvbigpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLnJ1bGVzKXtmb3IodmFyIHQ9e30sbj10aGlzLnJ1bGVzLnNwbGl0KFwiIFwiKSxvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBzPW5bb10uc3BsaXQoXCItXCIpLHI9cy5sZW5ndGg+MT9zWzBdOlwic21hbGxcIixhPXMubGVuZ3RoPjE/c1sxXTpzWzBdO251bGwhPT1pW2FdJiYodFtyXT1pW2FdKX10aGlzLnJ1bGVzPXR9ZS5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpfHx0aGlzLl9jaGVja01lZGlhUXVlcmllcygpLHRoaXMuJGVsZW1lbnQuYXR0cihcImRhdGEtbXV0YXRlXCIsdGhpcy4kZWxlbWVudC5hdHRyKFwiZGF0YS1tdXRhdGVcIil8fEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNixcInJlc3BvbnNpdmUtbWVudVwiKSl9fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztlKHdpbmRvdykub24oXCJjaGFuZ2VkLnpmLm1lZGlhcXVlcnlcIixmdW5jdGlvbigpe3QuX2NoZWNrTWVkaWFRdWVyaWVzKCl9KX19LHtrZXk6XCJfY2hlY2tNZWRpYVF1ZXJpZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LG49dGhpcztlLmVhY2godGhpcy5ydWxlcyxmdW5jdGlvbihlKXtGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChlKSYmKHQ9ZSl9KSx0JiYodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1t0XS5wbHVnaW58fChlLmVhY2goaSxmdW5jdGlvbihlLHQpe24uJGVsZW1lbnQucmVtb3ZlQ2xhc3ModC5jc3NDbGFzcyl9KSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbdF0uY3NzQ2xhc3MpLHRoaXMuY3VycmVudFBsdWdpbiYmdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKSx0aGlzLmN1cnJlbnRQbHVnaW49bmV3IHRoaXMucnVsZXNbdF0ucGx1Z2luKHRoaXMuJGVsZW1lbnQse30pKSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKSxlKHdpbmRvdykub2ZmKFwiLnpmLlJlc3BvbnNpdmVNZW51XCIpLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXt9O3ZhciBpPXtkcm9wZG93bjp7Y3NzQ2xhc3M6XCJkcm9wZG93blwiLHBsdWdpbjpGb3VuZGF0aW9uLl9wbHVnaW5zW1wiZHJvcGRvd24tbWVudVwiXXx8bnVsbH0sZHJpbGxkb3duOntjc3NDbGFzczpcImRyaWxsZG93blwiLHBsdWdpbjpGb3VuZGF0aW9uLl9wbHVnaW5zLmRyaWxsZG93bnx8bnVsbH0sYWNjb3JkaW9uOntjc3NDbGFzczpcImFjY29yZGlvbi1tZW51XCIscGx1Z2luOkZvdW5kYXRpb24uX3BsdWdpbnNbXCJhY2NvcmRpb24tbWVudVwiXXx8bnVsbH19O0ZvdW5kYXRpb24ucGx1Z2luKHQsXCJSZXNwb25zaXZlTWVudVwiKX0oalF1ZXJ5KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCk7IWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpLHRoaXMuJGVsZW1lbnQ9ZShpKSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdC5kZWZhdWx0cyx0aGlzLiRlbGVtZW50LmRhdGEoKSxuKSx0aGlzLl9pbml0KCksdGhpcy5fZXZlbnRzKCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiUmVzcG9uc2l2ZVRvZ2dsZVwiKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZWxlbWVudC5kYXRhKFwicmVzcG9uc2l2ZS10b2dnbGVcIik7aWYodHx8Y29uc29sZS5lcnJvcihcIllvdXIgdGFiIGJhciBuZWVkcyBhbiBJRCBvZiBhIE1lbnUgYXMgdGhlIHZhbHVlIG9mIGRhdGEtdGFiLWJhci5cIiksdGhpcy4kdGFyZ2V0TWVudT1lKFwiI1wiK3QpLHRoaXMuJHRvZ2dsZXI9dGhpcy4kZWxlbWVudC5maW5kKFwiW2RhdGEtdG9nZ2xlXVwiKSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdGhpcy5vcHRpb25zLHRoaXMuJHRhcmdldE1lbnUuZGF0YSgpKSx0aGlzLm9wdGlvbnMuYW5pbWF0ZSl7dmFyIGk9dGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoXCIgXCIpO3RoaXMuYW5pbWF0aW9uSW49aVswXSx0aGlzLmFuaW1hdGlvbk91dD1pWzFdfHxudWxsfXRoaXMuX3VwZGF0ZSgpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3VwZGF0ZU1xSGFuZGxlcj10aGlzLl91cGRhdGUuYmluZCh0aGlzKSxlKHdpbmRvdykub24oXCJjaGFuZ2VkLnpmLm1lZGlhcXVlcnlcIix0aGlzLl91cGRhdGVNcUhhbmRsZXIpLHRoaXMuJHRvZ2dsZXIub24oXCJjbGljay56Zi5yZXNwb25zaXZlVG9nZ2xlXCIsdGhpcy50b2dnbGVNZW51LmJpbmQodGhpcykpfX0se2tleTpcIl91cGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe0ZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKT8odGhpcy4kZWxlbWVudC5oaWRlKCksdGhpcy4kdGFyZ2V0TWVudS5zaG93KCkpOih0aGlzLiRlbGVtZW50LnNob3coKSx0aGlzLiR0YXJnZXRNZW51LmhpZGUoKSl9fSx7a2V5OlwidG9nZ2xlTWVudVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcil8fCh0aGlzLm9wdGlvbnMuYW5pbWF0ZT90aGlzLiR0YXJnZXRNZW51LmlzKFwiOmhpZGRlblwiKT9Gb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kdGFyZ2V0TWVudSx0aGlzLmFuaW1hdGlvbkluLGZ1bmN0aW9uKCl7ZS4kZWxlbWVudC50cmlnZ2VyKFwidG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlXCIpLGUuJHRhcmdldE1lbnUuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlckhhbmRsZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpfSk6Rm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiR0YXJnZXRNZW51LHRoaXMuYW5pbWF0aW9uT3V0LGZ1bmN0aW9uKCl7ZS4kZWxlbWVudC50cmlnZ2VyKFwidG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlXCIpfSk6KHRoaXMuJHRhcmdldE1lbnUudG9nZ2xlKDApLHRoaXMuJHRhcmdldE1lbnUuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIiksdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwidG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlXCIpKSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5vZmYoXCIuemYucmVzcG9uc2l2ZVRvZ2dsZVwiKSx0aGlzLiR0b2dnbGVyLm9mZihcIi56Zi5yZXNwb25zaXZlVG9nZ2xlXCIpLGUod2luZG93KS5vZmYoXCJjaGFuZ2VkLnpmLm1lZGlhcXVlcnlcIix0aGlzLl91cGRhdGVNcUhhbmRsZXIpLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXtoaWRlRm9yOlwibWVkaXVtXCIsYW5pbWF0ZTohMX0sRm91bmRhdGlvbi5wbHVnaW4odCxcIlJlc3BvbnNpdmVUb2dnbGVcIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuL2lQKGFkfGhvbmV8b2QpLipPUy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCl9ZnVuY3Rpb24gaSgpe3JldHVybi9BbmRyb2lkLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KX1mdW5jdGlvbiBuKCl7cmV0dXJuIHQoKXx8aSgpfXZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpLHRoaXMuJGVsZW1lbnQ9aSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdC5kZWZhdWx0cyx0aGlzLiRlbGVtZW50LmRhdGEoKSxuKSx0aGlzLl9pbml0KCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiUmV2ZWFsXCIpLEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoXCJSZXZlYWxcIix7RU5URVI6XCJvcGVuXCIsU1BBQ0U6XCJvcGVuXCIsRVNDQVBFOlwiY2xvc2VcIn0pfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlkPXRoaXMuJGVsZW1lbnQuYXR0cihcImlkXCIpLHRoaXMuaXNBY3RpdmU9ITEsdGhpcy5jYWNoZWQ9e21xOkZvdW5kYXRpb24uTWVkaWFRdWVyeS5jdXJyZW50fSx0aGlzLmlzTW9iaWxlPW4oKSx0aGlzLiRhbmNob3I9ZShlKCdbZGF0YS1vcGVuPVwiJyt0aGlzLmlkKydcIl0nKS5sZW5ndGg/J1tkYXRhLW9wZW49XCInK3RoaXMuaWQrJ1wiXSc6J1tkYXRhLXRvZ2dsZT1cIicrdGhpcy5pZCsnXCJdJyksdGhpcy4kYW5jaG9yLmF0dHIoe1wiYXJpYS1jb250cm9sc1wiOnRoaXMuaWQsXCJhcmlhLWhhc3BvcHVwXCI6ITAsdGFiaW5kZXg6MH0pLCh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbnx8dGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImZ1bGxcIikpJiYodGhpcy5vcHRpb25zLmZ1bGxTY3JlZW49ITAsdGhpcy5vcHRpb25zLm92ZXJsYXk9ITEpLHRoaXMub3B0aW9ucy5vdmVybGF5JiYhdGhpcy4kb3ZlcmxheSYmKHRoaXMuJG92ZXJsYXk9dGhpcy5fbWFrZU92ZXJsYXkodGhpcy5pZCkpLHRoaXMuJGVsZW1lbnQuYXR0cih7cm9sZTpcImRpYWxvZ1wiLFwiYXJpYS1oaWRkZW5cIjohMCxcImRhdGEteWV0aS1ib3hcIjp0aGlzLmlkLFwiZGF0YS1yZXNpemVcIjp0aGlzLmlkfSksdGhpcy4kb3ZlcmxheT90aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKHRoaXMuJG92ZXJsYXkpOih0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKGUodGhpcy5vcHRpb25zLmFwcGVuZFRvKSksdGhpcy4kZWxlbWVudC5hZGRDbGFzcyhcIndpdGhvdXQtb3ZlcmxheVwiKSksdGhpcy5fZXZlbnRzKCksdGhpcy5vcHRpb25zLmRlZXBMaW5rJiZ3aW5kb3cubG9jYXRpb24uaGFzaD09PVwiI1wiK3RoaXMuaWQmJmUod2luZG93KS5vbmUoXCJsb2FkLnpmLnJldmVhbFwiLHRoaXMub3Blbi5iaW5kKHRoaXMpKX19LHtrZXk6XCJfbWFrZU92ZXJsYXlcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBlKFwiPGRpdj48L2Rpdj5cIikuYWRkQ2xhc3MoXCJyZXZlYWwtb3ZlcmxheVwiKS5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pfX0se2tleTpcIl91cGRhdGVQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQsaSxuPXRoaXMuJGVsZW1lbnQub3V0ZXJXaWR0aCgpLG89ZSh3aW5kb3cpLndpZHRoKCkscz10aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCkscj1lKHdpbmRvdykuaGVpZ2h0KCk7dD1cImF1dG9cIj09PXRoaXMub3B0aW9ucy5oT2Zmc2V0P3BhcnNlSW50KChvLW4pLzIsMTApOnBhcnNlSW50KHRoaXMub3B0aW9ucy5oT2Zmc2V0LDEwKSxpPVwiYXV0b1wiPT09dGhpcy5vcHRpb25zLnZPZmZzZXQ/cz5yP3BhcnNlSW50KE1hdGgubWluKDEwMCxyLzEwKSwxMCk6cGFyc2VJbnQoKHItcykvNCwxMCk6cGFyc2VJbnQodGhpcy5vcHRpb25zLnZPZmZzZXQsMTApLHRoaXMuJGVsZW1lbnQuY3NzKHt0b3A6aStcInB4XCJ9KSx0aGlzLiRvdmVybGF5JiZcImF1dG9cIj09PXRoaXMub3B0aW9ucy5oT2Zmc2V0fHwodGhpcy4kZWxlbWVudC5jc3Moe2xlZnQ6dCtcInB4XCJ9KSx0aGlzLiRlbGVtZW50LmNzcyh7bWFyZ2luOlwiMHB4XCJ9KSl9fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxpPXRoaXM7dGhpcy4kZWxlbWVudC5vbih7XCJvcGVuLnpmLnRyaWdnZXJcIjp0aGlzLm9wZW4uYmluZCh0aGlzKSxcImNsb3NlLnpmLnRyaWdnZXJcIjpmdW5jdGlvbihuLG8pe2lmKG4udGFyZ2V0PT09aS4kZWxlbWVudFswXXx8ZShuLnRhcmdldCkucGFyZW50cyhcIltkYXRhLWNsb3NhYmxlXVwiKVswXT09PW8pcmV0dXJuIHQuY2xvc2UuYXBwbHkodCl9LFwidG9nZ2xlLnpmLnRyaWdnZXJcIjp0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFwicmVzaXplbWUuemYudHJpZ2dlclwiOmZ1bmN0aW9uKCl7aS5fdXBkYXRlUG9zaXRpb24oKX19KSx0aGlzLiRhbmNob3IubGVuZ3RoJiZ0aGlzLiRhbmNob3Iub24oXCJrZXlkb3duLnpmLnJldmVhbFwiLGZ1bmN0aW9uKGUpezEzIT09ZS53aGljaCYmMzIhPT1lLndoaWNofHwoZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksaS5vcGVuKCkpfSksdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayYmdGhpcy5vcHRpb25zLm92ZXJsYXkmJnRoaXMuJG92ZXJsYXkub2ZmKFwiLnpmLnJldmVhbFwiKS5vbihcImNsaWNrLnpmLnJldmVhbFwiLGZ1bmN0aW9uKHQpe3QudGFyZ2V0IT09aS4kZWxlbWVudFswXSYmIWUuY29udGFpbnMoaS4kZWxlbWVudFswXSx0LnRhcmdldCkmJmUuY29udGFpbnMoZG9jdW1lbnQsdC50YXJnZXQpJiZpLmNsb3NlKCl9KSx0aGlzLm9wdGlvbnMuZGVlcExpbmsmJmUod2luZG93KS5vbihcInBvcHN0YXRlLnpmLnJldmVhbDpcIit0aGlzLmlkLHRoaXMuX2hhbmRsZVN0YXRlLmJpbmQodGhpcykpfX0se2tleTpcIl9oYW5kbGVTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3dpbmRvdy5sb2NhdGlvbi5oYXNoIT09XCIjXCIrdGhpcy5pZHx8dGhpcy5pc0FjdGl2ZT90aGlzLmNsb3NlKCk6dGhpcy5vcGVuKCl9fSx7a2V5Olwib3BlblwiLHZhbHVlOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe28uaXNNb2JpbGU/KG8ub3JpZ2luYWxTY3JvbGxQb3N8fChvLm9yaWdpbmFsU2Nyb2xsUG9zPXdpbmRvdy5wYWdlWU9mZnNldCksZShcImh0bWwsIGJvZHlcIikuYWRkQ2xhc3MoXCJpcy1yZXZlYWwtb3BlblwiKSk6ZShcImJvZHlcIikuYWRkQ2xhc3MoXCJpcy1yZXZlYWwtb3BlblwiKX12YXIgaT10aGlzO2lmKHRoaXMub3B0aW9ucy5kZWVwTGluayl7dmFyIG49XCIjXCIrdGhpcy5pZDt3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGU/d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsbnVsbCxuKTp3aW5kb3cubG9jYXRpb24uaGFzaD1ufXRoaXMuaXNBY3RpdmU9ITAsdGhpcy4kZWxlbWVudC5jc3Moe3Zpc2liaWxpdHk6XCJoaWRkZW5cIn0pLnNob3coKS5zY3JvbGxUb3AoMCksdGhpcy5vcHRpb25zLm92ZXJsYXkmJnRoaXMuJG92ZXJsYXkuY3NzKHt2aXNpYmlsaXR5OlwiaGlkZGVuXCJ9KS5zaG93KCksdGhpcy5fdXBkYXRlUG9zaXRpb24oKSx0aGlzLiRlbGVtZW50LmhpZGUoKS5jc3Moe3Zpc2liaWxpdHk6XCJcIn0pLHRoaXMuJG92ZXJsYXkmJih0aGlzLiRvdmVybGF5LmNzcyh7dmlzaWJpbGl0eTpcIlwifSkuaGlkZSgpLHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJmYXN0XCIpP3RoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoXCJmYXN0XCIpOnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJzbG93XCIpJiZ0aGlzLiRvdmVybGF5LmFkZENsYXNzKFwic2xvd1wiKSksdGhpcy5vcHRpb25zLm11bHRpcGxlT3BlbmVkfHx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJjbG9zZW1lLnpmLnJldmVhbFwiLHRoaXMuaWQpO3ZhciBvPXRoaXM7dGhpcy5vcHRpb25zLmFuaW1hdGlvbkluPyFmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKCl7by4kZWxlbWVudC5hdHRyKHtcImFyaWEtaGlkZGVuXCI6ITEsdGFiaW5kZXg6LTF9KS5mb2N1cygpLHQoKSxGb3VuZGF0aW9uLktleWJvYXJkLnRyYXBGb2N1cyhvLiRlbGVtZW50KX07aS5vcHRpb25zLm92ZXJsYXkmJkZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbihpLiRvdmVybGF5LFwiZmFkZS1pblwiKSxGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4oaS4kZWxlbWVudCxpLm9wdGlvbnMuYW5pbWF0aW9uSW4sZnVuY3Rpb24oKXtpLiRlbGVtZW50JiYoaS5mb2N1c2FibGVFbGVtZW50cz1Gb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUoaS4kZWxlbWVudCksZSgpKX0pfSgpOih0aGlzLm9wdGlvbnMub3ZlcmxheSYmdGhpcy4kb3ZlcmxheS5zaG93KDApLHRoaXMuJGVsZW1lbnQuc2hvdyh0aGlzLm9wdGlvbnMuc2hvd0RlbGF5KSksdGhpcy4kZWxlbWVudC5hdHRyKHtcImFyaWEtaGlkZGVuXCI6ITEsdGFiaW5kZXg6LTF9KS5mb2N1cygpLEZvdW5kYXRpb24uS2V5Ym9hcmQudHJhcEZvY3VzKHRoaXMuJGVsZW1lbnQpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcIm9wZW4uemYucmV2ZWFsXCIpLHQoKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5fZXh0cmFIYW5kbGVycygpfSwwKX19LHtrZXk6XCJfZXh0cmFIYW5kbGVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRlbGVtZW50JiYodGhpcy5mb2N1c2FibGVFbGVtZW50cz1Gb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCksdGhpcy5vcHRpb25zLm92ZXJsYXl8fCF0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrfHx0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbnx8ZShcImJvZHlcIikub24oXCJjbGljay56Zi5yZXZlYWxcIixmdW5jdGlvbihpKXtpLnRhcmdldCE9PXQuJGVsZW1lbnRbMF0mJiFlLmNvbnRhaW5zKHQuJGVsZW1lbnRbMF0saS50YXJnZXQpJiZlLmNvbnRhaW5zKGRvY3VtZW50LGkudGFyZ2V0KSYmdC5jbG9zZSgpfSksdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MmJmUod2luZG93KS5vbihcImtleWRvd24uemYucmV2ZWFsXCIsZnVuY3Rpb24oZSl7Rm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSxcIlJldmVhbFwiLHtjbG9zZTpmdW5jdGlvbigpe3Qub3B0aW9ucy5jbG9zZU9uRXNjJiYodC5jbG9zZSgpLHQuJGFuY2hvci5mb2N1cygpKX19KX0pLHRoaXMuJGVsZW1lbnQub24oXCJrZXlkb3duLnpmLnJldmVhbFwiLGZ1bmN0aW9uKGkpe3ZhciBuPWUodGhpcyk7Rm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoaSxcIlJldmVhbFwiLHtvcGVuOmZ1bmN0aW9uKCl7dC4kZWxlbWVudC5maW5kKFwiOmZvY3VzXCIpLmlzKHQuJGVsZW1lbnQuZmluZChcIltkYXRhLWNsb3NlXVwiKSk/c2V0VGltZW91dChmdW5jdGlvbigpe3QuJGFuY2hvci5mb2N1cygpfSwxKTpuLmlzKHQuZm9jdXNhYmxlRWxlbWVudHMpJiZ0Lm9wZW4oKX0sY2xvc2U6ZnVuY3Rpb24oKXt0Lm9wdGlvbnMuY2xvc2VPbkVzYyYmKHQuY2xvc2UoKSx0LiRhbmNob3IuZm9jdXMoKSl9LGhhbmRsZWQ6ZnVuY3Rpb24oZSl7ZSYmaS5wcmV2ZW50RGVmYXVsdCgpfX0pfSkpfX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7aS5pc01vYmlsZT8oZShcImh0bWwsIGJvZHlcIikucmVtb3ZlQ2xhc3MoXCJpcy1yZXZlYWwtb3BlblwiKSxpLm9yaWdpbmFsU2Nyb2xsUG9zJiYoZShcImJvZHlcIikuc2Nyb2xsVG9wKGkub3JpZ2luYWxTY3JvbGxQb3MpLGkub3JpZ2luYWxTY3JvbGxQb3M9bnVsbCkpOmUoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwiaXMtcmV2ZWFsLW9wZW5cIiksRm91bmRhdGlvbi5LZXlib2FyZC5yZWxlYXNlRm9jdXMoaS4kZWxlbWVudCksaS4kZWxlbWVudC5hdHRyKFwiYXJpYS1oaWRkZW5cIiwhMCksaS4kZWxlbWVudC50cmlnZ2VyKFwiY2xvc2VkLnpmLnJldmVhbFwiKX1pZighdGhpcy5pc0FjdGl2ZXx8IXRoaXMuJGVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSlyZXR1cm4hMTt2YXIgaT10aGlzO3RoaXMub3B0aW9ucy5hbmltYXRpb25PdXQ/KHRoaXMub3B0aW9ucy5vdmVybGF5P0ZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kb3ZlcmxheSxcImZhZGUtb3V0XCIsdCk6dCgpLEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uT3V0KSk6KHRoaXMub3B0aW9ucy5vdmVybGF5P3RoaXMuJG92ZXJsYXkuaGlkZSgwLHQpOnQoKSx0aGlzLiRlbGVtZW50LmhpZGUodGhpcy5vcHRpb25zLmhpZGVEZWxheSkpLHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjJiZlKHdpbmRvdykub2ZmKFwia2V5ZG93bi56Zi5yZXZlYWxcIiksIXRoaXMub3B0aW9ucy5vdmVybGF5JiZ0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrJiZlKFwiYm9keVwiKS5vZmYoXCJjbGljay56Zi5yZXZlYWxcIiksdGhpcy4kZWxlbWVudC5vZmYoXCJrZXlkb3duLnpmLnJldmVhbFwiKSx0aGlzLm9wdGlvbnMucmVzZXRPbkNsb3NlJiZ0aGlzLiRlbGVtZW50Lmh0bWwodGhpcy4kZWxlbWVudC5odG1sKCkpLHRoaXMuaXNBY3RpdmU9ITEsaS5vcHRpb25zLmRlZXBMaW5rJiYod2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlP3dpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcIlwiLGRvY3VtZW50LnRpdGxlLHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoXCIjXCIrdGhpcy5pZCxcIlwiKSk6d2luZG93LmxvY2F0aW9uLmhhc2g9XCJcIil9fSx7a2V5OlwidG9nZ2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlzQWN0aXZlP3RoaXMuY2xvc2UoKTp0aGlzLm9wZW4oKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMub3ZlcmxheSYmKHRoaXMuJGVsZW1lbnQuYXBwZW5kVG8oZSh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pKSx0aGlzLiRvdmVybGF5LmhpZGUoKS5vZmYoKS5yZW1vdmUoKSksdGhpcy4kZWxlbWVudC5oaWRlKCkub2ZmKCksdGhpcy4kYW5jaG9yLm9mZihcIi56ZlwiKSxlKHdpbmRvdykub2ZmKFwiLnpmLnJldmVhbDpcIit0aGlzLmlkKSxGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLHR9KCk7by5kZWZhdWx0cz17YW5pbWF0aW9uSW46XCJcIixhbmltYXRpb25PdXQ6XCJcIixzaG93RGVsYXk6MCxoaWRlRGVsYXk6MCxjbG9zZU9uQ2xpY2s6ITAsY2xvc2VPbkVzYzohMCxtdWx0aXBsZU9wZW5lZDohMSx2T2Zmc2V0OlwiYXV0b1wiLGhPZmZzZXQ6XCJhdXRvXCIsZnVsbFNjcmVlbjohMSxidG1PZmZzZXRQY3Q6MTAsb3ZlcmxheTohMCxyZXNldE9uQ2xvc2U6ITEsZGVlcExpbms6ITEsYXBwZW5kVG86XCJib2R5XCJ9LEZvdW5kYXRpb24ucGx1Z2luKG8sXCJSZXZlYWxcIil9KGpRdWVyeSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsdCl7cmV0dXJuIGUvdH1mdW5jdGlvbiBpKGUsdCxpLG4pe3JldHVybiBNYXRoLmFicyhlLnBvc2l0aW9uKClbdF0rZVtuXSgpLzItaSl9ZnVuY3Rpb24gbihlLHQpe3JldHVybiBNYXRoLmxvZyh0KS9NYXRoLmxvZyhlKX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIG8odCxpKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxvKSx0aGlzLiRlbGVtZW50PXQsdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LG8uZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksaSksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIlNsaWRlclwiKSxGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKFwiU2xpZGVyXCIse2x0cjp7QVJST1dfUklHSFQ6XCJpbmNyZWFzZVwiLEFSUk9XX1VQOlwiaW5jcmVhc2VcIixBUlJPV19ET1dOOlwiZGVjcmVhc2VcIixBUlJPV19MRUZUOlwiZGVjcmVhc2VcIixTSElGVF9BUlJPV19SSUdIVDpcImluY3JlYXNlX2Zhc3RcIixTSElGVF9BUlJPV19VUDpcImluY3JlYXNlX2Zhc3RcIixTSElGVF9BUlJPV19ET1dOOlwiZGVjcmVhc2VfZmFzdFwiLFNISUZUX0FSUk9XX0xFRlQ6XCJkZWNyZWFzZV9mYXN0XCJ9LHJ0bDp7QVJST1dfTEVGVDpcImluY3JlYXNlXCIsQVJST1dfUklHSFQ6XCJkZWNyZWFzZVwiLFNISUZUX0FSUk9XX0xFRlQ6XCJpbmNyZWFzZV9mYXN0XCIsU0hJRlRfQVJST1dfUklHSFQ6XCJkZWNyZWFzZV9mYXN0XCJ9fSl9cmV0dXJuIF9jcmVhdGVDbGFzcyhvLFt7a2V5OlwiX2luaXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaW5wdXRzPXRoaXMuJGVsZW1lbnQuZmluZChcImlucHV0XCIpLHRoaXMuaGFuZGxlcz10aGlzLiRlbGVtZW50LmZpbmQoXCJbZGF0YS1zbGlkZXItaGFuZGxlXVwiKSx0aGlzLiRoYW5kbGU9dGhpcy5oYW5kbGVzLmVxKDApLHRoaXMuJGlucHV0PXRoaXMuaW5wdXRzLmxlbmd0aD90aGlzLmlucHV0cy5lcSgwKTplKFwiI1wiK3RoaXMuJGhhbmRsZS5hdHRyKFwiYXJpYS1jb250cm9sc1wiKSksdGhpcy4kZmlsbD10aGlzLiRlbGVtZW50LmZpbmQoXCJbZGF0YS1zbGlkZXItZmlsbF1cIikuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbD9cImhlaWdodFwiOlwid2lkdGhcIiwwKTt2YXIgdD0hMTsodGhpcy5vcHRpb25zLmRpc2FibGVkfHx0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkmJih0aGlzLm9wdGlvbnMuZGlzYWJsZWQ9ITAsdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpLHRoaXMuaW5wdXRzLmxlbmd0aHx8KHRoaXMuaW5wdXRzPWUoKS5hZGQodGhpcy4kaW5wdXQpLHRoaXMub3B0aW9ucy5iaW5kaW5nPSEwKSx0aGlzLl9zZXRJbml0QXR0cigwKSx0aGlzLmhhbmRsZXNbMV0mJih0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQ9ITAsdGhpcy4kaGFuZGxlMj10aGlzLmhhbmRsZXMuZXEoMSksdGhpcy4kaW5wdXQyPXRoaXMuaW5wdXRzLmxlbmd0aD4xP3RoaXMuaW5wdXRzLmVxKDEpOmUoXCIjXCIrdGhpcy4kaGFuZGxlMi5hdHRyKFwiYXJpYS1jb250cm9sc1wiKSksdGhpcy5pbnB1dHNbMV18fCh0aGlzLmlucHV0cz10aGlzLmlucHV0cy5hZGQodGhpcy4kaW5wdXQyKSksdD0hMCx0aGlzLl9zZXRJbml0QXR0cigxKSksdGhpcy5zZXRIYW5kbGVzKCksdGhpcy5fZXZlbnRzKCl9fSx7a2V5Olwic2V0SGFuZGxlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmhhbmRsZXNbMV0/dGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSx0aGlzLmlucHV0cy5lcSgwKS52YWwoKSwhMCxmdW5jdGlvbigpe2UuX3NldEhhbmRsZVBvcyhlLiRoYW5kbGUyLGUuaW5wdXRzLmVxKDEpLnZhbCgpLCEwKX0pOnRoaXMuX3NldEhhbmRsZVBvcyh0aGlzLiRoYW5kbGUsdGhpcy5pbnB1dHMuZXEoMCkudmFsKCksITApfX0se2tleTpcIl9yZWZsb3dcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2V0SGFuZGxlcygpfX0se2tleTpcIl9wY3RPZkJhclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBpPXQoZS10aGlzLm9wdGlvbnMuc3RhcnQsdGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQpO3N3aXRjaCh0aGlzLm9wdGlvbnMucG9zaXRpb25WYWx1ZUZ1bmN0aW9uKXtjYXNlXCJwb3dcIjppPXRoaXMuX2xvZ1RyYW5zZm9ybShpKTticmVhaztjYXNlXCJsb2dcIjppPXRoaXMuX3Bvd1RyYW5zZm9ybShpKX1yZXR1cm4gaS50b0ZpeGVkKDIpfX0se2tleTpcIl92YWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3N3aXRjaCh0aGlzLm9wdGlvbnMucG9zaXRpb25WYWx1ZUZ1bmN0aW9uKXtjYXNlXCJwb3dcIjplPXRoaXMuX3Bvd1RyYW5zZm9ybShlKTticmVhaztjYXNlXCJsb2dcIjplPXRoaXMuX2xvZ1RyYW5zZm9ybShlKX12YXIgdD0odGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQpKmUrdGhpcy5vcHRpb25zLnN0YXJ0O3JldHVybiB0fX0se2tleTpcIl9sb2dUcmFuc2Zvcm1cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gbih0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZSxlKih0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZS0xKSsxKX19LHtrZXk6XCJfcG93VHJhbnNmb3JtXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuKE1hdGgucG93KHRoaXMub3B0aW9ucy5ub25MaW5lYXJCYXNlLGUpLTEpLyh0aGlzLm9wdGlvbnMubm9uTGluZWFyQmFzZS0xKX19LHtrZXk6XCJfc2V0SGFuZGxlUG9zXCIsdmFsdWU6ZnVuY3Rpb24oZSxpLG4sbyl7aWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmRpc2FibGVkQ2xhc3MpKXtpPXBhcnNlRmxvYXQoaSksaTx0aGlzLm9wdGlvbnMuc3RhcnQ/aT10aGlzLm9wdGlvbnMuc3RhcnQ6aT50aGlzLm9wdGlvbnMuZW5kJiYoaT10aGlzLm9wdGlvbnMuZW5kKTt2YXIgcz10aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQ7aWYocylpZigwPT09dGhpcy5oYW5kbGVzLmluZGV4KGUpKXt2YXIgcj1wYXJzZUZsb2F0KHRoaXMuJGhhbmRsZTIuYXR0cihcImFyaWEtdmFsdWVub3dcIikpO2k9aT49cj9yLXRoaXMub3B0aW9ucy5zdGVwOml9ZWxzZXt2YXIgYT1wYXJzZUZsb2F0KHRoaXMuJGhhbmRsZS5hdHRyKFwiYXJpYS12YWx1ZW5vd1wiKSk7aT1pPD1hP2ErdGhpcy5vcHRpb25zLnN0ZXA6aX10aGlzLm9wdGlvbnMudmVydGljYWwmJiFuJiYoaT10aGlzLm9wdGlvbnMuZW5kLWkpO3ZhciBsPXRoaXMsZD10aGlzLm9wdGlvbnMudmVydGljYWwsdT1kP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiLGM9ZD9cInRvcFwiOlwibGVmdFwiLGg9ZVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt1XSxmPXRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdV0scD10aGlzLl9wY3RPZkJhcihpKSx2PShmLWgpKnAsbT0oMTAwKnQodixmKSkudG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCk7aT1wYXJzZUZsb2F0KGkudG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCkpO3ZhciBnPXt9O2lmKHRoaXMuX3NldFZhbHVlcyhlLGkpLHMpe3ZhciB5LHc9MD09PXRoaXMuaGFuZGxlcy5pbmRleChlKSxiPX5+KDEwMCp0KGgsZikpO2lmKHcpZ1tjXT1tK1wiJVwiLHk9cGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyWzBdLnN0eWxlW2NdKS1tK2IsbyYmXCJmdW5jdGlvblwiPT10eXBlb2YgbyYmbygpO2Vsc2V7dmFyIGs9cGFyc2VGbG9hdCh0aGlzLiRoYW5kbGVbMF0uc3R5bGVbY10pO3k9bS0oaXNOYU4oayk/KHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQtdGhpcy5vcHRpb25zLnN0YXJ0KS8oKHRoaXMub3B0aW9ucy5lbmQtdGhpcy5vcHRpb25zLnN0YXJ0KS8xMDApOmspK2J9Z1tcIm1pbi1cIit1XT15K1wiJVwifXRoaXMuJGVsZW1lbnQub25lKFwiZmluaXNoZWQuemYuYW5pbWF0ZVwiLGZ1bmN0aW9uKCl7bC4kZWxlbWVudC50cmlnZ2VyKFwibW92ZWQuemYuc2xpZGVyXCIsW2VdKX0pO3ZhciBDPXRoaXMuJGVsZW1lbnQuZGF0YShcImRyYWdnaW5nXCIpPzFlMy82MDp0aGlzLm9wdGlvbnMubW92ZVRpbWU7Rm91bmRhdGlvbi5Nb3ZlKEMsZSxmdW5jdGlvbigpe2lzTmFOKG0pP2UuY3NzKGMsMTAwKnArXCIlXCIpOmUuY3NzKGMsbStcIiVcIiksbC5vcHRpb25zLmRvdWJsZVNpZGVkP2wuJGZpbGwuY3NzKGcpOmwuJGZpbGwuY3NzKHUsMTAwKnArXCIlXCIpfSksY2xlYXJUaW1lb3V0KGwudGltZW91dCksbC50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLiRlbGVtZW50LnRyaWdnZXIoXCJjaGFuZ2VkLnpmLnNsaWRlclwiLFtlXSl9LGwub3B0aW9ucy5jaGFuZ2VkRGVsYXkpfX19LHtrZXk6XCJfc2V0SW5pdEF0dHJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0wPT09ZT90aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0OnRoaXMub3B0aW9ucy5pbml0aWFsRW5kLGk9dGhpcy5pbnB1dHMuZXEoZSkuYXR0cihcImlkXCIpfHxGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsXCJzbGlkZXJcIik7dGhpcy5pbnB1dHMuZXEoZSkuYXR0cih7aWQ6aSxtYXg6dGhpcy5vcHRpb25zLmVuZCxtaW46dGhpcy5vcHRpb25zLnN0YXJ0LHN0ZXA6dGhpcy5vcHRpb25zLnN0ZXB9KSx0aGlzLmlucHV0cy5lcShlKS52YWwodCksdGhpcy5oYW5kbGVzLmVxKGUpLmF0dHIoe3JvbGU6XCJzbGlkZXJcIixcImFyaWEtY29udHJvbHNcIjppLFwiYXJpYS12YWx1ZW1heFwiOnRoaXMub3B0aW9ucy5lbmQsXCJhcmlhLXZhbHVlbWluXCI6dGhpcy5vcHRpb25zLnN0YXJ0LFwiYXJpYS12YWx1ZW5vd1wiOnQsXCJhcmlhLW9yaWVudGF0aW9uXCI6dGhpcy5vcHRpb25zLnZlcnRpY2FsP1widmVydGljYWxcIjpcImhvcml6b250YWxcIix0YWJpbmRleDowfSl9fSx7a2V5OlwiX3NldFZhbHVlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkP3RoaXMuaGFuZGxlcy5pbmRleChlKTowO3RoaXMuaW5wdXRzLmVxKGkpLnZhbCh0KSxlLmF0dHIoXCJhcmlhLXZhbHVlbm93XCIsdCl9fSx7a2V5OlwiX2hhbmRsZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24obixvLHMpe3ZhciByLGE7aWYocylyPXRoaXMuX2FkanVzdFZhbHVlKG51bGwscyksYT0hMDtlbHNle24ucHJldmVudERlZmF1bHQoKTt2YXIgbD10aGlzLGQ9dGhpcy5vcHRpb25zLnZlcnRpY2FsLHU9ZD9cImhlaWdodFwiOlwid2lkdGhcIixjPWQ/XCJ0b3BcIjpcImxlZnRcIixoPWQ/bi5wYWdlWTpuLnBhZ2VYLGY9KHRoaXMuJGhhbmRsZVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt1XS8yLHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdV0pLHA9ZD9lKHdpbmRvdykuc2Nyb2xsVG9wKCk6ZSh3aW5kb3cpLnNjcm9sbExlZnQoKSx2PXRoaXMuJGVsZW1lbnQub2Zmc2V0KClbY107bi5jbGllbnRZPT09bi5wYWdlWSYmKGgrPXApO3ZhciBtLGc9aC12O209ZzwwPzA6Zz5mP2Y6Zzt2YXIgeT10KG0sZik7aWYocj10aGlzLl92YWx1ZSh5KSxGb3VuZGF0aW9uLnJ0bCgpJiYhdGhpcy5vcHRpb25zLnZlcnRpY2FsJiYocj10aGlzLm9wdGlvbnMuZW5kLXIpLHI9bC5fYWRqdXN0VmFsdWUobnVsbCxyKSxhPSExLCFvKXt2YXIgdz1pKHRoaXMuJGhhbmRsZSxjLG0sdSksYj1pKHRoaXMuJGhhbmRsZTIsYyxtLHUpO289dzw9Yj90aGlzLiRoYW5kbGU6dGhpcy4kaGFuZGxlMn19dGhpcy5fc2V0SGFuZGxlUG9zKG8scixhKX19LHtrZXk6XCJfYWRqdXN0VmFsdWVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBpLG4sbyxzLHI9dGhpcy5vcHRpb25zLnN0ZXAsYT1wYXJzZUZsb2F0KHIvMik7cmV0dXJuIGk9ZT9wYXJzZUZsb2F0KGUuYXR0cihcImFyaWEtdmFsdWVub3dcIikpOnQsbj1pJXIsbz1pLW4scz1vK3IsMD09PW4/aTppPWk+PW8rYT9zOm99fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fZXZlbnRzRm9ySGFuZGxlKHRoaXMuJGhhbmRsZSksdGhpcy5oYW5kbGVzWzFdJiZ0aGlzLl9ldmVudHNGb3JIYW5kbGUodGhpcy4kaGFuZGxlMil9fSx7a2V5OlwiX2V2ZW50c0ZvckhhbmRsZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpLG49dGhpcztpZih0aGlzLmlucHV0cy5vZmYoXCJjaGFuZ2UuemYuc2xpZGVyXCIpLm9uKFwiY2hhbmdlLnpmLnNsaWRlclwiLGZ1bmN0aW9uKHQpe3ZhciBpPW4uaW5wdXRzLmluZGV4KGUodGhpcykpO24uX2hhbmRsZUV2ZW50KHQsbi5oYW5kbGVzLmVxKGkpLGUodGhpcykudmFsKCkpfSksdGhpcy5vcHRpb25zLmNsaWNrU2VsZWN0JiZ0aGlzLiRlbGVtZW50Lm9mZihcImNsaWNrLnpmLnNsaWRlclwiKS5vbihcImNsaWNrLnpmLnNsaWRlclwiLGZ1bmN0aW9uKHQpe3JldHVybiFuLiRlbGVtZW50LmRhdGEoXCJkcmFnZ2luZ1wiKSYmdm9pZChlKHQudGFyZ2V0KS5pcyhcIltkYXRhLXNsaWRlci1oYW5kbGVdXCIpfHwobi5vcHRpb25zLmRvdWJsZVNpZGVkP24uX2hhbmRsZUV2ZW50KHQpOm4uX2hhbmRsZUV2ZW50KHQsbi4kaGFuZGxlKSkpfSksdGhpcy5vcHRpb25zLmRyYWdnYWJsZSl7dGhpcy5oYW5kbGVzLmFkZFRvdWNoKCk7dmFyIG89ZShcImJvZHlcIik7dC5vZmYoXCJtb3VzZWRvd24uemYuc2xpZGVyXCIpLm9uKFwibW91c2Vkb3duLnpmLnNsaWRlclwiLGZ1bmN0aW9uKHMpe3QuYWRkQ2xhc3MoXCJpcy1kcmFnZ2luZ1wiKSxuLiRmaWxsLmFkZENsYXNzKFwiaXMtZHJhZ2dpbmdcIiksbi4kZWxlbWVudC5kYXRhKFwiZHJhZ2dpbmdcIiwhMCksaT1lKHMuY3VycmVudFRhcmdldCksby5vbihcIm1vdXNlbW92ZS56Zi5zbGlkZXJcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksbi5faGFuZGxlRXZlbnQoZSxpKX0pLm9uKFwibW91c2V1cC56Zi5zbGlkZXJcIixmdW5jdGlvbihlKXtuLl9oYW5kbGVFdmVudChlLGkpLHQucmVtb3ZlQ2xhc3MoXCJpcy1kcmFnZ2luZ1wiKSxuLiRmaWxsLnJlbW92ZUNsYXNzKFwiaXMtZHJhZ2dpbmdcIiksbi4kZWxlbWVudC5kYXRhKFwiZHJhZ2dpbmdcIiwhMSksby5vZmYoXCJtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyXCIpfSl9KS5vbihcInNlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyXCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpfSl9dC5vZmYoXCJrZXlkb3duLnpmLnNsaWRlclwiKS5vbihcImtleWRvd24uemYuc2xpZGVyXCIsZnVuY3Rpb24odCl7dmFyIGksbz1lKHRoaXMpLHM9bi5vcHRpb25zLmRvdWJsZVNpZGVkP24uaGFuZGxlcy5pbmRleChvKTowLHI9cGFyc2VGbG9hdChuLmlucHV0cy5lcShzKS52YWwoKSk7Rm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkodCxcIlNsaWRlclwiLHtkZWNyZWFzZTpmdW5jdGlvbigpe2k9ci1uLm9wdGlvbnMuc3RlcH0saW5jcmVhc2U6ZnVuY3Rpb24oKXtpPXIrbi5vcHRpb25zLnN0ZXB9LGRlY3JlYXNlX2Zhc3Q6ZnVuY3Rpb24oKXtpPXItMTAqbi5vcHRpb25zLnN0ZXB9LGluY3JlYXNlX2Zhc3Q6ZnVuY3Rpb24oKXtpPXIrMTAqbi5vcHRpb25zLnN0ZXB9LGhhbmRsZWQ6ZnVuY3Rpb24oKXt0LnByZXZlbnREZWZhdWx0KCksbi5fc2V0SGFuZGxlUG9zKG8saSwhMCl9fSl9KX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZXMub2ZmKFwiLnpmLnNsaWRlclwiKSx0aGlzLmlucHV0cy5vZmYoXCIuemYuc2xpZGVyXCIpLHRoaXMuJGVsZW1lbnQub2ZmKFwiLnpmLnNsaWRlclwiKSxjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSxGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLG99KCk7by5kZWZhdWx0cz17c3RhcnQ6MCxlbmQ6MTAwLHN0ZXA6MSxpbml0aWFsU3RhcnQ6MCxpbml0aWFsRW5kOjEwMCxiaW5kaW5nOiExLGNsaWNrU2VsZWN0OiEwLHZlcnRpY2FsOiExLGRyYWdnYWJsZTohMCxkaXNhYmxlZDohMSxkb3VibGVTaWRlZDohMSxkZWNpbWFsOjIsbW92ZVRpbWU6MjAwLGRpc2FibGVkQ2xhc3M6XCJkaXNhYmxlZFwiLGludmVydFZlcnRpY2FsOiExLGNoYW5nZWREZWxheTo1MDAsbm9uTGluZWFyQmFzZTo1LHBvc2l0aW9uVmFsdWVGdW5jdGlvbjpcImxpbmVhclwifSxGb3VuZGF0aW9uLnBsdWdpbihvLFwiU2xpZGVyXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXtyZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSxudWxsKS5mb250U2l6ZSwxMCkqZX12YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGkodCxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxpKSx0aGlzLiRlbGVtZW50PXQsdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LGkuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIlN0aWNreVwiKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKGksW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZWxlbWVudC5wYXJlbnQoXCJbZGF0YS1zdGlja3ktY29udGFpbmVyXVwiKSxpPXRoaXMuJGVsZW1lbnRbMF0uaWR8fEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNixcInN0aWNreVwiKSxuPXRoaXM7dC5sZW5ndGh8fCh0aGlzLndhc1dyYXBwZWQ9ITApLHRoaXMuJGNvbnRhaW5lcj10Lmxlbmd0aD90OmUodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpLHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpLHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnN0aWNreUNsYXNzKS5hdHRyKHtcImRhdGEtcmVzaXplXCI6aX0pLHRoaXMuc2Nyb2xsQ291bnQ9dGhpcy5vcHRpb25zLmNoZWNrRXZlcnksdGhpcy5pc1N0dWNrPSExLGUod2luZG93KS5vbmUoXCJsb2FkLnpmLnN0aWNreVwiLGZ1bmN0aW9uKCl7bi5jb250YWluZXJIZWlnaHQ9XCJub25lXCI9PW4uJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKT8wOm4uJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LG4uJGNvbnRhaW5lci5jc3MoXCJoZWlnaHRcIixuLmNvbnRhaW5lckhlaWdodCksbi5lbGVtSGVpZ2h0PW4uY29udGFpbmVySGVpZ2h0LFwiXCIhPT1uLm9wdGlvbnMuYW5jaG9yP24uJGFuY2hvcj1lKFwiI1wiK24ub3B0aW9ucy5hbmNob3IpOm4uX3BhcnNlUG9pbnRzKCksbi5fc2V0U2l6ZXMoZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cucGFnZVlPZmZzZXQ7bi5fY2FsYyghMSxlKSxuLmlzU3R1Y2t8fG4uX3JlbW92ZVN0aWNreSghKGU+PW4udG9wUG9pbnQpKX0pLG4uX2V2ZW50cyhpLnNwbGl0KFwiLVwiKS5yZXZlcnNlKCkuam9pbihcIi1cIikpfSl9fSx7a2V5OlwiX3BhcnNlUG9pbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9XCJcIj09dGhpcy5vcHRpb25zLnRvcEFuY2hvcj8xOnRoaXMub3B0aW9ucy50b3BBbmNob3IsaT1cIlwiPT10aGlzLm9wdGlvbnMuYnRtQW5jaG9yP2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ6dGhpcy5vcHRpb25zLmJ0bUFuY2hvcixuPVt0LGldLG89e30scz0wLHI9bi5sZW5ndGg7czxyJiZuW3NdO3MrKyl7dmFyIGE7aWYoXCJudW1iZXJcIj09dHlwZW9mIG5bc10pYT1uW3NdO2Vsc2V7dmFyIGw9bltzXS5zcGxpdChcIjpcIiksZD1lKFwiI1wiK2xbMF0pO2E9ZC5vZmZzZXQoKS50b3AsbFsxXSYmXCJib3R0b21cIj09PWxbMV0udG9Mb3dlckNhc2UoKSYmKGErPWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KX1vW3NdPWF9dGhpcy5wb2ludHM9b319LHtrZXk6XCJfZXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxuPXRoaXMuc2Nyb2xsTGlzdGVuZXI9XCJzY3JvbGwuemYuXCIrdDt0aGlzLmlzT258fCh0aGlzLmNhblN0aWNrJiYodGhpcy5pc09uPSEwLGUod2luZG93KS5vZmYobikub24obixmdW5jdGlvbihlKXswPT09aS5zY3JvbGxDb3VudD8oaS5zY3JvbGxDb3VudD1pLm9wdGlvbnMuY2hlY2tFdmVyeSxpLl9zZXRTaXplcyhmdW5jdGlvbigpe2kuX2NhbGMoITEsd2luZG93LnBhZ2VZT2Zmc2V0KX0pKTooaS5zY3JvbGxDb3VudC0tLGkuX2NhbGMoITEsd2luZG93LnBhZ2VZT2Zmc2V0KSl9KSksdGhpcy4kZWxlbWVudC5vZmYoXCJyZXNpemVtZS56Zi50cmlnZ2VyXCIpLm9uKFwicmVzaXplbWUuemYudHJpZ2dlclwiLGZ1bmN0aW9uKGUsbyl7aS5fc2V0U2l6ZXMoZnVuY3Rpb24oKXtpLl9jYWxjKCExKSxpLmNhblN0aWNrP2kuaXNPbnx8aS5fZXZlbnRzKHQpOmkuaXNPbiYmaS5fcGF1c2VMaXN0ZW5lcnMobil9KX0pKX19LHtrZXk6XCJfcGF1c2VMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmlzT249ITEsZSh3aW5kb3cpLm9mZih0KSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJwYXVzZS56Zi5zdGlja3lcIil9fSx7a2V5OlwiX2NhbGNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBlJiZ0aGlzLl9zZXRTaXplcygpLHRoaXMuY2FuU3RpY2s/KHR8fCh0PXdpbmRvdy5wYWdlWU9mZnNldCksdm9pZCh0Pj10aGlzLnRvcFBvaW50P3Q8PXRoaXMuYm90dG9tUG9pbnQ/dGhpcy5pc1N0dWNrfHx0aGlzLl9zZXRTdGlja3koKTp0aGlzLmlzU3R1Y2smJnRoaXMuX3JlbW92ZVN0aWNreSghMSk6dGhpcy5pc1N0dWNrJiZ0aGlzLl9yZW1vdmVTdGlja3koITApKSk6KHRoaXMuaXNTdHVjayYmdGhpcy5fcmVtb3ZlU3RpY2t5KCEwKSwhMSl9fSx7a2V5OlwiX3NldFN0aWNreVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMub3B0aW9ucy5zdGlja1RvLGk9XCJ0b3BcIj09PXQ/XCJtYXJnaW5Ub3BcIjpcIm1hcmdpbkJvdHRvbVwiLG49XCJ0b3BcIj09PXQ/XCJib3R0b21cIjpcInRvcFwiLG89e307b1tpXT10aGlzLm9wdGlvbnNbaV0rXCJlbVwiLG9bdF09MCxvW25dPVwiYXV0b1wiLHRoaXMuaXNTdHVjaz0hMCx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKFwiaXMtYW5jaG9yZWQgaXMtYXQtXCIrbikuYWRkQ2xhc3MoXCJpcy1zdHVjayBpcy1hdC1cIit0KS5jc3MobykudHJpZ2dlcihcInN0aWNreS56Zi5zdHVja3RvOlwiK3QpLHRoaXMuJGVsZW1lbnQub24oXCJ0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kXCIsZnVuY3Rpb24oKXtlLl9zZXRTaXplcygpfSl9fSx7a2V5OlwiX3JlbW92ZVN0aWNreVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMub3B0aW9ucy5zdGlja1RvLGk9XCJ0b3BcIj09PXQsbj17fSxvPSh0aGlzLnBvaW50cz90aGlzLnBvaW50c1sxXS10aGlzLnBvaW50c1swXTp0aGlzLmFuY2hvckhlaWdodCktdGhpcy5lbGVtSGVpZ2h0LHM9aT9cIm1hcmdpblRvcFwiOlwibWFyZ2luQm90dG9tXCIscj1lP1widG9wXCI6XCJib3R0b21cIjtuW3NdPTAsbi5ib3R0b209XCJhdXRvXCIsZT9uLnRvcD0wOm4udG9wPW8sdGhpcy5pc1N0dWNrPSExLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJpcy1zdHVjayBpcy1hdC1cIit0KS5hZGRDbGFzcyhcImlzLWFuY2hvcmVkIGlzLWF0LVwiK3IpLmNzcyhuKS50cmlnZ2VyKFwic3RpY2t5LnpmLnVuc3R1Y2tmcm9tOlwiK3IpfX0se2tleTpcIl9zZXRTaXplc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuY2FuU3RpY2s9Rm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zdGlja3lPbiksdGhpcy5jYW5TdGlja3x8ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpO3ZhciB0PXRoaXMuJGNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxpPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSksbj1wYXJzZUludChpW1wicGFkZGluZy1sZWZ0XCJdLDEwKSxvPXBhcnNlSW50KGlbXCJwYWRkaW5nLXJpZ2h0XCJdLDEwKTtcbnRoaXMuJGFuY2hvciYmdGhpcy4kYW5jaG9yLmxlbmd0aD90aGlzLmFuY2hvckhlaWdodD10aGlzLiRhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0OnRoaXMuX3BhcnNlUG9pbnRzKCksdGhpcy4kZWxlbWVudC5jc3Moe1wibWF4LXdpZHRoXCI6dC1uLW8rXCJweFwifSk7dmFyIHM9dGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHR8fHRoaXMuY29udGFpbmVySGVpZ2h0O2lmKFwibm9uZVwiPT10aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikmJihzPTApLHRoaXMuY29udGFpbmVySGVpZ2h0PXMsdGhpcy4kY29udGFpbmVyLmNzcyh7aGVpZ2h0OnN9KSx0aGlzLmVsZW1IZWlnaHQ9cywhdGhpcy5pc1N0dWNrJiZ0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiaXMtYXQtYm90dG9tXCIpKXt2YXIgcj0odGhpcy5wb2ludHM/dGhpcy5wb2ludHNbMV0tdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLnRvcDp0aGlzLmFuY2hvckhlaWdodCktdGhpcy5lbGVtSGVpZ2h0O3RoaXMuJGVsZW1lbnQuY3NzKFwidG9wXCIscil9dGhpcy5fc2V0QnJlYWtQb2ludHMocyxmdW5jdGlvbigpe2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKX0pfX0se2tleTpcIl9zZXRCcmVha1BvaW50c1wiLHZhbHVlOmZ1bmN0aW9uKGUsaSl7aWYoIXRoaXMuY2FuU3RpY2spe2lmKCFpfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXJldHVybiExO2koKX12YXIgbj10KHRoaXMub3B0aW9ucy5tYXJnaW5Ub3ApLG89dCh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxzPXRoaXMucG9pbnRzP3RoaXMucG9pbnRzWzBdOnRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3Ascj10aGlzLnBvaW50cz90aGlzLnBvaW50c1sxXTpzK3RoaXMuYW5jaG9ySGVpZ2h0LGE9d2luZG93LmlubmVySGVpZ2h0O1widG9wXCI9PT10aGlzLm9wdGlvbnMuc3RpY2tUbz8ocy09bixyLT1lK24pOlwiYm90dG9tXCI9PT10aGlzLm9wdGlvbnMuc3RpY2tUbyYmKHMtPWEtKGUrbyksci09YS1vKSx0aGlzLnRvcFBvaW50PXMsdGhpcy5ib3R0b21Qb2ludD1yLGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJmkoKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9yZW1vdmVTdGlja3koITApLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnN0aWNreUNsYXNzK1wiIGlzLWFuY2hvcmVkIGlzLWF0LXRvcFwiKS5jc3Moe2hlaWdodDpcIlwiLHRvcDpcIlwiLGJvdHRvbTpcIlwiLFwibWF4LXdpZHRoXCI6XCJcIn0pLm9mZihcInJlc2l6ZW1lLnpmLnRyaWdnZXJcIiksdGhpcy4kYW5jaG9yJiZ0aGlzLiRhbmNob3IubGVuZ3RoJiZ0aGlzLiRhbmNob3Iub2ZmKFwiY2hhbmdlLnpmLnN0aWNreVwiKSxlKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpLHRoaXMud2FzV3JhcHBlZD90aGlzLiRlbGVtZW50LnVud3JhcCgpOnRoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpLmNzcyh7aGVpZ2h0OlwiXCJ9KSxGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyl9fV0pLGl9KCk7aS5kZWZhdWx0cz17Y29udGFpbmVyOlwiPGRpdiBkYXRhLXN0aWNreS1jb250YWluZXI+PC9kaXY+XCIsc3RpY2tUbzpcInRvcFwiLGFuY2hvcjpcIlwiLHRvcEFuY2hvcjpcIlwiLGJ0bUFuY2hvcjpcIlwiLG1hcmdpblRvcDoxLG1hcmdpbkJvdHRvbToxLHN0aWNreU9uOlwibWVkaXVtXCIsc3RpY2t5Q2xhc3M6XCJzdGlja3lcIixjb250YWluZXJDbGFzczpcInN0aWNreS1jb250YWluZXJcIixjaGVja0V2ZXJ5Oi0xfSxGb3VuZGF0aW9uLnBsdWdpbihpLFwiU3RpY2t5XCIpfShqUXVlcnkpO3ZhciBfdHlwZW9mPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LGksbil7cmV0dXJuIGkmJmUodC5wcm90b3R5cGUsaSksbiYmZSh0LG4pLHR9fSgpOyFmdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoaSxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KSx0aGlzLiRlbGVtZW50PWksdGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LHQuZGVmYXVsdHMsdGhpcy4kZWxlbWVudC5kYXRhKCksbiksdGhpcy5faW5pdCgpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIlRhYnNcIiksRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcihcIlRhYnNcIix7RU5URVI6XCJvcGVuXCIsU1BBQ0U6XCJvcGVuXCIsQVJST1dfUklHSFQ6XCJuZXh0XCIsQVJST1dfVVA6XCJwcmV2aW91c1wiLEFSUk9XX0RPV046XCJuZXh0XCIsQVJST1dfTEVGVDpcInByZXZpb3VzXCJ9KX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLiRlbGVtZW50LmF0dHIoe3JvbGU6XCJ0YWJsaXN0XCJ9KSx0aGlzLiR0YWJUaXRsZXM9dGhpcy4kZWxlbWVudC5maW5kKFwiLlwiK3RoaXMub3B0aW9ucy5saW5rQ2xhc3MpLHRoaXMuJHRhYkNvbnRlbnQ9ZSgnW2RhdGEtdGFicy1jb250ZW50PVwiJyt0aGlzLiRlbGVtZW50WzBdLmlkKydcIl0nKSx0aGlzLiR0YWJUaXRsZXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPWUodGhpcyksbj1pLmZpbmQoXCJhXCIpLG89aS5oYXNDbGFzcyhcIlwiK3Qub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpLHM9blswXS5oYXNoLnNsaWNlKDEpLHI9blswXS5pZD9uWzBdLmlkOnMrXCItbGFiZWxcIixhPWUoXCIjXCIrcyk7aWYoaS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCJ9KSxuLmF0dHIoe3JvbGU6XCJ0YWJcIixcImFyaWEtY29udHJvbHNcIjpzLFwiYXJpYS1zZWxlY3RlZFwiOm8saWQ6cn0pLGEuYXR0cih7cm9sZTpcInRhYnBhbmVsXCIsXCJhcmlhLWhpZGRlblwiOiFvLFwiYXJpYS1sYWJlbGxlZGJ5XCI6cn0pLG8mJnQub3B0aW9ucy5hdXRvRm9jdXMmJmUod2luZG93KS5sb2FkKGZ1bmN0aW9uKCl7ZShcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7c2Nyb2xsVG9wOmkub2Zmc2V0KCkudG9wfSx0Lm9wdGlvbnMuZGVlcExpbmtTbXVkZ2VEZWxheSxmdW5jdGlvbigpe24uZm9jdXMoKX0pfSksdC5vcHRpb25zLmRlZXBMaW5rKXt2YXIgbD13aW5kb3cubG9jYXRpb24uaGFzaDtpZihsLmxlbmd0aCl7dmFyIG49aS5maW5kKCdbaHJlZj1cIicrbCsnXCJdJyk7bi5sZW5ndGgmJih0LnNlbGVjdFRhYihlKGwpKSx0Lm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UmJmUod2luZG93KS5sb2FkKGZ1bmN0aW9uKCl7dmFyIG49aS5vZmZzZXQoKTtlKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHtzY3JvbGxUb3A6bi50b3B9LHQub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5KX0pLGkudHJpZ2dlcihcImRlZXBsaW5rLnpmLnRhYnNcIixbbixlKGwpXSkpfX19KSx0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpe3ZhciBpPXRoaXMuJHRhYkNvbnRlbnQuZmluZChcImltZ1wiKTtpLmxlbmd0aD9Gb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKGksdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpOnRoaXMuX3NldEhlaWdodCgpfXRoaXMuX2V2ZW50cygpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2FkZEtleUhhbmRsZXIoKSx0aGlzLl9hZGRDbGlja0hhbmRsZXIoKSx0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXI9bnVsbCx0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQmJih0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXI9dGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcyksZSh3aW5kb3cpLm9uKFwiY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5XCIsdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKSl9fSx7a2V5OlwiX2FkZENsaWNrSGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRlbGVtZW50Lm9mZihcImNsaWNrLnpmLnRhYnNcIikub24oXCJjbGljay56Zi50YWJzXCIsXCIuXCIrdGhpcy5vcHRpb25zLmxpbmtDbGFzcyxmdW5jdGlvbihpKXtpLnByZXZlbnREZWZhdWx0KCksaS5zdG9wUHJvcGFnYXRpb24oKSx0Ll9oYW5kbGVUYWJDaGFuZ2UoZSh0aGlzKSl9KX19LHtrZXk6XCJfYWRkS2V5SGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiR0YWJUaXRsZXMub2ZmKFwia2V5ZG93bi56Zi50YWJzXCIpLm9uKFwia2V5ZG93bi56Zi50YWJzXCIsZnVuY3Rpb24oaSl7aWYoOSE9PWkud2hpY2gpe3ZhciBuLG8scz1lKHRoaXMpLHI9cy5wYXJlbnQoXCJ1bFwiKS5jaGlsZHJlbihcImxpXCIpO3IuZWFjaChmdW5jdGlvbihpKXtpZihlKHRoaXMpLmlzKHMpKXJldHVybiB2b2lkKHQub3B0aW9ucy53cmFwT25LZXlzPyhuPTA9PT1pP3IubGFzdCgpOnIuZXEoaS0xKSxvPWk9PT1yLmxlbmd0aC0xP3IuZmlyc3QoKTpyLmVxKGkrMSkpOihuPXIuZXEoTWF0aC5tYXgoMCxpLTEpKSxvPXIuZXEoTWF0aC5taW4oaSsxLHIubGVuZ3RoLTEpKSkpfSksRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoaSxcIlRhYnNcIix7b3BlbjpmdW5jdGlvbigpe3MuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpLHQuX2hhbmRsZVRhYkNoYW5nZShzKX0scHJldmlvdXM6ZnVuY3Rpb24oKXtuLmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKSx0Ll9oYW5kbGVUYWJDaGFuZ2Uobil9LG5leHQ6ZnVuY3Rpb24oKXtvLmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKSx0Ll9oYW5kbGVUYWJDaGFuZ2Uobyl9LGhhbmRsZWQ6ZnVuY3Rpb24oKXtpLnN0b3BQcm9wYWdhdGlvbigpLGkucHJldmVudERlZmF1bHQoKX19KX19KX19LHtrZXk6XCJfaGFuZGxlVGFiQ2hhbmdlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoZS5oYXNDbGFzcyhcIlwiK3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpKXJldHVybiB2b2lkKHRoaXMub3B0aW9ucy5hY3RpdmVDb2xsYXBzZSYmKHRoaXMuX2NvbGxhcHNlVGFiKGUpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImNvbGxhcHNlLnpmLnRhYnNcIixbZV0pKSk7dmFyIHQ9dGhpcy4kZWxlbWVudC5maW5kKFwiLlwiK3RoaXMub3B0aW9ucy5saW5rQ2xhc3MrXCIuXCIrdGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcyksaT1lLmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksbj1pWzBdLmhhc2gsbz10aGlzLiR0YWJDb250ZW50LmZpbmQobik7aWYodGhpcy5fY29sbGFwc2VUYWIodCksdGhpcy5fb3BlblRhYihlKSx0aGlzLm9wdGlvbnMuZGVlcExpbmspe3ZhciBzPWUuZmluZChcImFcIikuYXR0cihcImhyZWZcIik7dGhpcy5vcHRpb25zLnVwZGF0ZUhpc3Rvcnk/aGlzdG9yeS5wdXNoU3RhdGUoe30sXCJcIixzKTpoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSxcIlwiLHMpfXRoaXMuJGVsZW1lbnQudHJpZ2dlcihcImNoYW5nZS56Zi50YWJzXCIsW2Usb10pLG8uZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIil9fSx7a2V5OlwiX29wZW5UYWJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksaT10WzBdLmhhc2gsbj10aGlzLiR0YWJDb250ZW50LmZpbmQoaSk7ZS5hZGRDbGFzcyhcIlwiK3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MpLHQuYXR0cih7XCJhcmlhLXNlbGVjdGVkXCI6XCJ0cnVlXCJ9KSxuLmFkZENsYXNzKFwiXCIrdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcImZhbHNlXCJ9KX19LHtrZXk6XCJfY29sbGFwc2VUYWJcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgaT10LnJlbW92ZUNsYXNzKFwiXCIrdGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcykuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCJ9KTtlKFwiI1wiK2kuYXR0cihcImFyaWEtY29udHJvbHNcIikpLnJlbW92ZUNsYXNzKFwiXCIrdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pfX0se2tleTpcInNlbGVjdFRhYlwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0O3Q9XCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOl90eXBlb2YoZSkpP2VbMF0uaWQ6ZSx0LmluZGV4T2YoXCIjXCIpPDAmJih0PVwiI1wiK3QpO3ZhciBpPXRoaXMuJHRhYlRpdGxlcy5maW5kKCdbaHJlZj1cIicrdCsnXCJdJykucGFyZW50KFwiLlwiK3RoaXMub3B0aW9ucy5saW5rQ2xhc3MpO3RoaXMuX2hhbmRsZVRhYkNoYW5nZShpKX19LHtrZXk6XCJfc2V0SGVpZ2h0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD0wO3RoaXMuJHRhYkNvbnRlbnQuZmluZChcIi5cIit0aGlzLm9wdGlvbnMucGFuZWxDbGFzcykuY3NzKFwiaGVpZ2h0XCIsXCJcIikuZWFjaChmdW5jdGlvbigpe3ZhciBpPWUodGhpcyksbj1pLmhhc0NsYXNzKFwiXCIrdGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3MpO258fGkuY3NzKHt2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9KTt2YXIgbz10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtufHxpLmNzcyh7dmlzaWJpbGl0eTpcIlwiLGRpc3BsYXk6XCJcIn0pLHQ9bz50P286dH0pLmNzcyhcImhlaWdodFwiLHQrXCJweFwiKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LmZpbmQoXCIuXCIrdGhpcy5vcHRpb25zLmxpbmtDbGFzcykub2ZmKFwiLnpmLnRhYnNcIikuaGlkZSgpLmVuZCgpLmZpbmQoXCIuXCIrdGhpcy5vcHRpb25zLnBhbmVsQ2xhc3MpLmhpZGUoKSx0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQmJm51bGwhPXRoaXMuX3NldEhlaWdodE1xSGFuZGxlciYmZSh3aW5kb3cpLm9mZihcImNoYW5nZWQuemYubWVkaWFxdWVyeVwiLHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e2RlZXBMaW5rOiExLGRlZXBMaW5rU211ZGdlOiExLGRlZXBMaW5rU211ZGdlRGVsYXk6MzAwLHVwZGF0ZUhpc3Rvcnk6ITEsYXV0b0ZvY3VzOiExLHdyYXBPbktleXM6ITAsbWF0Y2hIZWlnaHQ6ITEsYWN0aXZlQ29sbGFwc2U6ITEsbGlua0NsYXNzOlwidGFicy10aXRsZVwiLGxpbmtBY3RpdmVDbGFzczpcImlzLWFjdGl2ZVwiLHBhbmVsQ2xhc3M6XCJ0YWJzLXBhbmVsXCIscGFuZWxBY3RpdmVDbGFzczpcImlzLWFjdGl2ZVwifSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiVGFic1wiKX0oalF1ZXJ5KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCk7IWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpLHRoaXMuJGVsZW1lbnQ9aSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdC5kZWZhdWx0cyxpLmRhdGEoKSxuKSx0aGlzLmNsYXNzTmFtZT1cIlwiLHRoaXMuX2luaXQoKSx0aGlzLl9ldmVudHMoKSxGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsXCJUb2dnbGVyXCIpfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdDt0aGlzLm9wdGlvbnMuYW5pbWF0ZT8odD10aGlzLm9wdGlvbnMuYW5pbWF0ZS5zcGxpdChcIiBcIiksdGhpcy5hbmltYXRpb25Jbj10WzBdLHRoaXMuYW5pbWF0aW9uT3V0PXRbMV18fG51bGwpOih0PXRoaXMuJGVsZW1lbnQuZGF0YShcInRvZ2dsZXJcIiksdGhpcy5jbGFzc05hbWU9XCIuXCI9PT10WzBdP3Quc2xpY2UoMSk6dCk7dmFyIGk9dGhpcy4kZWxlbWVudFswXS5pZDtlKCdbZGF0YS1vcGVuPVwiJytpKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpKydcIl0sIFtkYXRhLXRvZ2dsZT1cIicraSsnXCJdJykuYXR0cihcImFyaWEtY29udHJvbHNcIixpKSx0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsIXRoaXMuJGVsZW1lbnQuaXMoXCI6aGlkZGVuXCIpKX19LHtrZXk6XCJfZXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50Lm9mZihcInRvZ2dsZS56Zi50cmlnZ2VyXCIpLm9uKFwidG9nZ2xlLnpmLnRyaWdnZXJcIix0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKX19LHtrZXk6XCJ0b2dnbGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXNbdGhpcy5vcHRpb25zLmFuaW1hdGU/XCJfdG9nZ2xlQW5pbWF0ZVwiOlwiX3RvZ2dsZUNsYXNzXCJdKCl9fSx7a2V5OlwiX3RvZ2dsZUNsYXNzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3NOYW1lKTt2YXIgZT10aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtlP3RoaXMuJGVsZW1lbnQudHJpZ2dlcihcIm9uLnpmLnRvZ2dsZXJcIik6dGhpcy4kZWxlbWVudC50cmlnZ2VyKFwib2ZmLnpmLnRvZ2dsZXJcIiksdGhpcy5fdXBkYXRlQVJJQShlKSx0aGlzLiRlbGVtZW50LmZpbmQoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpfX0se2tleTpcIl90b2dnbGVBbmltYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJGVsZW1lbnQuaXMoXCI6aGlkZGVuXCIpP0ZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LHRoaXMuYW5pbWF0aW9uSW4sZnVuY3Rpb24oKXtlLl91cGRhdGVBUklBKCEwKSx0aGlzLnRyaWdnZXIoXCJvbi56Zi50b2dnbGVyXCIpLHRoaXMuZmluZChcIltkYXRhLW11dGF0ZV1cIikudHJpZ2dlcihcIm11dGF0ZW1lLnpmLnRyaWdnZXJcIil9KTpGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsdGhpcy5hbmltYXRpb25PdXQsZnVuY3Rpb24oKXtlLl91cGRhdGVBUklBKCExKSx0aGlzLnRyaWdnZXIoXCJvZmYuemYudG9nZ2xlclwiKSx0aGlzLmZpbmQoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpfSl9fSx7a2V5OlwiX3VwZGF0ZUFSSUFcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsISFlKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50Lm9mZihcIi56Zi50b2dnbGVyXCIpLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXthbmltYXRlOiExfSxGb3VuZGF0aW9uLnBsdWdpbih0LFwiVG9nZ2xlclwiKX0oalF1ZXJ5KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbj10W2ldO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQsaSxuKXtyZXR1cm4gaSYmZSh0LnByb3RvdHlwZSxpKSxuJiZlKHQsbiksdH19KCk7IWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChpLG4pe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpLHRoaXMuJGVsZW1lbnQ9aSx0aGlzLm9wdGlvbnM9ZS5leHRlbmQoe30sdC5kZWZhdWx0cyx0aGlzLiRlbGVtZW50LmRhdGEoKSxuKSx0aGlzLmlzQWN0aXZlPSExLHRoaXMuaXNDbGljaz0hMSx0aGlzLl9pbml0KCksRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLFwiVG9vbHRpcFwiKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKHQsW3trZXk6XCJfaW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZWxlbWVudC5hdHRyKFwiYXJpYS1kZXNjcmliZWRieVwiKXx8Rm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LFwidG9vbHRpcFwiKTt0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcz10aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzc3x8dGhpcy5fZ2V0UG9zaXRpb25DbGFzcyh0aGlzLiRlbGVtZW50KSx0aGlzLm9wdGlvbnMudGlwVGV4dD10aGlzLm9wdGlvbnMudGlwVGV4dHx8dGhpcy4kZWxlbWVudC5hdHRyKFwidGl0bGVcIiksdGhpcy50ZW1wbGF0ZT10aGlzLm9wdGlvbnMudGVtcGxhdGU/ZSh0aGlzLm9wdGlvbnMudGVtcGxhdGUpOnRoaXMuX2J1aWxkVGVtcGxhdGUodCksdGhpcy5vcHRpb25zLmFsbG93SHRtbD90aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLmh0bWwodGhpcy5vcHRpb25zLnRpcFRleHQpLmhpZGUoKTp0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLnRleHQodGhpcy5vcHRpb25zLnRpcFRleHQpLmhpZGUoKSx0aGlzLiRlbGVtZW50LmF0dHIoe3RpdGxlOlwiXCIsXCJhcmlhLWRlc2NyaWJlZGJ5XCI6dCxcImRhdGEteWV0aS1ib3hcIjp0LFwiZGF0YS10b2dnbGVcIjp0LFwiZGF0YS1yZXNpemVcIjp0fSkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnRyaWdnZXJDbGFzcyksdGhpcy51c2VkUG9zaXRpb25zPVtdLHRoaXMuY291bnRlcj00LHRoaXMuY2xhc3NDaGFuZ2VkPSExLHRoaXMuX2V2ZW50cygpfX0se2tleTpcIl9nZXRQb3NpdGlvbkNsYXNzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuXCJcIjt2YXIgdD1lWzBdLmNsYXNzTmFtZS5tYXRjaCgvXFxiKHRvcHxsZWZ0fHJpZ2h0KVxcYi9nKTtyZXR1cm4gdD10P3RbMF06XCJcIn19LHtrZXk6XCJfYnVpbGRUZW1wbGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPSh0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzK1wiIFwiK3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzK1wiIFwiK3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXMpLnRyaW0oKSxuPWUoXCI8ZGl2PjwvZGl2PlwiKS5hZGRDbGFzcyhpKS5hdHRyKHtyb2xlOlwidG9vbHRpcFwiLFwiYXJpYS1oaWRkZW5cIjohMCxcImRhdGEtaXMtYWN0aXZlXCI6ITEsXCJkYXRhLWlzLWZvY3VzXCI6ITEsaWQ6dH0pO3JldHVybiBufX0se2tleTpcIl9yZXBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy51c2VkUG9zaXRpb25zLnB1c2goZT9lOlwiYm90dG9tXCIpLCFlJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcInRvcFwiKTwwP3RoaXMudGVtcGxhdGUuYWRkQ2xhc3MoXCJ0b3BcIik6XCJ0b3BcIj09PWUmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwiYm90dG9tXCIpPDA/dGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhlKTpcImxlZnRcIj09PWUmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwicmlnaHRcIik8MD90aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKGUpLmFkZENsYXNzKFwicmlnaHRcIik6XCJyaWdodFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJsZWZ0XCIpPDA/dGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhlKS5hZGRDbGFzcyhcImxlZnRcIik6IWUmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwidG9wXCIpPi0xJiZ0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZihcImxlZnRcIik8MD90aGlzLnRlbXBsYXRlLmFkZENsYXNzKFwibGVmdFwiKTpcInRvcFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJib3R0b21cIik+LTEmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwibGVmdFwiKTwwP3RoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MoZSkuYWRkQ2xhc3MoXCJsZWZ0XCIpOlwibGVmdFwiPT09ZSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJyaWdodFwiKT4tMSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJib3R0b21cIik8MD90aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKGUpOlwicmlnaHRcIj09PWUmJnRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKFwibGVmdFwiKT4tMSYmdGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoXCJib3R0b21cIik8MD90aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKGUpOnRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MoZSksdGhpcy5jbGFzc0NoYW5nZWQ9ITAsdGhpcy5jb3VudGVyLS19fSx7a2V5OlwiX3NldFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLHQ9Rm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLnRlbXBsYXRlKSxpPUZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksbj1cImxlZnRcIj09PWU/XCJsZWZ0XCI6XCJyaWdodFwiPT09ZT9cImxlZnRcIjpcInRvcFwiLG89XCJ0b3BcIj09PW4/XCJoZWlnaHRcIjpcIndpZHRoXCI7XCJoZWlnaHRcIj09PW8/dGhpcy5vcHRpb25zLnZPZmZzZXQ6dGhpcy5vcHRpb25zLmhPZmZzZXQ7aWYodC53aWR0aD49dC53aW5kb3dEaW1zLndpZHRofHwhdGhpcy5jb3VudGVyJiYhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLnRlbXBsYXRlKSlyZXR1cm4gdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLHRoaXMuJGVsZW1lbnQsXCJjZW50ZXIgYm90dG9tXCIsdGhpcy5vcHRpb25zLnZPZmZzZXQsdGhpcy5vcHRpb25zLmhPZmZzZXQsITApKS5jc3Moe3dpZHRoOmkud2luZG93RGltcy53aWR0aC0yKnRoaXMub3B0aW9ucy5oT2Zmc2V0LGhlaWdodDpcImF1dG9cIn0pLCExO2Zvcih0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsdGhpcy4kZWxlbWVudCxcImNlbnRlciBcIisoZXx8XCJib3R0b21cIiksdGhpcy5vcHRpb25zLnZPZmZzZXQsdGhpcy5vcHRpb25zLmhPZmZzZXQpKTshRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLnRlbXBsYXRlKSYmdGhpcy5jb3VudGVyOyl0aGlzLl9yZXBvc2l0aW9uKGUpLHRoaXMuX3NldFBvc2l0aW9uKCl9fSx7a2V5Olwic2hvd1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoXCJhbGxcIiE9PXRoaXMub3B0aW9ucy5zaG93T24mJiFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuaXModGhpcy5vcHRpb25zLnNob3dPbikpcmV0dXJuITE7dmFyIGU9dGhpczt0aGlzLnRlbXBsYXRlLmNzcyhcInZpc2liaWxpdHlcIixcImhpZGRlblwiKS5zaG93KCksdGhpcy5fc2V0UG9zaXRpb24oKSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJjbG9zZW1lLnpmLnRvb2x0aXBcIix0aGlzLnRlbXBsYXRlLmF0dHIoXCJpZFwiKSksdGhpcy50ZW1wbGF0ZS5hdHRyKHtcImRhdGEtaXMtYWN0aXZlXCI6ITAsXCJhcmlhLWhpZGRlblwiOiExfSksZS5pc0FjdGl2ZT0hMCx0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKFwidmlzaWJpbGl0eVwiLFwiXCIpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sZnVuY3Rpb24oKXt9KSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJzaG93LnpmLnRvb2x0aXBcIil9fSx7a2V5OlwiaGlkZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnRlbXBsYXRlLnN0b3AoKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6ITAsXCJkYXRhLWlzLWFjdGl2ZVwiOiExfSkuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZU91dER1cmF0aW9uLGZ1bmN0aW9uKCl7ZS5pc0FjdGl2ZT0hMSxlLmlzQ2xpY2s9ITEsZS5jbGFzc0NoYW5nZWQmJihlLnRlbXBsYXRlLnJlbW92ZUNsYXNzKGUuX2dldFBvc2l0aW9uQ2xhc3MoZS50ZW1wbGF0ZSkpLmFkZENsYXNzKGUub3B0aW9ucy5wb3NpdGlvbkNsYXNzKSxlLnVzZWRQb3NpdGlvbnM9W10sZS5jb3VudGVyPTQsZS5jbGFzc0NoYW5nZWQ9ITEpfSksdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwiaGlkZS56Zi50b29sdGlwXCIpfX0se2tleTpcIl9ldmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD0odGhpcy50ZW1wbGF0ZSwhMSk7dGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcnx8dGhpcy4kZWxlbWVudC5vbihcIm1vdXNlZW50ZXIuemYudG9vbHRpcFwiLGZ1bmN0aW9uKHQpe2UuaXNBY3RpdmV8fChlLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2Uuc2hvdygpfSxlLm9wdGlvbnMuaG92ZXJEZWxheSkpfSkub24oXCJtb3VzZWxlYXZlLnpmLnRvb2x0aXBcIixmdW5jdGlvbihpKXtjbGVhclRpbWVvdXQoZS50aW1lb3V0KSwoIXR8fGUuaXNDbGljayYmIWUub3B0aW9ucy5jbGlja09wZW4pJiZlLmhpZGUoKX0pLHRoaXMub3B0aW9ucy5jbGlja09wZW4/dGhpcy4kZWxlbWVudC5vbihcIm1vdXNlZG93bi56Zi50b29sdGlwXCIsZnVuY3Rpb24odCl7dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLmlzQ2xpY2t8fChlLmlzQ2xpY2s9ITAsIWUub3B0aW9ucy5kaXNhYmxlSG92ZXImJmUuJGVsZW1lbnQuYXR0cihcInRhYmluZGV4XCIpfHxlLmlzQWN0aXZlfHxlLnNob3coKSl9KTp0aGlzLiRlbGVtZW50Lm9uKFwibW91c2Vkb3duLnpmLnRvb2x0aXBcIixmdW5jdGlvbih0KXt0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUuaXNDbGljaz0hMH0pLHRoaXMub3B0aW9ucy5kaXNhYmxlRm9yVG91Y2h8fHRoaXMuJGVsZW1lbnQub24oXCJ0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwXCIsZnVuY3Rpb24odCl7ZS5pc0FjdGl2ZT9lLmhpZGUoKTplLnNob3coKX0pLHRoaXMuJGVsZW1lbnQub24oe1wiY2xvc2UuemYudHJpZ2dlclwiOnRoaXMuaGlkZS5iaW5kKHRoaXMpfSksdGhpcy4kZWxlbWVudC5vbihcImZvY3VzLnpmLnRvb2x0aXBcIixmdW5jdGlvbihpKXtyZXR1cm4gdD0hMCxlLmlzQ2xpY2s/KGUub3B0aW9ucy5jbGlja09wZW58fCh0PSExKSwhMSk6dm9pZCBlLnNob3coKX0pLm9uKFwiZm9jdXNvdXQuemYudG9vbHRpcFwiLGZ1bmN0aW9uKGkpe3Q9ITEsZS5pc0NsaWNrPSExLGUuaGlkZSgpfSkub24oXCJyZXNpemVtZS56Zi50cmlnZ2VyXCIsZnVuY3Rpb24oKXtlLmlzQWN0aXZlJiZlLl9zZXRQb3NpdGlvbigpfSl9fSx7a2V5OlwidG9nZ2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmlzQWN0aXZlP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQuYXR0cihcInRpdGxlXCIsdGhpcy50ZW1wbGF0ZS50ZXh0KCkpLm9mZihcIi56Zi50cmlnZ2VyIC56Zi50b29sdGlwXCIpLnJlbW92ZUNsYXNzKFwiaGFzLXRpcCB0b3AgcmlnaHQgbGVmdFwiKS5yZW1vdmVBdHRyKFwiYXJpYS1kZXNjcmliZWRieSBhcmlhLWhhc3BvcHVwIGRhdGEtZGlzYWJsZS1ob3ZlciBkYXRhLXJlc2l6ZSBkYXRhLXRvZ2dsZSBkYXRhLXRvb2x0aXAgZGF0YS15ZXRpLWJveFwiKSx0aGlzLnRlbXBsYXRlLnJlbW92ZSgpLEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKX19XSksdH0oKTt0LmRlZmF1bHRzPXtkaXNhYmxlRm9yVG91Y2g6ITEsaG92ZXJEZWxheToyMDAsZmFkZUluRHVyYXRpb246MTUwLGZhZGVPdXREdXJhdGlvbjoxNTAsZGlzYWJsZUhvdmVyOiExLHRlbXBsYXRlQ2xhc3NlczpcIlwiLHRvb2x0aXBDbGFzczpcInRvb2x0aXBcIix0cmlnZ2VyQ2xhc3M6XCJoYXMtdGlwXCIsc2hvd09uOlwic21hbGxcIix0ZW1wbGF0ZTpcIlwiLHRpcFRleHQ6XCJcIix0b3VjaENsb3NlVGV4dDpcIlRhcCB0byBjbG9zZS5cIixjbGlja09wZW46ITAscG9zaXRpb25DbGFzczpcIlwiLHZPZmZzZXQ6MTAsaE9mZnNldDoxMixhbGxvd0h0bWw6ITF9LEZvdW5kYXRpb24ucGx1Z2luKHQsXCJUb29sdGlwXCIpfShqUXVlcnkpO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxpLG4pe3JldHVybiBpJiZlKHQucHJvdG90eXBlLGkpLG4mJmUodCxuKSx0fX0oKTshZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGksbil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsdCksdGhpcy4kZWxlbWVudD1lKGkpLHRoaXMub3B0aW9ucz1lLmV4dGVuZCh7fSx0aGlzLiRlbGVtZW50LmRhdGEoKSxuKSx0aGlzLnJ1bGVzPXRoaXMuJGVsZW1lbnQuZGF0YShcInJlc3BvbnNpdmUtYWNjb3JkaW9uLXRhYnNcIiksdGhpcy5jdXJyZW50TXE9bnVsbCx0aGlzLmN1cnJlbnRQbHVnaW49bnVsbCx0aGlzLiRlbGVtZW50LmF0dHIoXCJpZFwiKXx8dGhpcy4kZWxlbWVudC5hdHRyKFwiaWRcIixGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsXCJyZXNwb25zaXZlYWNjb3JkaW9udGFic1wiKSksdGhpcy5faW5pdCgpLHRoaXMuX2V2ZW50cygpLEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcyxcIlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzXCIpfXJldHVybiBfY3JlYXRlQ2xhc3ModCxbe2tleTpcIl9pbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5ydWxlcyl7Zm9yKHZhciB0PXt9LG49dGhpcy5ydWxlcy5zcGxpdChcIiBcIiksbz0wO288bi5sZW5ndGg7bysrKXt2YXIgcz1uW29dLnNwbGl0KFwiLVwiKSxyPXMubGVuZ3RoPjE/c1swXTpcInNtYWxsXCIsYT1zLmxlbmd0aD4xP3NbMV06c1swXTtudWxsIT09aVthXSYmKHRbcl09aVthXSl9dGhpcy5ydWxlcz10fXRoaXMuX2dldEFsbE9wdGlvbnMoKSxlLmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcyl8fHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCl9fSx7a2V5OlwiX2dldEFsbE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5hbGxPcHRpb25zPXt9O2Zvcih2YXIgbiBpbiBpKWlmKGkuaGFzT3duUHJvcGVydHkobikpe3ZhciBvPWlbbl07dHJ5e3ZhciBzPWUoXCI8dWw+PC91bD5cIikscj1uZXcgby5wbHVnaW4ocyx0Lm9wdGlvbnMpO2Zvcih2YXIgYSBpbiByLm9wdGlvbnMpaWYoci5vcHRpb25zLmhhc093blByb3BlcnR5KGEpJiZcInpmUGx1Z2luXCIhPT1hKXt2YXIgbD1yLm9wdGlvbnNbYV07dC5hbGxPcHRpb25zW2FdPWx9ci5kZXN0cm95KCl9Y2F0Y2goZSl7fX19fSx7a2V5OlwiX2V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztlKHdpbmRvdykub24oXCJjaGFuZ2VkLnpmLm1lZGlhcXVlcnlcIixmdW5jdGlvbigpe3QuX2NoZWNrTWVkaWFRdWVyaWVzKCl9KX19LHtrZXk6XCJfY2hlY2tNZWRpYVF1ZXJpZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0LG49dGhpcztlLmVhY2godGhpcy5ydWxlcyxmdW5jdGlvbihlKXtGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChlKSYmKHQ9ZSl9KSx0JiYodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1t0XS5wbHVnaW58fChlLmVhY2goaSxmdW5jdGlvbihlLHQpe24uJGVsZW1lbnQucmVtb3ZlQ2xhc3ModC5jc3NDbGFzcyl9KSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbdF0uY3NzQ2xhc3MpLHRoaXMuY3VycmVudFBsdWdpbiYmKCF0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YShcInpmUGx1Z2luXCIpJiZ0aGlzLnN0b3JlemZEYXRhJiZ0aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YShcInpmUGx1Z2luXCIsdGhpcy5zdG9yZXpmRGF0YSksdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKSksdGhpcy5faGFuZGxlTWFya3VwKHRoaXMucnVsZXNbdF0uY3NzQ2xhc3MpLHRoaXMuY3VycmVudFBsdWdpbj1uZXcgdGhpcy5ydWxlc1t0XS5wbHVnaW4odGhpcy4kZWxlbWVudCx7fSksdGhpcy5zdG9yZXpmRGF0YT10aGlzLmN1cnJlbnRQbHVnaW4uJGVsZW1lbnQuZGF0YShcInpmUGx1Z2luXCIpKSl9fSx7a2V5OlwiX2hhbmRsZU1hcmt1cFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMsbj1cImFjY29yZGlvblwiLG89ZShcIltkYXRhLXRhYnMtY29udGVudD1cIit0aGlzLiRlbGVtZW50LmF0dHIoXCJpZFwiKStcIl1cIik7aWYoby5sZW5ndGgmJihuPVwidGFic1wiKSxuIT09dCl7dmFyIHM9aS5hbGxPcHRpb25zLmxpbmtDbGFzcz9pLmFsbE9wdGlvbnMubGlua0NsYXNzOlwidGFicy10aXRsZVwiLHI9aS5hbGxPcHRpb25zLnBhbmVsQ2xhc3M/aS5hbGxPcHRpb25zLnBhbmVsQ2xhc3M6XCJ0YWJzLXBhbmVsXCI7dGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKTt2YXIgYT10aGlzLiRlbGVtZW50LmNoaWxkcmVuKFwiLlwiK3MrXCIsW2RhdGEtYWNjb3JkaW9uLWl0ZW1dXCIpLnJlbW92ZUNsYXNzKHMpLnJlbW92ZUNsYXNzKFwiYWNjb3JkaW9uLWl0ZW1cIikucmVtb3ZlQXR0cihcImRhdGEtYWNjb3JkaW9uLWl0ZW1cIiksbD1hLmNoaWxkcmVuKFwiYVwiKS5yZW1vdmVDbGFzcyhcImFjY29yZGlvbi10aXRsZVwiKTtpZihcInRhYnNcIj09PW4/KG89by5jaGlsZHJlbihcIi5cIityKS5yZW1vdmVDbGFzcyhyKS5yZW1vdmVBdHRyKFwicm9sZVwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtbGFiZWxsZWRieVwiKSxvLmNoaWxkcmVuKFwiYVwiKS5yZW1vdmVBdHRyKFwicm9sZVwiKS5yZW1vdmVBdHRyKFwiYXJpYS1jb250cm9sc1wiKS5yZW1vdmVBdHRyKFwiYXJpYS1zZWxlY3RlZFwiKSk6bz1hLmNoaWxkcmVuKFwiW2RhdGEtdGFiLWNvbnRlbnRdXCIpLnJlbW92ZUNsYXNzKFwiYWNjb3JkaW9uLWNvbnRlbnRcIiksby5jc3Moe2Rpc3BsYXk6XCJcIix2aXNpYmlsaXR5OlwiXCJ9KSxhLmNzcyh7ZGlzcGxheTpcIlwiLHZpc2liaWxpdHk6XCJcIn0pLFwiYWNjb3JkaW9uXCI9PT10KW8uZWFjaChmdW5jdGlvbih0LG4pe2UobikuYXBwZW5kVG8oYS5nZXQodCkpLmFkZENsYXNzKFwiYWNjb3JkaW9uLWNvbnRlbnRcIikuYXR0cihcImRhdGEtdGFiLWNvbnRlbnRcIixcIlwiKS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZVwiKS5jc3Moe2hlaWdodDpcIlwifSksZShcIltkYXRhLXRhYnMtY29udGVudD1cIitpLiRlbGVtZW50LmF0dHIoXCJpZFwiKStcIl1cIikuYWZ0ZXIoJzxkaXYgaWQ9XCJ0YWJzLXBsYWNlaG9sZGVyLScraS4kZWxlbWVudC5hdHRyKFwiaWRcIikrJ1wiPjwvZGl2PicpLnJlbW92ZSgpLGEuYWRkQ2xhc3MoXCJhY2NvcmRpb24taXRlbVwiKS5hdHRyKFwiZGF0YS1hY2NvcmRpb24taXRlbVwiLFwiXCIpLGwuYWRkQ2xhc3MoXCJhY2NvcmRpb24tdGl0bGVcIil9KTtlbHNlIGlmKFwidGFic1wiPT09dCl7dmFyIGQ9ZShcIltkYXRhLXRhYnMtY29udGVudD1cIitpLiRlbGVtZW50LmF0dHIoXCJpZFwiKStcIl1cIiksdT1lKFwiI3RhYnMtcGxhY2Vob2xkZXItXCIraS4kZWxlbWVudC5hdHRyKFwiaWRcIikpO3UubGVuZ3RoPyhkPWUoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcih1KS5hdHRyKFwiZGF0YS10YWJzLWNvbnRlbnRcIixpLiRlbGVtZW50LmF0dHIoXCJpZFwiKSksdS5yZW1vdmUoKSk6ZD1lKCc8ZGl2IGNsYXNzPVwidGFicy1jb250ZW50XCI+PC9kaXY+JykuaW5zZXJ0QWZ0ZXIoaS4kZWxlbWVudCkuYXR0cihcImRhdGEtdGFicy1jb250ZW50XCIsaS4kZWxlbWVudC5hdHRyKFwiaWRcIikpLG8uZWFjaChmdW5jdGlvbih0LGkpe3ZhciBuPWUoaSkuYXBwZW5kVG8oZCkuYWRkQ2xhc3Mociksbz1sLmdldCh0KS5oYXNoLnNsaWNlKDEpLHM9ZShpKS5hdHRyKFwiaWRcIil8fEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNixcImFjY29yZGlvblwiKTtvIT09cyYmKFwiXCIhPT1vP2UoaSkuYXR0cihcImlkXCIsbyk6KG89cyxlKGkpLmF0dHIoXCJpZFwiLG8pLGUobC5nZXQodCkpLmF0dHIoXCJocmVmXCIsZShsLmdldCh0KSkuYXR0cihcImhyZWZcIikucmVwbGFjZShcIiNcIixcIlwiKStcIiNcIitvKSkpO3ZhciB1PWUoYS5nZXQodCkpLmhhc0NsYXNzKFwiaXMtYWN0aXZlXCIpO3UmJm4uYWRkQ2xhc3MoXCJpcy1hY3RpdmVcIil9KSxhLmFkZENsYXNzKHMpfX19fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50UGx1Z2luJiZ0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpLGUod2luZG93KS5vZmYoXCIuemYuUmVzcG9uc2l2ZUFjY29yZGlvblRhYnNcIiksRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpfX1dKSx0fSgpO3QuZGVmYXVsdHM9e307dmFyIGk9e3RhYnM6e2Nzc0NsYXNzOlwidGFic1wiLHBsdWdpbjpGb3VuZGF0aW9uLl9wbHVnaW5zLnRhYnN8fG51bGx9LGFjY29yZGlvbjp7Y3NzQ2xhc3M6XCJhY2NvcmRpb25cIixwbHVnaW46Rm91bmRhdGlvbi5fcGx1Z2lucy5hY2NvcmRpb258fG51bGx9fTtGb3VuZGF0aW9uLnBsdWdpbih0LFwiUmVzcG9uc2l2ZUFjY29yZGlvblRhYnNcIil9KGpRdWVyeSksalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbihlKXtqUXVlcnkoZG9jdW1lbnQpLmZvdW5kYXRpb24oKSxjb25zb2xlLmxvZyhcImhlbGxvXCIpfSk7dmFyIF90eXBlb2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07IWZ1bmN0aW9uKGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLGUpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcImpxdWVyeVwiKSk6ZShqUXVlcnkpfShmdW5jdGlvbihlKXt2YXIgdD13aW5kb3cuU2xpY2t8fHt9O3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsbil7dmFyIG8scz10aGlzO3MuZGVmYXVsdHM9e2FjY2Vzc2liaWxpdHk6ITAsYWRhcHRpdmVIZWlnaHQ6ITEsYXBwZW5kQXJyb3dzOmUodCksYXBwZW5kRG90czplKHQpLGFycm93czohMCxhc05hdkZvcjpudWxsLHByZXZBcnJvdzonPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsbmV4dEFycm93Oic8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsYXV0b3BsYXk6ITEsYXV0b3BsYXlTcGVlZDozZTMsY2VudGVyTW9kZTohMSxjZW50ZXJQYWRkaW5nOlwiNTBweFwiLGNzc0Vhc2U6XCJlYXNlXCIsY3VzdG9tUGFnaW5nOmZ1bmN0aW9uKHQsaSl7cmV0dXJuIGUoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgLz4nKS50ZXh0KGkrMSl9LGRvdHM6ITEsZG90c0NsYXNzOlwic2xpY2stZG90c1wiLGRyYWdnYWJsZTohMCxlYXNpbmc6XCJsaW5lYXJcIixlZGdlRnJpY3Rpb246LjM1LGZhZGU6ITEsZm9jdXNPblNlbGVjdDohMSxpbmZpbml0ZTohMCxpbml0aWFsU2xpZGU6MCxsYXp5TG9hZDpcIm9uZGVtYW5kXCIsbW9iaWxlRmlyc3Q6ITEscGF1c2VPbkhvdmVyOiEwLHBhdXNlT25Gb2N1czohMCxwYXVzZU9uRG90c0hvdmVyOiExLHJlc3BvbmRUbzpcIndpbmRvd1wiLHJlc3BvbnNpdmU6bnVsbCxyb3dzOjEscnRsOiExLHNsaWRlOlwiXCIsc2xpZGVzUGVyUm93OjEsc2xpZGVzVG9TaG93OjEsc2xpZGVzVG9TY3JvbGw6MSxzcGVlZDo1MDAsc3dpcGU6ITAsc3dpcGVUb1NsaWRlOiExLHRvdWNoTW92ZTohMCx0b3VjaFRocmVzaG9sZDo1LHVzZUNTUzohMCx1c2VUcmFuc2Zvcm06ITAsdmFyaWFibGVXaWR0aDohMSx2ZXJ0aWNhbDohMSx2ZXJ0aWNhbFN3aXBpbmc6ITEsd2FpdEZvckFuaW1hdGU6ITAsekluZGV4OjFlM30scy5pbml0aWFscz17YW5pbWF0aW5nOiExLGRyYWdnaW5nOiExLGF1dG9QbGF5VGltZXI6bnVsbCxjdXJyZW50RGlyZWN0aW9uOjAsY3VycmVudExlZnQ6bnVsbCxjdXJyZW50U2xpZGU6MCxkaXJlY3Rpb246MSwkZG90czpudWxsLGxpc3RXaWR0aDpudWxsLGxpc3RIZWlnaHQ6bnVsbCxsb2FkSW5kZXg6MCwkbmV4dEFycm93Om51bGwsJHByZXZBcnJvdzpudWxsLHNsaWRlQ291bnQ6bnVsbCxzbGlkZVdpZHRoOm51bGwsJHNsaWRlVHJhY2s6bnVsbCwkc2xpZGVzOm51bGwsc2xpZGluZzohMSxzbGlkZU9mZnNldDowLHN3aXBlTGVmdDpudWxsLCRsaXN0Om51bGwsdG91Y2hPYmplY3Q6e30sdHJhbnNmb3Jtc0VuYWJsZWQ6ITEsdW5zbGlja2VkOiExfSxlLmV4dGVuZChzLHMuaW5pdGlhbHMpLHMuYWN0aXZlQnJlYWtwb2ludD1udWxsLHMuYW5pbVR5cGU9bnVsbCxzLmFuaW1Qcm9wPW51bGwscy5icmVha3BvaW50cz1bXSxzLmJyZWFrcG9pbnRTZXR0aW5ncz1bXSxzLmNzc1RyYW5zaXRpb25zPSExLHMuZm9jdXNzZWQ9ITEscy5pbnRlcnJ1cHRlZD0hMSxzLmhpZGRlbj1cImhpZGRlblwiLHMucGF1c2VkPSEwLHMucG9zaXRpb25Qcm9wPW51bGwscy5yZXNwb25kVG89bnVsbCxzLnJvd0NvdW50PTEscy5zaG91bGRDbGljaz0hMCxzLiRzbGlkZXI9ZSh0KSxzLiRzbGlkZXNDYWNoZT1udWxsLHMudHJhbnNmb3JtVHlwZT1udWxsLHMudHJhbnNpdGlvblR5cGU9bnVsbCxzLnZpc2liaWxpdHlDaGFuZ2U9XCJ2aXNpYmlsaXR5Y2hhbmdlXCIscy53aW5kb3dXaWR0aD0wLHMud2luZG93VGltZXI9bnVsbCxvPWUodCkuZGF0YShcInNsaWNrXCIpfHx7fSxzLm9wdGlvbnM9ZS5leHRlbmQoe30scy5kZWZhdWx0cyxuLG8pLHMuY3VycmVudFNsaWRlPXMub3B0aW9ucy5pbml0aWFsU2xpZGUscy5vcmlnaW5hbFNldHRpbmdzPXMub3B0aW9ucyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuPyhzLmhpZGRlbj1cIm1vekhpZGRlblwiLHMudmlzaWJpbGl0eUNoYW5nZT1cIm1venZpc2liaWxpdHljaGFuZ2VcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiYmKHMuaGlkZGVuPVwid2Via2l0SGlkZGVuXCIscy52aXNpYmlsaXR5Q2hhbmdlPVwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiKSxzLmF1dG9QbGF5PWUucHJveHkocy5hdXRvUGxheSxzKSxzLmF1dG9QbGF5Q2xlYXI9ZS5wcm94eShzLmF1dG9QbGF5Q2xlYXIscykscy5hdXRvUGxheUl0ZXJhdG9yPWUucHJveHkocy5hdXRvUGxheUl0ZXJhdG9yLHMpLHMuY2hhbmdlU2xpZGU9ZS5wcm94eShzLmNoYW5nZVNsaWRlLHMpLHMuY2xpY2tIYW5kbGVyPWUucHJveHkocy5jbGlja0hhbmRsZXIscykscy5zZWxlY3RIYW5kbGVyPWUucHJveHkocy5zZWxlY3RIYW5kbGVyLHMpLHMuc2V0UG9zaXRpb249ZS5wcm94eShzLnNldFBvc2l0aW9uLHMpLHMuc3dpcGVIYW5kbGVyPWUucHJveHkocy5zd2lwZUhhbmRsZXIscykscy5kcmFnSGFuZGxlcj1lLnByb3h5KHMuZHJhZ0hhbmRsZXIscykscy5rZXlIYW5kbGVyPWUucHJveHkocy5rZXlIYW5kbGVyLHMpLHMuaW5zdGFuY2VVaWQ9aSsrLHMuaHRtbEV4cHI9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvLHMucmVnaXN0ZXJCcmVha3BvaW50cygpLHMuaW5pdCghMCl9dmFyIGk9MDtyZXR1cm4gdH0oKSx0LnByb3RvdHlwZS5hY3RpdmF0ZUFEQT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWFjdGl2ZVwiKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJmYWxzZVwifSkuZmluZChcImEsIGlucHV0LCBidXR0b24sIHNlbGVjdFwiKS5hdHRyKHt0YWJpbmRleDpcIjBcIn0pfSx0LnByb3RvdHlwZS5hZGRTbGlkZT10LnByb3RvdHlwZS5zbGlja0FkZD1mdW5jdGlvbih0LGksbil7dmFyIG89dGhpcztpZihcImJvb2xlYW5cIj09dHlwZW9mIGkpbj1pLGk9bnVsbDtlbHNlIGlmKGk8MHx8aT49by5zbGlkZUNvdW50KXJldHVybiExO28udW5sb2FkKCksXCJudW1iZXJcIj09dHlwZW9mIGk/MD09PWkmJjA9PT1vLiRzbGlkZXMubGVuZ3RoP2UodCkuYXBwZW5kVG8oby4kc2xpZGVUcmFjayk6bj9lKHQpLmluc2VydEJlZm9yZShvLiRzbGlkZXMuZXEoaSkpOmUodCkuaW5zZXJ0QWZ0ZXIoby4kc2xpZGVzLmVxKGkpKTpuPT09ITA/ZSh0KS5wcmVwZW5kVG8oby4kc2xpZGVUcmFjayk6ZSh0KS5hcHBlbmRUbyhvLiRzbGlkZVRyYWNrKSxvLiRzbGlkZXM9by4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxvLiRzbGlkZVRyYWNrLmFwcGVuZChvLiRzbGlkZXMpLG8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKHQsaSl7ZShpKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiLHQpfSksby4kc2xpZGVzQ2FjaGU9by4kc2xpZGVzLG8ucmVpbml0KCl9LHQucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKDE9PT1lLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZlLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmZS5vcHRpb25zLnZlcnRpY2FsPT09ITEpe3ZhciB0PWUuJHNsaWRlcy5lcShlLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2UuJGxpc3QuYW5pbWF0ZSh7aGVpZ2h0OnR9LGUub3B0aW9ucy5zcGVlZCl9fSx0LnByb3RvdHlwZS5hbmltYXRlU2xpZGU9ZnVuY3Rpb24odCxpKXt2YXIgbj17fSxvPXRoaXM7by5hbmltYXRlSGVpZ2h0KCksby5vcHRpb25zLnJ0bD09PSEwJiZvLm9wdGlvbnMudmVydGljYWw9PT0hMSYmKHQ9LXQpLG8udHJhbnNmb3Jtc0VuYWJsZWQ9PT0hMT9vLm9wdGlvbnMudmVydGljYWw9PT0hMT9vLiRzbGlkZVRyYWNrLmFuaW1hdGUoe2xlZnQ6dH0sby5vcHRpb25zLnNwZWVkLG8ub3B0aW9ucy5lYXNpbmcsaSk6by4kc2xpZGVUcmFjay5hbmltYXRlKHt0b3A6dH0sby5vcHRpb25zLnNwZWVkLG8ub3B0aW9ucy5lYXNpbmcsaSk6by5jc3NUcmFuc2l0aW9ucz09PSExPyhvLm9wdGlvbnMucnRsPT09ITAmJihvLmN1cnJlbnRMZWZ0PS1vLmN1cnJlbnRMZWZ0KSxlKHthbmltU3RhcnQ6by5jdXJyZW50TGVmdH0pLmFuaW1hdGUoe2FuaW1TdGFydDp0fSx7ZHVyYXRpb246by5vcHRpb25zLnNwZWVkLGVhc2luZzpvLm9wdGlvbnMuZWFzaW5nLHN0ZXA6ZnVuY3Rpb24oZSl7ZT1NYXRoLmNlaWwoZSksby5vcHRpb25zLnZlcnRpY2FsPT09ITE/KG5bby5hbmltVHlwZV09XCJ0cmFuc2xhdGUoXCIrZStcInB4LCAwcHgpXCIsby4kc2xpZGVUcmFjay5jc3MobikpOihuW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlKDBweCxcIitlK1wicHgpXCIsby4kc2xpZGVUcmFjay5jc3MobikpfSxjb21wbGV0ZTpmdW5jdGlvbigpe2kmJmkuY2FsbCgpfX0pKTooby5hcHBseVRyYW5zaXRpb24oKSx0PU1hdGguY2VpbCh0KSxvLm9wdGlvbnMudmVydGljYWw9PT0hMT9uW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrdCtcInB4LCAwcHgsIDBweClcIjpuW28uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoMHB4LFwiK3QrXCJweCwgMHB4KVwiLG8uJHNsaWRlVHJhY2suY3NzKG4pLGkmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLmRpc2FibGVUcmFuc2l0aW9uKCksaS5jYWxsKCl9LG8ub3B0aW9ucy5zcGVlZCkpfSx0LnByb3RvdHlwZS5nZXROYXZUYXJnZXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGk9dC5vcHRpb25zLmFzTmF2Rm9yO3JldHVybiBpJiZudWxsIT09aSYmKGk9ZShpKS5ub3QodC4kc2xpZGVyKSksaX0sdC5wcm90b3R5cGUuYXNOYXZGb3I9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxuPWkuZ2V0TmF2VGFyZ2V0KCk7bnVsbCE9PW4mJlwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIG4/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKG4pKSYmbi5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9ZSh0aGlzKS5zbGljayhcImdldFNsaWNrXCIpO2kudW5zbGlja2VkfHxpLnNsaWRlSGFuZGxlcih0LCEwKX0pfSx0LnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxpPXt9O3Qub3B0aW9ucy5mYWRlPT09ITE/aVt0LnRyYW5zaXRpb25UeXBlXT10LnRyYW5zZm9ybVR5cGUrXCIgXCIrdC5vcHRpb25zLnNwZWVkK1wibXMgXCIrdC5vcHRpb25zLmNzc0Vhc2U6aVt0LnRyYW5zaXRpb25UeXBlXT1cIm9wYWNpdHkgXCIrdC5vcHRpb25zLnNwZWVkK1wibXMgXCIrdC5vcHRpb25zLmNzc0Vhc2UsdC5vcHRpb25zLmZhZGU9PT0hMT90LiRzbGlkZVRyYWNrLmNzcyhpKTp0LiRzbGlkZXMuZXEoZSkuY3NzKGkpfSx0LnByb3RvdHlwZS5hdXRvUGxheT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5hdXRvUGxheUNsZWFyKCksZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlLmF1dG9QbGF5VGltZXI9c2V0SW50ZXJ2YWwoZS5hdXRvUGxheUl0ZXJhdG9yLGUub3B0aW9ucy5hdXRvcGxheVNwZWVkKSl9LHQucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuYXV0b1BsYXlUaW1lciYmY2xlYXJJbnRlcnZhbChlLmF1dG9QbGF5VGltZXIpfSx0LnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuY3VycmVudFNsaWRlK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtlLnBhdXNlZHx8ZS5pbnRlcnJ1cHRlZHx8ZS5mb2N1c3NlZHx8KGUub3B0aW9ucy5pbmZpbml0ZT09PSExJiYoMT09PWUuZGlyZWN0aW9uJiZlLmN1cnJlbnRTbGlkZSsxPT09ZS5zbGlkZUNvdW50LTE/ZS5kaXJlY3Rpb249MDowPT09ZS5kaXJlY3Rpb24mJih0PWUuY3VycmVudFNsaWRlLWUub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxlLmN1cnJlbnRTbGlkZS0xPT09MCYmKGUuZGlyZWN0aW9uPTEpKSksZS5zbGlkZUhhbmRsZXIodCkpfSx0LnByb3RvdHlwZS5idWlsZEFycm93cz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5vcHRpb25zLmFycm93cz09PSEwJiYodC4kcHJldkFycm93PWUodC5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSx0LiRuZXh0QXJyb3c9ZSh0Lm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWFycm93XCIpLHQuc2xpZGVDb3VudD50Lm9wdGlvbnMuc2xpZGVzVG9TaG93Pyh0LiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLHQuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gdGFiaW5kZXhcIiksdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5wcmV2QXJyb3cpJiZ0LiRwcmV2QXJyb3cucHJlcGVuZFRvKHQub3B0aW9ucy5hcHBlbmRBcnJvd3MpLHQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMubmV4dEFycm93KSYmdC4kbmV4dEFycm93LmFwcGVuZFRvKHQub3B0aW9ucy5hcHBlbmRBcnJvd3MpLHQub3B0aW9ucy5pbmZpbml0ZSE9PSEwJiZ0LiRwcmV2QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSk6dC4kcHJldkFycm93LmFkZCh0LiRuZXh0QXJyb3cpLmFkZENsYXNzKFwic2xpY2staGlkZGVuXCIpLmF0dHIoe1wiYXJpYS1kaXNhYmxlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiLTFcIn0pKX0sdC5wcm90b3R5cGUuYnVpbGREb3RzPWZ1bmN0aW9uKCl7dmFyIHQsaSxuPXRoaXM7aWYobi5vcHRpb25zLmRvdHM9PT0hMCYmbi5zbGlkZUNvdW50Pm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpe2ZvcihuLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksaT1lKFwiPHVsIC8+XCIpLmFkZENsYXNzKG4ub3B0aW9ucy5kb3RzQ2xhc3MpLHQ9MDt0PD1uLmdldERvdENvdW50KCk7dCs9MSlpLmFwcGVuZChlKFwiPGxpIC8+XCIpLmFwcGVuZChuLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxuLHQpKSk7bi4kZG90cz1pLmFwcGVuZFRvKG4ub3B0aW9ucy5hcHBlbmREb3RzKSxuLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIil9fSx0LnByb3RvdHlwZS5idWlsZE91dD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC4kc2xpZGVzPXQuJHNsaWRlci5jaGlsZHJlbih0Lm9wdGlvbnMuc2xpZGUrXCI6bm90KC5zbGljay1jbG9uZWQpXCIpLmFkZENsYXNzKFwic2xpY2stc2xpZGVcIiksdC5zbGlkZUNvdW50PXQuJHNsaWRlcy5sZW5ndGgsdC4kc2xpZGVzLmVhY2goZnVuY3Rpb24odCxpKXtlKGkpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsdCkuZGF0YShcIm9yaWdpbmFsU3R5bGluZ1wiLGUoaSkuYXR0cihcInN0eWxlXCIpfHxcIlwiKX0pLHQuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXNsaWRlclwiKSx0LiRzbGlkZVRyYWNrPTA9PT10LnNsaWRlQ291bnQ/ZSgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKHQuJHNsaWRlcik6dC4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKSx0LiRsaXN0PXQuJHNsaWRlVHJhY2sud3JhcCgnPGRpdiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCksdC4kc2xpZGVUcmFjay5jc3MoXCJvcGFjaXR5XCIsMCksdC5vcHRpb25zLmNlbnRlck1vZGUhPT0hMCYmdC5vcHRpb25zLnN3aXBlVG9TbGlkZSE9PSEwfHwodC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPTEpLGUoXCJpbWdbZGF0YS1sYXp5XVwiLHQuJHNsaWRlcikubm90KFwiW3NyY11cIikuYWRkQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLHQuc2V0dXBJbmZpbml0ZSgpLHQuYnVpbGRBcnJvd3MoKSx0LmJ1aWxkRG90cygpLHQudXBkYXRlRG90cygpLHQuc2V0U2xpZGVDbGFzc2VzKFwibnVtYmVyXCI9PXR5cGVvZiB0LmN1cnJlbnRTbGlkZT90LmN1cnJlbnRTbGlkZTowKSx0Lm9wdGlvbnMuZHJhZ2dhYmxlPT09ITAmJnQuJGxpc3QuYWRkQ2xhc3MoXCJkcmFnZ2FibGVcIil9LHQucHJvdG90eXBlLmJ1aWxkUm93cz1mdW5jdGlvbigpe3ZhciBlLHQsaSxuLG8scyxyLGE9dGhpcztpZihuPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxzPWEuJHNsaWRlci5jaGlsZHJlbigpLGEub3B0aW9ucy5yb3dzPjEpe2ZvcihyPWEub3B0aW9ucy5zbGlkZXNQZXJSb3cqYS5vcHRpb25zLnJvd3Msbz1NYXRoLmNlaWwocy5sZW5ndGgvciksZT0wO2U8bztlKyspe3ZhciBsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zm9yKHQ9MDt0PGEub3B0aW9ucy5yb3dzO3QrKyl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoaT0wO2k8YS5vcHRpb25zLnNsaWRlc1BlclJvdztpKyspe3ZhciB1PWUqcisodCphLm9wdGlvbnMuc2xpZGVzUGVyUm93K2kpO3MuZ2V0KHUpJiZkLmFwcGVuZENoaWxkKHMuZ2V0KHUpKX1sLmFwcGVuZENoaWxkKGQpfW4uYXBwZW5kQ2hpbGQobCl9YS4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG4pLGEuJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jc3Moe3dpZHRoOjEwMC9hLm9wdGlvbnMuc2xpZGVzUGVyUm93K1wiJVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIn0pfX0sdC5wcm90b3R5cGUuY2hlY2tSZXNwb25zaXZlPWZ1bmN0aW9uKHQsaSl7dmFyIG4sbyxzLHI9dGhpcyxhPSExLGw9ci4kc2xpZGVyLndpZHRoKCksZD13aW5kb3cuaW5uZXJXaWR0aHx8ZSh3aW5kb3cpLndpZHRoKCk7aWYoXCJ3aW5kb3dcIj09PXIucmVzcG9uZFRvP3M9ZDpcInNsaWRlclwiPT09ci5yZXNwb25kVG8/cz1sOlwibWluXCI9PT1yLnJlc3BvbmRUbyYmKHM9TWF0aC5taW4oZCxsKSksci5vcHRpb25zLnJlc3BvbnNpdmUmJnIub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCYmbnVsbCE9PXIub3B0aW9ucy5yZXNwb25zaXZlKXtvPW51bGw7Zm9yKG4gaW4gci5icmVha3BvaW50cylyLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KG4pJiYoci5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0PT09ITE/czxyLmJyZWFrcG9pbnRzW25dJiYobz1yLmJyZWFrcG9pbnRzW25dKTpzPnIuYnJlYWtwb2ludHNbbl0mJihvPXIuYnJlYWtwb2ludHNbbl0pKTtudWxsIT09bz9udWxsIT09ci5hY3RpdmVCcmVha3BvaW50PyhvIT09ci5hY3RpdmVCcmVha3BvaW50fHxpKSYmKHIuYWN0aXZlQnJlYWtwb2ludD1vLFwidW5zbGlja1wiPT09ci5icmVha3BvaW50U2V0dGluZ3Nbb10/ci51bnNsaWNrKG8pOihyLm9wdGlvbnM9ZS5leHRlbmQoe30sci5vcmlnaW5hbFNldHRpbmdzLHIuYnJlYWtwb2ludFNldHRpbmdzW29dKSx0PT09ITAmJihyLmN1cnJlbnRTbGlkZT1yLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxyLnJlZnJlc2godCkpLGE9byk6KHIuYWN0aXZlQnJlYWtwb2ludD1vLFwidW5zbGlja1wiPT09ci5icmVha3BvaW50U2V0dGluZ3Nbb10/ci51bnNsaWNrKG8pOihyLm9wdGlvbnM9ZS5leHRlbmQoe30sci5vcmlnaW5hbFNldHRpbmdzLHIuYnJlYWtwb2ludFNldHRpbmdzW29dKSx0PT09ITAmJihyLmN1cnJlbnRTbGlkZT1yLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxyLnJlZnJlc2godCkpLGE9byk6bnVsbCE9PXIuYWN0aXZlQnJlYWtwb2ludCYmKHIuYWN0aXZlQnJlYWtwb2ludD1udWxsLHIub3B0aW9ucz1yLm9yaWdpbmFsU2V0dGluZ3MsdD09PSEwJiYoci5jdXJyZW50U2xpZGU9ci5vcHRpb25zLmluaXRpYWxTbGlkZSksci5yZWZyZXNoKHQpLGE9byksdHx8YT09PSExfHxyLiRzbGlkZXIudHJpZ2dlcihcImJyZWFrcG9pbnRcIixbcixhXSl9fSx0LnByb3RvdHlwZS5jaGFuZ2VTbGlkZT1mdW5jdGlvbih0LGkpe3ZhciBuLG8scyxyPXRoaXMsYT1lKHQuY3VycmVudFRhcmdldCk7c3dpdGNoKGEuaXMoXCJhXCIpJiZ0LnByZXZlbnREZWZhdWx0KCksYS5pcyhcImxpXCIpfHwoYT1hLmNsb3Nlc3QoXCJsaVwiKSkscz1yLnNsaWRlQ291bnQlci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MCxuPXM/MDooci5zbGlkZUNvdW50LXIuY3VycmVudFNsaWRlKSVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsdC5kYXRhLm1lc3NhZ2Upe2Nhc2VcInByZXZpb3VzXCI6bz0wPT09bj9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6ci5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZS1vLCExLGkpO2JyZWFrO2Nhc2VcIm5leHRcIjpvPTA9PT1uP3Iub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpuLHIuc2xpZGVDb3VudD5yLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZyLnNsaWRlSGFuZGxlcihyLmN1cnJlbnRTbGlkZStvLCExLGkpO2JyZWFrO2Nhc2VcImluZGV4XCI6dmFyIGw9MD09PXQuZGF0YS5pbmRleD8wOnQuZGF0YS5pbmRleHx8YS5pbmRleCgpKnIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtyLnNsaWRlSGFuZGxlcihyLmNoZWNrTmF2aWdhYmxlKGwpLCExLGkpLGEuY2hpbGRyZW4oKS50cmlnZ2VyKFwiZm9jdXNcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSx0LnByb3RvdHlwZS5jaGVja05hdmlnYWJsZT1mdW5jdGlvbihlKXt2YXIgdCxpLG49dGhpcztpZih0PW4uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLGk9MCxlPnRbdC5sZW5ndGgtMV0pZT10W3QubGVuZ3RoLTFdO2Vsc2UgZm9yKHZhciBvIGluIHQpe2lmKGU8dFtvXSl7ZT1pO2JyZWFrfWk9dFtvXX1yZXR1cm4gZX0sdC5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5vcHRpb25zLmRvdHMmJm51bGwhPT10LiRkb3RzJiZlKFwibGlcIix0LiRkb3RzKS5vZmYoXCJjbGljay5zbGlja1wiLHQuY2hhbmdlU2xpZGUpLm9mZihcIm1vdXNlZW50ZXIuc2xpY2tcIixlLnByb3h5KHQuaW50ZXJydXB0LHQsITApKS5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsZS5wcm94eSh0LmludGVycnVwdCx0LCExKSksdC4kc2xpZGVyLm9mZihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIiksdC5vcHRpb25zLmFycm93cz09PSEwJiZ0LnNsaWRlQ291bnQ+dC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHQuJHByZXZBcnJvdyYmdC4kcHJldkFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsdC5jaGFuZ2VTbGlkZSksdC4kbmV4dEFycm93JiZ0LiRuZXh0QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIix0LmNoYW5nZVNsaWRlKSksdC4kbGlzdC5vZmYoXCJ0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGlja1wiLHQuc3dpcGVIYW5kbGVyKSx0LiRsaXN0Lm9mZihcInRvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2tcIix0LnN3aXBlSGFuZGxlciksdC4kbGlzdC5vZmYoXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIsdC5zd2lwZUhhbmRsZXIpLHQuJGxpc3Qub2ZmKFwidG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGlja1wiLHQuc3dpcGVIYW5kbGVyKSx0LiRsaXN0Lm9mZihcImNsaWNrLnNsaWNrXCIsdC5jbGlja0hhbmRsZXIpLGUoZG9jdW1lbnQpLm9mZih0LnZpc2liaWxpdHlDaGFuZ2UsdC52aXNpYmlsaXR5KSx0LmNsZWFuVXBTbGlkZUV2ZW50cygpLHQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJnQuJGxpc3Qub2ZmKFwia2V5ZG93bi5zbGlja1wiLHQua2V5SGFuZGxlciksXG50Lm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZlKHQuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIix0LnNlbGVjdEhhbmRsZXIpLGUod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIit0Lmluc3RhbmNlVWlkLHQub3JpZW50YXRpb25DaGFuZ2UpLGUod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrdC5pbnN0YW5jZVVpZCx0LnJlc2l6ZSksZShcIltkcmFnZ2FibGUhPXRydWVdXCIsdC4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsdC5wcmV2ZW50RGVmYXVsdCksZSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrdC5pbnN0YW5jZVVpZCx0LnNldFBvc2l0aW9uKSxlKGRvY3VtZW50KS5vZmYoXCJyZWFkeS5zbGljay5zbGljay1cIit0Lmluc3RhbmNlVWlkLHQuc2V0UG9zaXRpb24pfSx0LnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuJGxpc3Qub2ZmKFwibW91c2VlbnRlci5zbGlja1wiLGUucHJveHkodC5pbnRlcnJ1cHQsdCwhMCkpLHQuJGxpc3Qub2ZmKFwibW91c2VsZWF2ZS5zbGlja1wiLGUucHJveHkodC5pbnRlcnJ1cHQsdCwhMSkpfSx0LnByb3RvdHlwZS5jbGVhblVwUm93cz1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpczt0Lm9wdGlvbnMucm93cz4xJiYoZT10LiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpLGUucmVtb3ZlQXR0cihcInN0eWxlXCIpLHQuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChlKSl9LHQucHJvdG90eXBlLmNsaWNrSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3Quc2hvdWxkQ2xpY2s9PT0hMSYmKGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCkpfSx0LnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS50b3VjaE9iamVjdD17fSxpLmNsZWFuVXBFdmVudHMoKSxlKFwiLnNsaWNrLWNsb25lZFwiLGkuJHNsaWRlcikuZGV0YWNoKCksaS4kZG90cyYmaS4kZG90cy5yZW1vdmUoKSxpLiRwcmV2QXJyb3cmJmkuJHByZXZBcnJvdy5sZW5ndGgmJihpLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLGkuaHRtbEV4cHIudGVzdChpLm9wdGlvbnMucHJldkFycm93KSYmaS4kcHJldkFycm93LnJlbW92ZSgpKSxpLiRuZXh0QXJyb3cmJmkuJG5leHRBcnJvdy5sZW5ndGgmJihpLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLGkuaHRtbEV4cHIudGVzdChpLm9wdGlvbnMubmV4dEFycm93KSYmaS4kbmV4dEFycm93LnJlbW92ZSgpKSxpLiRzbGlkZXMmJihpLiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW5cIikucmVtb3ZlQXR0cihcImRhdGEtc2xpY2staW5kZXhcIikuZWFjaChmdW5jdGlvbigpe2UodGhpcykuYXR0cihcInN0eWxlXCIsZSh0aGlzKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIpKX0pLGkuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxpLiRzbGlkZVRyYWNrLmRldGFjaCgpLGkuJGxpc3QuZGV0YWNoKCksaS4kc2xpZGVyLmFwcGVuZChpLiRzbGlkZXMpKSxpLmNsZWFuVXBSb3dzKCksaS4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGVyXCIpLGkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLGkuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWRvdHRlZFwiKSxpLnVuc2xpY2tlZD0hMCx0fHxpLiRzbGlkZXIudHJpZ2dlcihcImRlc3Ryb3lcIixbaV0pfSx0LnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLGk9e307aVt0LnRyYW5zaXRpb25UeXBlXT1cIlwiLHQub3B0aW9ucy5mYWRlPT09ITE/dC4kc2xpZGVUcmFjay5jc3MoaSk6dC4kc2xpZGVzLmVxKGUpLmNzcyhpKX0sdC5wcm90b3R5cGUuZmFkZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcztpLmNzc1RyYW5zaXRpb25zPT09ITE/KGkuJHNsaWRlcy5lcShlKS5jc3Moe3pJbmRleDppLm9wdGlvbnMuekluZGV4fSksaS4kc2xpZGVzLmVxKGUpLmFuaW1hdGUoe29wYWNpdHk6MX0saS5vcHRpb25zLnNwZWVkLGkub3B0aW9ucy5lYXNpbmcsdCkpOihpLmFwcGx5VHJhbnNpdGlvbihlKSxpLiRzbGlkZXMuZXEoZSkuY3NzKHtvcGFjaXR5OjEsekluZGV4Omkub3B0aW9ucy56SW5kZXh9KSx0JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5kaXNhYmxlVHJhbnNpdGlvbihlKSx0LmNhbGwoKX0saS5vcHRpb25zLnNwZWVkKSl9LHQucHJvdG90eXBlLmZhZGVTbGlkZU91dD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY3NzVHJhbnNpdGlvbnM9PT0hMT90LiRzbGlkZXMuZXEoZSkuYW5pbWF0ZSh7b3BhY2l0eTowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTJ9LHQub3B0aW9ucy5zcGVlZCx0Lm9wdGlvbnMuZWFzaW5nKToodC5hcHBseVRyYW5zaXRpb24oZSksdC4kc2xpZGVzLmVxKGUpLmNzcyh7b3BhY2l0eTowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTJ9KSl9LHQucHJvdG90eXBlLmZpbHRlclNsaWRlcz10LnByb3RvdHlwZS5zbGlja0ZpbHRlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO251bGwhPT1lJiYodC4kc2xpZGVzQ2FjaGU9dC4kc2xpZGVzLHQudW5sb2FkKCksdC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHQuJHNsaWRlc0NhY2hlLmZpbHRlcihlKS5hcHBlbmRUbyh0LiRzbGlkZVRyYWNrKSx0LnJlaW5pdCgpKX0sdC5wcm90b3R5cGUuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKS5vbihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIixcIio6bm90KC5zbGljay1hcnJvdylcIixmdW5jdGlvbihpKXtpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO3ZhciBuPWUodGhpcyk7c2V0VGltZW91dChmdW5jdGlvbigpe3Qub3B0aW9ucy5wYXVzZU9uRm9jdXMmJih0LmZvY3Vzc2VkPW4uaXMoXCI6Zm9jdXNcIiksdC5hdXRvUGxheSgpKX0sMCl9KX0sdC5wcm90b3R5cGUuZ2V0Q3VycmVudD10LnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIGUuY3VycmVudFNsaWRlfSx0LnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD0wLGk9MCxuPTA7aWYoZS5vcHRpb25zLmluZmluaXRlPT09ITApZm9yKDt0PGUuc2xpZGVDb3VudDspKytuLHQ9aStlLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsaSs9ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1lLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDplLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2UgaWYoZS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCluPWUuc2xpZGVDb3VudDtlbHNlIGlmKGUub3B0aW9ucy5hc05hdkZvcilmb3IoO3Q8ZS5zbGlkZUNvdW50OykrK24sdD1pK2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxpKz1lLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmUub3B0aW9ucy5zbGlkZXNUb1Nob3c7ZWxzZSBuPTErTWF0aC5jZWlsKChlLnNsaWRlQ291bnQtZS5vcHRpb25zLnNsaWRlc1RvU2hvdykvZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtyZXR1cm4gbi0xfSx0LnByb3RvdHlwZS5nZXRMZWZ0PWZ1bmN0aW9uKGUpe3ZhciB0LGksbixvPXRoaXMscz0wO3JldHVybiBvLnNsaWRlT2Zmc2V0PTAsaT1vLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksby5vcHRpb25zLmluZmluaXRlPT09ITA/KG8uc2xpZGVDb3VudD5vLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoby5zbGlkZU9mZnNldD1vLnNsaWRlV2lkdGgqby5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxzPWkqby5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSksby5zbGlkZUNvdW50JW8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9PTAmJmUrby5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPm8uc2xpZGVDb3VudCYmby5zbGlkZUNvdW50Pm8ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlPm8uc2xpZGVDb3VudD8oby5zbGlkZU9mZnNldD0oby5vcHRpb25zLnNsaWRlc1RvU2hvdy0oZS1vLnNsaWRlQ291bnQpKSpvLnNsaWRlV2lkdGgqLTEscz0oby5vcHRpb25zLnNsaWRlc1RvU2hvdy0oZS1vLnNsaWRlQ291bnQpKSppKi0xKTooby5zbGlkZU9mZnNldD1vLnNsaWRlQ291bnQlby5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKm8uc2xpZGVXaWR0aCotMSxzPW8uc2xpZGVDb3VudCVvLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqaSotMSkpKTplK28ub3B0aW9ucy5zbGlkZXNUb1Nob3c+by5zbGlkZUNvdW50JiYoby5zbGlkZU9mZnNldD0oZStvLm9wdGlvbnMuc2xpZGVzVG9TaG93LW8uc2xpZGVDb3VudCkqby5zbGlkZVdpZHRoLHM9KGUrby5vcHRpb25zLnNsaWRlc1RvU2hvdy1vLnNsaWRlQ291bnQpKmkpLG8uc2xpZGVDb3VudDw9by5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG8uc2xpZGVPZmZzZXQ9MCxzPTApLG8ub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJm8ub3B0aW9ucy5pbmZpbml0ZT09PSEwP28uc2xpZGVPZmZzZXQrPW8uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG8ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiktby5zbGlkZVdpZHRoOm8ub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJihvLnNsaWRlT2Zmc2V0PTAsby5zbGlkZU9mZnNldCs9by5zbGlkZVdpZHRoKk1hdGguZmxvb3Ioby5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSksdD1vLm9wdGlvbnMudmVydGljYWw9PT0hMT9lKm8uc2xpZGVXaWR0aCotMStvLnNsaWRlT2Zmc2V0OmUqaSotMStzLG8ub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITAmJihuPW8uc2xpZGVDb3VudDw9by5vcHRpb25zLnNsaWRlc1RvU2hvd3x8by5vcHRpb25zLmluZmluaXRlPT09ITE/by4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShlKTpvLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGUrby5vcHRpb25zLnNsaWRlc1RvU2hvdyksdD1vLm9wdGlvbnMucnRsPT09ITA/blswXT8oby4kc2xpZGVUcmFjay53aWR0aCgpLW5bMF0ub2Zmc2V0TGVmdC1uLndpZHRoKCkpKi0xOjA6blswXT9uWzBdLm9mZnNldExlZnQqLTE6MCxvLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYobj1vLnNsaWRlQ291bnQ8PW8ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fG8ub3B0aW9ucy5pbmZpbml0ZT09PSExP28uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoZSk6by4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShlK28ub3B0aW9ucy5zbGlkZXNUb1Nob3crMSksdD1vLm9wdGlvbnMucnRsPT09ITA/blswXT8oby4kc2xpZGVUcmFjay53aWR0aCgpLW5bMF0ub2Zmc2V0TGVmdC1uLndpZHRoKCkpKi0xOjA6blswXT9uWzBdLm9mZnNldExlZnQqLTE6MCx0Kz0oby4kbGlzdC53aWR0aCgpLW4ub3V0ZXJXaWR0aCgpKS8yKSksdH0sdC5wcm90b3R5cGUuZ2V0T3B0aW9uPXQucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHQub3B0aW9uc1tlXX0sdC5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcz1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxpPTAsbj0wLG89W107Zm9yKHQub3B0aW9ucy5pbmZpbml0ZT09PSExP2U9dC5zbGlkZUNvdW50OihpPXQub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCotMSxuPXQub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCotMSxlPTIqdC5zbGlkZUNvdW50KTtpPGU7KW8ucHVzaChpKSxpPW4rdC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLG4rPXQub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdz90Lm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6dC5vcHRpb25zLnNsaWRlc1RvU2hvdztyZXR1cm4gb30sdC5wcm90b3R5cGUuZ2V0U2xpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdC5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudD1mdW5jdGlvbigpe3ZhciB0LGksbixvPXRoaXM7cmV0dXJuIG49by5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9vLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihvLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpOjAsby5vcHRpb25zLnN3aXBlVG9TbGlkZT09PSEwPyhvLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuZWFjaChmdW5jdGlvbih0LHMpe2lmKHMub2Zmc2V0TGVmdC1uK2Uocykub3V0ZXJXaWR0aCgpLzI+by5zd2lwZUxlZnQqLTEpcmV0dXJuIGk9cywhMX0pLHQ9TWF0aC5hYnMoZShpKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS1vLmN1cnJlbnRTbGlkZSl8fDEpOm8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbH0sdC5wcm90b3R5cGUuZ29Ubz10LnByb3RvdHlwZS5zbGlja0dvVG89ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzO2kuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJpbmRleFwiLGluZGV4OnBhcnNlSW50KGUpfX0sdCl9LHQucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcztlKGkuJHNsaWRlcikuaGFzQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKXx8KGUoaS4kc2xpZGVyKS5hZGRDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLGkuYnVpbGRSb3dzKCksaS5idWlsZE91dCgpLGkuc2V0UHJvcHMoKSxpLnN0YXJ0TG9hZCgpLGkubG9hZFNsaWRlcigpLGkuaW5pdGlhbGl6ZUV2ZW50cygpLGkudXBkYXRlQXJyb3dzKCksaS51cGRhdGVEb3RzKCksaS5jaGVja1Jlc3BvbnNpdmUoITApLGkuZm9jdXNIYW5kbGVyKCkpLHQmJmkuJHNsaWRlci50cmlnZ2VyKFwiaW5pdFwiLFtpXSksaS5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmaS5pbml0QURBKCksaS5vcHRpb25zLmF1dG9wbGF5JiYoaS5wYXVzZWQ9ITEsaS5hdXRvUGxheSgpKX0sdC5wcm90b3R5cGUuaW5pdEFEQT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC4kc2xpZGVzLmFkZCh0LiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSkuZmluZChcImEsIGlucHV0LCBidXR0b24sIHNlbGVjdFwiKS5hdHRyKHt0YWJpbmRleDpcIi0xXCJ9KSx0LiRzbGlkZVRyYWNrLmF0dHIoXCJyb2xlXCIsXCJsaXN0Ym94XCIpLHQuJHNsaWRlcy5ub3QodC4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKSkuZWFjaChmdW5jdGlvbihpKXtlKHRoaXMpLmF0dHIoe3JvbGU6XCJvcHRpb25cIixcImFyaWEtZGVzY3JpYmVkYnlcIjpcInNsaWNrLXNsaWRlXCIrdC5pbnN0YW5jZVVpZCtpfSl9KSxudWxsIT09dC4kZG90cyYmdC4kZG90cy5hdHRyKFwicm9sZVwiLFwidGFibGlzdFwiKS5maW5kKFwibGlcIikuZWFjaChmdW5jdGlvbihpKXtlKHRoaXMpLmF0dHIoe3JvbGU6XCJwcmVzZW50YXRpb25cIixcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWNvbnRyb2xzXCI6XCJuYXZpZ2F0aW9uXCIrdC5pbnN0YW5jZVVpZCtpLGlkOlwic2xpY2stc2xpZGVcIit0Lmluc3RhbmNlVWlkK2l9KX0pLmZpcnN0KCkuYXR0cihcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIikuZW5kKCkuZmluZChcImJ1dHRvblwiKS5hdHRyKFwicm9sZVwiLFwiYnV0dG9uXCIpLmVuZCgpLmNsb3Nlc3QoXCJkaXZcIikuYXR0cihcInJvbGVcIixcInRvb2xiYXJcIiksdC5hY3RpdmF0ZUFEQSgpfSx0LnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5hcnJvd3M9PT0hMCYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlLiRwcmV2QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwicHJldmlvdXNcIn0sZS5jaGFuZ2VTbGlkZSksZS4kbmV4dEFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcIm5leHRcIn0sZS5jaGFuZ2VTbGlkZSkpfSx0LnByb3RvdHlwZS5pbml0RG90RXZlbnRzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0Lm9wdGlvbnMuZG90cz09PSEwJiZ0LnNsaWRlQ291bnQ+dC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmZShcImxpXCIsdC4kZG90cykub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwiaW5kZXhcIn0sdC5jaGFuZ2VTbGlkZSksdC5vcHRpb25zLmRvdHM9PT0hMCYmdC5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXI9PT0hMCYmZShcImxpXCIsdC4kZG90cykub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsZS5wcm94eSh0LmludGVycnVwdCx0LCEwKSkub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsZS5wcm94eSh0LmludGVycnVwdCx0LCExKSl9LHQucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5vcHRpb25zLnBhdXNlT25Ib3ZlciYmKHQuJGxpc3Qub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsZS5wcm94eSh0LmludGVycnVwdCx0LCEwKSksdC4kbGlzdC5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixlLnByb3h5KHQuaW50ZXJydXB0LHQsITEpKSl9LHQucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuaW5pdEFycm93RXZlbnRzKCksdC5pbml0RG90RXZlbnRzKCksdC5pbml0U2xpZGVFdmVudHMoKSx0LiRsaXN0Lm9uKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIix7YWN0aW9uOlwic3RhcnRcIn0sdC5zd2lwZUhhbmRsZXIpLHQuJGxpc3Qub24oXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIse2FjdGlvbjpcIm1vdmVcIn0sdC5zd2lwZUhhbmRsZXIpLHQuJGxpc3Qub24oXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSx0LnN3aXBlSGFuZGxlciksdC4kbGlzdC5vbihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LHQuc3dpcGVIYW5kbGVyKSx0LiRsaXN0Lm9uKFwiY2xpY2suc2xpY2tcIix0LmNsaWNrSGFuZGxlciksZShkb2N1bWVudCkub24odC52aXNpYmlsaXR5Q2hhbmdlLGUucHJveHkodC52aXNpYmlsaXR5LHQpKSx0Lm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZ0LiRsaXN0Lm9uKFwia2V5ZG93bi5zbGlja1wiLHQua2V5SGFuZGxlciksdC5vcHRpb25zLmZvY3VzT25TZWxlY3Q9PT0hMCYmZSh0LiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIix0LnNlbGVjdEhhbmRsZXIpLGUod2luZG93KS5vbihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK3QuaW5zdGFuY2VVaWQsZS5wcm94eSh0Lm9yaWVudGF0aW9uQ2hhbmdlLHQpKSxlKHdpbmRvdykub24oXCJyZXNpemUuc2xpY2suc2xpY2stXCIrdC5pbnN0YW5jZVVpZCxlLnByb3h5KHQucmVzaXplLHQpKSxlKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIix0LiRzbGlkZVRyYWNrKS5vbihcImRyYWdzdGFydFwiLHQucHJldmVudERlZmF1bHQpLGUod2luZG93KS5vbihcImxvYWQuc2xpY2suc2xpY2stXCIrdC5pbnN0YW5jZVVpZCx0LnNldFBvc2l0aW9uKSxlKGRvY3VtZW50KS5vbihcInJlYWR5LnNsaWNrLnNsaWNrLVwiK3QuaW5zdGFuY2VVaWQsdC5zZXRQb3NpdGlvbil9LHQucHJvdG90eXBlLmluaXRVST1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLmFycm93cz09PSEwJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGUuJHByZXZBcnJvdy5zaG93KCksZS4kbmV4dEFycm93LnNob3coKSksZS5vcHRpb25zLmRvdHM9PT0hMCYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmUuJGRvdHMuc2hvdygpfSx0LnByb3RvdHlwZS5rZXlIYW5kbGVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZS50YXJnZXQudGFnTmFtZS5tYXRjaChcIlRFWFRBUkVBfElOUFVUfFNFTEVDVFwiKXx8KDM3PT09ZS5rZXlDb2RlJiZ0Lm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwP3QuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6dC5vcHRpb25zLnJ0bD09PSEwP1wibmV4dFwiOlwicHJldmlvdXNcIn19KTozOT09PWUua2V5Q29kZSYmdC5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmdC5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTp0Lm9wdGlvbnMucnRsPT09ITA/XCJwcmV2aW91c1wiOlwibmV4dFwifX0pKX0sdC5wcm90b3R5cGUubGF6eUxvYWQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2UoXCJpbWdbZGF0YS1sYXp5XVwiLHQpLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpLGk9ZSh0aGlzKS5hdHRyKFwiZGF0YS1sYXp5XCIpLG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtuLm9ubG9hZD1mdW5jdGlvbigpe3QuYW5pbWF0ZSh7b3BhY2l0eTowfSwxMDAsZnVuY3Rpb24oKXt0LmF0dHIoXCJzcmNcIixpKS5hbmltYXRlKHtvcGFjaXR5OjF9LDIwMCxmdW5jdGlvbigpe3QucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9KSxyLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbcix0LGldKX0pfSxuLm9uZXJyb3I9ZnVuY3Rpb24oKXt0LnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksci4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW3IsdCxpXSl9LG4uc3JjPWl9KX12YXIgaSxuLG8scyxyPXRoaXM7ci5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9yLm9wdGlvbnMuaW5maW5pdGU9PT0hMD8obz1yLmN1cnJlbnRTbGlkZSsoci5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpLHM9bytyLm9wdGlvbnMuc2xpZGVzVG9TaG93KzIpOihvPU1hdGgubWF4KDAsci5jdXJyZW50U2xpZGUtKHIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSkscz0yKyhyLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSkrci5jdXJyZW50U2xpZGUpOihvPXIub3B0aW9ucy5pbmZpbml0ZT9yLm9wdGlvbnMuc2xpZGVzVG9TaG93K3IuY3VycmVudFNsaWRlOnIuY3VycmVudFNsaWRlLHM9TWF0aC5jZWlsKG8rci5vcHRpb25zLnNsaWRlc1RvU2hvdyksci5vcHRpb25zLmZhZGU9PT0hMCYmKG8+MCYmby0tLHM8PXIuc2xpZGVDb3VudCYmcysrKSksaT1yLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5zbGljZShvLHMpLHQoaSksci5zbGlkZUNvdW50PD1yLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhuPXIuJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLHQobikpOnIuY3VycmVudFNsaWRlPj1yLnNsaWRlQ291bnQtci5vcHRpb25zLnNsaWRlc1RvU2hvdz8obj1yLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoMCxyLm9wdGlvbnMuc2xpZGVzVG9TaG93KSx0KG4pKTowPT09ci5jdXJyZW50U2xpZGUmJihuPXIuJHNsaWRlci5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5zbGljZShyLm9wdGlvbnMuc2xpZGVzVG9TaG93Ki0xKSx0KG4pKX0sdC5wcm90b3R5cGUubG9hZFNsaWRlcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5zZXRQb3NpdGlvbigpLGUuJHNsaWRlVHJhY2suY3NzKHtvcGFjaXR5OjF9KSxlLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGUuaW5pdFVJKCksXCJwcm9ncmVzc2l2ZVwiPT09ZS5vcHRpb25zLmxhenlMb2FkJiZlLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sdC5wcm90b3R5cGUubmV4dD10LnByb3RvdHlwZS5zbGlja05leHQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LHQucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmNoZWNrUmVzcG9uc2l2ZSgpLGUuc2V0UG9zaXRpb24oKX0sdC5wcm90b3R5cGUucGF1c2U9dC5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5hdXRvUGxheUNsZWFyKCksZS5wYXVzZWQ9ITB9LHQucHJvdG90eXBlLnBsYXk9dC5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmF1dG9QbGF5KCksZS5vcHRpb25zLmF1dG9wbGF5PSEwLGUucGF1c2VkPSExLGUuZm9jdXNzZWQ9ITEsZS5pbnRlcnJ1cHRlZD0hMX0sdC5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC51bnNsaWNrZWR8fCh0LiRzbGlkZXIudHJpZ2dlcihcImFmdGVyQ2hhbmdlXCIsW3QsZV0pLHQuYW5pbWF0aW5nPSExLHQuc2V0UG9zaXRpb24oKSx0LnN3aXBlTGVmdD1udWxsLHQub3B0aW9ucy5hdXRvcGxheSYmdC5hdXRvUGxheSgpLHQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJnQuaW5pdEFEQSgpKX0sdC5wcm90b3R5cGUucHJldj10LnByb3RvdHlwZS5zbGlja1ByZXY9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJwcmV2aW91c1wifX0pfSx0LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCl9LHQucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQ9ZnVuY3Rpb24odCl7dD10fHwxO3ZhciBpLG4sbyxzPXRoaXMscj1lKFwiaW1nW2RhdGEtbGF6eV1cIixzLiRzbGlkZXIpO3IubGVuZ3RoPyhpPXIuZmlyc3QoKSxuPWkuYXR0cihcImRhdGEtbGF6eVwiKSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksby5vbmxvYWQ9ZnVuY3Rpb24oKXtpLmF0dHIoXCJzcmNcIixuKS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxzLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmcy5zZXRQb3NpdGlvbigpLHMuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRlZFwiLFtzLGksbl0pLHMucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpfSxvLm9uZXJyb3I9ZnVuY3Rpb24oKXt0PDM/c2V0VGltZW91dChmdW5jdGlvbigpe3MucHJvZ3Jlc3NpdmVMYXp5TG9hZCh0KzEpfSw1MDApOihpLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIikscy4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW3MsaSxuXSkscy5wcm9ncmVzc2l2ZUxhenlMb2FkKCkpfSxvLnNyYz1uKTpzLiRzbGlkZXIudHJpZ2dlcihcImFsbEltYWdlc0xvYWRlZFwiLFtzXSl9LHQucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24odCl7dmFyIGksbixvPXRoaXM7bj1vLnNsaWRlQ291bnQtby5vcHRpb25zLnNsaWRlc1RvU2hvdywhby5vcHRpb25zLmluZmluaXRlJiZvLmN1cnJlbnRTbGlkZT5uJiYoby5jdXJyZW50U2xpZGU9biksby5zbGlkZUNvdW50PD1vLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoby5jdXJyZW50U2xpZGU9MCksaT1vLmN1cnJlbnRTbGlkZSxvLmRlc3Ryb3koITApLGUuZXh0ZW5kKG8sby5pbml0aWFscyx7Y3VycmVudFNsaWRlOml9KSxvLmluaXQoKSx0fHxvLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDppfX0sITEpfSx0LnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzPWZ1bmN0aW9uKCl7dmFyIHQsaSxuLG89dGhpcyxzPW8ub3B0aW9ucy5yZXNwb25zaXZlfHxudWxsO2lmKFwiYXJyYXlcIj09PWUudHlwZShzKSYmcy5sZW5ndGgpe28ucmVzcG9uZFRvPW8ub3B0aW9ucy5yZXNwb25kVG98fFwid2luZG93XCI7Zm9yKHQgaW4gcylpZihuPW8uYnJlYWtwb2ludHMubGVuZ3RoLTEsaT1zW3RdLmJyZWFrcG9pbnQscy5oYXNPd25Qcm9wZXJ0eSh0KSl7Zm9yKDtuPj0wOylvLmJyZWFrcG9pbnRzW25dJiZvLmJyZWFrcG9pbnRzW25dPT09aSYmby5icmVha3BvaW50cy5zcGxpY2UobiwxKSxuLS07by5icmVha3BvaW50cy5wdXNoKGkpLG8uYnJlYWtwb2ludFNldHRpbmdzW2ldPXNbdF0uc2V0dGluZ3N9by5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8ub3B0aW9ucy5tb2JpbGVGaXJzdD9lLXQ6dC1lfSl9fSx0LnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3QuJHNsaWRlcz10LiRzbGlkZVRyYWNrLmNoaWxkcmVuKHQub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSx0LnNsaWRlQ291bnQ9dC4kc2xpZGVzLmxlbmd0aCx0LmN1cnJlbnRTbGlkZT49dC5zbGlkZUNvdW50JiYwIT09dC5jdXJyZW50U2xpZGUmJih0LmN1cnJlbnRTbGlkZT10LmN1cnJlbnRTbGlkZS10Lm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLHQuc2xpZGVDb3VudDw9dC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHQuY3VycmVudFNsaWRlPTApLHQucmVnaXN0ZXJCcmVha3BvaW50cygpLHQuc2V0UHJvcHMoKSx0LnNldHVwSW5maW5pdGUoKSx0LmJ1aWxkQXJyb3dzKCksdC51cGRhdGVBcnJvd3MoKSx0LmluaXRBcnJvd0V2ZW50cygpLHQuYnVpbGREb3RzKCksdC51cGRhdGVEb3RzKCksdC5pbml0RG90RXZlbnRzKCksdC5jbGVhblVwU2xpZGVFdmVudHMoKSx0LmluaXRTbGlkZUV2ZW50cygpLHQuY2hlY2tSZXNwb25zaXZlKCExLCEwKSx0Lm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZlKHQuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLHQuc2VsZWN0SGFuZGxlciksdC5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIHQuY3VycmVudFNsaWRlP3QuY3VycmVudFNsaWRlOjApLHQuc2V0UG9zaXRpb24oKSx0LmZvY3VzSGFuZGxlcigpLHQucGF1c2VkPSF0Lm9wdGlvbnMuYXV0b3BsYXksdC5hdXRvUGxheSgpLHQuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW3RdKX0sdC5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztlKHdpbmRvdykud2lkdGgoKSE9PXQud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQodC53aW5kb3dEZWxheSksdC53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3Qud2luZG93V2lkdGg9ZSh3aW5kb3cpLndpZHRoKCksdC5jaGVja1Jlc3BvbnNpdmUoKSx0LnVuc2xpY2tlZHx8dC5zZXRQb3NpdGlvbigpfSw1MCkpfSx0LnByb3RvdHlwZS5yZW1vdmVTbGlkZT10LnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihlLHQsaSl7dmFyIG49dGhpcztyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/KHQ9ZSxlPXQ9PT0hMD8wOm4uc2xpZGVDb3VudC0xKTplPXQ9PT0hMD8tLWU6ZSwhKG4uc2xpZGVDb3VudDwxfHxlPDB8fGU+bi5zbGlkZUNvdW50LTEpJiYobi51bmxvYWQoKSxpPT09ITA/bi4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpOm4uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShlKS5yZW1vdmUoKSxuLiRzbGlkZXM9bi4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLG4uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxuLiRzbGlkZVRyYWNrLmFwcGVuZChuLiRzbGlkZXMpLG4uJHNsaWRlc0NhY2hlPW4uJHNsaWRlcyx2b2lkIG4ucmVpbml0KCkpfSx0LnByb3RvdHlwZS5zZXRDU1M9ZnVuY3Rpb24oZSl7dmFyIHQsaSxuPXRoaXMsbz17fTtuLm9wdGlvbnMucnRsPT09ITAmJihlPS1lKSx0PVwibGVmdFwiPT1uLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoZSkrXCJweFwiOlwiMHB4XCIsaT1cInRvcFwiPT1uLnBvc2l0aW9uUHJvcD9NYXRoLmNlaWwoZSkrXCJweFwiOlwiMHB4XCIsb1tuLnBvc2l0aW9uUHJvcF09ZSxuLnRyYW5zZm9ybXNFbmFibGVkPT09ITE/bi4kc2xpZGVUcmFjay5jc3Mobyk6KG89e30sbi5jc3NUcmFuc2l0aW9ucz09PSExPyhvW24uYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK3QrXCIsIFwiK2krXCIpXCIsbi4kc2xpZGVUcmFjay5jc3MobykpOihvW24uYW5pbVR5cGVdPVwidHJhbnNsYXRlM2QoXCIrdCtcIiwgXCIraStcIiwgMHB4KVwiLG4uJHNsaWRlVHJhY2suY3NzKG8pKSl9LHQucHJvdG90eXBlLnNldERpbWVuc2lvbnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy52ZXJ0aWNhbD09PSExP2Uub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJmUuJGxpc3QuY3NzKHtwYWRkaW5nOlwiMHB4IFwiK2Uub3B0aW9ucy5jZW50ZXJQYWRkaW5nfSk6KGUuJGxpc3QuaGVpZ2h0KGUuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSplLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxlLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiZlLiRsaXN0LmNzcyh7cGFkZGluZzplLm9wdGlvbnMuY2VudGVyUGFkZGluZytcIiAwcHhcIn0pKSxlLmxpc3RXaWR0aD1lLiRsaXN0LndpZHRoKCksZS5saXN0SGVpZ2h0PWUuJGxpc3QuaGVpZ2h0KCksZS5vcHRpb25zLnZlcnRpY2FsPT09ITEmJmUub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITE/KGUuc2xpZGVXaWR0aD1NYXRoLmNlaWwoZS5saXN0V2lkdGgvZS5vcHRpb25zLnNsaWRlc1RvU2hvdyksZS4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoZS5zbGlkZVdpZHRoKmUuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpOmUub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITA/ZS4kc2xpZGVUcmFjay53aWR0aCg1ZTMqZS5zbGlkZUNvdW50KTooZS5zbGlkZVdpZHRoPU1hdGguY2VpbChlLmxpc3RXaWR0aCksZS4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKGUuJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KCEwKSplLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTt2YXIgdD1lLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKCEwKS1lLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO2Uub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITEmJmUuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikud2lkdGgoZS5zbGlkZVdpZHRoLXQpfSx0LnByb3RvdHlwZS5zZXRGYWRlPWZ1bmN0aW9uKCl7dmFyIHQsaT10aGlzO2kuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKG4sbyl7dD1pLnNsaWRlV2lkdGgqbiotMSxpLm9wdGlvbnMucnRsPT09ITA/ZShvKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixyaWdodDp0LHRvcDowLHpJbmRleDppLm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSk6ZShvKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixsZWZ0OnQsdG9wOjAsekluZGV4Omkub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KX0pLGkuJHNsaWRlcy5lcShpLmN1cnJlbnRTbGlkZSkuY3NzKHt6SW5kZXg6aS5vcHRpb25zLnpJbmRleC0xLG9wYWNpdHk6MX0pfSx0LnByb3RvdHlwZS5zZXRIZWlnaHQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKDE9PT1lLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZlLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmZS5vcHRpb25zLnZlcnRpY2FsPT09ITEpe3ZhciB0PWUuJHNsaWRlcy5lcShlLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQoITApO2UuJGxpc3QuY3NzKFwiaGVpZ2h0XCIsdCl9fSx0LnByb3RvdHlwZS5zZXRPcHRpb249dC5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb249ZnVuY3Rpb24oKXt2YXIgdCxpLG4sbyxzLHI9dGhpcyxhPSExO2lmKFwib2JqZWN0XCI9PT1lLnR5cGUoYXJndW1lbnRzWzBdKT8obj1hcmd1bWVudHNbMF0sYT1hcmd1bWVudHNbMV0scz1cIm11bHRpcGxlXCIpOlwic3RyaW5nXCI9PT1lLnR5cGUoYXJndW1lbnRzWzBdKSYmKG49YXJndW1lbnRzWzBdLG89YXJndW1lbnRzWzFdLGE9YXJndW1lbnRzWzJdLFwicmVzcG9uc2l2ZVwiPT09YXJndW1lbnRzWzBdJiZcImFycmF5XCI9PT1lLnR5cGUoYXJndW1lbnRzWzFdKT9zPVwicmVzcG9uc2l2ZVwiOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhcmd1bWVudHNbMV0mJihzPVwic2luZ2xlXCIpKSxcInNpbmdsZVwiPT09cylyLm9wdGlvbnNbbl09bztlbHNlIGlmKFwibXVsdGlwbGVcIj09PXMpZS5lYWNoKG4sZnVuY3Rpb24oZSx0KXtyLm9wdGlvbnNbZV09dH0pO2Vsc2UgaWYoXCJyZXNwb25zaXZlXCI9PT1zKWZvcihpIGluIG8paWYoXCJhcnJheVwiIT09ZS50eXBlKHIub3B0aW9ucy5yZXNwb25zaXZlKSlyLm9wdGlvbnMucmVzcG9uc2l2ZT1bb1tpXV07ZWxzZXtmb3IodD1yLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTt0Pj0wOylyLm9wdGlvbnMucmVzcG9uc2l2ZVt0XS5icmVha3BvaW50PT09b1tpXS5icmVha3BvaW50JiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UodCwxKSx0LS07ci5vcHRpb25zLnJlc3BvbnNpdmUucHVzaChvW2ldKX1hJiYoci51bmxvYWQoKSxyLnJlaW5pdCgpKX0sdC5wcm90b3R5cGUuc2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uuc2V0RGltZW5zaW9ucygpLGUuc2V0SGVpZ2h0KCksZS5vcHRpb25zLmZhZGU9PT0hMT9lLnNldENTUyhlLmdldExlZnQoZS5jdXJyZW50U2xpZGUpKTplLnNldEZhZGUoKSxlLiRzbGlkZXIudHJpZ2dlcihcInNldFBvc2l0aW9uXCIsW2VdKX0sdC5wcm90b3R5cGUuc2V0UHJvcHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZG9jdW1lbnQuYm9keS5zdHlsZTtlLnBvc2l0aW9uUHJvcD1lLm9wdGlvbnMudmVydGljYWw9PT0hMD9cInRvcFwiOlwibGVmdFwiLFwidG9wXCI9PT1lLnBvc2l0aW9uUHJvcD9lLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKTplLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKSx2b2lkIDA9PT10LldlYmtpdFRyYW5zaXRpb24mJnZvaWQgMD09PXQuTW96VHJhbnNpdGlvbiYmdm9pZCAwPT09dC5tc1RyYW5zaXRpb258fGUub3B0aW9ucy51c2VDU1M9PT0hMCYmKGUuY3NzVHJhbnNpdGlvbnM9ITApLGUub3B0aW9ucy5mYWRlJiYoXCJudW1iZXJcIj09dHlwZW9mIGUub3B0aW9ucy56SW5kZXg/ZS5vcHRpb25zLnpJbmRleDwzJiYoZS5vcHRpb25zLnpJbmRleD0zKTplLm9wdGlvbnMuekluZGV4PWUuZGVmYXVsdHMuekluZGV4KSx2b2lkIDAhPT10Lk9UcmFuc2Zvcm0mJihlLmFuaW1UeXBlPVwiT1RyYW5zZm9ybVwiLGUudHJhbnNmb3JtVHlwZT1cIi1vLXRyYW5zZm9ybVwiLGUudHJhbnNpdGlvblR5cGU9XCJPVHJhbnNpdGlvblwiLHZvaWQgMD09PXQucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09dC53ZWJraXRQZXJzcGVjdGl2ZSYmKGUuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT10Lk1velRyYW5zZm9ybSYmKGUuYW5pbVR5cGU9XCJNb3pUcmFuc2Zvcm1cIixlLnRyYW5zZm9ybVR5cGU9XCItbW96LXRyYW5zZm9ybVwiLGUudHJhbnNpdGlvblR5cGU9XCJNb3pUcmFuc2l0aW9uXCIsdm9pZCAwPT09dC5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT10Lk1velBlcnNwZWN0aXZlJiYoZS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PXQud2Via2l0VHJhbnNmb3JtJiYoZS5hbmltVHlwZT1cIndlYmtpdFRyYW5zZm9ybVwiLGUudHJhbnNmb3JtVHlwZT1cIi13ZWJraXQtdHJhbnNmb3JtXCIsZS50cmFuc2l0aW9uVHlwZT1cIndlYmtpdFRyYW5zaXRpb25cIix2b2lkIDA9PT10LnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PXQud2Via2l0UGVyc3BlY3RpdmUmJihlLmFuaW1UeXBlPSExKSksdm9pZCAwIT09dC5tc1RyYW5zZm9ybSYmKGUuYW5pbVR5cGU9XCJtc1RyYW5zZm9ybVwiLGUudHJhbnNmb3JtVHlwZT1cIi1tcy10cmFuc2Zvcm1cIixlLnRyYW5zaXRpb25UeXBlPVwibXNUcmFuc2l0aW9uXCIsdm9pZCAwPT09dC5tc1RyYW5zZm9ybSYmKGUuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT10LnRyYW5zZm9ybSYmZS5hbmltVHlwZSE9PSExJiYoZS5hbmltVHlwZT1cInRyYW5zZm9ybVwiLGUudHJhbnNmb3JtVHlwZT1cInRyYW5zZm9ybVwiLGUudHJhbnNpdGlvblR5cGU9XCJ0cmFuc2l0aW9uXCIpLGUudHJhbnNmb3Jtc0VuYWJsZWQ9ZS5vcHRpb25zLnVzZVRyYW5zZm9ybSYmbnVsbCE9PWUuYW5pbVR5cGUmJmUuYW5pbVR5cGUhPT0hMX0sdC5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzPWZ1bmN0aW9uKGUpe3ZhciB0LGksbixvLHM9dGhpcztpPXMuJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLnJlbW92ZUNsYXNzKFwic2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50XCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxzLiRzbGlkZXMuZXEoZSkuYWRkQ2xhc3MoXCJzbGljay1jdXJyZW50XCIpLHMub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/KHQ9TWF0aC5mbG9vcihzLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLHMub3B0aW9ucy5pbmZpbml0ZT09PSEwJiYoZT49dCYmZTw9cy5zbGlkZUNvdW50LTEtdD9zLiRzbGlkZXMuc2xpY2UoZS10LGUrdCsxKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihuPXMub3B0aW9ucy5zbGlkZXNUb1Nob3crZSxpLnNsaWNlKG4tdCsxLG4rdCsyKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSwwPT09ZT9pLmVxKGkubGVuZ3RoLTEtcy5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIik6ZT09PXMuc2xpZGVDb3VudC0xJiZpLmVxKHMub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpKSxzLiRzbGlkZXMuZXEoZSkuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpOmU+PTAmJmU8PXMuc2xpZGVDb3VudC1zLm9wdGlvbnMuc2xpZGVzVG9TaG93P3MuJHNsaWRlcy5zbGljZShlLGUrcy5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTppLmxlbmd0aDw9cy5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KG89cy5zbGlkZUNvdW50JXMub3B0aW9ucy5zbGlkZXNUb1Nob3csbj1zLm9wdGlvbnMuaW5maW5pdGU9PT0hMD9zLm9wdGlvbnMuc2xpZGVzVG9TaG93K2U6ZSxzLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1zLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJnMuc2xpZGVDb3VudC1lPHMub3B0aW9ucy5zbGlkZXNUb1Nob3c/aS5zbGljZShuLShzLm9wdGlvbnMuc2xpZGVzVG9TaG93LW8pLG4rbykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTppLnNsaWNlKG4sbitzLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSxcIm9uZGVtYW5kXCI9PT1zLm9wdGlvbnMubGF6eUxvYWQmJnMubGF6eUxvYWQoKX0sdC5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZT1mdW5jdGlvbigpe3ZhciB0LGksbixvPXRoaXM7aWYoby5vcHRpb25zLmZhZGU9PT0hMCYmKG8ub3B0aW9ucy5jZW50ZXJNb2RlPSExKSxvLm9wdGlvbnMuaW5maW5pdGU9PT0hMCYmby5vcHRpb25zLmZhZGU9PT0hMSYmKGk9bnVsbCxvLnNsaWRlQ291bnQ+by5vcHRpb25zLnNsaWRlc1RvU2hvdykpe2ZvcihuPW8ub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/by5vcHRpb25zLnNsaWRlc1RvU2hvdysxOm8ub3B0aW9ucy5zbGlkZXNUb1Nob3csdD1vLnNsaWRlQ291bnQ7dD5vLnNsaWRlQ291bnQtbjt0LT0xKWk9dC0xLGUoby4kc2xpZGVzW2ldKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixpLW8uc2xpZGVDb3VudCkucHJlcGVuZFRvKG8uJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO2Zvcih0PTA7dDxuO3QrPTEpaT10LGUoby4kc2xpZGVzW2ldKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixpK28uc2xpZGVDb3VudCkuYXBwZW5kVG8oby4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7by4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7ZSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sdC5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7ZXx8dC5hdXRvUGxheSgpLHQuaW50ZXJydXB0ZWQ9ZX0sdC5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbih0KXt2YXIgaT10aGlzLG49ZSh0LnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/ZSh0LnRhcmdldCk6ZSh0LnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxvPXBhcnNlSW50KG4uYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3JldHVybiBvfHwobz0wKSxpLnNsaWRlQ291bnQ8PWkub3B0aW9ucy5zbGlkZXNUb1Nob3c/KGkuc2V0U2xpZGVDbGFzc2VzKG8pLHZvaWQgaS5hc05hdkZvcihvKSk6dm9pZCBpLnNsaWRlSGFuZGxlcihvKX0sdC5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGUsdCxpKXt2YXIgbixvLHMscixhLGw9bnVsbCxkPXRoaXM7aWYodD10fHwhMSwoZC5hbmltYXRpbmchPT0hMHx8ZC5vcHRpb25zLndhaXRGb3JBbmltYXRlIT09ITApJiYhKGQub3B0aW9ucy5mYWRlPT09ITAmJmQuY3VycmVudFNsaWRlPT09ZXx8ZC5zbGlkZUNvdW50PD1kLm9wdGlvbnMuc2xpZGVzVG9TaG93KSlyZXR1cm4gdD09PSExJiZkLmFzTmF2Rm9yKGUpLG49ZSxsPWQuZ2V0TGVmdChuKSxyPWQuZ2V0TGVmdChkLmN1cnJlbnRTbGlkZSksZC5jdXJyZW50TGVmdD1udWxsPT09ZC5zd2lwZUxlZnQ/cjpkLnN3aXBlTGVmdCxkLm9wdGlvbnMuaW5maW5pdGU9PT0hMSYmZC5vcHRpb25zLmNlbnRlck1vZGU9PT0hMSYmKGU8MHx8ZT5kLmdldERvdENvdW50KCkqZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKT92b2lkKGQub3B0aW9ucy5mYWRlPT09ITEmJihuPWQuY3VycmVudFNsaWRlLGkhPT0hMD9kLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7ZC5wb3N0U2xpZGUobil9KTpkLnBvc3RTbGlkZShuKSkpOmQub3B0aW9ucy5pbmZpbml0ZT09PSExJiZkLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoZTwwfHxlPmQuc2xpZGVDb3VudC1kLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpP3ZvaWQoZC5vcHRpb25zLmZhZGU9PT0hMSYmKG49ZC5jdXJyZW50U2xpZGUsaSE9PSEwP2QuYW5pbWF0ZVNsaWRlKHIsZnVuY3Rpb24oKXtkLnBvc3RTbGlkZShuKX0pOmQucG9zdFNsaWRlKG4pKSk6KGQub3B0aW9ucy5hdXRvcGxheSYmY2xlYXJJbnRlcnZhbChkLmF1dG9QbGF5VGltZXIpLG89bjwwP2Quc2xpZGVDb3VudCVkLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wP2Quc2xpZGVDb3VudC1kLnNsaWRlQ291bnQlZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmQuc2xpZGVDb3VudCtuOm4+PWQuc2xpZGVDb3VudD9kLnNsaWRlQ291bnQlZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MD8wOm4tZC5zbGlkZUNvdW50Om4sZC5hbmltYXRpbmc9ITAsZC4kc2xpZGVyLnRyaWdnZXIoXCJiZWZvcmVDaGFuZ2VcIixbZCxkLmN1cnJlbnRTbGlkZSxvXSkscz1kLmN1cnJlbnRTbGlkZSxkLmN1cnJlbnRTbGlkZT1vLGQuc2V0U2xpZGVDbGFzc2VzKGQuY3VycmVudFNsaWRlKSxkLm9wdGlvbnMuYXNOYXZGb3ImJihhPWQuZ2V0TmF2VGFyZ2V0KCksYT1hLnNsaWNrKFwiZ2V0U2xpY2tcIiksYS5zbGlkZUNvdW50PD1hLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZhLnNldFNsaWRlQ2xhc3NlcyhkLmN1cnJlbnRTbGlkZSkpLGQudXBkYXRlRG90cygpLGQudXBkYXRlQXJyb3dzKCksZC5vcHRpb25zLmZhZGU9PT0hMD8oaSE9PSEwPyhkLmZhZGVTbGlkZU91dChzKSxkLmZhZGVTbGlkZShvLGZ1bmN0aW9uKCl7ZC5wb3N0U2xpZGUobyl9KSk6ZC5wb3N0U2xpZGUobyksdm9pZCBkLmFuaW1hdGVIZWlnaHQoKSk6dm9pZChpIT09ITA/ZC5hbmltYXRlU2xpZGUobCxmdW5jdGlvbigpe2QucG9zdFNsaWRlKG8pfSk6ZC5wb3N0U2xpZGUobykpKX0sdC5wcm90b3R5cGUuc3RhcnRMb2FkPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLm9wdGlvbnMuYXJyb3dzPT09ITAmJmUuc2xpZGVDb3VudD5lLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoZS4kcHJldkFycm93LmhpZGUoKSxlLiRuZXh0QXJyb3cuaGlkZSgpKSxlLm9wdGlvbnMuZG90cz09PSEwJiZlLnNsaWRlQ291bnQ+ZS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmZS4kZG90cy5oaWRlKCksZS4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stbG9hZGluZ1wiKX0sdC5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb249ZnVuY3Rpb24oKXt2YXIgZSx0LGksbixvPXRoaXM7cmV0dXJuIGU9by50b3VjaE9iamVjdC5zdGFydFgtby50b3VjaE9iamVjdC5jdXJYLHQ9by50b3VjaE9iamVjdC5zdGFydFktby50b3VjaE9iamVjdC5jdXJZLGk9TWF0aC5hdGFuMih0LGUpLG49TWF0aC5yb3VuZCgxODAqaS9NYXRoLlBJKSxuPDAmJihuPTM2MC1NYXRoLmFicyhuKSksbjw9NDUmJm4+PTA/by5vcHRpb25zLnJ0bD09PSExP1wibGVmdFwiOlwicmlnaHRcIjpuPD0zNjAmJm4+PTMxNT9vLm9wdGlvbnMucnRsPT09ITE/XCJsZWZ0XCI6XCJyaWdodFwiOm4+PTEzNSYmbjw9MjI1P28ub3B0aW9ucy5ydGw9PT0hMT9cInJpZ2h0XCI6XCJsZWZ0XCI6by5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwP24+PTM1JiZuPD0xMzU/XCJkb3duXCI6XCJ1cFwiOlwidmVydGljYWxcIn0sdC5wcm90b3R5cGUuc3dpcGVFbmQ9ZnVuY3Rpb24oZSl7dmFyIHQsaSxuPXRoaXM7aWYobi5kcmFnZ2luZz0hMSxuLmludGVycnVwdGVkPSExLG4uc2hvdWxkQ2xpY2s9IShuLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjEwKSx2b2lkIDA9PT1uLnRvdWNoT2JqZWN0LmN1clgpcmV0dXJuITE7aWYobi50b3VjaE9iamVjdC5lZGdlSGl0PT09ITAmJm4uJHNsaWRlci50cmlnZ2VyKFwiZWRnZVwiLFtuLG4uc3dpcGVEaXJlY3Rpb24oKV0pLG4udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+PW4udG91Y2hPYmplY3QubWluU3dpcGUpe3N3aXRjaChpPW4uc3dpcGVEaXJlY3Rpb24oKSl7Y2FzZVwibGVmdFwiOmNhc2VcImRvd25cIjp0PW4ub3B0aW9ucy5zd2lwZVRvU2xpZGU/bi5jaGVja05hdmlnYWJsZShuLmN1cnJlbnRTbGlkZStuLmdldFNsaWRlQ291bnQoKSk6bi5jdXJyZW50U2xpZGUrbi5nZXRTbGlkZUNvdW50KCksbi5jdXJyZW50RGlyZWN0aW9uPTA7YnJlYWs7Y2FzZVwicmlnaHRcIjpjYXNlXCJ1cFwiOnQ9bi5vcHRpb25zLnN3aXBlVG9TbGlkZT9uLmNoZWNrTmF2aWdhYmxlKG4uY3VycmVudFNsaWRlLW4uZ2V0U2xpZGVDb3VudCgpKTpuLmN1cnJlbnRTbGlkZS1uLmdldFNsaWRlQ291bnQoKSxuLmN1cnJlbnREaXJlY3Rpb249MX1cInZlcnRpY2FsXCIhPWkmJihuLnNsaWRlSGFuZGxlcih0KSxuLnRvdWNoT2JqZWN0PXt9LG4uJHNsaWRlci50cmlnZ2VyKFwic3dpcGVcIixbbixpXSkpfWVsc2Ugbi50b3VjaE9iamVjdC5zdGFydFghPT1uLnRvdWNoT2JqZWN0LmN1clgmJihuLnNsaWRlSGFuZGxlcihuLmN1cnJlbnRTbGlkZSksbi50b3VjaE9iamVjdD17fSl9LHQucHJvdG90eXBlLnN3aXBlSGFuZGxlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCEodC5vcHRpb25zLnN3aXBlPT09ITF8fFwib250b3VjaGVuZFwiaW4gZG9jdW1lbnQmJnQub3B0aW9ucy5zd2lwZT09PSExfHx0Lm9wdGlvbnMuZHJhZ2dhYmxlPT09ITEmJmUudHlwZS5pbmRleE9mKFwibW91c2VcIikhPT0tMSkpc3dpdGNoKHQudG91Y2hPYmplY3QuZmluZ2VyQ291bnQ9ZS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1lLm9yaWdpbmFsRXZlbnQudG91Y2hlcz9lLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGg6MSx0LnRvdWNoT2JqZWN0Lm1pblN3aXBlPXQubGlzdFdpZHRoL3Qub3B0aW9ucy50b3VjaFRocmVzaG9sZCx0Lm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJih0LnRvdWNoT2JqZWN0Lm1pblN3aXBlPXQubGlzdEhlaWdodC90Lm9wdGlvbnMudG91Y2hUaHJlc2hvbGQpLGUuZGF0YS5hY3Rpb24pe2Nhc2VcInN0YXJ0XCI6dC5zd2lwZVN0YXJ0KGUpO2JyZWFrO2Nhc2VcIm1vdmVcIjp0LnN3aXBlTW92ZShlKTticmVhaztjYXNlXCJlbmRcIjp0LnN3aXBlRW5kKGUpfX0sdC5wcm90b3R5cGUuc3dpcGVNb3ZlPWZ1bmN0aW9uKGUpe3ZhciB0LGksbixvLHMscj10aGlzO3JldHVybiBzPXZvaWQgMCE9PWUub3JpZ2luYWxFdmVudD9lLm9yaWdpbmFsRXZlbnQudG91Y2hlczpudWxsLCEoIXIuZHJhZ2dpbmd8fHMmJjEhPT1zLmxlbmd0aCkmJih0PXIuZ2V0TGVmdChyLmN1cnJlbnRTbGlkZSksci50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PXM/c1swXS5wYWdlWDplLmNsaWVudFgsci50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PXM/c1swXS5wYWdlWTplLmNsaWVudFksci50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhyLnRvdWNoT2JqZWN0LmN1clgtci50b3VjaE9iamVjdC5zdGFydFgsMikpKSxyLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihyLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHIudG91Y2hPYmplY3QuY3VyWS1yLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpKSxpPXIuc3dpcGVEaXJlY3Rpb24oKSxcInZlcnRpY2FsXCIhPT1pPyh2b2lkIDAhPT1lLm9yaWdpbmFsRXZlbnQmJnIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmZS5wcmV2ZW50RGVmYXVsdCgpLG89KHIub3B0aW9ucy5ydGw9PT0hMT8xOi0xKSooci50b3VjaE9iamVjdC5jdXJYPnIudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLHIub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMCYmKG89ci50b3VjaE9iamVjdC5jdXJZPnIudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLG49ci50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxyLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsci5vcHRpb25zLmluZmluaXRlPT09ITEmJigwPT09ci5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PWl8fHIuY3VycmVudFNsaWRlPj1yLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09aSkmJihuPXIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqci5vcHRpb25zLmVkZ2VGcmljdGlvbixyLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLHIub3B0aW9ucy52ZXJ0aWNhbD09PSExP3Iuc3dpcGVMZWZ0PXQrbipvOnIuc3dpcGVMZWZ0PXQrbiooci4kbGlzdC5oZWlnaHQoKS9yLmxpc3RXaWR0aCkqbyxyLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihyLnN3aXBlTGVmdD10K24qbyksci5vcHRpb25zLmZhZGUhPT0hMCYmci5vcHRpb25zLnRvdWNoTW92ZSE9PSExJiYoci5hbmltYXRpbmc9PT0hMD8oci5zd2lwZUxlZnQ9bnVsbCwhMSk6dm9pZCByLnNldENTUyhyLnN3aXBlTGVmdCkpKTp2b2lkIDApfSx0LnByb3RvdHlwZS5zd2lwZVN0YXJ0PWZ1bmN0aW9uKGUpe3ZhciB0LGk9dGhpcztyZXR1cm4gaS5pbnRlcnJ1cHRlZD0hMCwxIT09aS50b3VjaE9iamVjdC5maW5nZXJDb3VudHx8aS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhpLnRvdWNoT2JqZWN0PXt9LCExKToodm9pZCAwIT09ZS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1lLm9yaWdpbmFsRXZlbnQudG91Y2hlcyYmKHQ9ZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0pLGkudG91Y2hPYmplY3Quc3RhcnRYPWkudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT10P3QucGFnZVg6ZS5jbGllbnRYLGkudG91Y2hPYmplY3Quc3RhcnRZPWkudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT10P3QucGFnZVk6ZS5jbGllbnRZLHZvaWQoaS5kcmFnZ2luZz0hMCkpfSx0LnByb3RvdHlwZS51bmZpbHRlclNsaWRlcz10LnByb3RvdHlwZS5zbGlja1VuZmlsdGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztudWxsIT09ZS4kc2xpZGVzQ2FjaGUmJihlLnVubG9hZCgpLGUuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxlLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhlLiRzbGlkZVRyYWNrKSxlLnJlaW5pdCgpKX0sdC5wcm90b3R5cGUudW5sb2FkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztlKFwiLnNsaWNrLWNsb25lZFwiLHQuJHNsaWRlcikucmVtb3ZlKCksdC4kZG90cyYmdC4kZG90cy5yZW1vdmUoKSx0LiRwcmV2QXJyb3cmJnQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMucHJldkFycm93KSYmdC4kcHJldkFycm93LnJlbW92ZSgpLHQuJG5leHRBcnJvdyYmdC5odG1sRXhwci50ZXN0KHQub3B0aW9ucy5uZXh0QXJyb3cpJiZ0LiRuZXh0QXJyb3cucmVtb3ZlKCksdC4kc2xpZGVzLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIikuY3NzKFwid2lkdGhcIixcIlwiKX0sdC5wcm90b3R5cGUudW5zbGljaz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuJHNsaWRlci50cmlnZ2VyKFwidW5zbGlja1wiLFt0LGVdKSx0LmRlc3Ryb3koKX0sdC5wcm90b3R5cGUudXBkYXRlQXJyb3dzPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzO2U9TWF0aC5mbG9vcih0Lm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLHQub3B0aW9ucy5hcnJvd3M9PT0hMCYmdC5zbGlkZUNvdW50PnQub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiF0Lm9wdGlvbnMuaW5maW5pdGUmJih0LiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksdC4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT10LmN1cnJlbnRTbGlkZT8odC4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksdC4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTp0LmN1cnJlbnRTbGlkZT49dC5zbGlkZUNvdW50LXQub3B0aW9ucy5zbGlkZXNUb1Nob3cmJnQub3B0aW9ucy5jZW50ZXJNb2RlPT09ITE/KHQuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLHQuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6dC5jdXJyZW50U2xpZGU+PXQuc2xpZGVDb3VudC0xJiZ0Lm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYodC4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksdC4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LHQucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO251bGwhPT1lLiRkb3RzJiYoZS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLGUuJGRvdHMuZmluZChcImxpXCIpLmVxKE1hdGguZmxvb3IoZS5jdXJyZW50U2xpZGUvZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSl9LHQucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2UuaGlkZGVuXT9lLmludGVycnVwdGVkPSEwOmUuaW50ZXJydXB0ZWQ9ITEpfSxlLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGUsaSxuPXRoaXMsbz1hcmd1bWVudHNbMF0scz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkscj1uLmxlbmd0aDtmb3IoZT0wO2U8cjtlKyspaWYoXCJvYmplY3RcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBvP1widW5kZWZpbmVkXCI6X3R5cGVvZihvKSl8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBvP25bZV0uc2xpY2s9bmV3IHQobltlXSxvKTppPW5bZV0uc2xpY2tbb10uYXBwbHkobltlXS5zbGljayxzKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgaSlyZXR1cm4gaTtyZXR1cm4gbn19KSxqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKGUpe2UoXCIuc2xpY2tcIikuc2xpY2soe2RvdHM6ITAsYWRhcHRpdmVIZWlnaHQ6ITAsaW5maW5pdGU6ITAsc3BlZWQ6NTAwLGZhZGU6ITAsY3NzRWFzZTpcImxpbmVhclwifSkuZm91bmRhdGlvbigpfSk7Il19
